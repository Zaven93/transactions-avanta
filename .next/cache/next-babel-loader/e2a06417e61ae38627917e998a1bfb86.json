{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    subscription paymentRequest {\\n        onCreatePaymentRequest {\\n            bonusAmount\\n            createdAt\\n            customerId\\n            id\\n            orderId\\n            status\\n            updatedAt\\n        }\\n    }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    query listPaymentRequest {\\n        listPaymentRequests(filter: { status: { eq: PENDING } }) {\\n            items {\\n                bonusAmount\\n                createdAt\\n                customerId\\n                id\\n                orderId\\n                status\\n                updatedAt\\n            }\\n            nextToken\\n        }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation updatePaymentRequest($input: UpdatePaymentRequestInput!) {\\n        updatePaymentRequest(input: $input) {\\n            bonusAmount\\n            customerId\\n            id\\n            orderId\\n            status\\n            products {\\n                originalUnitPrice\\n                quantity\\n                variantId\\n            }\\n            createdAt\\n            updatedAt\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport gql from 'graphql-tag';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { Table, Icon, Popup, Header } from 'semantic-ui-react';\nimport { Badge } from '@shopify/polaris';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport ProductList from './ProductsList';\nimport config from '../aws-exports';\nAPI.configure(config);\nvar updatePaymentRequest = gql(_templateObject());\nvar listPaymentRequest = gql(_templateObject2());\nvar paymentSubscription = gql(_templateObject3());\n\nvar PendingPaymentRequest = function PendingPaymentRequest(_ref) {\n  _s();\n\n  var createPaymentSubscription = _ref.createPaymentSubscription;\n\n  var _useState = useState(''),\n      paymentRequestId = _useState[0],\n      setPaymentRequestId = _useState[1];\n\n  var _useState2 = useState(false),\n      active = _useState2[0],\n      setActive = _useState2[1];\n\n  var _useState3 = useState([]),\n      paymentRequestItems = _useState3[0],\n      setPaymentRequestItems = _useState3[1];\n\n  var handleChange = useCallback(function () {\n    return setActive(!active);\n  }, [active]);\n  console.log('Payment request id for decline', paymentRequestId);\n  var fetchAcceptedPayments = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return API.graphql(graphqlOperation(listPaymentRequest, {\n              limit: 3\n            }));\n\n          case 3:\n            res = _context.sent;\n            setPaymentRequestItems(res.data.listPaymentRequests.items);\n            console.log('Accepted payments', res.data);\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 8]]);\n  })), [createPaymentSubscription]);\n  useEffect(function () {\n    fetchAcceptedPayments();\n  }, [fetchAcceptedPayments]);\n\n  var declinePayment = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(paymentId) {\n      var paymentResponse;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return API.graphql(graphqlOperation(updatePaymentRequest, {\n                input: {\n                  id: paymentId,\n                  status: 'DECLINED'\n                }\n              }));\n\n            case 3:\n              paymentResponse = _context2.sent;\n              console.log('Declined Payment data from lambda', paymentResponse.data);\n              _context2.next = 10;\n              break;\n\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(_context2.t0);\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 7]]);\n    }));\n\n    return function declinePayment(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(React.Fragment, null, __jsx(Table, {\n    selectable: true,\n    celled: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Customer Id\"), __jsx(Table.HeaderCell, null, \"Bonus Amount\"), __jsx(Table.HeaderCell, null, \"Created At\"), __jsx(Table.HeaderCell, null, \"Updated At\"), __jsx(Table.HeaderCell, null, \"Status\"), __jsx(Table.HeaderCell, null, \"Action\"))), __jsx(Table.Body, null, paymentRequestItems && paymentRequestItems.map(function (item) {\n    return __jsx(Table.Row, {\n      key: item.id\n    }, __jsx(Table.Cell, null, __jsx(Badge, {\n      size: \"small\"\n    }, item.customerId)), __jsx(Table.Cell, null, toCurrency(item.bonusAmount)), __jsx(Table.Cell, null, formatDate(item.createdAt)), __jsx(Table.Cell, null, formatDate(item.updatedAt)), __jsx(Table.Cell, null, __jsx(Badge, {\n      size: \"small\",\n      progress: \"partiallyComplete\",\n      status: \"attention\"\n    }, item.status)), __jsx(Table.Cell, {\n      className: \"actions-cell\"\n    }, __jsx(Popup, {\n      content: \"Approve payment\",\n      trigger: __jsx(Icon, {\n        className: \"accept\",\n        name: \"check\",\n        onClick: function onClick() {\n          setPaymentRequestId(item.id);\n          handleChange();\n        }\n      })\n    }), __jsx(Popup, {\n      content: \"Decline payment\",\n      trigger: __jsx(Icon, {\n        className: \"decline\",\n        name: \"remove\",\n        onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  declinePayment(item.id);\n\n                case 1:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }))\n      })\n    })));\n  }))), __jsx(ProductList, {\n    paymentRequestId: paymentRequestId,\n    active: active,\n    handleChange: handleChange\n  }));\n};\n\n_s(PendingPaymentRequest, \"WWtLohHfmtlYoydB9uj8MxzdlWE=\");\n\n_c = PendingPaymentRequest;\nexport default PendingPaymentRequest;\n\nvar _c;\n\n$RefreshReg$(_c, \"PendingPaymentRequest\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/components/PendingPaymentRequest.js"],"names":["React","useState","useCallback","useEffect","gql","API","graphqlOperation","Table","Icon","Popup","Header","Badge","toCurrency","formatDate","ProductList","config","configure","updatePaymentRequest","listPaymentRequest","paymentSubscription","PendingPaymentRequest","createPaymentSubscription","paymentRequestId","setPaymentRequestId","active","setActive","paymentRequestItems","setPaymentRequestItems","handleChange","console","log","fetchAcceptedPayments","graphql","limit","res","data","listPaymentRequests","items","declinePayment","paymentId","input","id","status","paymentResponse","map","item","customerId","bonusAmount","createdAt","updatedAt"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport gql from 'graphql-tag'\r\nimport { API, graphqlOperation } from 'aws-amplify'\r\nimport { Table, Icon, Popup, Header } from 'semantic-ui-react'\r\nimport { Badge } from '@shopify/polaris'\r\nimport { toCurrency, formatDate } from '../utils/helper'\r\nimport ProductList from './ProductsList'\r\nimport config from '../aws-exports'\r\n\r\nAPI.configure(config)\r\n\r\nconst updatePaymentRequest = gql`\r\n    mutation updatePaymentRequest($input: UpdatePaymentRequestInput!) {\r\n        updatePaymentRequest(input: $input) {\r\n            bonusAmount\r\n            customerId\r\n            id\r\n            orderId\r\n            status\r\n            products {\r\n                originalUnitPrice\r\n                quantity\r\n                variantId\r\n            }\r\n            createdAt\r\n            updatedAt\r\n        }\r\n    }\r\n`\r\n\r\nconst listPaymentRequest = gql`\r\n    query listPaymentRequest {\r\n        listPaymentRequests(filter: { status: { eq: PENDING } }) {\r\n            items {\r\n                bonusAmount\r\n                createdAt\r\n                customerId\r\n                id\r\n                orderId\r\n                status\r\n                updatedAt\r\n            }\r\n            nextToken\r\n        }\r\n    }\r\n`\r\n\r\nconst paymentSubscription = gql`\r\n    subscription paymentRequest {\r\n        onCreatePaymentRequest {\r\n            bonusAmount\r\n            createdAt\r\n            customerId\r\n            id\r\n            orderId\r\n            status\r\n            updatedAt\r\n        }\r\n    }\r\n`\r\n\r\nconst PendingPaymentRequest = ({ createPaymentSubscription }) => {\r\n    const [paymentRequestId, setPaymentRequestId] = useState('')\r\n    const [active, setActive] = useState(false)\r\n    const [paymentRequestItems, setPaymentRequestItems] = useState([])\r\n\r\n    const handleChange = useCallback(() => setActive(!active), [active])\r\n\r\n    console.log('Payment request id for decline', paymentRequestId)\r\n\r\n    const fetchAcceptedPayments = useCallback(async () => {\r\n        try {\r\n            const res = await API.graphql(graphqlOperation(listPaymentRequest, { limit: 3 }))\r\n            setPaymentRequestItems(res.data.listPaymentRequests.items)\r\n            console.log('Accepted payments', res.data)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }, [createPaymentSubscription])\r\n\r\n    useEffect(() => {\r\n        fetchAcceptedPayments()\r\n    }, [fetchAcceptedPayments])\r\n\r\n    const declinePayment = async (paymentId) => {\r\n        try {\r\n            const paymentResponse = await API.graphql(\r\n                graphqlOperation(updatePaymentRequest, {\r\n                    input: {\r\n                        id: paymentId,\r\n                        status: 'DECLINED'\r\n                    }\r\n                })\r\n            )\r\n\r\n            console.log('Declined Payment data from lambda', paymentResponse.data)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <Table selectable celled>\r\n                <Table.Header>\r\n                    <Table.Row>\r\n                        <Table.HeaderCell>Customer Id</Table.HeaderCell>\r\n                        <Table.HeaderCell>Bonus Amount</Table.HeaderCell>\r\n                        <Table.HeaderCell>Created At</Table.HeaderCell>\r\n                        <Table.HeaderCell>Updated At</Table.HeaderCell>\r\n                        <Table.HeaderCell>Status</Table.HeaderCell>\r\n                        <Table.HeaderCell>Action</Table.HeaderCell>\r\n                    </Table.Row>\r\n                </Table.Header>\r\n                <Table.Body>\r\n                    {paymentRequestItems &&\r\n                        paymentRequestItems.map((item) => (\r\n                            <Table.Row key={item.id}>\r\n                                <Table.Cell>\r\n                                    <Badge size=\"small\">{item.customerId}</Badge>\r\n                                </Table.Cell>\r\n                                <Table.Cell>{toCurrency(item.bonusAmount)}</Table.Cell>\r\n                                <Table.Cell>{formatDate(item.createdAt)}</Table.Cell>\r\n                                <Table.Cell>{formatDate(item.updatedAt)}</Table.Cell>\r\n                                <Table.Cell>\r\n                                    <Badge\r\n                                        size=\"small\"\r\n                                        progress=\"partiallyComplete\"\r\n                                        status=\"attention\">\r\n                                        {item.status}\r\n                                    </Badge>\r\n                                </Table.Cell>\r\n                                <Table.Cell className=\"actions-cell\">\r\n                                    <Popup\r\n                                        content=\"Approve payment\"\r\n                                        trigger={\r\n                                            <Icon\r\n                                                className=\"accept\"\r\n                                                name=\"check\"\r\n                                                onClick={() => {\r\n                                                    setPaymentRequestId(item.id)\r\n                                                    handleChange()\r\n                                                }}\r\n                                            />\r\n                                        }\r\n                                    />\r\n                                    <Popup\r\n                                        content=\"Decline payment\"\r\n                                        trigger={\r\n                                            <Icon\r\n                                                className=\"decline\"\r\n                                                name=\"remove\"\r\n                                                onClick={async () => {\r\n                                                    declinePayment(item.id)\r\n                                                }}\r\n                                            />\r\n                                        }\r\n                                    />\r\n                                </Table.Cell>\r\n                            </Table.Row>\r\n                        ))}\r\n                </Table.Body>\r\n            </Table>\r\n            <ProductList\r\n                paymentRequestId={paymentRequestId}\r\n                active={active}\r\n                handleChange={handleChange}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PendingPaymentRequest\r\n"]},"metadata":{},"sourceType":"module"}