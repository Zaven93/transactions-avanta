{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query getBranch($id: ID!) {\\n        getBranch(id: $id) {\\n            transactions(sortDirection: DESC) {\\n                items {\\n                    branchId\\n                    createdAt\\n                    currency\\n                    note\\n                    customer {\\n                        email\\n                        id\\n                        firstName\\n                        lastName\\n                        phone\\n                    }\\n                    totalBonusAmount\\n                    totalPrice\\n                    updatedAt\\n                    sortDate\\n                }\\n            }\\n            branchName\\n            adminId\\n            id\\n            branchProducts {\\n                items {\\n                    branchId\\n                    createdAt\\n                    id\\n                    productId\\n                    tags\\n                    updatedAt\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport gql from 'graphql-tag';\nimport { Page, Button, Icon, Card, DataTable, TextField } from '@shopify/polaris';\nimport { SearchMajorMonotone } from '@shopify/polaris-icons';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nAPI.configure(config);\nvar getBranchById = gql(_templateObject());\n\nvar AdminBranchInfo = function AdminBranchInfo(_ref) {\n  _s();\n\n  var branchId = _ref.branchId,\n      setBranchId = _ref.setBranchId;\n\n  var _useState = useState(''),\n      branchInfo = _useState[0],\n      setBranchInfo = _useState[1];\n\n  var _useState2 = useState(null),\n      searchValue = _useState2[0],\n      setSearchValue = _useState2[1];\n\n  var handleSearchInput = useCallback(function (newValue) {\n    return setSearchValue(newValue);\n  }, []);\n\n  var getBranch = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var branch;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return API.graphql(graphqlOperation(getBranchById, {\n                id: branchId\n              }));\n\n            case 3:\n              branch = _context.sent;\n              setBranchInfo(branch.data.getBranch);\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 7]]);\n    }));\n\n    return function getBranch() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    getBranch();\n  }, []);\n  console.log('Branch info from admin', branchId);\n  return __jsx(React.Fragment, null, branchInfo && __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: function onClick() {\n      return setBranchId(null);\n    },\n    primary: true\n  }, \"Go back\"), __jsx(TextField, {\n    label: \"Search Product\",\n    value: searchValue,\n    onChange: handleSearchInput,\n    prefix: __jsx(Icon, {\n      source: SearchMajorMonotone\n    }),\n    placeholder: \"Search by Customer phone number\"\n  }), __jsx(Card, null, __jsx(DataTable, {\n    columnContentTypes: ['text', 'text', 'text', 'text'],\n    headings: ['Customer phone number', 'TotalPrice', 'TotalBonusAmount', 'Minus from Bonus Amount', 'CreatedAt'],\n    rows: branchInfo && branchInfo.transactions.items.filter(function (transaction) {\n      if (searchValue == null) {\n        return transaction;\n      } else if (transaction.customer[0].phone.toLowerCase().includes(searchValue.toLowerCase())) {\n        return transaction;\n      }\n    }).sort(function (a, b) {\n      return new Date(b.createdAt) - new Date(a.createdAt);\n    }).map(function (transaction) {\n      return [__jsx(Button, {\n        primary: true,\n        onClick: function onClick() {\n          return redirect.dispatch(Redirect.Action.ADMIN_PATH, {\n            path: \"/customers/\".concat(transaction.customer[0].id),\n            newContext: true\n          });\n        }\n      }, transaction.customer[0].phone), toCurrency(Number(transaction.totalPrice)), toCurrency(Number(transaction.totalBonusAmount)), transaction.note === null ? '' : toCurrency(extractNumbersFromString(transaction.note)), formatDate(transaction.createdAt)];\n    })\n  }))));\n};\n\n_s(AdminBranchInfo, \"HaD5FowQoYHGURrcw6HD6WgYYvA=\");\n\n_c = AdminBranchInfo;\nexport default AdminBranchInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdminBranchInfo\");","map":{"version":3,"sources":["/var/www/transactions-avanta/components/AdminBranchInfo.js"],"names":["React","useState","useEffect","useCallback","API","graphqlOperation","gql","Page","Button","Icon","Card","DataTable","TextField","SearchMajorMonotone","toCurrency","formatDate","config","configure","getBranchById","AdminBranchInfo","branchId","setBranchId","branchInfo","setBranchInfo","searchValue","setSearchValue","handleSearchInput","newValue","getBranch","graphql","id","branch","data","console","log","transactions","items","filter","transaction","customer","phone","toLowerCase","includes","sort","a","b","Date","createdAt","map","redirect","dispatch","Redirect","Action","ADMIN_PATH","path","newContext","Number","totalPrice","totalBonusAmount","note","extractNumbersFromString"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,QAAwD,OAAxD;AACA,SAASC,GAAT,EAAcC,gBAAd,QAAsC,aAAtC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,IAAvB,EAA6BC,IAA7B,EAAmCC,SAAnC,EAA8CC,SAA9C,QAA+D,kBAA/D;AACA,SAASC,mBAAT,QAAoC,wBAApC;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,iBAAvC;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AAEAZ,GAAG,CAACa,SAAJ,CAAcD,MAAd;AAEA,IAAME,aAAa,GAAGZ,GAAH,mBAAnB;;AAuCA,IAAMa,eAAe,GAAG,SAAlBA,eAAkB,OAA+B;AAAA;;AAAA,MAA5BC,QAA4B,QAA5BA,QAA4B;AAAA,MAAlBC,WAAkB,QAAlBA,WAAkB;;AAAA,kBACfpB,QAAQ,CAAC,EAAD,CADO;AAAA,MAC5CqB,UAD4C;AAAA,MAChCC,aADgC;;AAAA,mBAEbtB,QAAQ,CAAC,IAAD,CAFK;AAAA,MAE5CuB,WAF4C;AAAA,MAE/BC,cAF+B;;AAInD,MAAMC,iBAAiB,GAAGvB,WAAW,CAAC,UAACwB,QAAD;AAAA,WAAcF,cAAc,CAACE,QAAD,CAA5B;AAAA,GAAD,EAAyC,EAAzC,CAArC;;AAEA,MAAMC,SAAS;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEWxB,GAAG,CAACyB,OAAJ,CAAYxB,gBAAgB,CAACa,aAAD,EAAgB;AAAEY,gBAAAA,EAAE,EAAEV;AAAN,eAAhB,CAA5B,CAFX;;AAAA;AAEJW,cAAAA,MAFI;AAGVR,cAAAA,aAAa,CAACQ,MAAM,CAACC,IAAP,CAAYJ,SAAb,CAAb;AAHU;AAAA;;AAAA;AAAA;AAAA;AAKVK,cAAAA,OAAO,CAACC,GAAR;;AALU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAATN,SAAS;AAAA;AAAA;AAAA,KAAf;;AASA1B,EAAAA,SAAS,CAAC,YAAM;AACZ0B,IAAAA,SAAS;AACZ,GAFQ,EAEN,EAFM,CAAT;AAIAK,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCd,QAAtC;AACA,SACI,4BACKE,UAAU,IACP,4BACI,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAMD,WAAW,CAAC,IAAD,CAAjB;AAAA,KAAjB;AAA0C,IAAA,OAAO;AAAjD,eADJ,EAII,MAAC,SAAD;AACI,IAAA,KAAK,EAAC,gBADV;AAEI,IAAA,KAAK,EAAEG,WAFX;AAGI,IAAA,QAAQ,EAAEE,iBAHd;AAII,IAAA,MAAM,EAAE,MAAC,IAAD;AAAM,MAAA,MAAM,EAAEb;AAAd,MAJZ;AAKI,IAAA,WAAW,EAAC;AALhB,IAJJ,EAWI,MAAC,IAAD,QACI,MAAC,SAAD;AACI,IAAA,kBAAkB,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,EAAyB,MAAzB,CADxB;AAEI,IAAA,QAAQ,EAAE,CACN,uBADM,EAEN,YAFM,EAGN,kBAHM,EAIN,yBAJM,EAKN,WALM,CAFd;AASI,IAAA,IAAI,EACAS,UAAU,IACVA,UAAU,CAACa,YAAX,CAAwBC,KAAxB,CACKC,MADL,CACY,UAACC,WAAD,EAAiB;AACrB,UAAId,WAAW,IAAI,IAAnB,EAAyB;AACrB,eAAOc,WAAP;AACH,OAFD,MAEO,IACHA,WAAW,CAACC,QAAZ,CAAqB,CAArB,EAAwBC,KAAxB,CACKC,WADL,GAEKC,QAFL,CAEclB,WAAW,CAACiB,WAAZ,EAFd,CADG,EAIL;AACE,eAAOH,WAAP;AACH;AACJ,KAXL,EAYKK,IAZL,CAYU,UAACC,CAAD,EAAIC,CAAJ;AAAA,aAAU,IAAIC,IAAJ,CAASD,CAAC,CAACE,SAAX,IAAwB,IAAID,IAAJ,CAASF,CAAC,CAACG,SAAX,CAAlC;AAAA,KAZV,EAaKC,GAbL,CAaS,UAACV,WAAD;AAAA,aAAiB,CAClB,MAAC,MAAD;AACI,QAAA,OAAO,MADX;AAEI,QAAA,OAAO,EAAE;AAAA,iBACLW,QAAQ,CAACC,QAAT,CAAkBC,QAAQ,CAACC,MAAT,CAAgBC,UAAlC,EAA8C;AAC1CC,YAAAA,IAAI,uBAAgBhB,WAAW,CAACC,QAAZ,CAAqB,CAArB,EAAwBT,EAAxC,CADsC;AAE1CyB,YAAAA,UAAU,EAAE;AAF8B,WAA9C,CADK;AAAA;AAFb,SAQKjB,WAAW,CAACC,QAAZ,CAAqB,CAArB,EAAwBC,KAR7B,CADkB,EAWlB1B,UAAU,CAAC0C,MAAM,CAAClB,WAAW,CAACmB,UAAb,CAAP,CAXQ,EAYlB3C,UAAU,CAAC0C,MAAM,CAAClB,WAAW,CAACoB,gBAAb,CAAP,CAZQ,EAalBpB,WAAW,CAACqB,IAAZ,KAAqB,IAArB,GACM,EADN,GAEM7C,UAAU,CACN8C,wBAAwB,CAACtB,WAAW,CAACqB,IAAb,CADlB,CAfE,EAkBlB5C,UAAU,CAACuB,WAAW,CAACS,SAAb,CAlBQ,CAAjB;AAAA,KAbT;AAXR,IADJ,CAXJ,CAFR,CADJ;AAwEH,CA5FD;;GAAM5B,e;;KAAAA,e;AA8FN,eAAeA,eAAf","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\nimport { API, graphqlOperation } from 'aws-amplify'\nimport gql from 'graphql-tag'\nimport { Page, Button, Icon, Card, DataTable, TextField } from '@shopify/polaris'\nimport { SearchMajorMonotone } from '@shopify/polaris-icons'\nimport { toCurrency, formatDate } from '../utils/helper'\nimport config from '../aws-exports'\n\nAPI.configure(config)\n\nconst getBranchById = gql`\n    query getBranch($id: ID!) {\n        getBranch(id: $id) {\n            transactions(sortDirection: DESC) {\n                items {\n                    branchId\n                    createdAt\n                    currency\n                    note\n                    customer {\n                        email\n                        id\n                        firstName\n                        lastName\n                        phone\n                    }\n                    totalBonusAmount\n                    totalPrice\n                    updatedAt\n                    sortDate\n                }\n            }\n            branchName\n            adminId\n            id\n            branchProducts {\n                items {\n                    branchId\n                    createdAt\n                    id\n                    productId\n                    tags\n                    updatedAt\n                }\n            }\n        }\n    }\n`\n\nconst AdminBranchInfo = ({ branchId, setBranchId }) => {\n    const [branchInfo, setBranchInfo] = useState('')\n    const [searchValue, setSearchValue] = useState(null)\n\n    const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\n\n    const getBranch = async () => {\n        try {\n            const branch = await API.graphql(graphqlOperation(getBranchById, { id: branchId }))\n            setBranchInfo(branch.data.getBranch)\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    useEffect(() => {\n        getBranch()\n    }, [])\n\n    console.log('Branch info from admin', branchId)\n    return (\n        <>\n            {branchInfo && (\n                <>\n                    <Button onClick={() => setBranchId(null)} primary>\n                        Go back\n                    </Button>\n                    <TextField\n                        label=\"Search Product\"\n                        value={searchValue}\n                        onChange={handleSearchInput}\n                        prefix={<Icon source={SearchMajorMonotone} />}\n                        placeholder=\"Search by Customer phone number\"\n                    />\n                    <Card>\n                        <DataTable\n                            columnContentTypes={['text', 'text', 'text', 'text']}\n                            headings={[\n                                'Customer phone number',\n                                'TotalPrice',\n                                'TotalBonusAmount',\n                                'Minus from Bonus Amount',\n                                'CreatedAt'\n                            ]}\n                            rows={\n                                branchInfo &&\n                                branchInfo.transactions.items\n                                    .filter((transaction) => {\n                                        if (searchValue == null) {\n                                            return transaction\n                                        } else if (\n                                            transaction.customer[0].phone\n                                                .toLowerCase()\n                                                .includes(searchValue.toLowerCase())\n                                        ) {\n                                            return transaction\n                                        }\n                                    })\n                                    .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))\n                                    .map((transaction) => [\n                                        <Button\n                                            primary\n                                            onClick={() =>\n                                                redirect.dispatch(Redirect.Action.ADMIN_PATH, {\n                                                    path: `/customers/${transaction.customer[0].id}`,\n                                                    newContext: true\n                                                })\n                                            }>\n                                            {transaction.customer[0].phone}\n                                        </Button>,\n                                        toCurrency(Number(transaction.totalPrice)),\n                                        toCurrency(Number(transaction.totalBonusAmount)),\n                                        transaction.note === null\n                                            ? ''\n                                            : toCurrency(\n                                                  extractNumbersFromString(transaction.note)\n                                              ),\n                                        formatDate(transaction.createdAt)\n                                    ])\n                            }\n                        />\n                        {/* <Pagination\n                    hasPrevious={previousPaginateTokens.length > 0}\n                    onPrevious={paginatePrevious}\n                    hasNext={nextPaginateToken}\n                    onNext={paginateNext}\n                /> */}\n                    </Card>\n                </>\n            )}\n        </>\n    )\n}\n\nexport default AdminBranchInfo\n"]},"metadata":{},"sourceType":"module"}