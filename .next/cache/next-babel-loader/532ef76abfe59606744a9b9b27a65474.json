{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query branchByAdminId($adminId: ID!) {\\n        branchByAdminId(adminId: $adminId) {\\n            items {\\n                adminId\\n                branchName\\n                id\\n                branchProducts {\\n                    items {\\n                        branchId\\n                        createdAt\\n                        id\\n                        productId\\n                        tags\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport axios from 'axios';\nimport { Auth, API, graphqlOperation } from 'aws-amplify';\nimport createApp from '@shopify/app-bridge';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport gql from 'graphql-tag';\nimport { print } from 'graphql';\nimport { Card, DataTable, Button, Page, Pagination, TextField, ChoiceList, Filters, Icon, Stack } from '@shopify/polaris';\nimport { SearchMajorMonotone, TransactionMajorMonotone, BalanceMajorMonotone, LogOutMinor } from '@shopify/polaris-icons';\nimport { toCurrency, formatDate, extractNumbersFromString } from '../utils/helper';\nimport config from '../aws-exports';\nimport Login from '../components/Login';\nimport BranchConsole from '../components/BranchConsole';\nAPI.configure(config);\nvar branchByAdminId = gql(_templateObject());\n\nvar BranchData = function BranchData(_ref) {\n  _s();\n\n  var user = _ref.user;\n\n  var _useState = useState(null),\n      searchValue = _useState[0],\n      setSearchValue = _useState[1];\n\n  var _useState2 = useState(transactions.listTransactions.items),\n      transactionItems = _useState2[0],\n      setTransactionItems = _useState2[1];\n\n  var _useState3 = useState(transactions.listTransactions.nextToken),\n      nextPaginateToken = _useState3[0],\n      setNextPaginateToken = _useState3[1];\n\n  var _useState4 = useState([]),\n      previousPaginateTokens = _useState4[0],\n      setPreviousPaginateTokens = _useState4[1];\n\n  var handleSearchInput = useCallback(function (newValue) {\n    return setSearchValue(newValue);\n  }, []);\n  var app = createApp({\n    apiKey: '3b01063bac3031d13101100ef3e44fd5',\n    shopOrigin: 'transactions-avanta.myshopify.com'\n  });\n  var redirect = Redirect.create(app);\n\n  var paginateNext = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setPreviousPaginateTokens([].concat(_toConsumableArray(previousPaginateTokens), [nextPaginateToken]));\n              _context.prev = 1;\n              _context.next = 4;\n              return API.graphql(graphqlOperation(listTransactions, {\n                limit: 5,\n                nextToken: nextPaginateToken\n              }));\n\n            case 4:\n              data = _context.sent;\n              console.log('Data from pagination', data);\n              setTransactionItems(data.data.listTransactions.items);\n              setNextPaginateToken(data.data.listTransactions.nextToken);\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](1);\n              console.log(_context.t0);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 10]]);\n    }));\n\n    return function paginateNext() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var paginatePrevious = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var previousToken, data, _data;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              previousToken = previousPaginateTokens[previousPaginateTokens.length === 1 ? 0 : previousPaginateTokens.length - 2];\n              setPreviousPaginateTokens(_toConsumableArray(previousPaginateTokens.slice(0, previousPaginateTokens.length - 1)));\n              _context2.prev = 2;\n\n              if (!(previousPaginateTokens.length === 1)) {\n                _context2.next = 11;\n                break;\n              }\n\n              _context2.next = 6;\n              return API.graphql(graphqlOperation(listTransactions, {\n                limit: 5\n              }));\n\n            case 6:\n              data = _context2.sent;\n              setTransactionItems(data.data.listTransactions.items);\n              setNextPaginateToken(data.data.listTransactions.nextToken);\n              _context2.next = 16;\n              break;\n\n            case 11:\n              _context2.next = 13;\n              return API.graphql(graphqlOperation(listTransactions, {\n                limit: 5,\n                nextToken: previousToken\n              }));\n\n            case 13:\n              _data = _context2.sent;\n              setTransactionItems(_data.data.listTransactions.items);\n              setNextPaginateToken(_data.data.listTransactions.nextToken);\n\n            case 16:\n              _context2.next = 21;\n              break;\n\n            case 18:\n              _context2.prev = 18;\n              _context2.t0 = _context2[\"catch\"](2);\n              console.log(_context2.t0);\n\n            case 21:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[2, 18]]);\n    }));\n\n    return function paginatePrevious() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  console.log('Branch data user', user);\n  return __jsx(\"div\", null, \"Branch Data\")\n  /* <>\r\n              <TextField\r\n                  label=\"Search Product\"\r\n                  value={searchValue}\r\n                  onChange={handleSearchInput}\r\n                  prefix={<Icon source={SearchMajorMonotone} />}\r\n                  placeholder=\"Search by Customer phone number\"\r\n              />\r\n              <Stack>\r\n                  <Stack.Item fill>\r\n                      <Button\r\n                          id=\"Accept-Payment\"\r\n                          onClick={() =>\r\n                              redirect.dispatch(\r\n                                  Redirect.Action.ADMIN_PATH,\r\n                                  '/apps/3b01063bac3031d13101100ef3e44fd5/accept-payment'\r\n                              )\r\n                          }>\r\n                          <Icon source={BalanceMajorMonotone} /> Accept Payment\r\n                      </Button>\r\n                  </Stack.Item>\r\n                  <Stack.Item>\r\n                      <Button\r\n                          id=\"Create-Transaction\"\r\n                          primary\r\n                          onClick={() =>\r\n                              redirect.dispatch(Redirect.Action.REMOTE, {\r\n                                  // url: `https://dev.d3ivgpkzuz6hkr.amplifyapp.com?adminId=${user.attributes.sub}`,\r\n                                  url: `http://localhost:3001/transactions/${user.attributes.sub}`,\r\n                                  newContext: true\r\n                              })\r\n                          }>\r\n                          <Icon source={TransactionMajorMonotone} /> Create transaction\r\n                      </Button>\r\n                  </Stack.Item>\r\n                  <Stack.Item>\r\n                      <Button\r\n                          primary\r\n                          id=\"Logout\"\r\n                          onClick={() => {\r\n                              Auth.signOut()\r\n                              updateUser(null)\r\n                          }}>\r\n                          <Icon source={LogOutMinor} /> Logout\r\n                      </Button>\r\n                  </Stack.Item>\r\n              </Stack>\r\n              {transactionItems && (\r\n                  <Card>\r\n                      <DataTable\r\n                          columnContentTypes={['text', 'text', 'text', 'text']}\r\n                          headings={[\r\n                              'Customer phone number',\r\n                              'TotalPrice',\r\n                              'TotalBonusAmount',\r\n                              'Minus from Bonus Amount',\r\n                              'CreatedAt'\r\n                          ]}\r\n                          rows={\r\n                              transactionItems &&\r\n                              transactionItems\r\n                                  .filter((transaction) => {\r\n                                      if (searchValue == null) {\r\n                                          return transaction\r\n                                      } else if (\r\n                                          transaction.customer[0].phone\r\n                                              .toLowerCase()\r\n                                              .includes(searchValue.toLowerCase())\r\n                                      ) {\r\n                                          return transaction\r\n                                      }\r\n                                  })\r\n                                  .sort(\r\n                                      (a, b) => new Date(b.createdAt) - new Date(a.createdAt)\r\n                                  )\r\n                                  .map((transaction) => [\r\n                                      <Button\r\n                                          primary\r\n                                          onClick={() =>\r\n                                              redirect.dispatch(Redirect.Action.ADMIN_PATH, {\r\n                                                  path: `/customers/${transaction.customer[0].id}`,\r\n                                                  newContext: true\r\n                                              })\r\n                                          }>\r\n                                          {transaction.customer[0].phone}\r\n                                      </Button>,\r\n                                      toCurrency(Number(transaction.totalPrice)),\r\n                                      toCurrency(Number(transaction.totalBonusAmount)),\r\n                                      transaction.note === null\r\n                                          ? ''\r\n                                          : toCurrency(\r\n                                                extractNumbersFromString(transaction.note)\r\n                                            ),\r\n                                      formatDate(transaction.createdAt)\r\n                                  ])\r\n                          }\r\n                      />\r\n                      <Pagination\r\n                          hasPrevious={previousPaginateTokens.length > 0}\r\n                          onPrevious={paginatePrevious}\r\n                          hasNext={nextPaginateToken}\r\n                          onNext={paginateNext}\r\n                      />\r\n                  </Card>\r\n              )}\r\n          </> */\n  ;\n};\n\n_s(BranchData, \"pieTufigaC0CQ0s2FGOK1D2OjnA=\");\n\n_c = BranchData;\nexport default BranchData;\n\nvar _c;\n\n$RefreshReg$(_c, \"BranchData\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/components/BranchData.js"],"names":["React","useState","useCallback","useEffect","axios","Auth","API","graphqlOperation","createApp","Redirect","gql","print","Card","DataTable","Button","Page","Pagination","TextField","ChoiceList","Filters","Icon","Stack","SearchMajorMonotone","TransactionMajorMonotone","BalanceMajorMonotone","LogOutMinor","toCurrency","formatDate","extractNumbersFromString","config","Login","BranchConsole","configure","branchByAdminId","BranchData","user","searchValue","setSearchValue","transactions","listTransactions","items","transactionItems","setTransactionItems","nextToken","nextPaginateToken","setNextPaginateToken","previousPaginateTokens","setPreviousPaginateTokens","handleSearchInput","newValue","app","apiKey","shopOrigin","redirect","create","paginateNext","graphql","limit","data","console","log","paginatePrevious","previousToken","length","slice"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { Auth, API, graphqlOperation } from 'aws-amplify'\r\nimport createApp from '@shopify/app-bridge'\r\nimport { Redirect } from '@shopify/app-bridge/actions'\r\nimport gql from 'graphql-tag'\r\nimport { print } from 'graphql'\r\nimport {\r\n    Card,\r\n    DataTable,\r\n    Button,\r\n    Page,\r\n    Pagination,\r\n    TextField,\r\n    ChoiceList,\r\n    Filters,\r\n    Icon,\r\n    Stack\r\n} from '@shopify/polaris'\r\nimport {\r\n    SearchMajorMonotone,\r\n    TransactionMajorMonotone,\r\n    BalanceMajorMonotone,\r\n    LogOutMinor\r\n} from '@shopify/polaris-icons'\r\nimport { toCurrency, formatDate, extractNumbersFromString } from '../utils/helper'\r\nimport config from '../aws-exports'\r\nimport Login from '../components/Login'\r\nimport BranchConsole from '../components/BranchConsole'\r\n\r\nAPI.configure(config)\r\n\r\nconst branchByAdminId = gql`\r\n    query branchByAdminId($adminId: ID!) {\r\n        branchByAdminId(adminId: $adminId) {\r\n            items {\r\n                adminId\r\n                branchName\r\n                id\r\n                branchProducts {\r\n                    items {\r\n                        branchId\r\n                        createdAt\r\n                        id\r\n                        productId\r\n                        tags\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst BranchData = ({ user }) => {\r\n    const [searchValue, setSearchValue] = useState(null)\r\n    const [transactionItems, setTransactionItems] = useState(transactions.listTransactions.items)\r\n    const [nextPaginateToken, setNextPaginateToken] = useState(\r\n        transactions.listTransactions.nextToken\r\n    )\r\n    const [previousPaginateTokens, setPreviousPaginateTokens] = useState([])\r\n    const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\r\n\r\n    const app = createApp({\r\n        apiKey: '3b01063bac3031d13101100ef3e44fd5',\r\n        shopOrigin: 'transactions-avanta.myshopify.com'\r\n    })\r\n\r\n    const redirect = Redirect.create(app)\r\n\r\n    const paginateNext = async () => {\r\n        setPreviousPaginateTokens([...previousPaginateTokens, nextPaginateToken])\r\n        try {\r\n            const data = await API.graphql(\r\n                graphqlOperation(listTransactions, { limit: 5, nextToken: nextPaginateToken })\r\n            )\r\n\r\n            console.log('Data from pagination', data)\r\n            setTransactionItems(data.data.listTransactions.items)\r\n            setNextPaginateToken(data.data.listTransactions.nextToken)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    const paginatePrevious = async () => {\r\n        const previousToken =\r\n            previousPaginateTokens[\r\n                previousPaginateTokens.length === 1 ? 0 : previousPaginateTokens.length - 2\r\n            ]\r\n        setPreviousPaginateTokens([\r\n            ...previousPaginateTokens.slice(0, previousPaginateTokens.length - 1)\r\n        ])\r\n        try {\r\n            if (previousPaginateTokens.length === 1) {\r\n                const data = await API.graphql(graphqlOperation(listTransactions, { limit: 5 }))\r\n                setTransactionItems(data.data.listTransactions.items)\r\n                setNextPaginateToken(data.data.listTransactions.nextToken)\r\n            } else {\r\n                const data = await API.graphql(\r\n                    graphqlOperation(listTransactions, { limit: 5, nextToken: previousToken })\r\n                )\r\n                setTransactionItems(data.data.listTransactions.items)\r\n                setNextPaginateToken(data.data.listTransactions.nextToken)\r\n            }\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    console.log('Branch data user', user)\r\n\r\n    return (\r\n        <div>Branch Data</div>\r\n        /* <>\r\n                    <TextField\r\n                        label=\"Search Product\"\r\n                        value={searchValue}\r\n                        onChange={handleSearchInput}\r\n                        prefix={<Icon source={SearchMajorMonotone} />}\r\n                        placeholder=\"Search by Customer phone number\"\r\n                    />\r\n                    <Stack>\r\n                        <Stack.Item fill>\r\n                            <Button\r\n                                id=\"Accept-Payment\"\r\n                                onClick={() =>\r\n                                    redirect.dispatch(\r\n                                        Redirect.Action.ADMIN_PATH,\r\n                                        '/apps/3b01063bac3031d13101100ef3e44fd5/accept-payment'\r\n                                    )\r\n                                }>\r\n                                <Icon source={BalanceMajorMonotone} /> Accept Payment\r\n                            </Button>\r\n                        </Stack.Item>\r\n                        <Stack.Item>\r\n                            <Button\r\n                                id=\"Create-Transaction\"\r\n                                primary\r\n                                onClick={() =>\r\n                                    redirect.dispatch(Redirect.Action.REMOTE, {\r\n                                        // url: `https://dev.d3ivgpkzuz6hkr.amplifyapp.com?adminId=${user.attributes.sub}`,\r\n                                        url: `http://localhost:3001/transactions/${user.attributes.sub}`,\r\n                                        newContext: true\r\n                                    })\r\n                                }>\r\n                                <Icon source={TransactionMajorMonotone} /> Create transaction\r\n                            </Button>\r\n                        </Stack.Item>\r\n                        <Stack.Item>\r\n                            <Button\r\n                                primary\r\n                                id=\"Logout\"\r\n                                onClick={() => {\r\n                                    Auth.signOut()\r\n                                    updateUser(null)\r\n                                }}>\r\n                                <Icon source={LogOutMinor} /> Logout\r\n                            </Button>\r\n                        </Stack.Item>\r\n                    </Stack>\r\n                    {transactionItems && (\r\n                        <Card>\r\n                            <DataTable\r\n                                columnContentTypes={['text', 'text', 'text', 'text']}\r\n                                headings={[\r\n                                    'Customer phone number',\r\n                                    'TotalPrice',\r\n                                    'TotalBonusAmount',\r\n                                    'Minus from Bonus Amount',\r\n                                    'CreatedAt'\r\n                                ]}\r\n                                rows={\r\n                                    transactionItems &&\r\n                                    transactionItems\r\n                                        .filter((transaction) => {\r\n                                            if (searchValue == null) {\r\n                                                return transaction\r\n                                            } else if (\r\n                                                transaction.customer[0].phone\r\n                                                    .toLowerCase()\r\n                                                    .includes(searchValue.toLowerCase())\r\n                                            ) {\r\n                                                return transaction\r\n                                            }\r\n                                        })\r\n                                        .sort(\r\n                                            (a, b) => new Date(b.createdAt) - new Date(a.createdAt)\r\n                                        )\r\n                                        .map((transaction) => [\r\n                                            <Button\r\n                                                primary\r\n                                                onClick={() =>\r\n                                                    redirect.dispatch(Redirect.Action.ADMIN_PATH, {\r\n                                                        path: `/customers/${transaction.customer[0].id}`,\r\n                                                        newContext: true\r\n                                                    })\r\n                                                }>\r\n                                                {transaction.customer[0].phone}\r\n                                            </Button>,\r\n                                            toCurrency(Number(transaction.totalPrice)),\r\n                                            toCurrency(Number(transaction.totalBonusAmount)),\r\n                                            transaction.note === null\r\n                                                ? ''\r\n                                                : toCurrency(\r\n                                                      extractNumbersFromString(transaction.note)\r\n                                                  ),\r\n                                            formatDate(transaction.createdAt)\r\n                                        ])\r\n                                }\r\n                            />\r\n                            <Pagination\r\n                                hasPrevious={previousPaginateTokens.length > 0}\r\n                                onPrevious={paginatePrevious}\r\n                                hasNext={nextPaginateToken}\r\n                                onNext={paginateNext}\r\n                            />\r\n                        </Card>\r\n                    )}\r\n                </> */\r\n    )\r\n}\r\n\r\nexport default BranchData\r\n"]},"metadata":{},"sourceType":"module"}