{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useCallback } from 'react';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { Modal, Thumbnail, Checkbox, TextStyle } from '@shopify/polaris';\nimport { Table, Header } from 'semantic-ui-react';\nimport { toCurrency } from '../utils/helper';\nimport config from '../aws-exports';\nimport { listProducts } from \"../graphql/queries\";\nimport { updatePaymentRequest } from \"../graphql/mutation\";\nAPI.configure(config);\n\nconst ProductsList = ({\n  active,\n  handleChange,\n  paymentRequestId\n}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(listProducts);\n  const {\n    0: rowId,\n    1: setRowId\n  } = useState([]);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    products: []\n  });\n\n  if (loading) {\n    return __jsx(\"div\", null, \"Loading products...\");\n  }\n\n  if (error) {\n    return __jsx(\"div\", null, \"Some error occured\");\n  }\n\n  const acceptPayment = async () => {\n    try {\n      const paymentResponse = await API.graphql(graphqlOperation(updatePaymentRequest, {\n        input: {\n          id: paymentRequestId,\n          status: 'APPROVED',\n          products: state.products.map(product => ({\n            originalUnitPrice: product.node.variants.edges[0].node.price,\n            quantity: 1,\n            variantId: product.node.variants.edges[0].node.id\n          }))\n        }\n      }));\n      console.log('Payment data from lambda', paymentResponse.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return __jsx(Modal, {\n    open: active,\n    onClose: handleChange,\n    title: \"Choose products\",\n    primaryAction: {\n      content: 'Proceed',\n      onAction: () => {\n        acceptPayment();\n        handleChange();\n      }\n    }\n  }, __jsx(Modal.Section, null, __jsx(Table, {\n    celled: true,\n    striped: true,\n    selectable: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Products\"), __jsx(Table.HeaderCell, null, \"Description\"), __jsx(Table.HeaderCell, {\n    textAlign: \"center\"\n  }, \"Price\"))), __jsx(Table.Body, null, data && data.products.edges.map(product => __jsx(Table.Row, {\n    key: product.node.id,\n    onClick: () => {\n      if (rowId.includes(product.node.id)) {\n        setRowId(rowId.filter(id => id !== product.node.id));\n        setState({\n          products: state.products.filter(filteredProduct => filteredProduct.node.id !== product.node.id)\n        });\n      } else {\n        setRowId([...rowId, product.node.id]);\n        setState(_objectSpread(_objectSpread({}, state), {}, {\n          products: [...state.products, product]\n        }));\n      }\n    }\n  }, __jsx(Table.Cell, null, __jsx(Header, {\n    as: \"h4\",\n    image: true,\n    className: \"product-header\"\n  }, __jsx(Checkbox, {\n    checked: rowId.includes(product.node.id) && true\n  }), __jsx(Thumbnail, {\n    source: product.node.images.edges[0] && product.node.images.edges[0].node.originalSrc,\n    size: \"small\",\n    alt: \"\"\n  }), __jsx(Header.Content, null, product.node.title))), __jsx(Table.Cell, null, __jsx(TextStyle, {\n    variation: \"subdued\"\n  }, product.node.description)), __jsx(Table.Cell, {\n    textAlign: \"center\"\n  }, __jsx(TextStyle, {\n    variation: \"subdued\"\n  }, product.node.variants.edges[0] && toCurrency(product.node.variants.edges[0].node.price)))))), __jsx(Table.Footer, {\n    fullWidth: true\n  }, __jsx(Table.Row, null)))));\n};\n\nexport default ProductsList;","map":{"version":3,"sources":["/var/www/transactions-avanta/components/ProductsList.js"],"names":["React","useState","useCallback","API","graphqlOperation","gql","useQuery","Modal","Thumbnail","Checkbox","TextStyle","Table","Header","toCurrency","config","listProducts","updatePaymentRequest","configure","ProductsList","active","handleChange","paymentRequestId","loading","error","data","rowId","setRowId","state","setState","products","acceptPayment","paymentResponse","graphql","input","id","status","map","product","originalUnitPrice","node","variants","edges","price","quantity","variantId","console","log","content","onAction","includes","filter","filteredProduct","images","originalSrc","title","description"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react'\nimport { API, graphqlOperation } from 'aws-amplify'\nimport gql from 'graphql-tag'\nimport { useQuery } from '@apollo/client'\nimport { Modal, Thumbnail, Checkbox, TextStyle } from '@shopify/polaris'\nimport { Table, Header } from 'semantic-ui-react'\nimport { toCurrency } from '../utils/helper'\nimport config from '../aws-exports'\nimport {listProducts} from \"../graphql/queries\"\nimport {updatePaymentRequest} from \"../graphql/mutation\"\n\nAPI.configure(config)\n\nconst ProductsList = ({ active, handleChange, paymentRequestId }) => {\n    const { loading, error, data } = useQuery(listProducts)\n    const [rowId, setRowId] = useState([])\n    const [state, setState] = useState({\n        products: []\n    })\n  \n    if (loading) {\n        return <div>Loading products...</div>\n    }\n\n    if (error) {\n        return <div>Some error occured</div>\n    }\n\n    const acceptPayment = async () => {\n        try {\n            const paymentResponse = await API.graphql(\n                graphqlOperation(updatePaymentRequest, {\n                    input: {\n                        id: paymentRequestId,\n                        status: 'APPROVED',\n                        products: state.products.map((product) => ({\n                            originalUnitPrice: product.node.variants.edges[0].node.price,\n                            quantity: 1,\n                            variantId: product.node.variants.edges[0].node.id\n                        }))\n                    }\n                })\n            )\n\n            console.log('Payment data from lambda', paymentResponse.data)\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    return (\n        <Modal\n            open={active}\n            onClose={handleChange}\n            title=\"Choose products\"\n            primaryAction={{\n                content: 'Proceed',\n                onAction: () => {\n                    acceptPayment()\n                    handleChange()\n                }\n            }}>\n            <Modal.Section>\n                <Table celled striped selectable>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>Products</Table.HeaderCell>\n                            <Table.HeaderCell>Description</Table.HeaderCell>\n                            <Table.HeaderCell textAlign=\"center\">Price</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {data &&\n                            data.products.edges\n                                .map((product) => (\n                                    <Table.Row\n                                        key={product.node.id}\n                                        onClick={() => {\n                                            if (rowId.includes(product.node.id)) {\n                                                setRowId(\n                                                    rowId.filter((id) => id !== product.node.id)\n                                                )\n                                                setState({\n                                                    products: state.products.filter(\n                                                        (filteredProduct) =>\n                                                            filteredProduct.node.id !==\n                                                            product.node.id\n                                                    )\n                                                })\n                                            } else {\n                                                setRowId([...rowId, product.node.id])\n                                                setState({\n                                                    ...state,\n                                                    products: [...state.products, product]\n                                                })\n                                            }\n                                        }}>\n                                        <Table.Cell>\n                                            <Header as=\"h4\" image className=\"product-header\">\n                                                <Checkbox\n                                                    checked={\n                                                        rowId.includes(product.node.id) && true\n                                                    }\n                                                />\n                                                <Thumbnail\n                                                    source={\n                                                        product.node.images.edges[0] &&\n                                                        product.node.images.edges[0].node\n                                                            .originalSrc\n                                                    }\n                                                    size=\"small\"\n                                                    alt=\"\"\n                                                />\n                                                <Header.Content>\n                                                    {product.node.title}\n                                                </Header.Content>\n                                            </Header>\n                                        </Table.Cell>\n                                        <Table.Cell>\n                                            <TextStyle variation=\"subdued\">\n                                                {product.node.description}\n                                            </TextStyle>\n                                        </Table.Cell>\n                                        <Table.Cell textAlign=\"center\">\n                                            <TextStyle variation=\"subdued\">\n                                                {product.node.variants.edges[0] &&\n                                                    toCurrency(\n                                                        product.node.variants.edges[0].node.price\n                                                    )}\n                                            </TextStyle>\n                                        </Table.Cell>\n                                    </Table.Row>\n                                ))}\n                    </Table.Body>\n                    <Table.Footer fullWidth>\n                        <Table.Row></Table.Row>\n                    </Table.Footer>\n                </Table>\n            </Modal.Section>\n        </Modal>\n    )\n}\n\nexport default ProductsList\n"]},"metadata":{},"sourceType":"module"}