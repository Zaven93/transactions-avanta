{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport AWS from \"aws-sdk\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { getBranchById, listBranchs, branchByAdminId } from \"../../graphql/queries\";\nimport { createBranch, removeBranch, deleteTransaction, deleteBranchProduct, deletePaymentRequest } from \"../../graphql/mutation\";\nimport config from \"../../aws-exports\";\nAWS.config.update({\n  accessKeyId: \"AKIA5VX4IMFOFHT7M2O2\",\n  secretAccessKey: \"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\",\n  region: \"us-east-1\"\n});\nvar cognito = new AWS.CognitoIdentityServiceProvider();\nexport var getBranch = function getBranch(key, _ref) {\n  var branchId = _ref.branchId;\n  return API.graphql(graphqlOperation(getBranchById, {\n    id: branchId\n  }));\n};\nexport var getBranchByAdmin = function getBranchByAdmin(key, _ref2) {\n  var adminId = _ref2.adminId;\n  return API.graphql(graphqlOperation(branchByAdminId, {\n    adminId: adminId\n  }));\n};\nexport var createBranchEntity = function createBranchEntity(_ref3) {\n  var userSub = _ref3.userSub,\n      username = _ref3.username,\n      branchName = _ref3.branchName;\n  return API.graphql(graphqlOperation(createBranch, {\n    input: {\n      adminId: userSub,\n      branchUsername: username,\n      branchName: branchName,\n      id: uuidv4()\n    }\n  }));\n};\nexport var listBranchEntities = function listBranchEntities(key) {\n  return API.graphql(graphqlOperation(listBranchs));\n};\nexport var deleteBranch = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref4) {\n    var branch, username, id;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            branch = _ref4.branch, username = _ref4.username, id = _ref4.id;\n            console.log(\"Branch data that should be deleted\", branch); // const branchToDelete = branches.listBranchs.items.filter((item) => item.id === id)[0]\n            // console.log(\"Branch to delete Zaven\", branchToDelete)\n            // const transactionsToDelete = branchToDelete.transactions.items\n            //   ? branchToDelete.transactions.items.map((transaction) => transaction.id)\n            //   : \"\"\n            // const productsToDelete = branchToDelete.branchProducts.items\n            //   ? branchToDelete.branchProducts.items.map((product) => product.id)\n            //   : \"\"\n            // const paymentRequestToDelete = branchToDelete.branchPaymentRequests.items\n            //   ? branchToDelete.branchPaymentRequests.items.map((paymentRequest) => paymentRequest.id)\n            //   : \"\"\n            // console.log(\"Transactions to Delete\", transactionsToDelete)\n            // console.log(\"Products to delete\", productsToDelete)\n            // console.log(\"PaymentRequests to delete\", paymentRequestToDelete)\n            // console.log(\"Username to delete\", username)\n            // try {\n            //   const deletedBranch = await API.graphql(graphqlOperation(removeBranch, { input: { id } }))\n            //   await Promise.all(\n            //     transactionsToDelete.map((transactionId) => {\n            //       API.graphql(graphqlOperation(deleteTransaction, { input: { id: transactionId } }))\n            //     })\n            //   ).catch((err) => console.log(err))\n            //   await Promise.all(\n            //     productsToDelete.map((productId) => {\n            //       API.graphql(graphqlOperation(deleteBranchProduct, { input: { id: productId } }))\n            //     })\n            //   ).catch((err) => console.log(err))\n            //   await Promise.all(\n            //     paymentRequestToDelete.map((paymentId) => {\n            //       API.graphql(graphqlOperation(deletePaymentRequest, { input: { id: paymentId } }))\n            //     })\n            //   )\n            //   await cognito\n            //     .adminDeleteUser({\n            //       UserPoolId: \"us-east-1_xuc7kseKp\",\n            //       Username: username,\n            //     })\n            //     .promise()\n            // } catch (error) {\n            //   console.log(error)\n            // }\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function deleteBranch(_x) {\n    return _ref5.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/var/www/transactions-avanta/core/services/branch.service.js"],"names":["AWS","API","graphqlOperation","v4","uuidv4","getBranchById","listBranchs","branchByAdminId","createBranch","removeBranch","deleteTransaction","deleteBranchProduct","deletePaymentRequest","config","update","accessKeyId","secretAccessKey","region","cognito","CognitoIdentityServiceProvider","getBranch","key","branchId","graphql","id","getBranchByAdmin","adminId","createBranchEntity","userSub","username","branchName","input","branchUsername","listBranchEntities","deleteBranch","branch","console","log"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,SAAhB;AACA,SAASC,GAAT,EAAcC,gBAAd,QAAsC,aAAtC;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AACA,SAASC,aAAT,EAAwBC,WAAxB,EAAqCC,eAArC,QAA4D,uBAA5D;AACA,SACEC,YADF,EAEEC,YAFF,EAGEC,iBAHF,EAIEC,mBAJF,EAKEC,oBALF,QAMO,wBANP;AAOA,OAAOC,MAAP,MAAmB,mBAAnB;AAEAb,GAAG,CAACa,MAAJ,CAAWC,MAAX,CAAkB;AAChBC,EAAAA,WAAW,EAAE,sBADG;AAEhBC,EAAAA,eAAe,EAAE,0CAFD;AAGhBC,EAAAA,MAAM,EAAE;AAHQ,CAAlB;AAMA,IAAMC,OAAO,GAAG,IAAIlB,GAAG,CAACmB,8BAAR,EAAhB;AAEA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,GAAD;AAAA,MAAQC,QAAR,QAAQA,QAAR;AAAA,SACvBrB,GAAG,CAACsB,OAAJ,CAAYrB,gBAAgB,CAACG,aAAD,EAAgB;AAAEmB,IAAAA,EAAE,EAAEF;AAAN,GAAhB,CAA5B,CADuB;AAAA,CAAlB;AAGP,OAAO,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACJ,GAAD;AAAA,MAAQK,OAAR,SAAQA,OAAR;AAAA,SAC9BzB,GAAG,CAACsB,OAAJ,CAAYrB,gBAAgB,CAACK,eAAD,EAAkB;AAAEmB,IAAAA,OAAO,EAAPA;AAAF,GAAlB,CAA5B,CAD8B;AAAA,CAAzB;AAGP,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA,MAAGC,OAAH,SAAGA,OAAH;AAAA,MAAYC,QAAZ,SAAYA,QAAZ;AAAA,MAAsBC,UAAtB,SAAsBA,UAAtB;AAAA,SAChC7B,GAAG,CAACsB,OAAJ,CACErB,gBAAgB,CAACM,YAAD,EAAe;AAC7BuB,IAAAA,KAAK,EAAE;AACLL,MAAAA,OAAO,EAAEE,OADJ;AAELI,MAAAA,cAAc,EAAEH,QAFX;AAGLC,MAAAA,UAAU,EAAEA,UAHP;AAILN,MAAAA,EAAE,EAAEpB,MAAM;AAJL;AADsB,GAAf,CADlB,CADgC;AAAA,CAA3B;AAYP,OAAO,IAAM6B,kBAAkB,GAAG,SAArBA,kBAAqB,CAACZ,GAAD;AAAA,SAASpB,GAAG,CAACsB,OAAJ,CAAYrB,gBAAgB,CAACI,WAAD,CAA5B,CAAT;AAAA,CAA3B;AAEP,OAAO,IAAM4B,YAAY;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,MAAT,SAASA,MAAT,EAAiBN,QAAjB,SAAiBA,QAAjB,EAA2BL,EAA3B,SAA2BA,EAA3B;AAC1BY,YAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ,EAAkDF,MAAlD,EAD0B,CAE1B;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAnD0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZD,YAAY;AAAA;AAAA;AAAA,GAAlB","sourcesContent":["import AWS from \"aws-sdk\"\nimport { API, graphqlOperation } from \"aws-amplify\"\nimport { v4 as uuidv4 } from \"uuid\"\nimport { getBranchById, listBranchs, branchByAdminId } from \"../../graphql/queries\"\nimport {\n  createBranch,\n  removeBranch,\n  deleteTransaction,\n  deleteBranchProduct,\n  deletePaymentRequest,\n} from \"../../graphql/mutation\"\nimport config from \"../../aws-exports\"\n\nAWS.config.update({\n  accessKeyId: \"AKIA5VX4IMFOFHT7M2O2\",\n  secretAccessKey: \"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\",\n  region: \"us-east-1\",\n})\n\nconst cognito = new AWS.CognitoIdentityServiceProvider()\n\nexport const getBranch = (key, { branchId }) =>\n  API.graphql(graphqlOperation(getBranchById, { id: branchId }))\n\nexport const getBranchByAdmin = (key, { adminId }) =>\n  API.graphql(graphqlOperation(branchByAdminId, { adminId }))\n\nexport const createBranchEntity = ({ userSub, username, branchName }) =>\n  API.graphql(\n    graphqlOperation(createBranch, {\n      input: {\n        adminId: userSub,\n        branchUsername: username,\n        branchName: branchName,\n        id: uuidv4(),\n      },\n    })\n  )\n\nexport const listBranchEntities = (key) => API.graphql(graphqlOperation(listBranchs))\n\nexport const deleteBranch = async ({ branch, username, id }) => {\n  console.log(\"Branch data that should be deleted\", branch)\n  // const branchToDelete = branches.listBranchs.items.filter((item) => item.id === id)[0]\n\n  // console.log(\"Branch to delete Zaven\", branchToDelete)\n\n  // const transactionsToDelete = branchToDelete.transactions.items\n  //   ? branchToDelete.transactions.items.map((transaction) => transaction.id)\n  //   : \"\"\n\n  // const productsToDelete = branchToDelete.branchProducts.items\n  //   ? branchToDelete.branchProducts.items.map((product) => product.id)\n  //   : \"\"\n\n  // const paymentRequestToDelete = branchToDelete.branchPaymentRequests.items\n  //   ? branchToDelete.branchPaymentRequests.items.map((paymentRequest) => paymentRequest.id)\n  //   : \"\"\n\n  // console.log(\"Transactions to Delete\", transactionsToDelete)\n  // console.log(\"Products to delete\", productsToDelete)\n  // console.log(\"PaymentRequests to delete\", paymentRequestToDelete)\n  // console.log(\"Username to delete\", username)\n  // try {\n  //   const deletedBranch = await API.graphql(graphqlOperation(removeBranch, { input: { id } }))\n\n  //   await Promise.all(\n  //     transactionsToDelete.map((transactionId) => {\n  //       API.graphql(graphqlOperation(deleteTransaction, { input: { id: transactionId } }))\n  //     })\n  //   ).catch((err) => console.log(err))\n\n  //   await Promise.all(\n  //     productsToDelete.map((productId) => {\n  //       API.graphql(graphqlOperation(deleteBranchProduct, { input: { id: productId } }))\n  //     })\n  //   ).catch((err) => console.log(err))\n\n  //   await Promise.all(\n  //     paymentRequestToDelete.map((paymentId) => {\n  //       API.graphql(graphqlOperation(deletePaymentRequest, { input: { id: paymentId } }))\n  //     })\n  //   )\n\n  //   await cognito\n  //     .adminDeleteUser({\n  //       UserPoolId: \"us-east-1_xuc7kseKp\",\n  //       Username: username,\n  //     })\n  //     .promise()\n  // } catch (error) {\n  //   console.log(error)\n  // }\n}\n"]},"metadata":{},"sourceType":"module"}