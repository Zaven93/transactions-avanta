{"ast":null,"code":"var _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { Auth, API, graphqlOperation } from \"aws-amplify\";\nimport { Page, Button, Modal, Badge, Stack } from \"@shopify/polaris\";\nimport { Table, Popup, Header, Icon } from \"semantic-ui-react\";\nimport { useForm } from \"react-hook-form\";\nimport { useConfirmSignUp, useSignUp, useCreateBranch, useListBranches } from \"../core/hooks\";\nimport ProductList from \"./ProductsList\";\nimport { formatDate } from \"../utils/helper\";\nimport BranchProducts from \"./BranchProducts\";\nimport BranchList from \"./BranchList\";\nimport AdminBranchInfo from \"./AdminBranchInfo\";\nimport { createBranch } from \"../graphql/mutation\";\nimport { listBranchs } from \"../graphql/queries\";\n\nvar BranchConsole = function BranchConsole(_ref) {\n  _s();\n\n  var updateUser = _ref.updateUser;\n\n  var _useState = useState(false),\n      active = _useState[0],\n      setActive = _useState[1];\n\n  var _useState2 = useState(false),\n      activeBranchName = _useState2[0],\n      setActiveBranchName = _useState2[1];\n\n  var _useState3 = useState(false),\n      activeUsername = _useState3[0],\n      setActiveUsername = _useState3[1];\n\n  var _useState4 = useState(false),\n      activePassword = _useState4[0],\n      setActivePassword = _useState4[1];\n\n  var _useState5 = useState(false),\n      activeEmail = _useState5[0],\n      setActiveEmail = _useState5[1];\n\n  var _useState6 = useState(false),\n      activeCode = _useState6[0],\n      setActiveCode = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      branchName = _useState7[0],\n      setBranchName = _useState7[1];\n\n  var _useState8 = useState(\"\"),\n      username = _useState8[0],\n      setUsername = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      password = _useState9[0],\n      setPassword = _useState9[1];\n\n  var _useState10 = useState(false),\n      showPassword = _useState10[0],\n      setShowPassword = _useState10[1];\n\n  var _useState11 = useState(\"signUp\"),\n      formType = _useState11[0],\n      setFormType = _useState11[1];\n\n  var _useState12 = useState(null),\n      userSub = _useState12[0],\n      setUserSub = _useState12[1];\n\n  var _useState13 = useState(\"\"),\n      branches = _useState13[0],\n      setBranches = _useState13[1];\n\n  var _useState14 = useState(null),\n      branchId = _useState14[0],\n      setBranchId = _useState14[1];\n\n  var _useSignUp = useSignUp(),\n      signUserUp = _useSignUp.signUserUp,\n      data = _useSignUp.data;\n\n  var _useConfirmSignUp = useConfirmSignUp(),\n      confirmSignUp = _useConfirmSignUp.confirmSignUp;\n\n  var _useCreateBranch = useCreateBranch(),\n      createBranch = _useCreateBranch.createBranch,\n      createdBranch = _useCreateBranch.data;\n\n  var _useListBranches = useListBranches(),\n      branchesData = _useListBranches.data,\n      listBranches = _useListBranches.refetch;\n\n  var _useForm = useForm(),\n      handleSubmit = _useForm.handleSubmit,\n      errors = _useForm.errors,\n      register = _useForm.register;\n\n  var handleChange = function handleChange() {\n    setActive(!active);\n  };\n\n  var onSubmit = function onSubmit(data) {\n    var username = data.username,\n        password = data.password,\n        email = data.email;\n    console.log(\"Submitted data\", data);\n\n    try {\n      signUserUp({\n        username: username,\n        password: password,\n        email: email\n      });\n      setFormType(\"confirm\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  var onConfirm = function onConfirm(data) {\n    var username = data.username,\n        code = data.code;\n\n    try {\n      confirmSignUp({\n        username: username,\n        code: code\n      });\n      createBranch({\n        userSub: userSub,\n        username: username,\n        branchName: branchName\n      });\n      setFormType(\"signUp\");\n      handleChange();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(function () {\n    setUserSub(data && data.userSub);\n  }, [data]);\n  useEffect(function () {\n    listBranches();\n  }, []);\n  useEffect(function () {\n    setBranches(branchesData && branchesData.data);\n  }, [branchesData]);\n  return __jsx(React.Fragment, null, branchId && __jsx(AdminBranchInfo, {\n    setBranchId: setBranchId,\n    branchId: branchId\n  }), !branchId && __jsx(React.Fragment, null, __jsx(Stack, null, __jsx(Stack.Item, {\n    fill: true\n  }, __jsx(Button, {\n    onClick: handleChange,\n    primary: true\n  }, __jsx(Icon, {\n    name: \"code branch\"\n  }), \" Create branch\")), __jsx(Stack.Item, null, __jsx(Button, {\n    primary: true,\n    id: \"Logout\",\n    onClick: function onClick() {\n      Auth.signOut();\n      updateUser(null);\n    }\n  }, __jsx(Icon, {\n    name: \"sign out\"\n  }), \" Logout\"))), __jsx(BranchList, {\n    setBranchId: setBranchId\n  }), __jsx(Modal, {\n    open: active,\n    onClose: function onClose() {\n      handleChange();\n      setActiveBranchName();\n      setActiveUsername;\n      setActivePassword;\n      setActiveEmail;\n      setActiveCode;\n    },\n    title: \"Fill in Branch info\"\n  }, __jsx(Modal.Section, null, formType === \"signUp\" && __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(\"div\", {\n    className: \"form-controll\"\n  }, __jsx(\"input\", {\n    name: \"branchName\",\n    onChange: function onChange(e) {\n      return setBranchName(e.target.value);\n    },\n    ref: register({\n      required: \"Branch name is required!\"\n    }),\n    onBlur: function onBlur(e) {\n      if (e.target.value) {\n        return setActiveBranchName(true);\n      }\n\n      return setActiveBranchName(false);\n    }\n  }), __jsx(Icon, {\n    name: \"code branch\"\n  }), __jsx(\"label\", {\n    className: activeBranchName ? \"active\" : \"\",\n    htmlFor: \"branchName\"\n  }, \"Branch Name\"), errors.branchName && __jsx(\"p\", {\n    className: \"error-notification\"\n  }, errors.branchName.message)), __jsx(\"div\", {\n    className: \"form-controll\"\n  }, __jsx(\"input\", {\n    name: \"username\",\n    onChange: function onChange(e) {\n      return setUsername(e.target.value);\n    },\n    ref: register({\n      required: \"Username is required!\"\n    }),\n    onBlur: function onBlur(e) {\n      if (e.target.value) {\n        return setActiveUsername(true);\n      }\n\n      return setActiveUsername(false);\n    }\n  }), __jsx(Icon, {\n    name: \"user\"\n  }), __jsx(\"label\", {\n    className: activeUsername ? \"active\" : \"\",\n    htmlFor: \"username\"\n  }, \"Username\"), errors.username && __jsx(\"p\", {\n    className: \"error-notification\"\n  }, errors.username.message)), __jsx(\"div\", {\n    className: \"form-controll\"\n  }, __jsx(\"input\", {\n    name: \"email\",\n    ref: register({\n      required: \"Email is required!\"\n    }),\n    onBlur: function onBlur(e) {\n      if (e.target.value) {\n        return setActiveEmail(true);\n      }\n\n      return setActiveEmail(false);\n    }\n  }), __jsx(Icon, {\n    name: \"mail\"\n  }), __jsx(\"label\", {\n    className: activeEmail ? \"active\" : \"\",\n    htmlFor: \"email\"\n  }, \"Email\"), errors.email && __jsx(\"p\", {\n    className: \"error-notification\"\n  }, errors.email.message)), __jsx(\"div\", {\n    className: \"form-controll\"\n  }, __jsx(\"input\", {\n    name: \"password\",\n    type: showPassword ? \"text\" : \"password\",\n    ref: register({\n      required: \"Password is required!\"\n    }),\n    onChange: function onChange(e) {\n      return setPassword(e.target.value);\n    },\n    onBlur: function onBlur(e) {\n      if (e.target.value) {\n        return setActivePassword(true);\n      }\n\n      return setActivePassword(false);\n    }\n  }), __jsx(Icon, {\n    name: \"lock\"\n  }), __jsx(\"label\", {\n    className: activePassword ? \"active\" : \"\",\n    htmlFor: \"password\"\n  }, \"Password\"), __jsx(Icon, {\n    className: password ? \"show-eye\" : \"not-show-eye\",\n    onClick: function onClick() {\n      return setShowPassword(!showPassword);\n    },\n    name: showPassword ? \"eye slash\" : \"eye\",\n    style: {\n      color: showPassword ? \"#6774c8\" : \"\"\n    }\n  }), errors.password && __jsx(\"p\", {\n    className: \"error-notification\"\n  }, errors.password.message)), __jsx(Button, {\n    primary: true,\n    submit: true\n  }, __jsx(Icon, {\n    name: \"sign-in\"\n  }), \" Create Branch\")), formType === \"confirm\" && __jsx(\"form\", {\n    onSubmit: handleSubmit(onConfirm)\n  }, __jsx(\"div\", {\n    className: \"form-controll\"\n  }, __jsx(\"input\", {\n    name: \"username\",\n    value: username,\n    ref: register({\n      required: \"Username is required!\"\n    }),\n    onBlur: function onBlur(e) {\n      if (e.target.value) {\n        return setActiveUsername(true);\n      }\n\n      return setActiveUsername(false);\n    }\n  }), __jsx(Icon, {\n    name: \"user\"\n  }), __jsx(\"label\", {\n    className: activeUsername ? \"active\" : \"\",\n    htmlFor: \"username\"\n  }, \"Username\"), errors.username && __jsx(\"p\", {\n    className: \"error-notification\"\n  }, errors.username.message)), __jsx(\"div\", {\n    className: \"form-controll\"\n  }, __jsx(\"input\", {\n    name: \"code\",\n    ref: register({\n      required: \"Confirm code is required!\"\n    }),\n    onBlur: function onBlur(e) {\n      if (e.target.value) {\n        return setActiveCode(true);\n      }\n\n      return setActiveCode(false);\n    }\n  }), __jsx(Icon, {\n    name: \"unlock alternate\"\n  }), __jsx(\"label\", {\n    className: activeCode ? \"active\" : \"\",\n    htmlFor: \"code\"\n  }, \"Confirm code\"), errors.code && __jsx(\"p\", {\n    className: \"error-notification\"\n  }, errors.code.message)), __jsx(Button, {\n    primary: true,\n    submit: true\n  }, __jsx(Icon, {\n    name: \"sign-in\"\n  }), \" Confirm\"))))));\n};\n\n_s(BranchConsole, \"v5F1tdDzfxg/7xozCuxveUjCD7U=\", false, function () {\n  return [useSignUp, useConfirmSignUp, useCreateBranch, useListBranches, useForm];\n});\n\n_c = BranchConsole;\nexport default BranchConsole;\n\nvar _c;\n\n$RefreshReg$(_c, \"BranchConsole\");","map":{"version":3,"sources":["/var/www/transactions-avanta/components/BranchConsole.js"],"names":["React","useState","useEffect","useRef","useCallback","Auth","API","graphqlOperation","Page","Button","Modal","Badge","Stack","Table","Popup","Header","Icon","useForm","useConfirmSignUp","useSignUp","useCreateBranch","useListBranches","ProductList","formatDate","BranchProducts","BranchList","AdminBranchInfo","createBranch","listBranchs","BranchConsole","updateUser","active","setActive","activeBranchName","setActiveBranchName","activeUsername","setActiveUsername","activePassword","setActivePassword","activeEmail","setActiveEmail","activeCode","setActiveCode","branchName","setBranchName","username","setUsername","password","setPassword","showPassword","setShowPassword","formType","setFormType","userSub","setUserSub","branches","setBranches","branchId","setBranchId","signUserUp","data","confirmSignUp","createdBranch","branchesData","listBranches","refetch","handleSubmit","errors","register","handleChange","onSubmit","email","console","log","error","onConfirm","code","signOut","e","target","value","required","message","color"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from \"react\"\nimport { Auth, API, graphqlOperation } from \"aws-amplify\"\nimport { Page, Button, Modal, Badge, Stack } from \"@shopify/polaris\"\nimport { Table, Popup, Header, Icon } from \"semantic-ui-react\"\nimport { useForm } from \"react-hook-form\"\nimport { useConfirmSignUp, useSignUp, useCreateBranch, useListBranches } from \"../core/hooks\"\nimport ProductList from \"./ProductsList\"\nimport { formatDate } from \"../utils/helper\"\nimport BranchProducts from \"./BranchProducts\"\nimport BranchList from \"./BranchList\"\nimport AdminBranchInfo from \"./AdminBranchInfo\"\nimport { createBranch } from \"../graphql/mutation\"\nimport { listBranchs } from \"../graphql/queries\"\n\nconst BranchConsole = ({ updateUser }) => {\n  const [active, setActive] = useState(false)\n  const [activeBranchName, setActiveBranchName] = useState(false)\n  const [activeUsername, setActiveUsername] = useState(false)\n  const [activePassword, setActivePassword] = useState(false)\n  const [activeEmail, setActiveEmail] = useState(false)\n  const [activeCode, setActiveCode] = useState(false)\n  const [branchName, setBranchName] = useState(\"\")\n  const [username, setUsername] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [showPassword, setShowPassword] = useState(false)\n  const [formType, setFormType] = useState(\"signUp\")\n  const [userSub, setUserSub] = useState(null)\n  const [branches, setBranches] = useState(\"\")\n  const [branchId, setBranchId] = useState(null)\n\n  const { signUserUp, data } = useSignUp()\n  const { confirmSignUp } = useConfirmSignUp()\n  const { createBranch, data: createdBranch } = useCreateBranch()\n  const { data: branchesData, refetch: listBranches } = useListBranches()\n  const { handleSubmit, errors, register } = useForm()\n\n  const handleChange = () => {\n    setActive(!active)\n  }\n\n  const onSubmit = (data) => {\n    const { username, password, email } = data\n    console.log(\"Submitted data\", data)\n    try {\n      signUserUp({ username, password, email })\n      setFormType(\"confirm\")\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const onConfirm = (data) => {\n    const { username, code } = data\n    try {\n      confirmSignUp({ username, code })\n      createBranch({ userSub, username, branchName })\n      setFormType(\"signUp\")\n      handleChange()\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    setUserSub(data && data.userSub)\n  }, [data])\n\n  useEffect(() => {\n    listBranches()\n  }, [])\n\n  useEffect(() => {\n    setBranches(branchesData && branchesData.data)\n  }, [branchesData])\n\n  return (\n    <>\n      {branchId && <AdminBranchInfo setBranchId={setBranchId} branchId={branchId} />}\n      {!branchId && (\n        <>\n          <Stack>\n            <Stack.Item fill>\n              <Button onClick={handleChange} primary>\n                <Icon name=\"code branch\" /> Create branch\n              </Button>\n            </Stack.Item>\n            <Stack.Item>\n              <Button\n                primary\n                id=\"Logout\"\n                onClick={() => {\n                  Auth.signOut()\n                  updateUser(null)\n                }}>\n                <Icon name=\"sign out\" /> Logout\n              </Button>\n            </Stack.Item>\n          </Stack>\n          <BranchList setBranchId={setBranchId} />\n          <Modal\n            open={active}\n            onClose={() => {\n              handleChange()\n              setActiveBranchName()\n              setActiveUsername\n              setActivePassword\n              setActiveEmail\n              setActiveCode\n            }}\n            title=\"Fill in Branch info\">\n            <Modal.Section>\n              {formType === \"signUp\" && (\n                <form onSubmit={handleSubmit(onSubmit)}>\n                  <div className=\"form-controll\">\n                    <input\n                      name=\"branchName\"\n                      onChange={(e) => setBranchName(e.target.value)}\n                      ref={register({ required: \"Branch name is required!\" })}\n                      onBlur={(e) => {\n                        if (e.target.value) {\n                          return setActiveBranchName(true)\n                        }\n                        return setActiveBranchName(false)\n                      }}\n                    />\n                    <Icon name=\"code branch\" />\n                    <label className={activeBranchName ? \"active\" : \"\"} htmlFor=\"branchName\">\n                      Branch Name\n                    </label>\n                    {errors.branchName && (\n                      <p className=\"error-notification\">{errors.branchName.message}</p>\n                    )}\n                  </div>\n                  <div className=\"form-controll\">\n                    <input\n                      name=\"username\"\n                      onChange={(e) => setUsername(e.target.value)}\n                      ref={register({ required: \"Username is required!\" })}\n                      onBlur={(e) => {\n                        if (e.target.value) {\n                          return setActiveUsername(true)\n                        }\n                        return setActiveUsername(false)\n                      }}\n                    />\n                    <Icon name=\"user\" />\n                    <label className={activeUsername ? \"active\" : \"\"} htmlFor=\"username\">\n                      Username\n                    </label>\n                    {errors.username && (\n                      <p className=\"error-notification\">{errors.username.message}</p>\n                    )}\n                  </div>\n                  <div className=\"form-controll\">\n                    <input\n                      name=\"email\"\n                      ref={register({ required: \"Email is required!\" })}\n                      onBlur={(e) => {\n                        if (e.target.value) {\n                          return setActiveEmail(true)\n                        }\n                        return setActiveEmail(false)\n                      }}\n                    />\n                    <Icon name=\"mail\" />\n                    <label className={activeEmail ? \"active\" : \"\"} htmlFor=\"email\">\n                      Email\n                    </label>\n                    {errors.email && <p className=\"error-notification\">{errors.email.message}</p>}\n                  </div>\n                  <div className=\"form-controll\">\n                    <input\n                      name=\"password\"\n                      type={showPassword ? \"text\" : \"password\"}\n                      ref={register({ required: \"Password is required!\" })}\n                      onChange={(e) => setPassword(e.target.value)}\n                      onBlur={(e) => {\n                        if (e.target.value) {\n                          return setActivePassword(true)\n                        }\n                        return setActivePassword(false)\n                      }}\n                    />\n                    <Icon name=\"lock\" />\n                    <label className={activePassword ? \"active\" : \"\"} htmlFor=\"password\">\n                      Password\n                    </label>\n                    <Icon\n                      className={password ? \"show-eye\" : \"not-show-eye\"}\n                      onClick={() => setShowPassword(!showPassword)}\n                      name={showPassword ? \"eye slash\" : \"eye\"}\n                      style={{ color: showPassword ? \"#6774c8\" : \"\" }}\n                    />\n                    {errors.password && (\n                      <p className=\"error-notification\">{errors.password.message}</p>\n                    )}\n                  </div>\n                  <Button primary submit>\n                    <Icon name=\"sign-in\" /> Create Branch\n                  </Button>\n                </form>\n              )}\n              {formType === \"confirm\" && (\n                <form onSubmit={handleSubmit(onConfirm)}>\n                  <div className=\"form-controll\">\n                    <input\n                      name=\"username\"\n                      value={username}\n                      ref={register({ required: \"Username is required!\" })}\n                      onBlur={(e) => {\n                        if (e.target.value) {\n                          return setActiveUsername(true)\n                        }\n                        return setActiveUsername(false)\n                      }}\n                    />\n                    <Icon name=\"user\" />\n                    <label className={activeUsername ? \"active\" : \"\"} htmlFor=\"username\">\n                      Username\n                    </label>\n                    {errors.username && (\n                      <p className=\"error-notification\">{errors.username.message}</p>\n                    )}\n                  </div>\n                  <div className=\"form-controll\">\n                    <input\n                      name=\"code\"\n                      ref={register({ required: \"Confirm code is required!\" })}\n                      onBlur={(e) => {\n                        if (e.target.value) {\n                          return setActiveCode(true)\n                        }\n                        return setActiveCode(false)\n                      }}\n                    />\n                    <Icon name=\"unlock alternate\" />\n                    <label className={activeCode ? \"active\" : \"\"} htmlFor=\"code\">\n                      Confirm code\n                    </label>\n                    {errors.code && <p className=\"error-notification\">{errors.code.message}</p>}\n                  </div>\n                  <Button primary submit>\n                    <Icon name=\"sign-in\" /> Confirm\n                  </Button>\n                </form>\n              )}\n            </Modal.Section>\n          </Modal>\n        </>\n      )}\n    </>\n  )\n}\n\nexport default BranchConsole\n"]},"metadata":{},"sourceType":"module"}