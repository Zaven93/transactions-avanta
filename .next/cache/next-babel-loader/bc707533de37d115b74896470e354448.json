{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport axios from 'axios';\nimport gql from 'graphql-tag';\nimport { print } from 'graphql';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { ResourcePicker } from '@shopify/app-bridge/actions';\nimport { Page, Badge, Avatar, TextStyle, Card, TextContainer, Modal, Checkbox, Thumbnail } from '@shopify/polaris';\nimport { CustomersMajorMonotone } from '@shopify/polaris-icons';\nimport { Table, TableCell, Icon, Popup, Header } from 'semantic-ui-react';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nAPI.configure(config);\nconst listPaymentRequest = gql`\n    query listPaymentRequest {\n        listPaymentRequests {\n            items {\n                bonusAmount\n                createdAt\n                customerId\n                id\n                orderId\n                status\n                updatedAt\n            }\n        }\n    }\n`;\nconst listProducts = gql`\n    query Products {\n        products(first: 100) {\n            edges {\n                node {\n                    id\n                    title\n                    tags\n                    description(truncateAt: 100)\n                    variants(first: 1) {\n                        edges {\n                            node {\n                                id\n                                price\n                            }\n                        }\n                    }\n                    images(first: 1) {\n                        edges {\n                            node {\n                                originalSrc\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n`;\nconst createOrder = gql`\n    mutation CreateOrder($input: DraftOrderInput!) {\n        draftOrderCreate(input: $input) {\n            draftOrder {\n                id\n                customer {\n                    id\n                }\n                email\n                lineItems(first: 10) {\n                    edges {\n                        node {\n                            title\n                            quantity\n                            originalUnitPrice\n                            variant {\n                                id\n                                price\n                                title\n                                product {\n                                    tags\n                                    title\n                                    images(first: 5) {\n                                        edges {\n                                            node {\n                                                originalSrc\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n`;\n\nconst AcceptPayment = ({\n  paymentRequests,\n  products\n}) => {\n  const {\n    0: paymentRequestItems,\n    1: setPaymentRequestItems\n  } = useState(paymentRequests.listPaymentRequests.items);\n  const {\n    0: productItems,\n    1: setProductItems\n  } = useState(products);\n  const {\n    0: openPicker,\n    1: setOpenPicker\n  } = useState(false);\n  const {\n    0: active,\n    1: setActive\n  } = useState(false);\n  const {\n    0: rowId,\n    1: setRowId\n  } = useState([]);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    customerId: '',\n    products: []\n  });\n  const {\n    0: searchValue,\n    1: setSearchValue\n  } = useState(null);\n  const handleSearchInput = useCallback(newValue => setSearchValue(newValue), []);\n  const handleChange = useCallback(() => setActive(!active), [active]);\n\n  const createOrder = async () => {\n    try {\n      const orderRes = await axios({\n        method: 'POST',\n        url: 'https://transactions-avanta.myshopify.com/admin/api/graphql.json',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Shopify-Access-Token': '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'\n        },\n        data: {\n          query: print(createOrder),\n          variables: {\n            input: {\n              customerId: `gid://shopify/Customer/${state.customerId}`,\n              taxExempt: true,\n              lineItems: state.products\n            }\n          }\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  console.log('Payment requests from getStaticProps', paymentRequests);\n  console.log('products data', products);\n  console.log('Payment request items', paymentRequestItems);\n  console.log('Products from modal', state.products);\n  console.log('Customer id', state.customerId);\n  return __jsx(Page, {\n    title: \"Payment Request\"\n  }, __jsx(Table, {\n    selectable: true,\n    celled: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Customer Id\"), __jsx(Table.HeaderCell, null, \"Order Id\"), __jsx(Table.HeaderCell, null, \"Bonus Amount\"), __jsx(Table.HeaderCell, null, \"Created At\"), __jsx(Table.HeaderCell, null, \"Updated At\"), __jsx(Table.HeaderCell, null, \"Status\"), __jsx(Table.HeaderCell, null, \"Action\"))), __jsx(Table.Body, null, paymentRequestItems && paymentRequestItems.map(item => __jsx(Table.Row, {\n    key: item.id\n  }, __jsx(Table.Cell, null, __jsx(Badge, {\n    size: \"small\"\n  }, item.customerId)), __jsx(Table.Cell, null, __jsx(Badge, {\n    size: \"small\"\n  }, item.orderId)), __jsx(Table.Cell, null, toCurrency(item.bonusAmount)), __jsx(Table.Cell, null, formatDate(item.createdAt)), __jsx(Table.Cell, null, formatDate(item.updatedAt)), __jsx(Table.Cell, null, __jsx(Badge, {\n    size: \"small\",\n    status: item.status === 'PENDING' ? 'attention' : item.status === 'APPROVED' ? 'success' : 'critical'\n  }, item.status)), __jsx(Table.Cell, {\n    className: \"actions-cell\"\n  }, __jsx(Popup, {\n    content: \"Approve payment\",\n    trigger: __jsx(Icon, {\n      className: \"accept\",\n      name: \"check\",\n      onClick: () => {\n        setState(_objectSpread(_objectSpread({}, state), {}, {\n          customerId: item.customerId\n        }));\n        handleChange();\n      }\n    })\n  }), __jsx(Popup, {\n    content: \"Decline payment\",\n    trigger: __jsx(Icon, {\n      className: \"decline\",\n      name: \"remove\"\n    })\n  })))))), __jsx(\"div\", {\n    style: {\n      height: '500px'\n    }\n  }, __jsx(Modal, {\n    open: active,\n    onClose: handleChange,\n    title: \"Choose products\",\n    primaryAction: {\n      content: 'Proceed',\n      onAction: handleChange\n    }\n  }, __jsx(Modal.Section, null, __jsx(Table, {\n    celled: true,\n    striped: true,\n    selectable: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Products\"), __jsx(Table.HeaderCell, null, \"Description\"), __jsx(Table.HeaderCell, {\n    textAlign: \"center\"\n  }, \"Price\"))), __jsx(Table.Body, null, productItems && productItems.filter(product => {\n    if (searchValue == null) {\n      return product;\n    } else if (product.node.title.toLowerCase().includes(searchValue.toLowerCase())) {\n      return product;\n    }\n  }).map(product => __jsx(Table.Row, {\n    key: product.node.id,\n    onClick: () => {\n      if (rowId.includes(product.node.id)) {\n        setRowId(rowId.filter(id => id !== product.node.id));\n        setState({\n          products: state.products.filter(filteredProduct => filteredProduct.node.id !== product.node.id)\n        });\n      } else {\n        setRowId([...rowId, product.node.id]);\n        setState({\n          products: [...state.products, product]\n        });\n      }\n    }\n  }, __jsx(Table.Cell, null, __jsx(Header, {\n    as: \"h4\",\n    image: true,\n    className: \"product-header\"\n  }, __jsx(Checkbox, {\n    checked: rowId.includes(product.node.id) && true\n  }), __jsx(Thumbnail, {\n    source: product.node.images.edges[0] && product.node.images.edges[0].node.originalSrc,\n    size: \"small\",\n    alt: \"\"\n  }), __jsx(Header.Content, null, product.node.title))), __jsx(Table.Cell, null, __jsx(TextStyle, {\n    variation: \"subdued\"\n  }, product.node.description)), __jsx(Table.Cell, {\n    textAlign: \"center\"\n  }, __jsx(TextStyle, {\n    variation: \"subdued\"\n  }, product.node.variants.edges[0] && toCurrency(product.node.variants.edges[0].node.price)))))), __jsx(Table.Footer, {\n    fullWidth: true\n  }, __jsx(Table.Row, null)))))));\n};\n\nexport async function getStaticProps() {\n  let result;\n  let products;\n\n  try {\n    result = await API.graphql(graphqlOperation(listPaymentRequest));\n    products = await axios({\n      url: 'https://transactions-avanta.myshopify.com/admin/api/2020-07/graphql.json',\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Shopify-Access-Token': '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'\n      },\n      data: {\n        query: print(listProducts)\n      }\n    });\n  } catch (error) {\n    console.log(error);\n  }\n\n  if (result.errors || products.errors) {\n    console.warn('Failed to fetch payment requests.', result.errors);\n    return {\n      props: {\n        paymentRequests: [],\n        products: []\n      }\n    };\n  }\n\n  if (result.data !== null && products.data !== null) {\n    return {\n      props: {\n        paymentRequests: result.data,\n        products: products.data.data.products.edges\n      }\n    };\n  }\n}\nexport default AcceptPayment;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/pages/accept-payment.js"],"names":["React","useState","useCallback","useEffect","axios","gql","print","API","graphqlOperation","ResourcePicker","Page","Badge","Avatar","TextStyle","Card","TextContainer","Modal","Checkbox","Thumbnail","CustomersMajorMonotone","Table","TableCell","Icon","Popup","Header","toCurrency","formatDate","config","configure","listPaymentRequest","listProducts","createOrder","AcceptPayment","paymentRequests","products","paymentRequestItems","setPaymentRequestItems","listPaymentRequests","items","productItems","setProductItems","openPicker","setOpenPicker","active","setActive","rowId","setRowId","state","setState","customerId","searchValue","setSearchValue","handleSearchInput","newValue","handleChange","orderRes","method","url","headers","data","query","variables","input","taxExempt","lineItems","error","console","log","map","item","id","orderId","bonusAmount","createdAt","updatedAt","status","height","content","onAction","filter","product","node","title","toLowerCase","includes","filteredProduct","images","edges","originalSrc","description","variants","price","getStaticProps","result","graphql","errors","warn","props"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport gql from 'graphql-tag'\r\nimport { print } from 'graphql'\r\nimport { API, graphqlOperation } from 'aws-amplify'\r\nimport { ResourcePicker } from '@shopify/app-bridge/actions'\r\nimport {\r\n    Page,\r\n    Badge,\r\n    Avatar,\r\n    TextStyle,\r\n    Card,\r\n    TextContainer,\r\n    Modal,\r\n    Checkbox,\r\n    Thumbnail\r\n} from '@shopify/polaris'\r\nimport { CustomersMajorMonotone } from '@shopify/polaris-icons'\r\nimport { Table, TableCell, Icon, Popup, Header } from 'semantic-ui-react'\r\nimport { toCurrency, formatDate } from '../utils/helper'\r\nimport config from '../aws-exports'\r\n\r\nAPI.configure(config)\r\n\r\nconst listPaymentRequest = gql`\r\n    query listPaymentRequest {\r\n        listPaymentRequests {\r\n            items {\r\n                bonusAmount\r\n                createdAt\r\n                customerId\r\n                id\r\n                orderId\r\n                status\r\n                updatedAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst listProducts = gql`\r\n    query Products {\r\n        products(first: 100) {\r\n            edges {\r\n                node {\r\n                    id\r\n                    title\r\n                    tags\r\n                    description(truncateAt: 100)\r\n                    variants(first: 1) {\r\n                        edges {\r\n                            node {\r\n                                id\r\n                                price\r\n                            }\r\n                        }\r\n                    }\r\n                    images(first: 1) {\r\n                        edges {\r\n                            node {\r\n                                originalSrc\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst createOrder = gql`\r\n    mutation CreateOrder($input: DraftOrderInput!) {\r\n        draftOrderCreate(input: $input) {\r\n            draftOrder {\r\n                id\r\n                customer {\r\n                    id\r\n                }\r\n                email\r\n                lineItems(first: 10) {\r\n                    edges {\r\n                        node {\r\n                            title\r\n                            quantity\r\n                            originalUnitPrice\r\n                            variant {\r\n                                id\r\n                                price\r\n                                title\r\n                                product {\r\n                                    tags\r\n                                    title\r\n                                    images(first: 5) {\r\n                                        edges {\r\n                                            node {\r\n                                                originalSrc\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst AcceptPayment = ({ paymentRequests, products }) => {\r\n    const [paymentRequestItems, setPaymentRequestItems] = useState(\r\n        paymentRequests.listPaymentRequests.items\r\n    )\r\n    const [productItems, setProductItems] = useState(products)\r\n    const [openPicker, setOpenPicker] = useState(false)\r\n    const [active, setActive] = useState(false)\r\n    const [rowId, setRowId] = useState([])\r\n    const [state, setState] = useState({\r\n        customerId: '',\r\n        products: []\r\n    })\r\n    const [searchValue, setSearchValue] = useState(null)\r\n    const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\r\n\r\n    const handleChange = useCallback(() => setActive(!active), [active])\r\n\r\n    const createOrder = async () => {\r\n        try {\r\n            const orderRes = await axios({\r\n                method: 'POST',\r\n                url: 'https://transactions-avanta.myshopify.com/admin/api/graphql.json',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'X-Shopify-Access-Token': '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'\r\n                },\r\n                data: {\r\n                    query: print(createOrder),\r\n                    variables: {\r\n                        input: {\r\n                            customerId: `gid://shopify/Customer/${state.customerId}`,\r\n                            taxExempt: true,\r\n                            lineItems: state.products\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    console.log('Payment requests from getStaticProps', paymentRequests)\r\n    console.log('products data', products)\r\n    console.log('Payment request items', paymentRequestItems)\r\n    console.log('Products from modal', state.products)\r\n    console.log('Customer id', state.customerId)\r\n    return (\r\n        <Page title=\"Payment Request\">\r\n            <Table selectable celled>\r\n                <Table.Header>\r\n                    <Table.Row>\r\n                        <Table.HeaderCell>Customer Id</Table.HeaderCell>\r\n                        <Table.HeaderCell>Order Id</Table.HeaderCell>\r\n                        <Table.HeaderCell>Bonus Amount</Table.HeaderCell>\r\n                        <Table.HeaderCell>Created At</Table.HeaderCell>\r\n                        <Table.HeaderCell>Updated At</Table.HeaderCell>\r\n                        <Table.HeaderCell>Status</Table.HeaderCell>\r\n                        <Table.HeaderCell>Action</Table.HeaderCell>\r\n                    </Table.Row>\r\n                </Table.Header>\r\n                <Table.Body>\r\n                    {paymentRequestItems &&\r\n                        paymentRequestItems.map((item) => (\r\n                            <Table.Row key={item.id}>\r\n                                <Table.Cell>\r\n                                    <Badge size=\"small\">{item.customerId}</Badge>\r\n                                </Table.Cell>\r\n                                <Table.Cell>\r\n                                    <Badge size=\"small\">{item.orderId}</Badge>\r\n                                </Table.Cell>\r\n                                <Table.Cell>{toCurrency(item.bonusAmount)}</Table.Cell>\r\n                                <Table.Cell>{formatDate(item.createdAt)}</Table.Cell>\r\n                                <Table.Cell>{formatDate(item.updatedAt)}</Table.Cell>\r\n                                <Table.Cell>\r\n                                    <Badge\r\n                                        size=\"small\"\r\n                                        status={\r\n                                            item.status === 'PENDING'\r\n                                                ? 'attention'\r\n                                                : item.status === 'APPROVED'\r\n                                                ? 'success'\r\n                                                : 'critical'\r\n                                        }>\r\n                                        {item.status}\r\n                                    </Badge>\r\n                                </Table.Cell>\r\n                                <Table.Cell className=\"actions-cell\">\r\n                                    <Popup\r\n                                        content=\"Approve payment\"\r\n                                        trigger={\r\n                                            <Icon\r\n                                                className=\"accept\"\r\n                                                name=\"check\"\r\n                                                onClick={() => {\r\n                                                    setState({\r\n                                                        ...state,\r\n                                                        customerId: item.customerId\r\n                                                    })\r\n                                                    handleChange()\r\n                                                }}\r\n                                            />\r\n                                        }\r\n                                    />\r\n                                    <Popup\r\n                                        content=\"Decline payment\"\r\n                                        trigger={<Icon className=\"decline\" name=\"remove\" />}\r\n                                    />\r\n                                </Table.Cell>\r\n                            </Table.Row>\r\n                        ))}\r\n                </Table.Body>\r\n            </Table>\r\n            <div style={{ height: '500px' }}>\r\n                <Modal\r\n                    open={active}\r\n                    onClose={handleChange}\r\n                    title=\"Choose products\"\r\n                    primaryAction={{\r\n                        content: 'Proceed',\r\n                        onAction: handleChange\r\n                    }}>\r\n                    <Modal.Section>\r\n                        <Table celled striped selectable>\r\n                            <Table.Header>\r\n                                <Table.Row>\r\n                                    <Table.HeaderCell>Products</Table.HeaderCell>\r\n                                    <Table.HeaderCell>Description</Table.HeaderCell>\r\n                                    <Table.HeaderCell textAlign=\"center\">Price</Table.HeaderCell>\r\n                                </Table.Row>\r\n                            </Table.Header>\r\n                            <Table.Body>\r\n                                {productItems &&\r\n                                    productItems\r\n                                        .filter((product) => {\r\n                                            if (searchValue == null) {\r\n                                                return product\r\n                                            } else if (\r\n                                                product.node.title\r\n                                                    .toLowerCase()\r\n                                                    .includes(searchValue.toLowerCase())\r\n                                            ) {\r\n                                                return product\r\n                                            }\r\n                                        })\r\n                                        .map((product) => (\r\n                                            <Table.Row\r\n                                                key={product.node.id}\r\n                                                onClick={() => {\r\n                                                    if (rowId.includes(product.node.id)) {\r\n                                                        setRowId(\r\n                                                            rowId.filter(\r\n                                                                (id) => id !== product.node.id\r\n                                                            )\r\n                                                        )\r\n                                                        setState({\r\n                                                            products: state.products.filter(\r\n                                                                (filteredProduct) =>\r\n                                                                    filteredProduct.node.id !==\r\n                                                                    product.node.id\r\n                                                            )\r\n                                                        })\r\n                                                    } else {\r\n                                                        setRowId([...rowId, product.node.id])\r\n                                                        setState({\r\n                                                            products: [...state.products, product]\r\n                                                        })\r\n                                                    }\r\n                                                }}>\r\n                                                <Table.Cell>\r\n                                                    <Header\r\n                                                        as=\"h4\"\r\n                                                        image\r\n                                                        className=\"product-header\">\r\n                                                        <Checkbox\r\n                                                            checked={\r\n                                                                rowId.includes(product.node.id) &&\r\n                                                                true\r\n                                                            }\r\n                                                        />\r\n                                                        <Thumbnail\r\n                                                            source={\r\n                                                                product.node.images.edges[0] &&\r\n                                                                product.node.images.edges[0].node\r\n                                                                    .originalSrc\r\n                                                            }\r\n                                                            size=\"small\"\r\n                                                            alt=\"\"\r\n                                                        />\r\n                                                        <Header.Content>\r\n                                                            {product.node.title}\r\n                                                        </Header.Content>\r\n                                                    </Header>\r\n                                                </Table.Cell>\r\n                                                <Table.Cell>\r\n                                                    <TextStyle variation=\"subdued\">\r\n                                                        {product.node.description}\r\n                                                    </TextStyle>\r\n                                                </Table.Cell>\r\n                                                <Table.Cell textAlign=\"center\">\r\n                                                    <TextStyle variation=\"subdued\">\r\n                                                        {product.node.variants.edges[0] &&\r\n                                                            toCurrency(\r\n                                                                product.node.variants.edges[0].node\r\n                                                                    .price\r\n                                                            )}\r\n                                                    </TextStyle>\r\n                                                </Table.Cell>\r\n                                            </Table.Row>\r\n                                        ))}\r\n                            </Table.Body>\r\n                            <Table.Footer fullWidth>\r\n                                <Table.Row></Table.Row>\r\n                            </Table.Footer>\r\n                        </Table>\r\n                    </Modal.Section>\r\n                </Modal>\r\n            </div>\r\n        </Page>\r\n    )\r\n}\r\n\r\nexport async function getStaticProps() {\r\n    let result\r\n    let products\r\n    try {\r\n        result = await API.graphql(graphqlOperation(listPaymentRequest))\r\n        products = await axios({\r\n            url: 'https://transactions-avanta.myshopify.com/admin/api/2020-07/graphql.json',\r\n            method: 'post',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'X-Shopify-Access-Token': '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'\r\n            },\r\n            data: {\r\n                query: print(listProducts)\r\n            }\r\n        })\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n\r\n    if (result.errors || products.errors) {\r\n        console.warn('Failed to fetch payment requests.', result.errors)\r\n        return { props: { paymentRequests: [], products: [] } }\r\n    }\r\n    if (result.data !== null && products.data !== null) {\r\n        return {\r\n            props: { paymentRequests: result.data, products: products.data.data.products.edges }\r\n        }\r\n    }\r\n}\r\n\r\nexport default AcceptPayment\r\n"]},"metadata":{},"sourceType":"module"}