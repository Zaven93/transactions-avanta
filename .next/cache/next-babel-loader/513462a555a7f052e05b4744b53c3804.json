{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport withApollo from 'next-with-apollo';\nimport { InMemoryCache, ApolloLink, HttpLink, ApolloClient } from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nconst httpLink = new HttpLink({\n  uri: 'https://kytejmxrrrgahiikcodklhf6rq.appsync-api.us-east-1.amazonaws.com/graphql'\n});\nconst authLink = new ApolloLink((operation, forward) => {\n  operation.setContext({\n    headers: {\n      'x-api-key': 'da2-iwznaxe3h5bxznagzuctrhqekm'\n    }\n  }); // Call the next link in the middleware chain.\n\n  return forward(operation);\n});\nexport default withApollo(({\n  initialState\n}) => {\n  return new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n}, {\n  render: ({\n    Page,\n    props\n  }) => {\n    return __jsx(ApolloProvider, {\n      client: props.apollo\n    }, __jsx(Page, props));\n  }\n});","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/lib/withApollo.js"],"names":["withApollo","InMemoryCache","ApolloLink","HttpLink","ApolloClient","ApolloProvider","httpLink","uri","authLink","operation","forward","setContext","headers","initialState","link","concat","cache","restore","render","Page","props","apollo"],"mappings":";;AAAA,OAAOA,UAAP,MAAuB,kBAAvB;AACA,SAASC,aAAT,EAAwBC,UAAxB,EAAoCC,QAApC,EAA8CC,YAA9C,QAAkE,cAAlE;AACA,SAASC,cAAT,QAA+B,qBAA/B;AAEA,MAAMC,QAAQ,GAAG,IAAIH,QAAJ,CAAa;AAC1BI,EAAAA,GAAG,EAAE;AADqB,CAAb,CAAjB;AAIA,MAAMC,QAAQ,GAAG,IAAIN,UAAJ,CAAe,CAACO,SAAD,EAAYC,OAAZ,KAAwB;AACpDD,EAAAA,SAAS,CAACE,UAAV,CAAqB;AACjBC,IAAAA,OAAO,EAAE;AACL,mBAAa;AADR;AADQ,GAArB,EADoD,CAOpD;;AACA,SAAOF,OAAO,CAACD,SAAD,CAAd;AACH,CATgB,CAAjB;AAWA,eAAeT,UAAU,CACrB,CAAC;AAAEa,EAAAA;AAAF,CAAD,KAAsB;AAClB,SAAO,IAAIT,YAAJ,CAAiB;AACpBU,IAAAA,IAAI,EAAEN,QAAQ,CAACO,MAAT,CAAgBT,QAAhB,CADc;AAEpBU,IAAAA,KAAK,EAAE,IAAIf,aAAJ,GAAoBgB,OAApB,CAA4BJ,YAAY,IAAI,EAA5C;AAFa,GAAjB,CAAP;AAIH,CANoB,EAOrB;AACIK,EAAAA,MAAM,EAAE,CAAC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAD,KAAqB;AACzB,WACI,MAAC,cAAD;AAAgB,MAAA,MAAM,EAAEA,KAAK,CAACC;AAA9B,OACI,MAAC,IAAD,EAAUD,KAAV,CADJ,CADJ;AAKH;AAPL,CAPqB,CAAzB","sourcesContent":["import withApollo from 'next-with-apollo'\r\nimport { InMemoryCache, ApolloLink, HttpLink, ApolloClient } from 'apollo-boost'\r\nimport { ApolloProvider } from '@apollo/react-hooks'\r\n\r\nconst httpLink = new HttpLink({\r\n    uri: 'https://kytejmxrrrgahiikcodklhf6rq.appsync-api.us-east-1.amazonaws.com/graphql'\r\n})\r\n\r\nconst authLink = new ApolloLink((operation, forward) => {\r\n    operation.setContext({\r\n        headers: {\r\n            'x-api-key': 'da2-iwznaxe3h5bxznagzuctrhqekm'\r\n        }\r\n    })\r\n\r\n    // Call the next link in the middleware chain.\r\n    return forward(operation)\r\n})\r\n\r\nexport default withApollo(\r\n    ({ initialState }) => {\r\n        return new ApolloClient({\r\n            link: authLink.concat(httpLink),\r\n            cache: new InMemoryCache().restore(initialState || {})\r\n        })\r\n    },\r\n    {\r\n        render: ({ Page, props }) => {\r\n            return (\r\n                <ApolloProvider client={props.apollo}>\r\n                    <Page {...props} />\r\n                </ApolloProvider>\r\n            )\r\n        }\r\n    }\r\n)\r\n"]},"metadata":{},"sourceType":"module"}