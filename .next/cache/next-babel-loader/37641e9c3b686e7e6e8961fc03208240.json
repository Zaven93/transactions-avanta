{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject9() {\n  var data = _taggedTemplateLiteral([\"\\n    subscription onDeleteBranchProduct {\\n        onDeleteBranchProduct {\\n            id\\n        }\\n    }\\n\"]);\n\n  _templateObject9 = function _templateObject9() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject8() {\n  var data = _taggedTemplateLiteral([\"\\n    subscription onUpdateBranchProduct {\\n        onUpdateBranchProduct {\\n            id\\n        }\\n    }\\n\"]);\n\n  _templateObject8 = function _templateObject8() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject7() {\n  var data = _taggedTemplateLiteral([\"\\n    subscription onCreateBranchProduct {\\n        onCreateBranchProduct {\\n            id\\n        }\\n    }\\n\"]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation deleteBranchProduct($input: DeleteBranchProductInput!) {\\n        deleteBranchProduct(input: $input) {\\n            id\\n        }\\n    }\\n\"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation updateBranchProduct($input: UpdateBranchProductInput!) {\\n        updateBranchProduct(input: $input) {\\n            id\\n            tags\\n            branchId\\n            productId\\n        }\\n    }\\n\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n    query getBranch($id: ID!) {\\n        getBranch(id: $id) {\\n            transactions(sortDirection: DESC) {\\n                items {\\n                    branchId\\n                    createdAt\\n                    currency\\n                    note\\n                    customer {\\n                        email\\n                        id\\n                        firstName\\n                        lastName\\n                        phone\\n                    }\\n                    totalBonusAmount\\n                    totalPrice\\n                    updatedAt\\n                    sortDate\\n                }\\n            }\\n            branchName\\n            adminId\\n            id\\n            branchProducts {\\n                items {\\n                    branchId\\n                    createdAt\\n                    id\\n                    productId\\n                    tags\\n                    updatedAt\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation productUpdate($input: ProductInput!) {\\n        productUpdate(input: $input) {\\n            product {\\n                id\\n                metafields(first: 100) {\\n                    edges {\\n                        node {\\n                            namespace\\n                            key\\n                            value\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation createBranchProduct($input: CreateBranchProductInput!) {\\n        createBranchProduct(input: $input) {\\n            id\\n            branchId\\n            productId\\n            tags\\n        }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query Products {\\n        products(first: 100) {\\n            edges {\\n                node {\\n                    id\\n                    title\\n                    tags\\n                    description(truncateAt: 100)\\n                    variants(first: 1) {\\n                        edges {\\n                            node {\\n                                id\\n                                price\\n                            }\\n                        }\\n                    }\\n                    images(first: 1) {\\n                        edges {\\n                            node {\\n                                originalSrc\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { Modal, Thumbnail, Checkbox, TextStyle } from '@shopify/polaris';\nimport { Table, Header } from 'semantic-ui-react';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nimport BranchRow from './BranchRow';\nimport { subscribe } from 'graphql';\nAPI.configure(config);\nvar listProducts = gql(_templateObject());\nvar createBranchProduct = gql(_templateObject2());\nvar productUpdate = gql(_templateObject3());\nvar getBranchById = gql(_templateObject4());\nvar updateBranchProduct = gql(_templateObject5());\nvar deleteBranchProduct = gql(_templateObject6());\nvar onCreateBranchProduct = gql(_templateObject7());\nvar onUpdateBranchProduct = gql(_templateObject8());\nvar onDeleteBranchProduct = gql(_templateObject9());\n\nvar ProductsList = function ProductsList(_ref) {\n  _s();\n\n  var active = _ref.active,\n      handleChange = _ref.handleChange,\n      branchId = _ref.branchId,\n      branchName = _ref.branchName;\n\n  var _useQuery = useQuery(listProducts),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  var _useState = useState(''),\n      branchProductSubscription = _useState[0],\n      setBranchProductSubscription = _useState[1];\n\n  var _useState2 = useState([]),\n      rowId = _useState2[0],\n      setRowId = _useState2[1];\n\n  var _useState3 = useState({\n    products: []\n  }),\n      state = _useState3[0],\n      setState = _useState3[1];\n\n  var _useState4 = useState(null),\n      searchValue = _useState4[0],\n      setSearchValue = _useState4[1];\n\n  var _useState5 = useState(''),\n      branchInfo = _useState5[0],\n      setBranchInfo = _useState5[1];\n\n  var handleSearchInput = useCallback(function (newValue) {\n    return setSearchValue(newValue);\n  }, []);\n\n  var getBranch = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var branch;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return API.graphql(graphqlOperation(getBranchById, {\n                id: branchId\n              }));\n\n            case 3:\n              branch = _context.sent;\n              setBranchInfo(branch.data.getBranch);\n              setRowId([].concat(_toConsumableArray(rowId), _toConsumableArray(branch.data.getBranch.branchProducts.items.map(function (item) {\n                return item.productId;\n              }))));\n              setState({\n                products: [].concat(_toConsumableArray(state.products), _toConsumableArray(branch.data.getBranch.branchProducts.items.map(function (product) {\n                  return {\n                    id: product.productId\n                  };\n                })))\n              });\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 9]]);\n    }));\n\n    return function getBranch() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    getBranch();\n    var createListener = API.graphql(graphqlOperation(onCreateBranchProduct)).subscribe({\n      next: function next(createdBranchProduct) {\n        return setBranchProductSubscription(createdBranchProduct);\n      }\n    });\n    var updateListener = API.graphql(graphqlOperation(onUpdateBranchProduct)).subscribe({\n      next: function next(updatedBranchProduct) {\n        return setBranchProductSubscription(updatedBranchProduct);\n      }\n    });\n    var deleteListener = API.graphql(graphqlOperation(onDeleteBranchProduct)).subscribe({\n      next: function next(deletedBranchProduct) {\n        return setBranchProductSubscription(deletedBranchProduct);\n      }\n    });\n    return function () {\n      createListener.unsubscribe();\n      updateListener.unsubscribe();\n      deleteListener.unsubscribe();\n    };\n  }, [branchId, branchProductSubscription]);\n\n  if (loading) {\n    return __jsx(\"div\", null, \"Loading products...\");\n  }\n\n  if (error) {\n    return __jsx(\"div\", null, \"Some error occured\");\n  }\n\n  console.log('Branch info from BranchProducts', branchInfo);\n  console.log('Products from state in BranchProducts', state.products);\n\n  var deleteProductsFromBranch = function deleteProductsFromBranch() {\n    var productsToDeleteFromBranch = branchInfo.branchProducts.items.filter(function (branchProduct) {\n      return !state.products.map(function (product) {\n        return product.id;\n      }).includes(branchProduct.productId);\n    });\n    console.log('Products that are not included in products array', productsToDeleteFromBranch);\n    Promise.all(productsToDeleteFromBranch.map(function (deleteProduct) {\n      API.graphql(graphqlOperation(deleteBranchProduct, {\n        input: {\n          id: deleteProduct.id\n        }\n      }));\n    }))[\"catch\"](function (err) {\n      return console.log(err);\n    });\n    return;\n  };\n\n  var addProductsToBranch = function addProductsToBranch() {\n    Promise.all(state.products.map(function (product) {\n      var updatedProduct = branchInfo.branchProducts.items.filter(function (branchProduct) {\n        return branchProduct.productId === product.id;\n      })[0];\n\n      if (updatedProduct) {\n        console.log('Yes it containes products that should be updated', updatedProduct);\n        API.graphql(graphqlOperation(updateBranchProduct, {\n          input: {\n            id: updatedProduct.id,\n            tags: product.tags\n          }\n        }));\n      } else {\n        console.log(\"No it doesn't contain the product that should be updated\");\n        API.graphql(graphqlOperation(createBranchProduct, {\n          input: {\n            id: uuidv4(),\n            branchId: branchId,\n            productId: product.id,\n            tags: product.tags\n          }\n        }));\n      }\n    }))[\"catch\"](function (err) {\n      return console.log(err);\n    });\n    return;\n  }; // const updateProducts = async () => {\n  //     try {\n  //         await axios({\n  //             url: 'http://localhost:3000/updateProduct',\n  //             method: 'POST',\n  //             data: {\n  //                 products: state.products\n  //             }\n  //         })\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // }\n\n\n  console.log('State data from product list', state);\n  console.log('BranchInfo from modalZaven jan', branchInfo);\n  return __jsx(Modal, {\n    open: active,\n    onClose: function onClose() {\n      return handleChange();\n    },\n    title: \"Choose products\",\n    primaryAction: {\n      content: 'Save changes',\n      onAction: function onAction() {\n        addProductsToBranch();\n        deleteProductsFromBranch(); // updateProducts()\n\n        handleChange();\n      }\n    }\n  }, __jsx(Modal.Section, null, __jsx(Table, {\n    celled: true,\n    striped: true,\n    selectable: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Products\"), __jsx(Table.HeaderCell, {\n    textAlign: \"center\"\n  }, \"Price\"), __jsx(Table.HeaderCell, null, \"Bonus Percentage\"))), __jsx(Table.Body, null, data && branchInfo && data.products.edges // .filter((product) => {\n  //     if (searchValue == null) {\n  //         return product\n  //     } else if (\n  //         product.node.title\n  //             .toLowerCase()\n  //             .includes(searchValue.toLowerCase())\n  //     ) {\n  //         return product\n  //     }\n  // })\n  .map(function (product) {\n    return __jsx(BranchRow, {\n      rowId: rowId,\n      setRowId: setRowId,\n      branchInfo: branchInfo,\n      branchId: branchId,\n      product: product,\n      state: state,\n      setState: setState\n    }) // <Table.Row\n    //     key={product.node.id}\n    //     >\n    //     <Table.Cell>\n    //         <Header as=\"h4\" image className=\"product-header\">\n    //             <Checkbox\n    //                 checked={\n    //                     rowId.includes(product.node.id) && true\n    //                 }\n    //                 onClick={() => {\n    //                     if (rowId.includes(product.node.id)) {\n    //                         setRowId(\n    //                             rowId.filter((id) => id !== product.node.id)\n    //                         )\n    //                         setState({\n    //                             products: state.products.filter(\n    //                                 (filteredProduct) =>\n    //                                     filteredProduct.node.id !==\n    //                                     product.node.id\n    //                             )\n    //                         })\n    //                     } else {\n    //                         setRowId([...rowId, product.node.id])\n    //                         setState({\n    //                             ...state,\n    //                             products: [...state.products, product]\n    //                         })\n    //                     }\n    //                 }}\n    //             />\n    //             <Thumbnail\n    //                 source={\n    //                     product.node.images.edges[0] &&\n    //                     product.node.images.edges[0].node\n    //                         .originalSrc\n    //                 }\n    //                 size=\"small\"\n    //                 alt=\"\"\n    //             />\n    //             <Header.Content>\n    //                 {product.node.title}\n    //             </Header.Content>\n    //         </Header>\n    //     </Table.Cell>\n    //     <Table.Cell>\n    //         <TextStyle variation=\"subdued\">\n    //             {product.node.description}\n    //         </TextStyle>\n    //     </Table.Cell>\n    //     <Table.Cell textAlign=\"center\">\n    //         <TextStyle variation=\"subdued\">\n    //             {product.node.variants.edges[0] &&\n    //                 toCurrency(\n    //                     product.node.variants.edges[0].node.price\n    //                 )}\n    //         </TextStyle>\n    //     </Table.Cell>\n    // </Table.Row>\n    ;\n  })), __jsx(Table.Footer, {\n    fullWidth: true\n  }, __jsx(Table.Row, null)))));\n};\n\n_s(ProductsList, \"NZ+0/FWPyVeavK6tD8Tw8CanLYc=\", false, function () {\n  return [useQuery];\n});\n\n_c = ProductsList;\nexport default ProductsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductsList\");","map":{"version":3,"sources":["/var/www/transactions-avanta/components/BranchProducts.js"],"names":["React","useState","useCallback","useEffect","axios","v4","uuidv4","API","graphqlOperation","gql","useQuery","Modal","Thumbnail","Checkbox","TextStyle","Table","Header","toCurrency","formatDate","config","BranchRow","subscribe","configure","listProducts","createBranchProduct","productUpdate","getBranchById","updateBranchProduct","deleteBranchProduct","onCreateBranchProduct","onUpdateBranchProduct","onDeleteBranchProduct","ProductsList","active","handleChange","branchId","branchName","loading","error","data","branchProductSubscription","setBranchProductSubscription","rowId","setRowId","products","state","setState","searchValue","setSearchValue","branchInfo","setBranchInfo","handleSearchInput","newValue","getBranch","graphql","id","branch","branchProducts","items","map","item","productId","product","console","log","createListener","next","createdBranchProduct","updateListener","updatedBranchProduct","deleteListener","deletedBranchProduct","unsubscribe","deleteProductsFromBranch","productsToDeleteFromBranch","filter","branchProduct","includes","Promise","all","deleteProduct","input","err","addProductsToBranch","updatedProduct","tags","content","onAction","edges"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\nimport axios from 'axios'\nimport { v4 as uuidv4 } from 'uuid'\nimport { API, graphqlOperation } from 'aws-amplify'\nimport gql from 'graphql-tag'\nimport { useQuery } from '@apollo/client'\nimport { Modal, Thumbnail, Checkbox, TextStyle } from '@shopify/polaris'\nimport { Table, Header } from 'semantic-ui-react'\nimport { toCurrency, formatDate } from '../utils/helper'\nimport config from '../aws-exports'\nimport BranchRow from './BranchRow'\nimport { subscribe } from 'graphql'\n\nAPI.configure(config)\n\nconst listProducts = gql`\n    query Products {\n        products(first: 100) {\n            edges {\n                node {\n                    id\n                    title\n                    tags\n                    description(truncateAt: 100)\n                    variants(first: 1) {\n                        edges {\n                            node {\n                                id\n                                price\n                            }\n                        }\n                    }\n                    images(first: 1) {\n                        edges {\n                            node {\n                                originalSrc\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n`\n\nconst createBranchProduct = gql`\n    mutation createBranchProduct($input: CreateBranchProductInput!) {\n        createBranchProduct(input: $input) {\n            id\n            branchId\n            productId\n            tags\n        }\n    }\n`\nconst productUpdate = gql`\n    mutation productUpdate($input: ProductInput!) {\n        productUpdate(input: $input) {\n            product {\n                id\n                metafields(first: 100) {\n                    edges {\n                        node {\n                            namespace\n                            key\n                            value\n                        }\n                    }\n                }\n            }\n        }\n    }\n`\nconst getBranchById = gql`\n    query getBranch($id: ID!) {\n        getBranch(id: $id) {\n            transactions(sortDirection: DESC) {\n                items {\n                    branchId\n                    createdAt\n                    currency\n                    note\n                    customer {\n                        email\n                        id\n                        firstName\n                        lastName\n                        phone\n                    }\n                    totalBonusAmount\n                    totalPrice\n                    updatedAt\n                    sortDate\n                }\n            }\n            branchName\n            adminId\n            id\n            branchProducts {\n                items {\n                    branchId\n                    createdAt\n                    id\n                    productId\n                    tags\n                    updatedAt\n                }\n            }\n        }\n    }\n`\n\nconst updateBranchProduct = gql`\n    mutation updateBranchProduct($input: UpdateBranchProductInput!) {\n        updateBranchProduct(input: $input) {\n            id\n            tags\n            branchId\n            productId\n        }\n    }\n`\n\nconst deleteBranchProduct = gql`\n    mutation deleteBranchProduct($input: DeleteBranchProductInput!) {\n        deleteBranchProduct(input: $input) {\n            id\n        }\n    }\n`\n\nconst onCreateBranchProduct = gql`\n    subscription onCreateBranchProduct {\n        onCreateBranchProduct {\n            id\n        }\n    }\n`\nconst onUpdateBranchProduct = gql`\n    subscription onUpdateBranchProduct {\n        onUpdateBranchProduct {\n            id\n        }\n    }\n`\n\nconst onDeleteBranchProduct = gql`\n    subscription onDeleteBranchProduct {\n        onDeleteBranchProduct {\n            id\n        }\n    }\n`\n\nconst ProductsList = ({ active, handleChange, branchId, branchName }) => {\n    const { loading, error, data } = useQuery(listProducts)\n    const [branchProductSubscription, setBranchProductSubscription] = useState('')\n    const [rowId, setRowId] = useState([])\n    const [state, setState] = useState({\n        products: []\n    })\n    const [searchValue, setSearchValue] = useState(null)\n    const [branchInfo, setBranchInfo] = useState('')\n    const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\n\n    const getBranch = async () => {\n        try {\n            const branch = await API.graphql(graphqlOperation(getBranchById, { id: branchId }))\n            setBranchInfo(branch.data.getBranch)\n            setRowId([\n                ...rowId,\n                ...branch.data.getBranch.branchProducts.items.map((item) => item.productId)\n            ])\n            setState({\n                products: [\n                    ...state.products,\n                    ...branch.data.getBranch.branchProducts.items.map((product) => ({\n                        id: product.productId\n                    }))\n                ]\n            })\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    useEffect(() => {\n        getBranch()\n\n        const createListener = API.graphql(graphqlOperation(onCreateBranchProduct)).subscribe({\n            next: (createdBranchProduct) => setBranchProductSubscription(createdBranchProduct)\n        })\n        const updateListener = API.graphql(graphqlOperation(onUpdateBranchProduct)).subscribe({\n            next: (updatedBranchProduct) => setBranchProductSubscription(updatedBranchProduct)\n        })\n        const deleteListener = API.graphql(graphqlOperation(onDeleteBranchProduct)).subscribe({\n            next: (deletedBranchProduct) => setBranchProductSubscription(deletedBranchProduct)\n        })\n\n        return () => {\n            createListener.unsubscribe()\n            updateListener.unsubscribe()\n            deleteListener.unsubscribe()\n        }\n    }, [branchId, branchProductSubscription])\n\n    if (loading) {\n        return <div>Loading products...</div>\n    }\n\n    if (error) {\n        return <div>Some error occured</div>\n    }\n\n    console.log('Branch info from BranchProducts', branchInfo)\n    console.log('Products from state in BranchProducts', state.products)\n\n    const deleteProductsFromBranch = () => {\n        const productsToDeleteFromBranch = branchInfo.branchProducts.items.filter(\n            (branchProduct) =>\n                !state.products.map((product) => product.id).includes(branchProduct.productId)\n        )\n        console.log('Products that are not included in products array', productsToDeleteFromBranch)\n        Promise.all(\n            productsToDeleteFromBranch.map((deleteProduct) => {\n                API.graphql(\n                    graphqlOperation(deleteBranchProduct, { input: { id: deleteProduct.id } })\n                )\n            })\n        ).catch((err) => console.log(err))\n        return\n    }\n\n    const addProductsToBranch = () => {\n        Promise.all(\n            state.products.map((product) => {\n                const updatedProduct = branchInfo.branchProducts.items.filter(\n                    (branchProduct) => branchProduct.productId === product.id\n                )[0]\n                if (updatedProduct) {\n                    console.log('Yes it containes products that should be updated', updatedProduct)\n                    API.graphql(\n                        graphqlOperation(updateBranchProduct, {\n                            input: {\n                                id: updatedProduct.id,\n                                tags: product.tags\n                            }\n                        })\n                    )\n                } else {\n                    console.log(\"No it doesn't contain the product that should be updated\")\n                    API.graphql(\n                        graphqlOperation(createBranchProduct, {\n                            input: {\n                                id: uuidv4(),\n                                branchId: branchId,\n                                productId: product.id,\n                                tags: product.tags\n                            }\n                        })\n                    )\n                }\n            })\n        ).catch((err) => console.log(err))\n        return\n    }\n\n    // const updateProducts = async () => {\n    //     try {\n    //         await axios({\n    //             url: 'http://localhost:3000/updateProduct',\n    //             method: 'POST',\n    //             data: {\n    //                 products: state.products\n    //             }\n    //         })\n    //     } catch (error) {\n    //         console.log(error)\n    //     }\n    // }\n\n    console.log('State data from product list', state)\n    console.log('BranchInfo from modalZaven jan', branchInfo)\n\n    return (\n        <Modal\n            open={active}\n            onClose={() => handleChange()}\n            title=\"Choose products\"\n            primaryAction={{\n                content: 'Save changes',\n                onAction: () => {\n                    addProductsToBranch()\n                    deleteProductsFromBranch()\n                    // updateProducts()\n                    handleChange()\n                }\n            }}>\n            <Modal.Section>\n                <Table celled striped selectable>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>Products</Table.HeaderCell>\n                            <Table.HeaderCell textAlign=\"center\">Price</Table.HeaderCell>\n                            <Table.HeaderCell>Bonus Percentage</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {data &&\n                            branchInfo &&\n                            data.products.edges\n                                // .filter((product) => {\n                                //     if (searchValue == null) {\n                                //         return product\n                                //     } else if (\n                                //         product.node.title\n                                //             .toLowerCase()\n                                //             .includes(searchValue.toLowerCase())\n                                //     ) {\n                                //         return product\n                                //     }\n                                // })\n                                .map((product) => (\n                                    <BranchRow\n                                        rowId={rowId}\n                                        setRowId={setRowId}\n                                        branchInfo={branchInfo}\n                                        branchId={branchId}\n                                        product={product}\n                                        state={state}\n                                        setState={setState}\n                                    />\n                                    // <Table.Row\n                                    //     key={product.node.id}\n                                    //     >\n                                    //     <Table.Cell>\n                                    //         <Header as=\"h4\" image className=\"product-header\">\n                                    //             <Checkbox\n                                    //                 checked={\n                                    //                     rowId.includes(product.node.id) && true\n                                    //                 }\n                                    //                 onClick={() => {\n                                    //                     if (rowId.includes(product.node.id)) {\n                                    //                         setRowId(\n                                    //                             rowId.filter((id) => id !== product.node.id)\n                                    //                         )\n                                    //                         setState({\n                                    //                             products: state.products.filter(\n                                    //                                 (filteredProduct) =>\n                                    //                                     filteredProduct.node.id !==\n                                    //                                     product.node.id\n                                    //                             )\n                                    //                         })\n                                    //                     } else {\n                                    //                         setRowId([...rowId, product.node.id])\n                                    //                         setState({\n                                    //                             ...state,\n                                    //                             products: [...state.products, product]\n                                    //                         })\n                                    //                     }\n                                    //                 }}\n                                    //             />\n                                    //             <Thumbnail\n                                    //                 source={\n                                    //                     product.node.images.edges[0] &&\n                                    //                     product.node.images.edges[0].node\n                                    //                         .originalSrc\n                                    //                 }\n                                    //                 size=\"small\"\n                                    //                 alt=\"\"\n                                    //             />\n                                    //             <Header.Content>\n                                    //                 {product.node.title}\n                                    //             </Header.Content>\n                                    //         </Header>\n                                    //     </Table.Cell>\n                                    //     <Table.Cell>\n                                    //         <TextStyle variation=\"subdued\">\n                                    //             {product.node.description}\n                                    //         </TextStyle>\n                                    //     </Table.Cell>\n                                    //     <Table.Cell textAlign=\"center\">\n                                    //         <TextStyle variation=\"subdued\">\n                                    //             {product.node.variants.edges[0] &&\n                                    //                 toCurrency(\n                                    //                     product.node.variants.edges[0].node.price\n                                    //                 )}\n                                    //         </TextStyle>\n                                    //     </Table.Cell>\n                                    // </Table.Row>\n                                ))}\n                    </Table.Body>\n                    <Table.Footer fullWidth>\n                        <Table.Row></Table.Row>\n                    </Table.Footer>\n                </Table>\n            </Modal.Section>\n        </Modal>\n    )\n}\n\nexport default ProductsList\n"]},"metadata":{},"sourceType":"module"}