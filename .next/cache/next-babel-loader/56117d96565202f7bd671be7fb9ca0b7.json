{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation deleteBranch($input: DeleteBranchInput!) {\\n    deleteBranch(input: $input) {\\n      id\\n    }\\n  }\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  subscription onDeleteBranch {\\n    onDeleteBranch {\\n      id\\n    }\\n  }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  subscription onCreateBranch {\\n    onCreateBranch {\\n      adminId\\n      branchName\\n      id\\n      createdAt\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query listBranchs {\\n    listBranchs {\\n      items {\\n        adminId\\n        branchName\\n        branchUsername\\n        createdAt\\n        id\\n        branchProducts {\\n          items {\\n            branchId\\n            createdAt\\n            id\\n            productId\\n            tags\\n            updatedAt\\n          }\\n        }\\n        branchPaymentRequests {\\n          items {\\n            branchId\\n            id\\n          }\\n        }\\n        transactions {\\n          items {\\n            branchId\\n            id\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport AWS from \"aws-sdk\";\nimport { Auth, API, graphqlOperation } from \"aws-amplify\";\nimport createApp from \"@shopify/app-bridge\";\nimport { Redirect } from \"@shopify/app-bridge/actions\";\nimport gql from \"graphql-tag\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { Page, Button, Modal, Form, FormLayout, TextField, Badge } from \"@shopify/polaris\";\nimport { Table, Popup, Header, Icon } from \"semantic-ui-react\";\nimport ProductList from \"./ProductsList\";\nimport { formatDate } from \"../utils/helper\";\nimport config from \"../aws-exports\";\nimport BranchProducts from \"./BranchProducts\";\nimport AdminBranchInfo from \"../components/AdminBranchInfo\";\nAPI.configure(config);\nAWS.config.update({\n  accessKeyId: \"AKIAI53OMMWOAP5X3K5Q\",\n  secretAccessKey: \"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\",\n  region: \"us-east-1\"\n});\nvar cognito = new AWS.CognitoIdentityServiceProvider();\nvar listBranchs = gql(_templateObject());\nvar onCreateBranchSubscription = gql(_templateObject2());\nvar onDeleteBranchSubscription = gql(_templateObject3());\nvar removeBranch = gql(_templateObject4());\n\nvar BranchList = function BranchList(_ref) {\n  _s();\n\n  var setBranchId = _ref.setBranchId,\n      branchId = _ref.branchId;\n\n  var _useState = useState(false),\n      active = _useState[0],\n      setActive = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      branches = _useState2[0],\n      setBranches = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      branchName = _useState3[0],\n      setBranchName = _useState3[1];\n\n  var _useState4 = useState(\"\"),\n      productBranchId = _useState4[0],\n      setProductBranchId = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      newCreatedBranch = _useState5[0],\n      setNewCreatedBranch = _useState5[1];\n\n  var app = createApp({\n    apiKey: \"3b01063bac3031d13101100ef3e44fd5\",\n    shopOrigin: \"transactions-avanta.myshopify.com\"\n  });\n  var redirect = Redirect.create(app);\n\n  var handleChange = function handleChange() {\n    setActive(!active);\n  };\n\n  var fetchBranches = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var getBranches;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return API.graphql(graphqlOperation(listBranchs));\n\n            case 3:\n              getBranches = _context.sent;\n              setBranches(getBranches.data);\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 7]]);\n    }));\n\n    return function fetchBranches() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var deleteBranch = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id) {\n      var branchToDelete, transactionsToDelete, productsToDelete, paymentRequestToDelete, deletedBranch;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              branchToDelete = branches.listBranchs.items.filter(function (item) {\n                return item.id === id;\n              })[0];\n              transactionsToDelete = branchToDelete.transactions.items ? branchToDelete.transactions.items.map(function (transaction) {\n                return transaction.id;\n              }) : \"\";\n              productsToDelete = branchToDelete.branchProducts.items ? branchToDelete.branchProducts.items.map(function (product) {\n                return product.id;\n              }) : \"\";\n              paymentRequestToDelete = branchToDelete.branchPaymentRequests.items ? branchToDelete.branchPaymentRequests.items.map(function (paymentRequest) {\n                return paymentRequest.id;\n              }) : \"\";\n              console.log(\"Transactions to delete\", transactionsToDelete);\n              console.log(\"Products to delete\", productsToDelete);\n              console.log(\"Payment requests to delete\", paymentRequestToDelete);\n              _context2.prev = 7;\n              _context2.next = 10;\n              return API.graphql(graphqlOperation(removeBranch, {\n                input: {\n                  id: id\n                }\n              }));\n\n            case 10:\n              deletedBranch = _context2.sent;\n              console.log(\"Deleted branch\", deletedBranch); //   const deleteTransactions = await Promise.all(\n              // ).catch((err) => console.log(err))\n\n              _context2.next = 17;\n              break;\n\n            case 14:\n              _context2.prev = 14;\n              _context2.t0 = _context2[\"catch\"](7);\n              console.log(_context2.t0);\n\n            case 17:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[7, 14]]);\n    }));\n\n    return function deleteBranch(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var deleteUserFromCognito = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(username) {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return cognito.adminDeleteUser({\n                UserPoolId: \"us-east-1_IfrnnzGFR\",\n                Username: username\n              }).promise();\n\n            case 3:\n              _context3.next = 8;\n              break;\n\n            case 5:\n              _context3.prev = 5;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.log(_context3.t0);\n\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[0, 5]]);\n    }));\n\n    return function deleteUserFromCognito(_x2) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    fetchBranches();\n    API.graphql(graphqlOperation(onCreateBranchSubscription)).subscribe({\n      next: function next(createdBranch) {\n        setNewCreatedBranch(createdBranch);\n      }\n    });\n    API.graphql(graphqlOperation(onDeleteBranchSubscription)).subscribe({\n      next: function next(deletedBranch) {\n        setNewCreatedBranch(deletedBranch);\n      }\n    });\n  }, [newCreatedBranch]);\n  console.log(\"Branches from Branch list\", branches);\n  return __jsx(React.Fragment, null, __jsx(Table, {\n    selectable: true,\n    celled: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Branch Name\"), __jsx(Table.HeaderCell, {\n    textAlign: \"center\"\n  }, \"Created At\"), __jsx(Table.HeaderCell, {\n    textAlign: \"center\"\n  }, \"Actions\"))), __jsx(Table.Body, null, branches && branches.listBranchs.items.map(function (item) {\n    return __jsx(Table.Row, {\n      key: item.id\n    }, __jsx(Table.Cell, null, __jsx(Button, {\n      primary: true,\n      onClick: function onClick() {\n        setBranchId(item.id); // redirect.dispatch(\n        //     Redirect.Action.ADMIN_PATH,\n        //     `/apps/3b01063bac3031d13101100ef3e44fd5/branch/${item.id}`\n        // )\n      }\n    }, __jsx(Icon, {\n      name: \"code branch\"\n    }), \" \", item.branchName)), __jsx(Table.Cell, {\n      textAlign: \"center\"\n    }, formatDate(item.createdAt)), __jsx(Table.Cell, {\n      textAlign: \"center\",\n      className: \"branch-actions\"\n    }, __jsx(Popup, {\n      content: \"Edit branch\",\n      trigger: __jsx(Icon, {\n        onClick: function onClick() {\n          setProductBranchId(item.id);\n          setBranchName(item.branchName);\n          handleChange();\n        },\n        className: \"edit-branch\",\n        name: \"edit outline\"\n      })\n    }), __jsx(Popup, {\n      content: \"Delete Branch\",\n      trigger: __jsx(Icon, {\n        className: \"remove-branch\",\n        name: \"trash alternate\",\n        onClick: function onClick() {\n          deleteBranch(item.id);\n          deleteUserFromCognito(item.branchUsername);\n        }\n      })\n    })));\n  }))), __jsx(BranchProducts, {\n    branchName: branchName,\n    branchId: productBranchId,\n    active: active,\n    handleChange: handleChange\n  }));\n};\n\n_s(BranchList, \"oLUDjR7KPbpwaDVXrguFKhSOWks=\");\n\n_c = BranchList;\nexport default BranchList;\n\nvar _c;\n\n$RefreshReg$(_c, \"BranchList\");","map":{"version":3,"sources":["/var/www/transactions-avanta/components/BranchList.js"],"names":["React","useState","useEffect","useCallback","AWS","Auth","API","graphqlOperation","createApp","Redirect","gql","v4","uuidv4","Page","Button","Modal","Form","FormLayout","TextField","Badge","Table","Popup","Header","Icon","ProductList","formatDate","config","BranchProducts","AdminBranchInfo","configure","update","accessKeyId","secretAccessKey","region","cognito","CognitoIdentityServiceProvider","listBranchs","onCreateBranchSubscription","onDeleteBranchSubscription","removeBranch","BranchList","setBranchId","branchId","active","setActive","branches","setBranches","branchName","setBranchName","productBranchId","setProductBranchId","newCreatedBranch","setNewCreatedBranch","app","apiKey","shopOrigin","redirect","create","handleChange","fetchBranches","graphql","getBranches","data","console","log","deleteBranch","id","branchToDelete","items","filter","item","transactionsToDelete","transactions","map","transaction","productsToDelete","branchProducts","product","paymentRequestToDelete","branchPaymentRequests","paymentRequest","input","deletedBranch","deleteUserFromCognito","username","adminDeleteUser","UserPoolId","Username","promise","subscribe","next","createdBranch","createdAt","branchUsername"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\"\nimport AWS from \"aws-sdk\"\nimport { Auth, API, graphqlOperation } from \"aws-amplify\"\nimport createApp from \"@shopify/app-bridge\"\nimport { Redirect } from \"@shopify/app-bridge/actions\"\nimport gql from \"graphql-tag\"\nimport { v4 as uuidv4 } from \"uuid\"\nimport { Page, Button, Modal, Form, FormLayout, TextField, Badge } from \"@shopify/polaris\"\nimport { Table, Popup, Header, Icon } from \"semantic-ui-react\"\nimport ProductList from \"./ProductsList\"\nimport { formatDate } from \"../utils/helper\"\nimport config from \"../aws-exports\"\nimport BranchProducts from \"./BranchProducts\"\nimport AdminBranchInfo from \"../components/AdminBranchInfo\"\n\nAPI.configure(config)\n\nAWS.config.update({\n  accessKeyId: \"AKIAI53OMMWOAP5X3K5Q\",\n  secretAccessKey: \"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\",\n  region: \"us-east-1\",\n})\n\nconst cognito = new AWS.CognitoIdentityServiceProvider()\n\nconst listBranchs = gql`\n  query listBranchs {\n    listBranchs {\n      items {\n        adminId\n        branchName\n        branchUsername\n        createdAt\n        id\n        branchProducts {\n          items {\n            branchId\n            createdAt\n            id\n            productId\n            tags\n            updatedAt\n          }\n        }\n        branchPaymentRequests {\n          items {\n            branchId\n            id\n          }\n        }\n        transactions {\n          items {\n            branchId\n            id\n          }\n        }\n      }\n    }\n  }\n`\nconst onCreateBranchSubscription = gql`\n  subscription onCreateBranch {\n    onCreateBranch {\n      adminId\n      branchName\n      id\n      createdAt\n    }\n  }\n`\n\nconst onDeleteBranchSubscription = gql`\n  subscription onDeleteBranch {\n    onDeleteBranch {\n      id\n    }\n  }\n`\n\nconst removeBranch = gql`\n  mutation deleteBranch($input: DeleteBranchInput!) {\n    deleteBranch(input: $input) {\n      id\n    }\n  }\n`\n\nconst BranchList = ({ setBranchId, branchId }) => {\n  const [active, setActive] = useState(false)\n  const [branches, setBranches] = useState(\"\")\n  const [branchName, setBranchName] = useState(\"\")\n  const [productBranchId, setProductBranchId] = useState(\"\")\n  const [newCreatedBranch, setNewCreatedBranch] = useState(\"\")\n\n  const app = createApp({\n    apiKey: \"3b01063bac3031d13101100ef3e44fd5\",\n    shopOrigin: \"transactions-avanta.myshopify.com\",\n  })\n\n  const redirect = Redirect.create(app)\n\n  const handleChange = () => {\n    setActive(!active)\n  }\n\n  const fetchBranches = async () => {\n    try {\n      const getBranches = await API.graphql(graphqlOperation(listBranchs))\n      setBranches(getBranches.data)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const deleteBranch = async (id) => {\n    const branchToDelete = branches.listBranchs.items.filter((item) => item.id === id)[0]\n    const transactionsToDelete = branchToDelete.transactions.items\n      ? branchToDelete.transactions.items.map((transaction) => transaction.id)\n      : \"\"\n    const productsToDelete = branchToDelete.branchProducts.items\n      ? branchToDelete.branchProducts.items.map((product) => product.id)\n      : \"\"\n    const paymentRequestToDelete = branchToDelete.branchPaymentRequests.items\n      ? branchToDelete.branchPaymentRequests.items.map((paymentRequest) => paymentRequest.id)\n      : \"\"\n\n    console.log(\"Transactions to delete\", transactionsToDelete)\n    console.log(\"Products to delete\", productsToDelete)\n    console.log(\"Payment requests to delete\", paymentRequestToDelete)\n    try {\n      const deletedBranch = await API.graphql(graphqlOperation(removeBranch, { input: { id } }))\n      console.log(\"Deleted branch\", deletedBranch)\n      //   const deleteTransactions = await Promise.all(\n      // ).catch((err) => console.log(err))\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const deleteUserFromCognito = async (username) => {\n    try {\n      await cognito\n        .adminDeleteUser({\n          UserPoolId: \"us-east-1_IfrnnzGFR\",\n          Username: username,\n        })\n        .promise()\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    fetchBranches()\n    API.graphql(graphqlOperation(onCreateBranchSubscription)).subscribe({\n      next: (createdBranch) => {\n        setNewCreatedBranch(createdBranch)\n      },\n    })\n    API.graphql(graphqlOperation(onDeleteBranchSubscription)).subscribe({\n      next: (deletedBranch) => {\n        setNewCreatedBranch(deletedBranch)\n      },\n    })\n  }, [newCreatedBranch])\n\n  console.log(\"Branches from Branch list\", branches)\n\n  return (\n    <>\n      <Table selectable celled>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Branch Name</Table.HeaderCell>\n            <Table.HeaderCell textAlign=\"center\">Created At</Table.HeaderCell>\n            <Table.HeaderCell textAlign=\"center\">Actions</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {branches &&\n            branches.listBranchs.items.map((item) => (\n              <Table.Row key={item.id}>\n                <Table.Cell>\n                  {/* <Badge size=\"medium\" status=\"info\">\n                                        {item.branchName}\n                                    </Badge> */}\n                  <Button\n                    primary\n                    onClick={() => {\n                      setBranchId(item.id)\n                      // redirect.dispatch(\n                      //     Redirect.Action.ADMIN_PATH,\n                      //     `/apps/3b01063bac3031d13101100ef3e44fd5/branch/${item.id}`\n                      // )\n                    }}>\n                    <Icon name=\"code branch\" /> {item.branchName}\n                  </Button>\n                </Table.Cell>\n                <Table.Cell textAlign=\"center\">{formatDate(item.createdAt)}</Table.Cell>\n                <Table.Cell textAlign=\"center\" className=\"branch-actions\">\n                  <Popup\n                    content=\"Edit branch\"\n                    trigger={\n                      <Icon\n                        onClick={() => {\n                          setProductBranchId(item.id)\n                          setBranchName(item.branchName)\n                          handleChange()\n                        }}\n                        className=\"edit-branch\"\n                        name=\"edit outline\"\n                      />\n                    }\n                  />\n                  <Popup\n                    content=\"Delete Branch\"\n                    trigger={\n                      <Icon\n                        className=\"remove-branch\"\n                        name=\"trash alternate\"\n                        onClick={() => {\n                          deleteBranch(item.id)\n                          deleteUserFromCognito(item.branchUsername)\n                        }}\n                      />\n                    }\n                  />\n                </Table.Cell>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n      <BranchProducts\n        branchName={branchName}\n        branchId={productBranchId}\n        active={active}\n        handleChange={handleChange}\n      />\n    </>\n  )\n}\n\nexport default BranchList\n"]},"metadata":{},"sourceType":"module"}