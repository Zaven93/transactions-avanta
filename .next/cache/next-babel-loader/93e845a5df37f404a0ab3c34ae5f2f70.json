{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport axios from 'axios';\nimport { useRouter } from 'next/router';\nimport { Auth, API, graphqlOperation } from 'aws-amplify';\nimport createApp from '@shopify/app-bridge';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport gql from 'graphql-tag';\nimport { Card, DataTable, Button, Page, Pagination, TextField, ChoiceList, Filters, Icon, Stack } from '@shopify/polaris';\nimport { SearchMajorMonotone, TransactionMajorMonotone, BalanceMajorMonotone, LogOutMinor } from '@shopify/polaris-icons';\nimport { toCurrency, formatDate, extractNumbersFromString } from '../utils/helper';\nimport config from '../aws-exports';\nimport Login from '../components/Login';\nimport BranchConsole from '../components/BranchConsole';\nimport PaymentRequest from '../components/PaymentRequest';\nAPI.configure(config);\nconst branchByAdminId = gql`\n    query branchByAdminId($adminId: ID!) {\n        branchByAdminId(adminId: $adminId) {\n            items {\n                adminId\n                branchName\n                id\n                transactions {\n                    items {\n                        branchId\n                        createdAt\n                        currency\n                        id\n                        note\n                        customer {\n                            email\n                            firstName\n                            id\n                            lastName\n                            phone\n                        }\n                        products {\n                            bonusPercentage\n                            id\n                            image\n                            priceAmount\n                            priceCurrency\n                            title\n                        }\n                        sortDate\n                        totalBonusAmount\n                        totalPrice\n                        updatedAt\n                    }\n                }\n                branchProducts {\n                    items {\n                        branchId\n                        createdAt\n                        id\n                        productId\n                        tags\n                    }\n                }\n            }\n        }\n    }\n`;\nconst onCreateTransaction = gql`\n    subscription onCreateTransaction {\n        onCreateTransaction {\n            id\n        }\n    }\n`;\n\nconst BranchData = ({\n  user,\n  updateUser\n}) => {\n  const {\n    0: branchInfo,\n    1: setBranchInfo\n  } = useState('');\n  const {\n    0: searchValue,\n    1: setSearchValue\n  } = useState(null);\n  const {\n    0: newCreatedTransaction,\n    1: setNewCreatedTransaction\n  } = useState('');\n  const {\n    0: showPaymentRequest,\n    1: setShowPaymentRequest\n  } = useState(false); // const [transactionItems, setTransactionItems] = useState(transactions.listTransactions.items)\n  // const [nextPaginateToken, setNextPaginateToken] = useState(\n  //     transactions.listTransactions.nextToken\n  // )\n  // const [previousPaginateTokens, setPreviousPaginateTokens] = useState([])\n\n  const handleSearchInput = useCallback(newValue => setSearchValue(newValue), []);\n  const router = useRouter();\n  const app = createApp({\n    apiKey: '3b01063bac3031d13101100ef3e44fd5',\n    shopOrigin: 'transactions-avanta.myshopify.com'\n  });\n  const redirect = Redirect.create(app); // const paginateNext = async () => {\n  //     setPreviousPaginateTokens([...previousPaginateTokens, nextPaginateToken])\n  //     try {\n  //         const data = await API.graphql(\n  //             graphqlOperation(listTransactions, { limit: 5, nextToken: nextPaginateToken })\n  //         )\n  //         console.log('Data from pagination', data)\n  //         setTransactionItems(data.data.listTransactions.items)\n  //         setNextPaginateToken(data.data.listTransactions.nextToken)\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // }\n  // const paginatePrevious = async () => {\n  //     const previousToken =\n  //         previousPaginateTokens[\n  //             previousPaginateTokens.length === 1 ? 0 : previousPaginateTokens.length - 2\n  //         ]\n  //     setPreviousPaginateTokens([\n  //         ...previousPaginateTokens.slice(0, previousPaginateTokens.length - 1)\n  //     ])\n  //     try {\n  //         if (previousPaginateTokens.length === 1) {\n  //             const data = await API.graphql(graphqlOperation(listTransactions, { limit: 5 }))\n  //             setTransactionItems(data.data.listTransactions.items)\n  //             setNextPaginateToken(data.data.listTransactions.nextToken)\n  //         } else {\n  //             const data = await API.graphql(\n  //                 graphqlOperation(listTransactions, { limit: 5, nextToken: previousToken })\n  //             )\n  //             setTransactionItems(data.data.listTransactions.items)\n  //             setNextPaginateToken(data.data.listTransactions.nextToken)\n  //         }\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // }\n\n  const getBranch = async () => {\n    try {\n      const fetchBranch = await API.graphql(graphqlOperation(branchByAdminId, {\n        adminId: user.attributes.sub\n      }));\n      setBranchInfo(fetchBranch.data.branchByAdminId.items[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getBranch();\n    API.graphql(graphqlOperation(onCreateTransaction)).subscribe({\n      next: createdTransaction => setNewCreatedTransaction(createdTransaction)\n    });\n  }, [newCreatedTransaction]);\n  console.log('Branch data user', user);\n  console.log('Branch info', branchInfo);\n  return __jsx(React.Fragment, null, showPaymentRequest ? __jsx(PaymentRequest, null) : __jsx(Page, {\n    title: branchInfo && branchInfo.branchName\n  }, __jsx(TextField, {\n    label: \"Search Product\",\n    value: searchValue,\n    onChange: handleSearchInput,\n    prefix: __jsx(Icon, {\n      source: SearchMajorMonotone\n    }),\n    placeholder: \"Search by Customer phone number\"\n  }), __jsx(Stack, null, __jsx(Stack.Item, {\n    fill: true\n  }, __jsx(Button, {\n    id: \"Accept-Payment\",\n    onClick: () => // redirect.dispatch(\n    //     Redirect.Action.ADMIN_PATH,\n    //     '/apps/3b01063bac3031d13101100ef3e44fd5/accept-payment'\n    // )\n    setShowPaymentRequest(true)\n  }, __jsx(Icon, {\n    source: BalanceMajorMonotone\n  }), \" Accept Payment\")), __jsx(Stack.Item, null, __jsx(Button, {\n    id: \"Create-Transaction\",\n    primary: true,\n    onClick: () => redirect.dispatch(Redirect.Action.REMOTE, {\n      // url: `https://dev.d3ivgpkzuz6hkr.amplifyapp.com?adminId=${user.attributes.sub}`,\n      url: `http://localhost:3001/transactions/${user.attributes.sub}`,\n      newContext: true\n    })\n  }, __jsx(Icon, {\n    source: TransactionMajorMonotone\n  }), \" Create transaction\")), __jsx(Stack.Item, null, __jsx(Button, {\n    primary: true,\n    id: \"Logout\",\n    onClick: () => {\n      Auth.signOut();\n      updateUser(null);\n    }\n  }, __jsx(Icon, {\n    source: LogOutMinor\n  }), \" Logout\"))), branchInfo && __jsx(Card, null, __jsx(DataTable, {\n    columnContentTypes: ['text', 'text', 'text', 'text'],\n    headings: ['Customer phone number', 'TotalPrice', 'TotalBonusAmount', 'Minus from Bonus Amount', 'CreatedAt'],\n    rows: branchInfo && branchInfo.transactions.items.filter(transaction => {\n      if (searchValue == null) {\n        return transaction;\n      } else if (transaction.customer[0].phone.toLowerCase().includes(searchValue.toLowerCase())) {\n        return transaction;\n      }\n    }).sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt)).map(transaction => [__jsx(Button, {\n      primary: true,\n      onClick: () => redirect.dispatch(Redirect.Action.ADMIN_PATH, {\n        path: `/customers/${transaction.customer[0].id}`,\n        newContext: true\n      })\n    }, transaction.customer[0].phone), toCurrency(Number(transaction.totalPrice)), toCurrency(Number(transaction.totalBonusAmount)), transaction.note === null ? '' : toCurrency(extractNumbersFromString(transaction.note)), formatDate(transaction.createdAt)])\n  }))));\n};\n\nexport default BranchData;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/components/BranchData.js"],"names":["React","useState","useCallback","useEffect","axios","useRouter","Auth","API","graphqlOperation","createApp","Redirect","gql","Card","DataTable","Button","Page","Pagination","TextField","ChoiceList","Filters","Icon","Stack","SearchMajorMonotone","TransactionMajorMonotone","BalanceMajorMonotone","LogOutMinor","toCurrency","formatDate","extractNumbersFromString","config","Login","BranchConsole","PaymentRequest","configure","branchByAdminId","onCreateTransaction","BranchData","user","updateUser","branchInfo","setBranchInfo","searchValue","setSearchValue","newCreatedTransaction","setNewCreatedTransaction","showPaymentRequest","setShowPaymentRequest","handleSearchInput","newValue","router","app","apiKey","shopOrigin","redirect","create","getBranch","fetchBranch","graphql","adminId","attributes","sub","data","items","error","console","log","subscribe","next","createdTransaction","branchName","dispatch","Action","REMOTE","url","newContext","signOut","transactions","filter","transaction","customer","phone","toLowerCase","includes","sort","a","b","Date","createdAt","map","ADMIN_PATH","path","id","Number","totalPrice","totalBonusAmount","note"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { useRouter } from 'next/router'\r\nimport { Auth, API, graphqlOperation } from 'aws-amplify'\r\nimport createApp from '@shopify/app-bridge'\r\nimport { Redirect } from '@shopify/app-bridge/actions'\r\nimport gql from 'graphql-tag'\r\nimport {\r\n    Card,\r\n    DataTable,\r\n    Button,\r\n    Page,\r\n    Pagination,\r\n    TextField,\r\n    ChoiceList,\r\n    Filters,\r\n    Icon,\r\n    Stack\r\n} from '@shopify/polaris'\r\nimport {\r\n    SearchMajorMonotone,\r\n    TransactionMajorMonotone,\r\n    BalanceMajorMonotone,\r\n    LogOutMinor\r\n} from '@shopify/polaris-icons'\r\nimport { toCurrency, formatDate, extractNumbersFromString } from '../utils/helper'\r\nimport config from '../aws-exports'\r\nimport Login from '../components/Login'\r\nimport BranchConsole from '../components/BranchConsole'\r\nimport PaymentRequest from '../components/PaymentRequest'\r\n\r\nAPI.configure(config)\r\n\r\nconst branchByAdminId = gql`\r\n    query branchByAdminId($adminId: ID!) {\r\n        branchByAdminId(adminId: $adminId) {\r\n            items {\r\n                adminId\r\n                branchName\r\n                id\r\n                transactions {\r\n                    items {\r\n                        branchId\r\n                        createdAt\r\n                        currency\r\n                        id\r\n                        note\r\n                        customer {\r\n                            email\r\n                            firstName\r\n                            id\r\n                            lastName\r\n                            phone\r\n                        }\r\n                        products {\r\n                            bonusPercentage\r\n                            id\r\n                            image\r\n                            priceAmount\r\n                            priceCurrency\r\n                            title\r\n                        }\r\n                        sortDate\r\n                        totalBonusAmount\r\n                        totalPrice\r\n                        updatedAt\r\n                    }\r\n                }\r\n                branchProducts {\r\n                    items {\r\n                        branchId\r\n                        createdAt\r\n                        id\r\n                        productId\r\n                        tags\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst onCreateTransaction = gql`\r\n    subscription onCreateTransaction {\r\n        onCreateTransaction {\r\n            id\r\n        }\r\n    }\r\n`\r\n\r\nconst BranchData = ({ user, updateUser }) => {\r\n    const [branchInfo, setBranchInfo] = useState('')\r\n    const [searchValue, setSearchValue] = useState(null)\r\n    const [newCreatedTransaction, setNewCreatedTransaction] = useState('')\r\n    const [showPaymentRequest, setShowPaymentRequest] = useState(false)\r\n    // const [transactionItems, setTransactionItems] = useState(transactions.listTransactions.items)\r\n    // const [nextPaginateToken, setNextPaginateToken] = useState(\r\n    //     transactions.listTransactions.nextToken\r\n    // )\r\n    // const [previousPaginateTokens, setPreviousPaginateTokens] = useState([])\r\n    const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\r\n\r\n    const router = useRouter()\r\n\r\n    const app = createApp({\r\n        apiKey: '3b01063bac3031d13101100ef3e44fd5',\r\n        shopOrigin: 'transactions-avanta.myshopify.com'\r\n    })\r\n\r\n    const redirect = Redirect.create(app)\r\n\r\n    // const paginateNext = async () => {\r\n    //     setPreviousPaginateTokens([...previousPaginateTokens, nextPaginateToken])\r\n    //     try {\r\n    //         const data = await API.graphql(\r\n    //             graphqlOperation(listTransactions, { limit: 5, nextToken: nextPaginateToken })\r\n    //         )\r\n\r\n    //         console.log('Data from pagination', data)\r\n    //         setTransactionItems(data.data.listTransactions.items)\r\n    //         setNextPaginateToken(data.data.listTransactions.nextToken)\r\n    //     } catch (error) {\r\n    //         console.log(error)\r\n    //     }\r\n    // }\r\n\r\n    // const paginatePrevious = async () => {\r\n    //     const previousToken =\r\n    //         previousPaginateTokens[\r\n    //             previousPaginateTokens.length === 1 ? 0 : previousPaginateTokens.length - 2\r\n    //         ]\r\n    //     setPreviousPaginateTokens([\r\n    //         ...previousPaginateTokens.slice(0, previousPaginateTokens.length - 1)\r\n    //     ])\r\n    //     try {\r\n    //         if (previousPaginateTokens.length === 1) {\r\n    //             const data = await API.graphql(graphqlOperation(listTransactions, { limit: 5 }))\r\n    //             setTransactionItems(data.data.listTransactions.items)\r\n    //             setNextPaginateToken(data.data.listTransactions.nextToken)\r\n    //         } else {\r\n    //             const data = await API.graphql(\r\n    //                 graphqlOperation(listTransactions, { limit: 5, nextToken: previousToken })\r\n    //             )\r\n    //             setTransactionItems(data.data.listTransactions.items)\r\n    //             setNextPaginateToken(data.data.listTransactions.nextToken)\r\n    //         }\r\n    //     } catch (error) {\r\n    //         console.log(error)\r\n    //     }\r\n    // }\r\n\r\n    const getBranch = async () => {\r\n        try {\r\n            const fetchBranch = await API.graphql(\r\n                graphqlOperation(branchByAdminId, { adminId: user.attributes.sub })\r\n            )\r\n            setBranchInfo(fetchBranch.data.branchByAdminId.items[0])\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getBranch()\r\n        API.graphql(graphqlOperation(onCreateTransaction)).subscribe({\r\n            next: (createdTransaction) => setNewCreatedTransaction(createdTransaction)\r\n        })\r\n    }, [newCreatedTransaction])\r\n\r\n    console.log('Branch data user', user)\r\n    console.log('Branch info', branchInfo)\r\n\r\n    return (\r\n        <>\r\n            {showPaymentRequest ? (\r\n                <PaymentRequest />\r\n            ) : (\r\n                <Page title={branchInfo && branchInfo.branchName}>\r\n                    <TextField\r\n                        label=\"Search Product\"\r\n                        value={searchValue}\r\n                        onChange={handleSearchInput}\r\n                        prefix={<Icon source={SearchMajorMonotone} />}\r\n                        placeholder=\"Search by Customer phone number\"\r\n                    />\r\n                    <Stack>\r\n                        <Stack.Item fill>\r\n                            <Button\r\n                                id=\"Accept-Payment\"\r\n                                onClick={() =>\r\n                                    // redirect.dispatch(\r\n                                    //     Redirect.Action.ADMIN_PATH,\r\n                                    //     '/apps/3b01063bac3031d13101100ef3e44fd5/accept-payment'\r\n                                    // )\r\n                                    setShowPaymentRequest(true)\r\n                                }>\r\n                                <Icon source={BalanceMajorMonotone} /> Accept Payment\r\n                            </Button>\r\n                        </Stack.Item>\r\n                        <Stack.Item>\r\n                            <Button\r\n                                id=\"Create-Transaction\"\r\n                                primary\r\n                                onClick={() =>\r\n                                    redirect.dispatch(Redirect.Action.REMOTE, {\r\n                                        // url: `https://dev.d3ivgpkzuz6hkr.amplifyapp.com?adminId=${user.attributes.sub}`,\r\n                                        url: `http://localhost:3001/transactions/${user.attributes.sub}`,\r\n                                        newContext: true\r\n                                    })\r\n                                }>\r\n                                <Icon source={TransactionMajorMonotone} /> Create transaction\r\n                            </Button>\r\n                        </Stack.Item>\r\n                        <Stack.Item>\r\n                            <Button\r\n                                primary\r\n                                id=\"Logout\"\r\n                                onClick={() => {\r\n                                    Auth.signOut()\r\n                                    updateUser(null)\r\n                                }}>\r\n                                <Icon source={LogOutMinor} /> Logout\r\n                            </Button>\r\n                        </Stack.Item>\r\n                    </Stack>\r\n                    {branchInfo && (\r\n                        <Card>\r\n                            <DataTable\r\n                                columnContentTypes={['text', 'text', 'text', 'text']}\r\n                                headings={[\r\n                                    'Customer phone number',\r\n                                    'TotalPrice',\r\n                                    'TotalBonusAmount',\r\n                                    'Minus from Bonus Amount',\r\n                                    'CreatedAt'\r\n                                ]}\r\n                                rows={\r\n                                    branchInfo &&\r\n                                    branchInfo.transactions.items\r\n                                        .filter((transaction) => {\r\n                                            if (searchValue == null) {\r\n                                                return transaction\r\n                                            } else if (\r\n                                                transaction.customer[0].phone\r\n                                                    .toLowerCase()\r\n                                                    .includes(searchValue.toLowerCase())\r\n                                            ) {\r\n                                                return transaction\r\n                                            }\r\n                                        })\r\n                                        .sort(\r\n                                            (a, b) => new Date(b.createdAt) - new Date(a.createdAt)\r\n                                        )\r\n                                        .map((transaction) => [\r\n                                            <Button\r\n                                                primary\r\n                                                onClick={() =>\r\n                                                    redirect.dispatch(Redirect.Action.ADMIN_PATH, {\r\n                                                        path: `/customers/${transaction.customer[0].id}`,\r\n                                                        newContext: true\r\n                                                    })\r\n                                                }>\r\n                                                {transaction.customer[0].phone}\r\n                                            </Button>,\r\n                                            toCurrency(Number(transaction.totalPrice)),\r\n                                            toCurrency(Number(transaction.totalBonusAmount)),\r\n                                            transaction.note === null\r\n                                                ? ''\r\n                                                : toCurrency(\r\n                                                      extractNumbersFromString(transaction.note)\r\n                                                  ),\r\n                                            formatDate(transaction.createdAt)\r\n                                        ])\r\n                                }\r\n                            />\r\n                            {/* <Pagination\r\n                        hasPrevious={previousPaginateTokens.length > 0}\r\n                        onPrevious={paginatePrevious}\r\n                        hasNext={nextPaginateToken}\r\n                        onNext={paginateNext}\r\n                    /> */}\r\n                        </Card>\r\n                    )}\r\n                </Page>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BranchData\r\n"]},"metadata":{},"sourceType":"module"}