{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query getBranch($id: ID!) {\\n        getBranch(id: $id) {\\n            transactions(sortDirection: DESC) {\\n                items {\\n                    branchId\\n                    createdAt\\n                    currency\\n                    note\\n                    customer {\\n                        email\\n                        id\\n                        firstName\\n                        lastName\\n                        phone\\n                    }\\n                    totalBonusAmount\\n                    totalPrice\\n                    updatedAt\\n                    sortDate\\n                }\\n            }\\n            branchName\\n            adminId\\n            id\\n            branchProducts {\\n                items {\\n                    branchId\\n                    createdAt\\n                    id\\n                    productId\\n                    tags\\n                    updatedAt\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport axios from 'axios';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { Modal, Thumbnail, Checkbox, TextStyle, TextField } from '@shopify/polaris';\nimport { Table, Header, Icon } from 'semantic-ui-react';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nAPI.configure(config);\nvar getBranchById = gql(_templateObject());\n\nvar BranchRow = function BranchRow(_ref) {\n  _s();\n\n  var product = _ref.product,\n      state = _ref.state,\n      setState = _ref.setState,\n      branchId = _ref.branchId,\n      branchInfo = _ref.branchInfo;\n\n  var _useState = useState({\n    description: product.node.description,\n    id: product.node.id,\n    image: product.node.images.edges[0] ? product.node.images.edges[0].node.originalSrc : '',\n    tags: product.node.tags,\n    title: product.node.title,\n    variants: {\n      id: product.node.variants.edges[0].node.id,\n      price: product.node.variants.edges[0].node.price\n    }\n  }),\n      fetchedProduct = _useState[0],\n      setFetchedProduct = _useState[1]; // const [branchInfo, setBranchInfo] = useState('')\n\n\n  var _useState2 = useState(''),\n      rowId = _useState2[0],\n      setRowId = _useState2[1];\n\n  var _useState3 = useState(null),\n      searchValue = _useState3[0],\n      setSearchValue = _useState3[1];\n\n  var _useState4 = useState(''),\n      bonus = _useState4[0],\n      setBonus = _useState4[1];\n\n  var _useState5 = useState(false),\n      checked = _useState5[0],\n      setChecked = _useState5[1];\n\n  var handleSearchInput = useCallback(function (newValue) {\n    return setSearchValue(newValue);\n  }, []);\n  var handleBonus = useCallback(function (value) {\n    setBonus(value);\n    fetchedProduct.tags = [value];\n    setFetchedProduct(fetchedProduct);\n  }, []);\n\n  var compareProduct = function compareProduct(branchProducts) {\n    var comparedProduct = branchProducts.items.filter(function (branchProduct) {\n      return branchProduct.productId === fetchedProduct.id;\n    });\n    console.log('Here is your compared product', comparedProduct);\n\n    if (!comparedProduct) {\n      return;\n    }\n\n    setBonus(comparedProduct[0].tags[0]);\n    return;\n  }; // const getBranch = async () => {\n  //     try {\n  //         const branch = await API.graphql(graphqlOperation(getBranchById, { id: branchId }))\n  //         setBranchInfo(branch.data.getBranch)\n  //         setRowId(\n  //             branch.data.getBranch.branchProducts.items\n  //                 .map((item) => item.productId)\n  //                 .filter((productId) => productId === fetchedProduct.id)[0]\n  //         )\n  //         setState({\n  //             products: [\n  //                 ...state.products,\n  //                 ...branch.data.getBranch.branchProducts.items.filter(\n  //                     (product) => product.productId === fetchedProduct.id\n  //                 )[0]\n  //             ]\n  //         })\n  //         compareProduct(branch.data.getBranch.branchProducts)\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // }\n\n\n  useEffect(function () {\n    setRowId(branchInfo.branchProducts.items.map(function (item) {\n      return item.productId;\n    }).filter(function (productId) {\n      return productId === fetchedProduct.id;\n    }));\n    compareProduct(branchInfo.branchProducts);\n  }, [branchInfo]);\n  console.log('Product from branch row', fetchedProduct);\n  console.log('State from branch from Branch Row', state);\n  console.log('Row id', rowId);\n  console.log('Branch info from branch Row', branchInfo);\n  return __jsx(Table.Row, {\n    key: fetchedProduct.id\n  }, __jsx(Table.Cell, null, __jsx(Header, {\n    as: \"h4\",\n    image: true,\n    className: \"product-header\"\n  }, __jsx(Checkbox, {\n    checked: rowId,\n    onChange: function onChange() {\n      if (rowId) {\n        setRowId('');\n        setState({\n          products: state.products.filter(function (filteredProduct) {\n            if (!filteredProduct) {\n              return;\n            }\n\n            filteredProduct.node.id !== fetchedProduct.id;\n          })\n        });\n      } else {\n        setRowId(fetchedProduct.id);\n        setState(_objectSpread(_objectSpread({}, state), {}, {\n          products: [].concat(_toConsumableArray(state.products), [fetchedProduct])\n        }));\n      }\n    }\n  }), __jsx(Thumbnail, {\n    source: fetchedProduct.image,\n    size: \"small\",\n    alt: \"\"\n  }), __jsx(Header.Content, null, fetchedProduct.title))), __jsx(Table.Cell, {\n    textAlign: \"center\"\n  }, __jsx(TextStyle, {\n    variation: \"subdued\"\n  }, fetchedProduct.variants && toCurrency(fetchedProduct.variants.price))), __jsx(Table.Cell, null, __jsx(TextField, {\n    id: \"percentage-input\",\n    placeholder: \"Bonus Percentage\",\n    value: bonus,\n    onChange: handleBonus,\n    prefix: __jsx(Icon, {\n      name: \"percent\"\n    }),\n    disabled: !rowId\n  })));\n};\n\n_s(BranchRow, \"kHp6QZtY7ffhDR0d/V3SmPdNiCI=\");\n\n_c = BranchRow;\nexport default BranchRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"BranchRow\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/components/BranchRow.js"],"names":["React","useState","useCallback","useEffect","axios","API","graphqlOperation","gql","useQuery","Modal","Thumbnail","Checkbox","TextStyle","TextField","Table","Header","Icon","toCurrency","formatDate","config","configure","getBranchById","BranchRow","product","state","setState","branchId","branchInfo","description","node","id","image","images","edges","originalSrc","tags","title","variants","price","fetchedProduct","setFetchedProduct","rowId","setRowId","searchValue","setSearchValue","bonus","setBonus","checked","setChecked","handleSearchInput","newValue","handleBonus","value","compareProduct","branchProducts","comparedProduct","items","filter","branchProduct","productId","console","log","map","item","products","filteredProduct"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { API, graphqlOperation } from 'aws-amplify'\r\nimport gql from 'graphql-tag'\r\nimport { useQuery } from '@apollo/client'\r\nimport { Modal, Thumbnail, Checkbox, TextStyle, TextField } from '@shopify/polaris'\r\nimport { Table, Header, Icon } from 'semantic-ui-react'\r\nimport { toCurrency, formatDate } from '../utils/helper'\r\nimport config from '../aws-exports'\r\n\r\nAPI.configure(config)\r\n\r\nconst getBranchById = gql`\r\n    query getBranch($id: ID!) {\r\n        getBranch(id: $id) {\r\n            transactions(sortDirection: DESC) {\r\n                items {\r\n                    branchId\r\n                    createdAt\r\n                    currency\r\n                    note\r\n                    customer {\r\n                        email\r\n                        id\r\n                        firstName\r\n                        lastName\r\n                        phone\r\n                    }\r\n                    totalBonusAmount\r\n                    totalPrice\r\n                    updatedAt\r\n                    sortDate\r\n                }\r\n            }\r\n            branchName\r\n            adminId\r\n            id\r\n            branchProducts {\r\n                items {\r\n                    branchId\r\n                    createdAt\r\n                    id\r\n                    productId\r\n                    tags\r\n                    updatedAt\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst BranchRow = ({ product, state, setState, branchId, branchInfo }) => {\r\n    const [fetchedProduct, setFetchedProduct] = useState({\r\n        description: product.node.description,\r\n        id: product.node.id,\r\n        image: product.node.images.edges[0] ? product.node.images.edges[0].node.originalSrc : '',\r\n        tags: product.node.tags,\r\n        title: product.node.title,\r\n        variants: {\r\n            id: product.node.variants.edges[0].node.id,\r\n            price: product.node.variants.edges[0].node.price\r\n        }\r\n    })\r\n    // const [branchInfo, setBranchInfo] = useState('')\r\n    const [rowId, setRowId] = useState('')\r\n    const [searchValue, setSearchValue] = useState(null)\r\n    const [bonus, setBonus] = useState('')\r\n    const [checked, setChecked] = useState(false)\r\n    const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\r\n\r\n    const handleBonus = useCallback((value) => {\r\n        setBonus(value)\r\n        fetchedProduct.tags = [value]\r\n        setFetchedProduct(fetchedProduct)\r\n    }, [])\r\n\r\n    const compareProduct = (branchProducts) => {\r\n        const comparedProduct = branchProducts.items.filter(\r\n            (branchProduct) => branchProduct.productId === fetchedProduct.id\r\n        )\r\n\r\n        console.log('Here is your compared product', comparedProduct)\r\n\r\n        if (!comparedProduct) {\r\n            return\r\n        }\r\n        setBonus(comparedProduct[0].tags[0])\r\n        return\r\n    }\r\n\r\n    // const getBranch = async () => {\r\n    //     try {\r\n    //         const branch = await API.graphql(graphqlOperation(getBranchById, { id: branchId }))\r\n    //         setBranchInfo(branch.data.getBranch)\r\n    //         setRowId(\r\n    //             branch.data.getBranch.branchProducts.items\r\n    //                 .map((item) => item.productId)\r\n    //                 .filter((productId) => productId === fetchedProduct.id)[0]\r\n    //         )\r\n    //         setState({\r\n    //             products: [\r\n    //                 ...state.products,\r\n    //                 ...branch.data.getBranch.branchProducts.items.filter(\r\n    //                     (product) => product.productId === fetchedProduct.id\r\n    //                 )[0]\r\n    //             ]\r\n    //         })\r\n    //         compareProduct(branch.data.getBranch.branchProducts)\r\n    //     } catch (error) {\r\n    //         console.log(error)\r\n    //     }\r\n    // }\r\n\r\n    useEffect(() => {\r\n        setRowId(\r\n            branchInfo.branchProducts.items\r\n                .map((item) => item.productId)\r\n                .filter((productId) => productId === fetchedProduct.id)\r\n        )\r\n        compareProduct(branchInfo.branchProducts)\r\n    }, [branchInfo])\r\n\r\n    console.log('Product from branch row', fetchedProduct)\r\n    console.log('State from branch from Branch Row', state)\r\n    console.log('Row id', rowId)\r\n    console.log('Branch info from branch Row', branchInfo)\r\n\r\n    return (\r\n        <Table.Row key={fetchedProduct.id}>\r\n            <Table.Cell>\r\n                <Header as=\"h4\" image className=\"product-header\">\r\n                    <Checkbox\r\n                        checked={rowId}\r\n                        onChange={() => {\r\n                            if (rowId) {\r\n                                setRowId('')\r\n                                setState({\r\n                                    products: state.products.filter((filteredProduct) => {\r\n                                        if (!filteredProduct) {\r\n                                            return\r\n                                        }\r\n                                        filteredProduct.node.id !== fetchedProduct.id\r\n                                    })\r\n                                })\r\n                            } else {\r\n                                setRowId(fetchedProduct.id)\r\n                                setState({\r\n                                    ...state,\r\n                                    products: [...state.products, fetchedProduct]\r\n                                })\r\n                            }\r\n                        }}\r\n                    />\r\n                    <Thumbnail source={fetchedProduct.image} size=\"small\" alt=\"\" />\r\n                    <Header.Content>{fetchedProduct.title}</Header.Content>\r\n                </Header>\r\n            </Table.Cell>\r\n            <Table.Cell textAlign=\"center\">\r\n                <TextStyle variation=\"subdued\">\r\n                    {fetchedProduct.variants && toCurrency(fetchedProduct.variants.price)}\r\n                </TextStyle>\r\n            </Table.Cell>\r\n            <Table.Cell>\r\n                <TextField\r\n                    id=\"percentage-input\"\r\n                    placeholder=\"Bonus Percentage\"\r\n                    value={bonus}\r\n                    onChange={handleBonus}\r\n                    prefix={<Icon name=\"percent\" />}\r\n                    disabled={!rowId}\r\n                />\r\n            </Table.Cell>\r\n        </Table.Row>\r\n    )\r\n}\r\n\r\nexport default BranchRow\r\n"]},"metadata":{},"sourceType":"module"}