{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { Auth, API, graphqlOperation } from \"aws-amplify\";\nimport { Page, Button, Modal, Badge, Stack } from \"@shopify/polaris\";\nimport { Table, Popup, Header, Icon } from \"semantic-ui-react\";\nimport { useForm } from \"react-hook-form\";\nimport { useConfirmSignUp, useSignUp, useCreateBranch, useListBranches } from \"../core/hooks\";\nimport ProductList from \"./ProductsList\";\nimport { formatDate } from \"../utils/helper\";\nimport BranchProducts from \"./BranchProducts\";\nimport BranchList from \"./BranchList\";\nimport AdminBranchInfo from \"./AdminBranchInfo\";\nimport { createBranch } from \"../graphql/mutation\";\nimport { listBranchs } from \"../graphql/queries\";\n\nconst BranchConsole = ({\n  updateUser\n}) => {\n  const {\n    0: active,\n    1: setActive\n  } = useState(false);\n  const {\n    0: activeFields,\n    1: setActiveFields\n  } = useState({\n    activeBranchName: false,\n    activeUsername: false,\n    activePassword: false,\n    activeEmail: false,\n    activeCode: false\n  });\n  const {\n    0: activeBranchName,\n    1: setActiveBranchName\n  } = useState(false);\n  const {\n    0: activeUsername,\n    1: setActiveUsername\n  } = useState(false);\n  const {\n    0: activePassword,\n    1: setActivePassword\n  } = useState(false);\n  const {\n    0: activeEmail,\n    1: setActiveEmail\n  } = useState(false);\n  const {\n    0: activeCode,\n    1: setActiveCode\n  } = useState(false);\n  const {\n    0: branchName,\n    1: setBranchName\n  } = useState(\"\");\n  const {\n    0: username,\n    1: setUsername\n  } = useState(\"\");\n  const {\n    0: password,\n    1: setPassword\n  } = useState(\"\");\n  const {\n    0: showPassword,\n    1: setShowPassword\n  } = useState(false);\n  const {\n    0: formType,\n    1: setFormType\n  } = useState(\"signUp\");\n  const {\n    0: userSub,\n    1: setUserSub\n  } = useState(null);\n  const {\n    0: branches,\n    1: setBranches\n  } = useState(\"\");\n  const {\n    0: branchId,\n    1: setBranchId\n  } = useState(null);\n  const {\n    signUserUp,\n    data\n  } = useSignUp();\n  const {\n    confirmSignUp,\n    data: confirmSignUpData,\n    error: confirmSignUpError\n  } = useConfirmSignUp();\n  const {\n    createBranch,\n    data: createdBranch\n  } = useCreateBranch();\n  const {\n    data: branchesData,\n    refetch: listBranches\n  } = useListBranches();\n  const {\n    handleSubmit,\n    errors,\n    register\n  } = useForm();\n\n  const handleChange = () => {\n    setActive(!active);\n  };\n\n  const onSubmit = data => {\n    const {\n      username,\n      password,\n      email\n    } = data;\n    console.log(\"Submitted data\", data);\n\n    try {\n      signUserUp({\n        username,\n        password,\n        email\n      });\n      setFormType(\"confirm\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const onConfirm = async data => {\n    const {\n      username,\n      code\n    } = data;\n\n    try {\n      await confirmSignUp({\n        username,\n        code\n      });\n      console.log(\"Confirmed signup data from function\", confirmSignUpData); // createBranch({ userSub, username, branchName })\n      // setFormType(\"signUp\")\n      // handleChange()\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    if (!confirmSignUpData) {\n      return;\n    }\n\n    if (confirmSignUpData !== \"SUCCESS\") {\n      return;\n    }\n\n    createBranch({\n      userSub,\n      username,\n      branchName\n    });\n    setFormType(\"signUp\");\n    handleChange();\n  }, [confirmSignUpData]);\n  useEffect(() => {\n    setUserSub(data && data.userSub);\n  }, [data]);\n  useEffect(() => {\n    listBranches();\n  }, []);\n  useEffect(() => {\n    setBranches(branchesData && branchesData.data);\n  }, [branchesData]);\n  console.log(\"Confirm sign up Data\", confirmSignUpData);\n  return __jsx(React.Fragment, null, branchId && __jsx(AdminBranchInfo, {\n    setBranchId: setBranchId,\n    branchId: branchId\n  }), !branchId && __jsx(React.Fragment, null, __jsx(Stack, null, __jsx(Stack.Item, {\n    fill: true\n  }, __jsx(Button, {\n    onClick: handleChange,\n    primary: true\n  }, __jsx(Icon, {\n    name: \"code branch\"\n  }), \" Create branch\")), __jsx(Stack.Item, null, __jsx(Button, {\n    primary: true,\n    id: \"Logout\",\n    onClick: () => {\n      Auth.signOut();\n      updateUser(null);\n    }\n  }, __jsx(Icon, {\n    name: \"sign out\"\n  }), \" Logout\"))), __jsx(BranchList, {\n    setBranchId: setBranchId\n  }), __jsx(Modal, {\n    open: active,\n    onClose: () => {\n      handleChange();\n    },\n    title: \"Fill in Branch info\"\n  }, __jsx(Modal.Section, null, formType === \"signUp\" && __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(\"div\", {\n    className: \"form-controll\"\n  }, __jsx(\"input\", {\n    name: \"branchName\",\n    onChange: e => setBranchName(e.target.value),\n    ref: register({\n      required: \"Branch name is required!\"\n    }),\n    onBlur: e => {\n      if (e.target.value) {\n        return setActiveFields(_objectSpread(_objectSpread({}, activeFields), {}, {\n          activeBranchName: true\n        }));\n      }\n\n      return setActiveFields(_objectSpread(_objectSpread({}, activeFields), {}, {\n        activeBranchName: false\n      }));\n    }\n  }), __jsx(Icon, {\n    name: \"code branch\"\n  }), __jsx(\"label\", {\n    className: activeFields.activeBranchName ? \"active\" : \"\",\n    htmlFor: \"branchName\"\n  }, \"Branch Name\"), errors.branchName && __jsx(\"p\", {\n    className: \"error-notification\"\n  }, errors.branchName.message)), __jsx(\"div\", {\n    className: \"form-controll\"\n  }, __jsx(\"input\", {\n    name: \"username\",\n    onChange: e => setUsername(e.target.value),\n    ref: register({\n      required: \"Username is required!\"\n    }),\n    onBlur: e => {\n      if (e.target.value) {\n        return setActiveFields(_objectSpread(_objectSpread({}, activeFields), {}, {\n          activeUsername: true\n        }));\n      }\n\n      return setActiveFields(_objectSpread(_objectSpread({}, activeFields), {}, {\n        activeUsername: false\n      }));\n    }\n  }), __jsx(Icon, {\n    name: \"user\"\n  }), __jsx(\"label\", {\n    className: activeFields.activeUsername ? \"active\" : \"\",\n    htmlFor: \"username\"\n  }, \"Username\"), errors.username && __jsx(\"p\", {\n    className: \"error-notification\"\n  }, errors.username.message)), __jsx(\"div\", {\n    className: \"form-controll\"\n  }, __jsx(\"input\", {\n    name: \"email\",\n    ref: register({\n      required: \"Email is required!\",\n      pattern: {\n        value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n        message: \"invalid email address\"\n      }\n    }),\n    onBlur: e => {\n      if (e.target.value) {\n        return setActiveFields(_objectSpread(_objectSpread({}, activeFields), {}, {\n          activeEmail: true\n        }));\n      }\n\n      return setActiveFields(_objectSpread(_objectSpread({}, activeFields), {}, {\n        activeEmail: false\n      }));\n    }\n  }), __jsx(Icon, {\n    name: \"mail\"\n  }), __jsx(\"label\", {\n    className: activeFields.activeEmail ? \"active\" : \"\",\n    htmlFor: \"email\"\n  }, \"Email\"), errors.email && __jsx(\"p\", {\n    className: \"error-notification\"\n  }, errors.email.message)), __jsx(\"div\", {\n    className: \"form-controll\"\n  }, __jsx(\"input\", {\n    name: \"password\",\n    type: showPassword ? \"text\" : \"password\",\n    ref: register({\n      required: \"Password is required!\",\n      minLength: {\n        value: 6,\n        message: \"Password must be at least 6 characters long\"\n      }\n    }),\n    onChange: e => setPassword(e.target.value),\n    onBlur: e => {\n      if (e.target.value) {\n        return setActiveFields(_objectSpread(_objectSpread({}, activeFields), {}, {\n          activePassword: true\n        }));\n      }\n\n      return setActiveFields(_objectSpread(_objectSpread({}, activeFields), {}, {\n        activePassword: false\n      }));\n    }\n  }), __jsx(Icon, {\n    name: \"lock\"\n  }), __jsx(\"label\", {\n    className: activeFields.activePassword ? \"active\" : \"\",\n    htmlFor: \"password\"\n  }, \"Password\"), __jsx(Icon, {\n    className: password ? \"show-eye\" : \"not-show-eye\",\n    onClick: () => setShowPassword(!showPassword),\n    name: showPassword ? \"eye slash\" : \"eye\",\n    style: {\n      color: showPassword ? \"#6774c8\" : \"\"\n    }\n  }), errors.password && __jsx(\"p\", {\n    className: \"error-notification\"\n  }, errors.password.message)), __jsx(Button, {\n    primary: true,\n    submit: true\n  }, __jsx(Icon, {\n    name: \"sign-in\"\n  }), \" Create Branch\")), formType === \"confirm\" && __jsx(\"form\", {\n    onSubmit: handleSubmit(onConfirm)\n  }, __jsx(\"div\", {\n    className: \"form-controll\"\n  }, __jsx(\"input\", {\n    name: \"username\",\n    value: username,\n    ref: register({\n      required: \"Username is required!\"\n    }),\n    onBlur: e => {\n      if (e.target.value) {\n        return setActiveFields(_objectSpread(_objectSpread({}, activeFields), {}, {\n          activeUsername: true\n        }));\n      }\n\n      return setActiveFields(_objectSpread(_objectSpread({}, activeFields), {}, {\n        activeUsername: false\n      }));\n    }\n  }), __jsx(Icon, {\n    name: \"user\"\n  }), __jsx(\"label\", {\n    className: activeUsername ? \"active\" : \"\",\n    htmlFor: \"username\"\n  }, \"Username\"), errors.username && __jsx(\"p\", {\n    className: \"error-notification\"\n  }, errors.username.message)), __jsx(\"div\", {\n    className: \"form-controll\"\n  }, __jsx(\"input\", {\n    name: \"code\",\n    ref: register({\n      required: \"Confirm code is required!\"\n    }),\n    onBlur: e => {\n      if (e.target.value) {\n        return setActiveFields(_objectSpread(_objectSpread({}, activeFields), {}, {\n          activeCode: true\n        }));\n      }\n\n      return setActiveFields(_objectSpread(_objectSpread({}, activeFields), {}, {\n        activeCode: false\n      }));\n    }\n  }), __jsx(Icon, {\n    name: \"unlock alternate\"\n  }), __jsx(\"label\", {\n    className: activeCode ? \"active\" : \"\",\n    htmlFor: \"code\"\n  }, \"Confirm code\"), errors.code && __jsx(\"p\", {\n    className: \"error-notification\"\n  }, errors.code.message)), __jsx(Button, {\n    primary: true,\n    submit: true\n  }, __jsx(Icon, {\n    name: \"sign-in\"\n  }), \" Confirm\"))))));\n};\n\nexport default BranchConsole;","map":{"version":3,"sources":["/var/www/transactions-avanta/components/BranchConsole.js"],"names":["React","useState","useEffect","useRef","useCallback","Auth","API","graphqlOperation","Page","Button","Modal","Badge","Stack","Table","Popup","Header","Icon","useForm","useConfirmSignUp","useSignUp","useCreateBranch","useListBranches","ProductList","formatDate","BranchProducts","BranchList","AdminBranchInfo","createBranch","listBranchs","BranchConsole","updateUser","active","setActive","activeFields","setActiveFields","activeBranchName","activeUsername","activePassword","activeEmail","activeCode","setActiveBranchName","setActiveUsername","setActivePassword","setActiveEmail","setActiveCode","branchName","setBranchName","username","setUsername","password","setPassword","showPassword","setShowPassword","formType","setFormType","userSub","setUserSub","branches","setBranches","branchId","setBranchId","signUserUp","data","confirmSignUp","confirmSignUpData","error","confirmSignUpError","createdBranch","branchesData","refetch","listBranches","handleSubmit","errors","register","handleChange","onSubmit","email","console","log","onConfirm","code","signOut","e","target","value","required","message","pattern","minLength","color"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from \"react\"\nimport { Auth, API, graphqlOperation } from \"aws-amplify\"\nimport { Page, Button, Modal, Badge, Stack } from \"@shopify/polaris\"\nimport { Table, Popup, Header, Icon } from \"semantic-ui-react\"\nimport { useForm } from \"react-hook-form\"\nimport { useConfirmSignUp, useSignUp, useCreateBranch, useListBranches } from \"../core/hooks\"\nimport ProductList from \"./ProductsList\"\nimport { formatDate } from \"../utils/helper\"\nimport BranchProducts from \"./BranchProducts\"\nimport BranchList from \"./BranchList\"\nimport AdminBranchInfo from \"./AdminBranchInfo\"\nimport { createBranch } from \"../graphql/mutation\"\nimport { listBranchs } from \"../graphql/queries\"\n\nconst BranchConsole = ({ updateUser }) => {\n  const [active, setActive] = useState(false)\n  const [activeFields, setActiveFields] = useState({\n    activeBranchName: false,\n    activeUsername: false,\n    activePassword: false,\n    activeEmail: false,\n    activeCode: false,\n  })\n  const [activeBranchName, setActiveBranchName] = useState(false)\n  const [activeUsername, setActiveUsername] = useState(false)\n  const [activePassword, setActivePassword] = useState(false)\n  const [activeEmail, setActiveEmail] = useState(false)\n  const [activeCode, setActiveCode] = useState(false)\n  const [branchName, setBranchName] = useState(\"\")\n  const [username, setUsername] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [showPassword, setShowPassword] = useState(false)\n  const [formType, setFormType] = useState(\"signUp\")\n  const [userSub, setUserSub] = useState(null)\n  const [branches, setBranches] = useState(\"\")\n  const [branchId, setBranchId] = useState(null)\n\n  const { signUserUp, data } = useSignUp()\n  const { confirmSignUp, data: confirmSignUpData, error: confirmSignUpError } = useConfirmSignUp()\n  const { createBranch, data: createdBranch } = useCreateBranch()\n  const { data: branchesData, refetch: listBranches } = useListBranches()\n  const { handleSubmit, errors, register } = useForm()\n\n  const handleChange = () => {\n    setActive(!active)\n  }\n\n  const onSubmit = (data) => {\n    const { username, password, email } = data\n    console.log(\"Submitted data\", data)\n    try {\n      signUserUp({ username, password, email })\n      setFormType(\"confirm\")\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const onConfirm = async (data) => {\n    const { username, code } = data\n    try {\n      await confirmSignUp({ username, code })\n\n      console.log(\"Confirmed signup data from function\", confirmSignUpData)\n      // createBranch({ userSub, username, branchName })\n      // setFormType(\"signUp\")\n      // handleChange()\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    if (!confirmSignUpData) {\n      return\n    }\n    if (confirmSignUpData !== \"SUCCESS\") {\n      return\n    }\n    createBranch({ userSub, username, branchName })\n    setFormType(\"signUp\")\n    handleChange()\n  }, [confirmSignUpData])\n\n  useEffect(() => {\n    setUserSub(data && data.userSub)\n  }, [data])\n\n  useEffect(() => {\n    listBranches()\n  }, [])\n\n  useEffect(() => {\n    setBranches(branchesData && branchesData.data)\n  }, [branchesData])\n\n  console.log(\"Confirm sign up Data\", confirmSignUpData)\n\n  return (\n    <>\n      {branchId && <AdminBranchInfo setBranchId={setBranchId} branchId={branchId} />}\n      {!branchId && (\n        <>\n          <Stack>\n            <Stack.Item fill>\n              <Button onClick={handleChange} primary>\n                <Icon name=\"code branch\" /> Create branch\n              </Button>\n            </Stack.Item>\n            <Stack.Item>\n              <Button\n                primary\n                id=\"Logout\"\n                onClick={() => {\n                  Auth.signOut()\n                  updateUser(null)\n                }}>\n                <Icon name=\"sign out\" /> Logout\n              </Button>\n            </Stack.Item>\n          </Stack>\n          <BranchList setBranchId={setBranchId} />\n          <Modal\n            open={active}\n            onClose={() => {\n              handleChange()\n            }}\n            title=\"Fill in Branch info\">\n            <Modal.Section>\n              {formType === \"signUp\" && (\n                <form onSubmit={handleSubmit(onSubmit)}>\n                  <div className=\"form-controll\">\n                    <input\n                      name=\"branchName\"\n                      onChange={(e) => setBranchName(e.target.value)}\n                      ref={register({ required: \"Branch name is required!\" })}\n                      onBlur={(e) => {\n                        if (e.target.value) {\n                          return setActiveFields({ ...activeFields, activeBranchName: true })\n                        }\n                        return setActiveFields({ ...activeFields, activeBranchName: false })\n                      }}\n                    />\n                    <Icon name=\"code branch\" />\n                    <label\n                      className={activeFields.activeBranchName ? \"active\" : \"\"}\n                      htmlFor=\"branchName\">\n                      Branch Name\n                    </label>\n                    {errors.branchName && (\n                      <p className=\"error-notification\">{errors.branchName.message}</p>\n                    )}\n                  </div>\n                  <div className=\"form-controll\">\n                    <input\n                      name=\"username\"\n                      onChange={(e) => setUsername(e.target.value)}\n                      ref={register({ required: \"Username is required!\" })}\n                      onBlur={(e) => {\n                        if (e.target.value) {\n                          return setActiveFields({ ...activeFields, activeUsername: true })\n                        }\n                        return setActiveFields({ ...activeFields, activeUsername: false })\n                      }}\n                    />\n                    <Icon name=\"user\" />\n                    <label\n                      className={activeFields.activeUsername ? \"active\" : \"\"}\n                      htmlFor=\"username\">\n                      Username\n                    </label>\n                    {errors.username && (\n                      <p className=\"error-notification\">{errors.username.message}</p>\n                    )}\n                  </div>\n                  <div className=\"form-controll\">\n                    <input\n                      name=\"email\"\n                      ref={register({\n                        required: \"Email is required!\",\n                        pattern: {\n                          value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                          message: \"invalid email address\",\n                        },\n                      })}\n                      onBlur={(e) => {\n                        if (e.target.value) {\n                          return setActiveFields({ ...activeFields, activeEmail: true })\n                        }\n                        return setActiveFields({ ...activeFields, activeEmail: false })\n                      }}\n                    />\n                    <Icon name=\"mail\" />\n                    <label className={activeFields.activeEmail ? \"active\" : \"\"} htmlFor=\"email\">\n                      Email\n                    </label>\n                    {errors.email && <p className=\"error-notification\">{errors.email.message}</p>}\n                  </div>\n                  <div className=\"form-controll\">\n                    <input\n                      name=\"password\"\n                      type={showPassword ? \"text\" : \"password\"}\n                      ref={register({\n                        required: \"Password is required!\",\n                        minLength: {\n                          value: 6,\n                          message: \"Password must be at least 6 characters long\",\n                        },\n                      })}\n                      onChange={(e) => setPassword(e.target.value)}\n                      onBlur={(e) => {\n                        if (e.target.value) {\n                          return setActiveFields({ ...activeFields, activePassword: true })\n                        }\n                        return setActiveFields({ ...activeFields, activePassword: false })\n                      }}\n                    />\n                    <Icon name=\"lock\" />\n                    <label\n                      className={activeFields.activePassword ? \"active\" : \"\"}\n                      htmlFor=\"password\">\n                      Password\n                    </label>\n                    <Icon\n                      className={password ? \"show-eye\" : \"not-show-eye\"}\n                      onClick={() => setShowPassword(!showPassword)}\n                      name={showPassword ? \"eye slash\" : \"eye\"}\n                      style={{ color: showPassword ? \"#6774c8\" : \"\" }}\n                    />\n                    {errors.password && (\n                      <p className=\"error-notification\">{errors.password.message}</p>\n                    )}\n                  </div>\n                  <Button primary submit>\n                    <Icon name=\"sign-in\" /> Create Branch\n                  </Button>\n                </form>\n              )}\n              {formType === \"confirm\" && (\n                <form onSubmit={handleSubmit(onConfirm)}>\n                  <div className=\"form-controll\">\n                    <input\n                      name=\"username\"\n                      value={username}\n                      ref={register({ required: \"Username is required!\" })}\n                      onBlur={(e) => {\n                        if (e.target.value) {\n                          return setActiveFields({ ...activeFields, activeUsername: true })\n                        }\n                        return setActiveFields({ ...activeFields, activeUsername: false })\n                      }}\n                    />\n                    <Icon name=\"user\" />\n                    <label className={activeUsername ? \"active\" : \"\"} htmlFor=\"username\">\n                      Username\n                    </label>\n                    {errors.username && (\n                      <p className=\"error-notification\">{errors.username.message}</p>\n                    )}\n                  </div>\n                  <div className=\"form-controll\">\n                    <input\n                      name=\"code\"\n                      ref={register({ required: \"Confirm code is required!\" })}\n                      onBlur={(e) => {\n                        if (e.target.value) {\n                          return setActiveFields({ ...activeFields, activeCode: true })\n                        }\n                        return setActiveFields({ ...activeFields, activeCode: false })\n                      }}\n                    />\n                    <Icon name=\"unlock alternate\" />\n                    <label className={activeCode ? \"active\" : \"\"} htmlFor=\"code\">\n                      Confirm code\n                    </label>\n                    {errors.code && <p className=\"error-notification\">{errors.code.message}</p>}\n                  </div>\n                  <Button primary submit>\n                    <Icon name=\"sign-in\" /> Confirm\n                  </Button>\n                </form>\n              )}\n            </Modal.Section>\n          </Modal>\n        </>\n      )}\n    </>\n  )\n}\n\nexport default BranchConsole\n"]},"metadata":{},"sourceType":"module"}