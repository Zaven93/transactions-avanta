{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useCallback } from 'react';\nimport axios from 'axios';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { Modal, Thumbnail, Checkbox, TextStyle, TextField } from '@shopify/polaris';\nimport { Table, Header, Icon } from 'semantic-ui-react';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport config from '../aws-exports';\n\nvar BranchRow = function BranchRow(_ref) {\n  _s();\n\n  var product = _ref.product,\n      state = _ref.state,\n      setState = _ref.setState;\n\n  var _useState = useState({\n    description: product.node.description,\n    id: product.node.id,\n    image: product.node.images.edges[0] ? product.node.images.edges[0].node.originalSrc : '',\n    tags: product.node.tags,\n    title: product.node.title,\n    variants: product.node.variants.edges[0]\n  }),\n      fetchedProduct = _useState[0],\n      setFetchedProduct = _useState[1];\n\n  var _useState2 = useState([]),\n      rowId = _useState2[0],\n      setRowId = _useState2[1];\n\n  var _useState3 = useState(null),\n      searchValue = _useState3[0],\n      setSearchValue = _useState3[1];\n\n  var _useState4 = useState(''),\n      bonus = _useState4[0],\n      setBonus = _useState4[1];\n\n  var _useState5 = useState(false),\n      checked = _useState5[0],\n      setChecked = _useState5[1];\n\n  var handleSearchInput = useCallback(function (newValue) {\n    return setSearchValue(newValue);\n  }, []);\n  var handleBonus = useCallback(function (value) {\n    setBonus(value);\n    fetchedProduct.tags = [value];\n    setFetchedProduct(fetchedProduct);\n  }, []);\n  console.log('Product from branch row', fetchedProduct);\n  console.log('State from branch', state);\n  return __jsx(Table.Row, {\n    key: fetchedProduct.id\n  }, __jsx(Table.Cell, null, __jsx(Header, {\n    as: \"h4\",\n    image: true,\n    className: \"product-header\"\n  }, __jsx(Checkbox, {\n    checked: rowId.includes(fetchedProduct.id) && true,\n    onChange: function onChange() {\n      if (rowId.includes(fetchedProduct.id)) {\n        setRowId(rowId.filter(function (id) {\n          return id !== fetchedProduct.id;\n        }));\n        setState({\n          products: state.products.filter(function (filteredProduct) {\n            return filteredProduct.node.id !== fetchedProduct.id;\n          })\n        });\n      } else {\n        setRowId([].concat(_toConsumableArray(rowId), [fetchedProduct.id]));\n        setState(_objectSpread(_objectSpread({}, state), {}, {\n          products: [].concat(_toConsumableArray(state.products), [fetchedProduct])\n        }));\n      }\n    }\n  }), __jsx(Thumbnail, {\n    source: fetchedProduct.image,\n    size: \"small\",\n    alt: \"\"\n  }), __jsx(Header.Content, null, fetchedProduct.title))), __jsx(Table.Cell, {\n    textAlign: \"center\"\n  }, __jsx(TextStyle, {\n    variation: \"subdued\"\n  }, fetchedProduct.variants && toCurrency(fetchedProduct.variants.node.price))), __jsx(Table.Cell, null, __jsx(TextField, {\n    id: \"percentage-input\",\n    placeholder: \"Bonus Percentage\",\n    value: bonus,\n    onChange: handleBonus,\n    prefix: __jsx(Icon, {\n      name: \"percent\"\n    }),\n    disabled: !rowId.includes(fetchedProduct.id)\n  })));\n};\n\n_s(BranchRow, \"EBdDQHUVzrMQgPowHLXYEI9/tbI=\");\n\n_c = BranchRow;\nexport default BranchRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"BranchRow\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/components/BranchRow.js"],"names":["React","useState","useCallback","axios","API","graphqlOperation","gql","useQuery","Modal","Thumbnail","Checkbox","TextStyle","TextField","Table","Header","Icon","toCurrency","formatDate","config","BranchRow","product","state","setState","description","node","id","image","images","edges","originalSrc","tags","title","variants","fetchedProduct","setFetchedProduct","rowId","setRowId","searchValue","setSearchValue","bonus","setBonus","checked","setChecked","handleSearchInput","newValue","handleBonus","value","console","log","includes","filter","products","filteredProduct","price"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react'\r\nimport axios from 'axios'\r\nimport { API, graphqlOperation } from 'aws-amplify'\r\nimport gql from 'graphql-tag'\r\nimport { useQuery } from '@apollo/client'\r\nimport { Modal, Thumbnail, Checkbox, TextStyle, TextField } from '@shopify/polaris'\r\nimport { Table, Header, Icon } from 'semantic-ui-react'\r\nimport { toCurrency, formatDate } from '../utils/helper'\r\nimport config from '../aws-exports'\r\n\r\nconst BranchRow = ({ product, state, setState }) => {\r\n    const [fetchedProduct, setFetchedProduct] = useState({\r\n        description: product.node.description,\r\n        id: product.node.id,\r\n        image: product.node.images.edges[0] ? product.node.images.edges[0].node.originalSrc : '',\r\n        tags: product.node.tags,\r\n        title: product.node.title,\r\n        variants: product.node.variants.edges[0]\r\n    })\r\n    const [rowId, setRowId] = useState([])\r\n    const [searchValue, setSearchValue] = useState(null)\r\n    const [bonus, setBonus] = useState('')\r\n    const [checked, setChecked] = useState(false)\r\n    const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\r\n\r\n    const handleBonus = useCallback((value) => {\r\n        setBonus(value)\r\n        fetchedProduct.tags = [value]\r\n        setFetchedProduct(fetchedProduct)\r\n    }, [])\r\n\r\n    console.log('Product from branch row', fetchedProduct)\r\n    console.log('State from branch', state)\r\n\r\n    return (\r\n        <Table.Row key={fetchedProduct.id}>\r\n            <Table.Cell>\r\n                <Header as=\"h4\" image className=\"product-header\">\r\n                    <Checkbox\r\n                        checked={rowId.includes(fetchedProduct.id) && true}\r\n                        onChange={() => {\r\n                            if (rowId.includes(fetchedProduct.id)) {\r\n                                setRowId(rowId.filter((id) => id !== fetchedProduct.id))\r\n                                setState({\r\n                                    products: state.products.filter(\r\n                                        (filteredProduct) =>\r\n                                            filteredProduct.node.id !== fetchedProduct.id\r\n                                    )\r\n                                })\r\n                            } else {\r\n                                setRowId([...rowId, fetchedProduct.id])\r\n                                setState({\r\n                                    ...state,\r\n                                    products: [...state.products, fetchedProduct]\r\n                                })\r\n                            }\r\n                        }}\r\n                    />\r\n                    <Thumbnail source={fetchedProduct.image} size=\"small\" alt=\"\" />\r\n                    <Header.Content>{fetchedProduct.title}</Header.Content>\r\n                </Header>\r\n            </Table.Cell>\r\n            <Table.Cell textAlign=\"center\">\r\n                <TextStyle variation=\"subdued\">\r\n                    {fetchedProduct.variants && toCurrency(fetchedProduct.variants.node.price)}\r\n                </TextStyle>\r\n            </Table.Cell>\r\n            <Table.Cell>\r\n                <TextField\r\n                    id=\"percentage-input\"\r\n                    placeholder=\"Bonus Percentage\"\r\n                    value={bonus}\r\n                    onChange={handleBonus}\r\n                    prefix={<Icon name=\"percent\" />}\r\n                    disabled={!rowId.includes(fetchedProduct.id)}\r\n                />\r\n            </Table.Cell>\r\n        </Table.Row>\r\n    )\r\n}\r\n\r\nexport default BranchRow\r\n"]},"metadata":{},"sourceType":"module"}