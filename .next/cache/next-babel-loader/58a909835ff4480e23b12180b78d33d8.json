{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query getBranch($id: ID) {\\n        getBranch(id: $id) {\\n            branchName\\n            adminId\\n            id\\n            branchProducts {\\n                items {\\n                    branchId\\n                    createdAt\\n                    id\\n                    productId\\n                    tags\\n                    updatedAt\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport gql from 'graphql-tag';\nimport config from '../../aws-exports';\nAPI.configure(config);\nvar getBranchById = gql(_templateObject());\n\nvar Branch = function Branch() {\n  _s();\n\n  var _useState = useState(router.asPath.split('/')[2].split('?')[0]),\n      branchId = _useState[0],\n      setBranchId = _useState[1];\n\n  var router = useRouter();\n  console.log('Router from branch', router.asPath.split('/')[2].split('?')[0]);\n  console.log('Type of branch Id', typeof router.asPath.split('/')[2].split('?')[0]);\n\n  var fetchBranch = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var branch;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log('Branch id', branchId);\n              _context.prev = 1;\n              _context.next = 4;\n              return API.graphql(graphqlOperation(getBranchById, {\n                id: branchId\n              }));\n\n            case 4:\n              branch = _context.sent;\n              console.log('Fetched branch', branch);\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](1);\n              console.log(_context.t0);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 8]]);\n    }));\n\n    return function fetchBranch() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    if (typeof branchId !== 'string') {\n      return;\n    }\n\n    fetchBranch();\n  }, [branchId]);\n  return __jsx(\"div\", null, \"Branch\");\n};\n\n_s(Branch, \"/eXp4EeaRozF+/nfeKEM/2Aukfs=\", false, function () {\n  return [useRouter];\n});\n\n_c = Branch;\nexport default Branch;\n\nvar _c;\n\n$RefreshReg$(_c, \"Branch\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/pages/branch/[branchId].js"],"names":["React","useState","useEffect","useRouter","API","graphqlOperation","gql","config","configure","getBranchById","Branch","router","asPath","split","branchId","setBranchId","console","log","fetchBranch","graphql","id","branch"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,GAAT,EAAcC,gBAAd,QAAsC,aAAtC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEAH,GAAG,CAACI,SAAJ,CAAcD,MAAd;AAEA,IAAME,aAAa,GAAGH,GAAH,mBAAnB;;AAoBA,IAAMI,MAAM,GAAG,SAATA,MAAS,GAAM;AAAA;;AAAA,kBACeT,QAAQ,CAACU,MAAM,CAACC,MAAP,CAAcC,KAAd,CAAoB,GAApB,EAAyB,CAAzB,EAA4BA,KAA5B,CAAkC,GAAlC,EAAuC,CAAvC,CAAD,CADvB;AAAA,MACVC,QADU;AAAA,MACAC,WADA;;AAEjB,MAAMJ,MAAM,GAAGR,SAAS,EAAxB;AACAa,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCN,MAAM,CAACC,MAAP,CAAcC,KAAd,CAAoB,GAApB,EAAyB,CAAzB,EAA4BA,KAA5B,CAAkC,GAAlC,EAAuC,CAAvC,CAAlC;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiC,OAAON,MAAM,CAACC,MAAP,CAAcC,KAAd,CAAoB,GAApB,EAAyB,CAAzB,EAA4BA,KAA5B,CAAkC,GAAlC,EAAuC,CAAvC,CAAxC;;AAEA,MAAMK,WAAW;AAAA,wEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBF,cAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBH,QAAzB;AADgB;AAAA;AAAA,qBAGSV,GAAG,CAACe,OAAJ,CAAYd,gBAAgB,CAACI,aAAD,EAAgB;AAAEW,gBAAAA,EAAE,EAAEN;AAAN,eAAhB,CAA5B,CAHT;;AAAA;AAGNO,cAAAA,MAHM;AAIZL,cAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BI,MAA9B;AAJY;AAAA;;AAAA;AAAA;AAAA;AAMZL,cAAAA,OAAO,CAACC,GAAR;;AANY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAXC,WAAW;AAAA;AAAA;AAAA,KAAjB;;AASAhB,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAI,OAAOY,QAAP,KAAoB,QAAxB,EAAkC;AAC9B;AACH;;AACDI,IAAAA,WAAW;AACd,GALQ,EAKN,CAACJ,QAAD,CALM,CAAT;AAMA,SAAO,4BAAP;AACH,CAtBD;;GAAMJ,M;UAEaP,S;;;KAFbO,M;AAwBN,eAAeA,MAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { API, graphqlOperation } from 'aws-amplify'\r\nimport gql from 'graphql-tag'\r\nimport config from '../../aws-exports'\r\n\r\nAPI.configure(config)\r\n\r\nconst getBranchById = gql`\r\n    query getBranch($id: ID) {\r\n        getBranch(id: $id) {\r\n            branchName\r\n            adminId\r\n            id\r\n            branchProducts {\r\n                items {\r\n                    branchId\r\n                    createdAt\r\n                    id\r\n                    productId\r\n                    tags\r\n                    updatedAt\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst Branch = () => {\r\n    const [branchId, setBranchId] = useState(router.asPath.split('/')[2].split('?')[0])\r\n    const router = useRouter()\r\n    console.log('Router from branch', router.asPath.split('/')[2].split('?')[0])\r\n    console.log('Type of branch Id', typeof router.asPath.split('/')[2].split('?')[0])\r\n\r\n    const fetchBranch = async () => {\r\n        console.log('Branch id', branchId)\r\n        try {\r\n            const branch = await API.graphql(graphqlOperation(getBranchById, { id: branchId }))\r\n            console.log('Fetched branch', branch)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (typeof branchId !== 'string') {\r\n            return\r\n        }\r\n        fetchBranch()\r\n    }, [branchId])\r\n    return <div>Branch</div>\r\n}\r\n\r\nexport default Branch\r\n"]},"metadata":{},"sourceType":"module"}