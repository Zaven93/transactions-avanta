{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport { useQuery } from \"@apollo/client\";\nimport { Modal } from \"@shopify/polaris\";\nimport { Table } from \"semantic-ui-react\";\nimport { useBranchEntity } from \"../core/hooks\";\nimport BranchRow from \"./BranchRow\";\nimport { listProducts, getBranchById } from \"../graphql/queries\";\nimport { createBranchProduct, productUpdate, updateBranchProduct, deleteBranchProduct } from \"../graphql/mutation\";\nimport { onCreateBranchProduct, onUpdateBranchProduct, onDeleteBranchProduct } from \"../graphql/subscriptions\";\n\nvar BranchProducts = function BranchProducts(_ref) {\n  _s();\n\n  var active = _ref.active,\n      handleChange = _ref.handleChange,\n      branchId = _ref.branchId;\n\n  var _useQuery = useQuery(listProducts),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  var _useState = useState(\"\"),\n      branchProductSubscription = _useState[0],\n      setBranchProductSubscription = _useState[1];\n\n  var _useState2 = useState([]),\n      rowId = _useState2[0],\n      setRowId = _useState2[1];\n\n  var _useState3 = useState({\n    products: []\n  }),\n      state = _useState3[0],\n      setState = _useState3[1];\n\n  var _useState4 = useState(\"\"),\n      branchInfo = _useState4[0],\n      setBranchInfo = _useState4[1];\n\n  var _useBranchEntity = useBranchEntity(branchId),\n      branchData = _useBranchEntity.data,\n      getBranch = _useBranchEntity.refetch;\n\n  useEffect(function () {\n    getBranch();\n    var createListener = API.graphql(graphqlOperation(onCreateBranchProduct)).subscribe({\n      next: function next(createdBranchProduct) {\n        return setBranchProductSubscription(createdBranchProduct);\n      }\n    });\n    var updateListener = API.graphql(graphqlOperation(onUpdateBranchProduct)).subscribe({\n      next: function next(updatedBranchProduct) {\n        return setBranchProductSubscription(updatedBranchProduct);\n      }\n    });\n    var deleteListener = API.graphql(graphqlOperation(onDeleteBranchProduct)).subscribe({\n      next: function next(deletedBranchProduct) {\n        return setBranchProductSubscription(deletedBranchProduct);\n      }\n    });\n    return function () {\n      createListener.unsubscribe();\n      updateListener.unsubscribe();\n      deleteListener.unsubscribe();\n    };\n  }, [branchId, branchProductSubscription]);\n  useEffect(function () {\n    if (!branchData) {\n      return;\n    }\n\n    setBranchInfo(branchData.data.getBranch);\n    setRowId(function () {\n      return branchData.data.getBranch ? _toConsumableArray(branchData.data.getBranch.branchProducts.items.map(function (item) {\n        return item.productId;\n      })) : [];\n    });\n    setState({\n      products: branchData.data.getBranch ? _toConsumableArray(branchData.data.getBranch.branchProducts.items.map(function (product) {\n        return {\n          id: product.productId\n        };\n      })) : []\n    });\n  }, [branchData, active]);\n\n  if (loading) {\n    return __jsx(\"div\", null, \"Loading products...\");\n  }\n\n  if (error) {\n    return __jsx(\"div\", null, \"Some error occured\");\n  }\n\n  var deleteProductsFromBranch = function deleteProductsFromBranch() {\n    var productsToDeleteFromBranch = branchInfo.branchProducts.items.filter(function (branchProduct) {\n      return !state.products.map(function (product) {\n        return product.id;\n      }).includes(branchProduct.productId);\n    });\n    Promise.all(productsToDeleteFromBranch.map(function (deleteProduct) {\n      API.graphql(graphqlOperation(deleteBranchProduct, {\n        input: {\n          id: deleteProduct.id\n        }\n      }));\n    }))[\"catch\"](function (err) {\n      return console.log(err);\n    });\n    return;\n  };\n\n  var addProductsToBranch = function addProductsToBranch() {\n    Promise.all(state.products.map(function (product) {\n      var updatedProduct = branchInfo.branchProducts.items.filter(function (branchProduct) {\n        return branchProduct.productId === product.id;\n      })[0];\n\n      if (updatedProduct) {\n        API.graphql(graphqlOperation(updateBranchProduct, {\n          input: {\n            id: updatedProduct.id,\n            tags: product.tags\n          }\n        }));\n      } else {\n        API.graphql(graphqlOperation(createBranchProduct, {\n          input: {\n            id: uuidv4(),\n            branchId: branchId,\n            productId: product.id,\n            tags: product.tags\n          }\n        }));\n      }\n    }))[\"catch\"](function (err) {\n      return console.log(err);\n    });\n    return;\n  };\n\n  console.log(\"Products state from branch products\", state);\n  return __jsx(Modal, {\n    open: active,\n    onClose: function onClose() {\n      handleChange();\n      setRowId([]);\n    },\n    title: \"Choose products\",\n    primaryAction: {\n      content: \"Save changes\",\n      onAction: function onAction() {\n        addProductsToBranch();\n        deleteProductsFromBranch();\n        handleChange();\n      }\n    }\n  }, __jsx(Modal.Section, null, __jsx(Table, {\n    celled: true,\n    striped: true,\n    selectable: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Products\"), __jsx(Table.HeaderCell, {\n    textAlign: \"center\"\n  }, \"Price\"), __jsx(Table.HeaderCell, null, \"Bonus Percentage\"))), __jsx(Table.Body, null, data && branchInfo && data.products.edges.map(function (product) {\n    return __jsx(BranchRow, {\n      rowId: rowId,\n      setRowId: setRowId,\n      branchInfo: branchInfo,\n      branchId: branchId,\n      product: product,\n      state: state,\n      setState: setState\n    });\n  })), __jsx(Table.Footer, {\n    fullWidth: true\n  }, __jsx(Table.Row, null)))));\n};\n\n_s(BranchProducts, \"J7caYWDocHJAO2DCgXJPuQgSzvo=\", false, function () {\n  return [useQuery, useBranchEntity];\n});\n\n_c = BranchProducts;\nexport default BranchProducts;\n\nvar _c;\n\n$RefreshReg$(_c, \"BranchProducts\");","map":{"version":3,"sources":["/var/www/transactions-avanta/components/BranchProducts.js"],"names":["React","useState","useCallback","useEffect","v4","uuidv4","API","graphqlOperation","useQuery","Modal","Table","useBranchEntity","BranchRow","listProducts","getBranchById","createBranchProduct","productUpdate","updateBranchProduct","deleteBranchProduct","onCreateBranchProduct","onUpdateBranchProduct","onDeleteBranchProduct","BranchProducts","active","handleChange","branchId","loading","error","data","branchProductSubscription","setBranchProductSubscription","rowId","setRowId","products","state","setState","branchInfo","setBranchInfo","branchData","getBranch","refetch","createListener","graphql","subscribe","next","createdBranchProduct","updateListener","updatedBranchProduct","deleteListener","deletedBranchProduct","unsubscribe","branchProducts","items","map","item","productId","product","id","deleteProductsFromBranch","productsToDeleteFromBranch","filter","branchProduct","includes","Promise","all","deleteProduct","input","err","console","log","addProductsToBranch","updatedProduct","tags","content","onAction","edges"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\"\nimport { v4 as uuidv4 } from \"uuid\"\nimport { API, graphqlOperation } from \"aws-amplify\"\nimport { useQuery } from \"@apollo/client\"\nimport { Modal } from \"@shopify/polaris\"\nimport { Table } from \"semantic-ui-react\"\nimport { useBranchEntity } from \"../core/hooks\"\nimport BranchRow from \"./BranchRow\"\nimport { listProducts, getBranchById } from \"../graphql/queries\"\nimport {\n  createBranchProduct,\n  productUpdate,\n  updateBranchProduct,\n  deleteBranchProduct,\n} from \"../graphql/mutation\"\nimport {\n  onCreateBranchProduct,\n  onUpdateBranchProduct,\n  onDeleteBranchProduct,\n} from \"../graphql/subscriptions\"\n\nconst BranchProducts = ({ active, handleChange, branchId }) => {\n  const { loading, error, data } = useQuery(listProducts)\n  const [branchProductSubscription, setBranchProductSubscription] = useState(\"\")\n  const [rowId, setRowId] = useState([])\n  const [state, setState] = useState({\n    products: [],\n  })\n  const [branchInfo, setBranchInfo] = useState(\"\")\n\n  const { data: branchData, refetch: getBranch } = useBranchEntity(branchId)\n\n  useEffect(() => {\n    getBranch()\n\n    const createListener = API.graphql(graphqlOperation(onCreateBranchProduct)).subscribe({\n      next: (createdBranchProduct) => setBranchProductSubscription(createdBranchProduct),\n    })\n    const updateListener = API.graphql(graphqlOperation(onUpdateBranchProduct)).subscribe({\n      next: (updatedBranchProduct) => setBranchProductSubscription(updatedBranchProduct),\n    })\n    const deleteListener = API.graphql(graphqlOperation(onDeleteBranchProduct)).subscribe({\n      next: (deletedBranchProduct) => setBranchProductSubscription(deletedBranchProduct),\n    })\n\n    return () => {\n      createListener.unsubscribe()\n      updateListener.unsubscribe()\n      deleteListener.unsubscribe()\n    }\n  }, [branchId, branchProductSubscription])\n\n  useEffect(() => {\n    if (!branchData) {\n      return\n    }\n    setBranchInfo(branchData.data.getBranch)\n    setRowId(() => {\n      return branchData.data.getBranch\n        ? [...branchData.data.getBranch.branchProducts.items.map((item) => item.productId)]\n        : []\n    })\n    setState({\n      products: branchData.data.getBranch\n        ? [\n            ...branchData.data.getBranch.branchProducts.items.map((product) => ({\n              id: product.productId,\n            })),\n          ]\n        : [],\n    })\n  }, [branchData, active])\n\n  if (loading) {\n    return <div>Loading products...</div>\n  }\n\n  if (error) {\n    return <div>Some error occured</div>\n  }\n\n  const deleteProductsFromBranch = () => {\n    const productsToDeleteFromBranch = branchInfo.branchProducts.items.filter(\n      (branchProduct) =>\n        !state.products.map((product) => product.id).includes(branchProduct.productId)\n    )\n\n    Promise.all(\n      productsToDeleteFromBranch.map((deleteProduct) => {\n        API.graphql(graphqlOperation(deleteBranchProduct, { input: { id: deleteProduct.id } }))\n      })\n    ).catch((err) => console.log(err))\n\n    return\n  }\n\n  const addProductsToBranch = () => {\n    Promise.all(\n      state.products.map((product) => {\n        const updatedProduct = branchInfo.branchProducts.items.filter(\n          (branchProduct) => branchProduct.productId === product.id\n        )[0]\n        if (updatedProduct) {\n          API.graphql(\n            graphqlOperation(updateBranchProduct, {\n              input: {\n                id: updatedProduct.id,\n                tags: product.tags,\n              },\n            })\n          )\n        } else {\n          API.graphql(\n            graphqlOperation(createBranchProduct, {\n              input: {\n                id: uuidv4(),\n                branchId: branchId,\n                productId: product.id,\n                tags: product.tags,\n              },\n            })\n          )\n        }\n      })\n    ).catch((err) => console.log(err))\n\n    return\n  }\n\n  console.log(\"Products state from branch products\", state)\n\n  return (\n    <Modal\n      open={active}\n      onClose={() => {\n        handleChange()\n        setRowId([])\n      }}\n      title=\"Choose products\"\n      primaryAction={{\n        content: \"Save changes\",\n        onAction: () => {\n          addProductsToBranch()\n          deleteProductsFromBranch()\n          handleChange()\n        },\n      }}>\n      <Modal.Section>\n        <Table celled striped selectable>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell>Products</Table.HeaderCell>\n              <Table.HeaderCell textAlign=\"center\">Price</Table.HeaderCell>\n              <Table.HeaderCell>Bonus Percentage</Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {data &&\n              branchInfo &&\n              data.products.edges.map((product) => (\n                <BranchRow\n                  rowId={rowId}\n                  setRowId={setRowId}\n                  branchInfo={branchInfo}\n                  branchId={branchId}\n                  product={product}\n                  state={state}\n                  setState={setState}\n                />\n              ))}\n          </Table.Body>\n          <Table.Footer fullWidth>\n            <Table.Row></Table.Row>\n          </Table.Footer>\n        </Table>\n      </Modal.Section>\n    </Modal>\n  )\n}\n\nexport default BranchProducts\n"]},"metadata":{},"sourceType":"module"}