{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation CompleteOrder($id: ID!) {\\n        draftOrderComplete(id: $id, paymentPending: true) {\\n            draftOrder {\\n                customer {\\n                    id\\n                }\\n                email\\n                name\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation CreateOrder($input: DraftOrderInput!) {\\n        draftOrderCreate(input: $input) {\\n            draftOrder {\\n                id\\n                customer {\\n                    id\\n                }\\n                email\\n                lineItems(first: 10) {\\n                    edges {\\n                        node {\\n                            title\\n                            quantity\\n                            originalUnitPrice\\n                            variant {\\n                                id\\n                                price\\n                                title\\n                                product {\\n                                    tags\\n                                    title\\n                                    images(first: 5) {\\n                                        edges {\\n                                            node {\\n                                                originalSrc\\n                                            }\\n                                        }\\n                                    }\\n                                }\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query Products {\\n        products(first: 100) {\\n            edges {\\n                node {\\n                    id\\n                    title\\n                    tags\\n                    description(truncateAt: 100)\\n                    variants(first: 1) {\\n                        edges {\\n                            node {\\n                                id\\n                                price\\n                            }\\n                        }\\n                    }\\n                    images(first: 1) {\\n                        edges {\\n                            node {\\n                                originalSrc\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport axios from 'axios';\nimport gql from 'graphql-tag';\nimport { print } from 'graphql';\nimport { API } from 'aws-amplify';\nimport { ResourcePicker } from '@shopify/app-bridge/actions';\nimport { Page, Badge, Avatar, TextStyle, Card, TextContainer, Modal, Checkbox, Thumbnail, Toast, Frame, Button } from '@shopify/polaris';\nimport { CustomersMajorMonotone } from '@shopify/polaris-icons';\nimport { Table, Icon, Popup, Header } from 'semantic-ui-react';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nimport ProductList from '../components/ProductsList';\nimport AcceptedPaymentRequest from '../components/AcceptedPaymentRequest';\nimport PendingPaymentRequest from '../components/PendingPaymentRequest';\nAPI.configure(config);\nvar listProducts = gql(_templateObject());\nvar createDraftOrder = gql(_templateObject2());\nvar completeOrder = gql(_templateObject3());\n\nvar AcceptPayment = function AcceptPayment(_ref) {\n  _s();\n\n  var paymentRequests = _ref.paymentRequests;\n\n  var _useState = useState(paymentRequests.listPaymentRequests.items),\n      paymentRequestItems = _useState[0],\n      setPaymentRequestItems = _useState[1];\n\n  var _useState2 = useState(false),\n      openPicker = _useState2[0],\n      setOpenPicker = _useState2[1];\n\n  var _useState3 = useState(false),\n      active = _useState3[0],\n      setActive = _useState3[1];\n\n  var _useState4 = useState([]),\n      rowId = _useState4[0],\n      setRowId = _useState4[1];\n\n  var _useState5 = useState(''),\n      paymentRequestId = _useState5[0],\n      setPaymentRequestId = _useState5[1];\n\n  var _useState6 = useState(null),\n      searchValue = _useState6[0],\n      setSearchValue = _useState6[1];\n\n  var _useState7 = useState(false),\n      activeToast = _useState7[0],\n      setActiveToast = _useState7[1];\n\n  var handleSearchInput = useCallback(function (newValue) {\n    return setSearchValue(newValue);\n  }, []);\n  var handleChange = useCallback(function () {\n    return setActive(!active);\n  }, [active]);\n  var toastMarkup = activeToast ? __jsx(Toast, {\n    content: \"Order has been successfully created\",\n    onDismiss: function onDismiss() {\n      return setActiveToast(false);\n    }\n  }) : null;\n  console.log('Payment id', paymentRequestId);\n  return __jsx(Frame, null, __jsx(Page, {\n    title: \"Payment Request\"\n  }, __jsx(AcceptedPaymentRequest, {\n    paymentRequestItems: paymentRequestItems\n  }), __jsx(PendingPaymentRequest, {\n    paymentRequestItems: paymentRequestItems\n  }), __jsx(ProductList, {\n    paymentRequestId: paymentRequestId,\n    active: active,\n    handleChange: handleChange\n  }), toastMarkup));\n};\n\n_s(AcceptPayment, \"FbpWNQLSeG9gcved4n1gB889Rwk=\");\n\n_c = AcceptPayment;\nexport var __N_SSG = true;\nexport default AcceptPayment;\n\nvar _c;\n\n$RefreshReg$(_c, \"AcceptPayment\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/pages/accept-payment.js"],"names":["React","useState","useCallback","useEffect","axios","gql","print","API","ResourcePicker","Page","Badge","Avatar","TextStyle","Card","TextContainer","Modal","Checkbox","Thumbnail","Toast","Frame","Button","CustomersMajorMonotone","Table","Icon","Popup","Header","toCurrency","formatDate","config","ProductList","AcceptedPaymentRequest","PendingPaymentRequest","configure","listProducts","createDraftOrder","completeOrder","AcceptPayment","paymentRequests","listPaymentRequests","items","paymentRequestItems","setPaymentRequestItems","openPicker","setOpenPicker","active","setActive","rowId","setRowId","paymentRequestId","setPaymentRequestId","searchValue","setSearchValue","activeToast","setActiveToast","handleSearchInput","newValue","handleChange","toastMarkup","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport gql from 'graphql-tag'\r\nimport { print } from 'graphql'\r\nimport { API, graphqlOperation } from 'aws-amplify'\r\nimport { ResourcePicker } from '@shopify/app-bridge/actions'\r\nimport {\r\n    Page,\r\n    Badge,\r\n    Avatar,\r\n    TextStyle,\r\n    Card,\r\n    TextContainer,\r\n    Modal,\r\n    Checkbox,\r\n    Thumbnail,\r\n    Toast,\r\n    Frame,\r\n    Button\r\n} from '@shopify/polaris'\r\nimport { CustomersMajorMonotone } from '@shopify/polaris-icons'\r\nimport { Table, Icon, Popup, Header } from 'semantic-ui-react'\r\nimport { toCurrency, formatDate } from '../utils/helper'\r\nimport config from '../aws-exports'\r\nimport ProductList from '../components/ProductsList'\r\nimport AcceptedPaymentRequest from '../components/AcceptedPaymentRequest'\r\nimport PendingPaymentRequest from '../components/PendingPaymentRequest'\r\n\r\nAPI.configure(config)\r\n\r\nconst listPaymentRequest = gql`\r\n    query listPaymentRequest {\r\n        listPaymentRequests {\r\n            items {\r\n                bonusAmount\r\n                createdAt\r\n                customerId\r\n                id\r\n                orderId\r\n                status\r\n                updatedAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst listProducts = gql`\r\n    query Products {\r\n        products(first: 100) {\r\n            edges {\r\n                node {\r\n                    id\r\n                    title\r\n                    tags\r\n                    description(truncateAt: 100)\r\n                    variants(first: 1) {\r\n                        edges {\r\n                            node {\r\n                                id\r\n                                price\r\n                            }\r\n                        }\r\n                    }\r\n                    images(first: 1) {\r\n                        edges {\r\n                            node {\r\n                                originalSrc\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst createDraftOrder = gql`\r\n    mutation CreateOrder($input: DraftOrderInput!) {\r\n        draftOrderCreate(input: $input) {\r\n            draftOrder {\r\n                id\r\n                customer {\r\n                    id\r\n                }\r\n                email\r\n                lineItems(first: 10) {\r\n                    edges {\r\n                        node {\r\n                            title\r\n                            quantity\r\n                            originalUnitPrice\r\n                            variant {\r\n                                id\r\n                                price\r\n                                title\r\n                                product {\r\n                                    tags\r\n                                    title\r\n                                    images(first: 5) {\r\n                                        edges {\r\n                                            node {\r\n                                                originalSrc\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst completeOrder = gql`\r\n    mutation CompleteOrder($id: ID!) {\r\n        draftOrderComplete(id: $id, paymentPending: true) {\r\n            draftOrder {\r\n                customer {\r\n                    id\r\n                }\r\n                email\r\n                name\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst AcceptPayment = ({ paymentRequests }) => {\r\n    const [paymentRequestItems, setPaymentRequestItems] = useState(\r\n        paymentRequests.listPaymentRequests.items\r\n    )\r\n    const [openPicker, setOpenPicker] = useState(false)\r\n    const [active, setActive] = useState(false)\r\n    const [rowId, setRowId] = useState([])\r\n    const [paymentRequestId, setPaymentRequestId] = useState('')\r\n    const [searchValue, setSearchValue] = useState(null)\r\n    const [activeToast, setActiveToast] = useState(false)\r\n    const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\r\n\r\n    const handleChange = useCallback(() => setActive(!active), [active])\r\n\r\n    const toastMarkup = activeToast ? (\r\n        <Toast\r\n            content=\"Order has been successfully created\"\r\n            onDismiss={() => setActiveToast(false)}\r\n        />\r\n    ) : null\r\n\r\n    console.log('Payment id', paymentRequestId)\r\n\r\n    return (\r\n        <Frame>\r\n            <Page title=\"Payment Request\">\r\n                <AcceptedPaymentRequest paymentRequestItems={paymentRequestItems} />\r\n                <PendingPaymentRequest paymentRequestItems={paymentRequestItems} />\r\n                {/* <Table selectable celled>\r\n                    <Table.Header>\r\n                        <Table.Row>\r\n                            <Table.HeaderCell>Customer Id</Table.HeaderCell>\r\n                            <Table.HeaderCell>Order Id</Table.HeaderCell>\r\n                            <Table.HeaderCell>Bonus Amount</Table.HeaderCell>\r\n                            <Table.HeaderCell>Created At</Table.HeaderCell>\r\n                            <Table.HeaderCell>Updated At</Table.HeaderCell>\r\n                            <Table.HeaderCell>Status</Table.HeaderCell>\r\n                            <Table.HeaderCell>Action</Table.HeaderCell>\r\n                        </Table.Row>\r\n                    </Table.Header>\r\n                    <Table.Body>\r\n                        {paymentRequestItems &&\r\n                            paymentRequestItems.map((item) => (\r\n                                <Table.Row key={item.id}>\r\n                                    <Table.Cell>\r\n                                        <Badge size=\"small\">{item.customerId}</Badge>\r\n                                    </Table.Cell>\r\n                                    <Table.Cell>\r\n                                        <Badge size=\"small\">{item.orderId}</Badge>\r\n                                    </Table.Cell>\r\n                                    <Table.Cell>{toCurrency(item.bonusAmount)}</Table.Cell>\r\n                                    <Table.Cell>{formatDate(item.createdAt)}</Table.Cell>\r\n                                    <Table.Cell>{formatDate(item.updatedAt)}</Table.Cell>\r\n                                    <Table.Cell>\r\n                                        <Badge\r\n                                            size=\"small\"\r\n                                            progress={\r\n                                                item.status === 'PENDING'\r\n                                                    ? 'partiallyComplete'\r\n                                                    : item.status === 'APPROVED'\r\n                                                    ? 'complete'\r\n                                                    : 'incomplete'\r\n                                            }\r\n                                            status={\r\n                                                item.status === 'PENDING'\r\n                                                    ? 'attention'\r\n                                                    : item.status === 'APPROVED'\r\n                                                    ? 'success'\r\n                                                    : 'critical'\r\n                                            }>\r\n                                            {item.status}\r\n                                        </Badge>\r\n                                    </Table.Cell>\r\n                                    <Table.Cell className=\"actions-cell\">\r\n                                        <Popup\r\n                                            content=\"Approve payment\"\r\n                                            trigger={\r\n                                                <Icon\r\n                                                    className=\"accept\"\r\n                                                    name=\"check\"\r\n                                                    onClick={() => {\r\n                                                        setPaymentRequestId(item.id)\r\n                                                        handleChange()\r\n                                                    }}\r\n                                                />\r\n                                            }\r\n                                        />\r\n                                        <Popup\r\n                                            content=\"Decline payment\"\r\n                                            trigger={<Icon className=\"decline\" name=\"remove\" />}\r\n                                        />\r\n                                    </Table.Cell>\r\n                                </Table.Row>\r\n                            ))}\r\n                    </Table.Body>\r\n                </Table> */}\r\n                <ProductList\r\n                    paymentRequestId={paymentRequestId}\r\n                    active={active}\r\n                    handleChange={handleChange}\r\n                />\r\n                {toastMarkup}\r\n            </Page>\r\n        </Frame>\r\n    )\r\n}\r\n\r\nexport async function getStaticProps() {\r\n    let result\r\n    try {\r\n        result = await API.graphql(graphqlOperation(listPaymentRequest))\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n\r\n    if (result.errors) {\r\n        console.warn('Failed to fetch payment requests.', result.errors)\r\n        return { props: { paymentRequests: [] } }\r\n    }\r\n    if (result.data !== null) {\r\n        return {\r\n            props: { paymentRequests: result.data }\r\n        }\r\n    }\r\n}\r\n\r\nexport default AcceptPayment\r\n"]},"metadata":{},"sourceType":"module"}