{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport AWS from \"aws-sdk\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport { Button, Form } from \"@shopify/polaris\";\nimport { Table, Popup, Icon } from \"semantic-ui-react\";\nimport { useListBranches, useDeleteBranch } from \"../core/hooks\";\nimport { formatDate } from \"../utils/helper\";\nimport config from \"../aws-exports\";\nimport BranchProducts from \"./BranchProducts\";\nimport { listBranchs } from \"../graphql/queries\";\nimport { onCreateBranchSubscription, onDeleteBranchSubscription, onUpdateBranchSubscription } from \"../graphql/subscriptions\";\nimport { removeBranch, deleteTransaction, deleteBranchProduct, deletePaymentRequest } from \"../graphql/mutation\";\n\nconst BranchList = ({\n  setBranchId,\n  branchId\n}) => {\n  const {\n    0: active,\n    1: setActive\n  } = useState(false);\n  const {\n    0: branches,\n    1: setBranches\n  } = useState(\"\");\n  const {\n    0: branchName,\n    1: setBranchName\n  } = useState(\"\");\n  const {\n    0: productBranchId,\n    1: setProductBranchId\n  } = useState(\"\");\n  const {\n    0: newCreatedBranch,\n    1: setNewCreatedBranch\n  } = useState(\"\");\n  const {\n    0: createdBranchProduct,\n    1: setCreatedBranchProduct\n  } = useState(\"\");\n  const {\n    data: branchesData,\n    refetch: fetchBranches\n  } = useListBranches();\n  const {\n    deleteBranch,\n    isLoading,\n    error,\n    data\n  } = useDeleteBranch();\n\n  const handleChange = () => {\n    setActive(!active);\n  };\n\n  useEffect(() => {\n    fetchBranches();\n    const createListener = API.graphql(graphqlOperation(onCreateBranchSubscription)).subscribe({\n      next: createdBranch => {\n        setNewCreatedBranch(createdBranch);\n      }\n    });\n    const deleteListener = API.graphql(graphqlOperation(onDeleteBranchSubscription)).subscribe({\n      next: deletedBranch => {\n        setNewCreatedBranch(deletedBranch);\n      }\n    });\n    return () => {\n      createListener.unsubscribe();\n      deleteListener.unsubscribe();\n    };\n  }, [newCreatedBranch]);\n  useEffect(() => {\n    setBranches(branchesData && branchesData.data);\n    const updateBranchListener = API.graphql(graphqlOperation(onCreateBranchProduct)).subscribe({\n      next: created => setCreatedBranchProduct(created)\n    });\n  }, [branchesData, createdBranchProduct]);\n  console.log(\"Created branch product\", createdBranchProduct);\n  console.log(\"New created branch\", newCreatedBranch);\n  return __jsx(React.Fragment, null, __jsx(Table, {\n    selectable: true,\n    celled: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Branch Name\"), __jsx(Table.HeaderCell, {\n    textAlign: \"center\"\n  }, \"Created At\"), __jsx(Table.HeaderCell, {\n    textAlign: \"center\"\n  }, \"Actions\"))), __jsx(Table.Body, null, branches && branches.listBranchs.items.map(item => __jsx(Table.Row, {\n    key: item.id\n  }, __jsx(Table.Cell, null, __jsx(Button, {\n    primary: true,\n    onClick: () => {\n      setBranchId(item.id);\n    }\n  }, __jsx(Icon, {\n    name: \"code branch\"\n  }), \" \", item.branchName)), __jsx(Table.Cell, {\n    textAlign: \"center\"\n  }, formatDate(item.createdAt)), __jsx(Table.Cell, {\n    textAlign: \"center\",\n    className: \"branch-actions\"\n  }, __jsx(Popup, {\n    content: \"Edit branch\",\n    trigger: __jsx(Icon, {\n      onClick: () => {\n        setProductBranchId(item.id);\n        setBranchName(item.branchName);\n        handleChange();\n      },\n      className: \"edit-branch\",\n      name: \"edit outline\"\n    })\n  }), __jsx(Popup, {\n    content: \"Delete Branch\",\n    trigger: __jsx(Icon, {\n      className: \"remove-branch\",\n      name: \"trash alternate\",\n      onClick: () => {\n        deleteBranch({\n          branches,\n          username: item.branchUsername,\n          id: item.id\n        });\n      }\n    })\n  })))))), __jsx(BranchProducts, {\n    branchName: branchName,\n    branchId: productBranchId,\n    active: active,\n    handleChange: handleChange\n  }));\n};\n\nexport default BranchList;","map":{"version":3,"sources":["/var/www/transactions-avanta/components/BranchList.js"],"names":["React","useState","useEffect","AWS","API","graphqlOperation","Button","Form","Table","Popup","Icon","useListBranches","useDeleteBranch","formatDate","config","BranchProducts","listBranchs","onCreateBranchSubscription","onDeleteBranchSubscription","onUpdateBranchSubscription","removeBranch","deleteTransaction","deleteBranchProduct","deletePaymentRequest","BranchList","setBranchId","branchId","active","setActive","branches","setBranches","branchName","setBranchName","productBranchId","setProductBranchId","newCreatedBranch","setNewCreatedBranch","createdBranchProduct","setCreatedBranchProduct","data","branchesData","refetch","fetchBranches","deleteBranch","isLoading","error","handleChange","createListener","graphql","subscribe","next","createdBranch","deleteListener","deletedBranch","unsubscribe","updateBranchListener","onCreateBranchProduct","created","console","log","items","map","item","id","createdAt","username","branchUsername"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport AWS from \"aws-sdk\"\nimport { API, graphqlOperation } from \"aws-amplify\"\nimport { Button, Form } from \"@shopify/polaris\"\nimport { Table, Popup, Icon } from \"semantic-ui-react\"\nimport { useListBranches, useDeleteBranch } from \"../core/hooks\"\nimport { formatDate } from \"../utils/helper\"\nimport config from \"../aws-exports\"\nimport BranchProducts from \"./BranchProducts\"\nimport { listBranchs } from \"../graphql/queries\"\nimport {\n  onCreateBranchSubscription,\n  onDeleteBranchSubscription,\n  onUpdateBranchSubscription,\n} from \"../graphql/subscriptions\"\nimport {\n  removeBranch,\n  deleteTransaction,\n  deleteBranchProduct,\n  deletePaymentRequest,\n} from \"../graphql/mutation\"\n\nconst BranchList = ({ setBranchId, branchId }) => {\n  const [active, setActive] = useState(false)\n  const [branches, setBranches] = useState(\"\")\n  const [branchName, setBranchName] = useState(\"\")\n  const [productBranchId, setProductBranchId] = useState(\"\")\n  const [newCreatedBranch, setNewCreatedBranch] = useState(\"\")\n  const [createdBranchProduct, setCreatedBranchProduct] = useState(\"\")\n\n  const { data: branchesData, refetch: fetchBranches } = useListBranches()\n  const { deleteBranch, isLoading, error, data } = useDeleteBranch()\n\n  const handleChange = () => {\n    setActive(!active)\n  }\n\n  useEffect(() => {\n    fetchBranches()\n\n    const createListener = API.graphql(graphqlOperation(onCreateBranchSubscription)).subscribe({\n      next: (createdBranch) => {\n        setNewCreatedBranch(createdBranch)\n      },\n    })\n\n    const deleteListener = API.graphql(graphqlOperation(onDeleteBranchSubscription)).subscribe({\n      next: (deletedBranch) => {\n        setNewCreatedBranch(deletedBranch)\n      },\n    })\n\n    return () => {\n      createListener.unsubscribe()\n      deleteListener.unsubscribe()\n    }\n  }, [newCreatedBranch])\n\n  useEffect(() => {\n    setBranches(branchesData && branchesData.data)\n\n    const updateBranchListener = API.graphql(graphqlOperation(onCreateBranchProduct)).subscribe({\n      next: (created) => setCreatedBranchProduct(created),\n    })\n  }, [branchesData, createdBranchProduct])\n\n  console.log(\"Created branch product\", createdBranchProduct)\n  console.log(\"New created branch\", newCreatedBranch)\n\n  return (\n    <>\n      <Table selectable celled>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Branch Name</Table.HeaderCell>\n            <Table.HeaderCell textAlign=\"center\">Created At</Table.HeaderCell>\n            <Table.HeaderCell textAlign=\"center\">Actions</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {branches &&\n            branches.listBranchs.items.map((item) => (\n              <Table.Row key={item.id}>\n                <Table.Cell>\n                  <Button\n                    primary\n                    onClick={() => {\n                      setBranchId(item.id)\n                    }}>\n                    <Icon name=\"code branch\" /> {item.branchName}\n                  </Button>\n                </Table.Cell>\n                <Table.Cell textAlign=\"center\">{formatDate(item.createdAt)}</Table.Cell>\n                <Table.Cell textAlign=\"center\" className=\"branch-actions\">\n                  <Popup\n                    content=\"Edit branch\"\n                    trigger={\n                      <Icon\n                        onClick={() => {\n                          setProductBranchId(item.id)\n                          setBranchName(item.branchName)\n                          handleChange()\n                        }}\n                        className=\"edit-branch\"\n                        name=\"edit outline\"\n                      />\n                    }\n                  />\n                  <Popup\n                    content=\"Delete Branch\"\n                    trigger={\n                      <Icon\n                        className=\"remove-branch\"\n                        name=\"trash alternate\"\n                        onClick={() => {\n                          deleteBranch({\n                            branches,\n                            username: item.branchUsername,\n                            id: item.id,\n                          })\n                        }}\n                      />\n                    }\n                  />\n                </Table.Cell>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n      <BranchProducts\n        branchName={branchName}\n        branchId={productBranchId}\n        active={active}\n        handleChange={handleChange}\n      />\n    </>\n  )\n}\n\nexport default BranchList\n"]},"metadata":{},"sourceType":"module"}