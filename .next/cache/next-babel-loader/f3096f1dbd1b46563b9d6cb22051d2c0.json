{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport { useQuery } from \"@apollo/client\";\nimport { Modal } from \"@shopify/polaris\";\nimport { Table } from \"semantic-ui-react\";\nimport { useBranchEntity } from \"../core/hooks\";\nimport config from \"../aws-exports\";\nimport BranchRow from \"./BranchRow\";\nimport { listProducts, getBranchById } from \"../graphql/queries\";\nimport { createBranchProduct, productUpdate, updateBranchProduct, deleteBranchProduct } from \"../graphql/mutation\";\nimport { onCreateBranchProduct, onUpdateBranchProduct, onDeleteBranchProduct } from \"../graphql/subscriptions\";\nAPI.configure(config);\n\nconst ProductsList = ({\n  active,\n  handleChange,\n  branchId\n}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(listProducts);\n  const {\n    0: branchProductSubscription,\n    1: setBranchProductSubscription\n  } = useState(\"\");\n  const {\n    0: rowId,\n    1: setRowId\n  } = useState([]);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    products: []\n  });\n  const {\n    0: branchInfo,\n    1: setBranchInfo\n  } = useState(\"\");\n  const {\n    data: branchData,\n    refetch: fetchBranch\n  } = useBranchEntity(branchId); // const getBranch = async () => {\n  //   try {\n  //     const branch = await API.graphql(graphqlOperation(getBranchById, { id: branchId }))\n  //     setBranchInfo(branch.data.getBranch)\n  //     setRowId([\n  //       // ...rowId,\n  //       ...branch.data.getBranch.branchProducts.items.map((item) => item.productId),\n  //     ])\n  //     setState({\n  //       products: [\n  //         ...state.products,\n  //         ...branch.data.getBranch.branchProducts.items.map((product) => ({\n  //           id: product.productId,\n  //         })),\n  //       ],\n  //     })\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  // }\n\n  const getBranch = () => {\n    try {\n      fetchBranch();\n      setBranchInfo(branchData.data.getBranch);\n      setRowId([// ...rowId,\n      ...branchData.data.getBranch.branchProducts.items.map(item => item.productId)]);\n      setState({\n        products: [...state.products, ...branchData.data.getBranch.branchProducts.items.map(product => ({\n          id: product.productId\n        }))]\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    if (!branchId) {\n      return;\n    }\n\n    getBranch();\n    const createListener = API.graphql(graphqlOperation(onCreateBranchProduct)).subscribe({\n      next: createdBranchProduct => setBranchProductSubscription(createdBranchProduct)\n    });\n    const updateListener = API.graphql(graphqlOperation(onUpdateBranchProduct)).subscribe({\n      next: updatedBranchProduct => setBranchProductSubscription(updatedBranchProduct)\n    });\n    const deleteListener = API.graphql(graphqlOperation(onDeleteBranchProduct)).subscribe({\n      next: deletedBranchProduct => setBranchProductSubscription(deletedBranchProduct)\n    });\n    return () => {\n      createListener.unsubscribe();\n      updateListener.unsubscribe();\n      deleteListener.unsubscribe();\n    };\n  }, [branchId, branchProductSubscription, getBranch]); // useEffect(() => {\n  //   if (!branchData) {\n  //     return\n  //   }\n  //   setBranchInfo(branchData.data.getBranch)\n  //   setRowId([\n  //     // ...rowId,\n  //     ...branchData.data.getBranch.branchProducts.items.map((item) => item.productId),\n  //   ])\n  //   setState({\n  //     products: [\n  //       ...state.products,\n  //       ...branchData.data.getBranch.branchProducts.items.map((product) => ({\n  //         id: product.productId,\n  //       })),\n  //     ],\n  //   })\n  // }, [branchData])\n\n  if (loading) {\n    return __jsx(\"div\", null, \"Loading products...\");\n  }\n\n  if (error) {\n    return __jsx(\"div\", null, \"Some error occured\");\n  }\n\n  const deleteProductsFromBranch = () => {\n    const productsToDeleteFromBranch = branchInfo.branchProducts.items.filter(branchProduct => !state.products.map(product => product.id).includes(branchProduct.productId));\n    Promise.all(productsToDeleteFromBranch.map(deleteProduct => {\n      API.graphql(graphqlOperation(deleteBranchProduct, {\n        input: {\n          id: deleteProduct.id\n        }\n      }));\n    })).catch(err => console.log(err));\n    return;\n  };\n\n  const addProductsToBranch = () => {\n    Promise.all(state.products.map(product => {\n      const updatedProduct = branchInfo.branchProducts.items.filter(branchProduct => branchProduct.productId === product.id)[0];\n\n      if (updatedProduct) {\n        API.graphql(graphqlOperation(updateBranchProduct, {\n          input: {\n            id: updatedProduct.id,\n            tags: product.tags\n          }\n        }));\n      } else {\n        API.graphql(graphqlOperation(createBranchProduct, {\n          input: {\n            id: uuidv4(),\n            branchId: branchId,\n            productId: product.id,\n            tags: product.tags\n          }\n        }));\n      }\n    })).catch(err => console.log(err));\n    return;\n  };\n\n  console.log(\"Row id\", rowId);\n  console.log(\"BranchId\", branchId);\n  console.log(\"BranchInfo from branchProducts\", branchInfo);\n  return __jsx(Modal, {\n    open: active,\n    onClose: () => handleChange(),\n    title: \"Choose products\",\n    primaryAction: {\n      content: \"Save changes\",\n      onAction: () => {\n        addProductsToBranch();\n        deleteProductsFromBranch();\n        handleChange();\n      }\n    }\n  }, __jsx(Modal.Section, null, __jsx(Table, {\n    celled: true,\n    striped: true,\n    selectable: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Products\"), __jsx(Table.HeaderCell, {\n    textAlign: \"center\"\n  }, \"Price\"), __jsx(Table.HeaderCell, null, \"Bonus Percentage\"))), __jsx(Table.Body, null, data && branchInfo && data.products.edges.map(product => __jsx(BranchRow, {\n    rowId: rowId,\n    setRowId: setRowId,\n    branchInfo: branchInfo,\n    branchId: branchId,\n    product: product,\n    state: state,\n    setState: setState\n  }))), __jsx(Table.Footer, {\n    fullWidth: true\n  }, __jsx(Table.Row, null)))));\n};\n\nexport default ProductsList;","map":{"version":3,"sources":["/var/www/transactions-avanta/components/BranchProducts.js"],"names":["React","useState","useCallback","useEffect","v4","uuidv4","API","graphqlOperation","useQuery","Modal","Table","useBranchEntity","config","BranchRow","listProducts","getBranchById","createBranchProduct","productUpdate","updateBranchProduct","deleteBranchProduct","onCreateBranchProduct","onUpdateBranchProduct","onDeleteBranchProduct","configure","ProductsList","active","handleChange","branchId","loading","error","data","branchProductSubscription","setBranchProductSubscription","rowId","setRowId","state","setState","products","branchInfo","setBranchInfo","branchData","refetch","fetchBranch","getBranch","branchProducts","items","map","item","productId","product","id","console","log","createListener","graphql","subscribe","next","createdBranchProduct","updateListener","updatedBranchProduct","deleteListener","deletedBranchProduct","unsubscribe","deleteProductsFromBranch","productsToDeleteFromBranch","filter","branchProduct","includes","Promise","all","deleteProduct","input","catch","err","addProductsToBranch","updatedProduct","tags","content","onAction","edges"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\"\nimport { v4 as uuidv4 } from \"uuid\"\nimport { API, graphqlOperation } from \"aws-amplify\"\nimport { useQuery } from \"@apollo/client\"\nimport { Modal } from \"@shopify/polaris\"\nimport { Table } from \"semantic-ui-react\"\nimport { useBranchEntity } from \"../core/hooks\"\nimport config from \"../aws-exports\"\nimport BranchRow from \"./BranchRow\"\nimport { listProducts, getBranchById } from \"../graphql/queries\"\nimport {\n  createBranchProduct,\n  productUpdate,\n  updateBranchProduct,\n  deleteBranchProduct,\n} from \"../graphql/mutation\"\nimport {\n  onCreateBranchProduct,\n  onUpdateBranchProduct,\n  onDeleteBranchProduct,\n} from \"../graphql/subscriptions\"\n\nAPI.configure(config)\n\nconst ProductsList = ({ active, handleChange, branchId }) => {\n  const { loading, error, data } = useQuery(listProducts)\n  const [branchProductSubscription, setBranchProductSubscription] = useState(\"\")\n  const [rowId, setRowId] = useState([])\n  const [state, setState] = useState({\n    products: [],\n  })\n  const [branchInfo, setBranchInfo] = useState(\"\")\n\n  const { data: branchData, refetch: fetchBranch } = useBranchEntity(branchId)\n\n  // const getBranch = async () => {\n  //   try {\n  //     const branch = await API.graphql(graphqlOperation(getBranchById, { id: branchId }))\n  //     setBranchInfo(branch.data.getBranch)\n  //     setRowId([\n  //       // ...rowId,\n  //       ...branch.data.getBranch.branchProducts.items.map((item) => item.productId),\n  //     ])\n  //     setState({\n  //       products: [\n  //         ...state.products,\n  //         ...branch.data.getBranch.branchProducts.items.map((product) => ({\n  //           id: product.productId,\n  //         })),\n  //       ],\n  //     })\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  // }\n\n  const getBranch = () => {\n    try {\n      fetchBranch()\n      setBranchInfo(branchData.data.getBranch)\n      setRowId([\n        // ...rowId,\n        ...branchData.data.getBranch.branchProducts.items.map((item) => item.productId),\n      ])\n      setState({\n        products: [\n          ...state.products,\n          ...branchData.data.getBranch.branchProducts.items.map((product) => ({\n            id: product.productId,\n          })),\n        ],\n      })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    if (!branchId) {\n      return\n    }\n\n    getBranch()\n\n    const createListener = API.graphql(graphqlOperation(onCreateBranchProduct)).subscribe({\n      next: (createdBranchProduct) => setBranchProductSubscription(createdBranchProduct),\n    })\n    const updateListener = API.graphql(graphqlOperation(onUpdateBranchProduct)).subscribe({\n      next: (updatedBranchProduct) => setBranchProductSubscription(updatedBranchProduct),\n    })\n    const deleteListener = API.graphql(graphqlOperation(onDeleteBranchProduct)).subscribe({\n      next: (deletedBranchProduct) => setBranchProductSubscription(deletedBranchProduct),\n    })\n\n    return () => {\n      createListener.unsubscribe()\n      updateListener.unsubscribe()\n      deleteListener.unsubscribe()\n    }\n  }, [branchId, branchProductSubscription, getBranch])\n\n  // useEffect(() => {\n  //   if (!branchData) {\n  //     return\n  //   }\n  //   setBranchInfo(branchData.data.getBranch)\n  //   setRowId([\n  //     // ...rowId,\n  //     ...branchData.data.getBranch.branchProducts.items.map((item) => item.productId),\n  //   ])\n  //   setState({\n  //     products: [\n  //       ...state.products,\n  //       ...branchData.data.getBranch.branchProducts.items.map((product) => ({\n  //         id: product.productId,\n  //       })),\n  //     ],\n  //   })\n  // }, [branchData])\n\n  if (loading) {\n    return <div>Loading products...</div>\n  }\n\n  if (error) {\n    return <div>Some error occured</div>\n  }\n\n  const deleteProductsFromBranch = () => {\n    const productsToDeleteFromBranch = branchInfo.branchProducts.items.filter(\n      (branchProduct) =>\n        !state.products.map((product) => product.id).includes(branchProduct.productId)\n    )\n\n    Promise.all(\n      productsToDeleteFromBranch.map((deleteProduct) => {\n        API.graphql(graphqlOperation(deleteBranchProduct, { input: { id: deleteProduct.id } }))\n      })\n    ).catch((err) => console.log(err))\n\n    return\n  }\n\n  const addProductsToBranch = () => {\n    Promise.all(\n      state.products.map((product) => {\n        const updatedProduct = branchInfo.branchProducts.items.filter(\n          (branchProduct) => branchProduct.productId === product.id\n        )[0]\n        if (updatedProduct) {\n          API.graphql(\n            graphqlOperation(updateBranchProduct, {\n              input: {\n                id: updatedProduct.id,\n                tags: product.tags,\n              },\n            })\n          )\n        } else {\n          API.graphql(\n            graphqlOperation(createBranchProduct, {\n              input: {\n                id: uuidv4(),\n                branchId: branchId,\n                productId: product.id,\n                tags: product.tags,\n              },\n            })\n          )\n        }\n      })\n    ).catch((err) => console.log(err))\n\n    return\n  }\n\n  console.log(\"Row id\", rowId)\n  console.log(\"BranchId\", branchId)\n  console.log(\"BranchInfo from branchProducts\", branchInfo)\n\n  return (\n    <Modal\n      open={active}\n      onClose={() => handleChange()}\n      title=\"Choose products\"\n      primaryAction={{\n        content: \"Save changes\",\n        onAction: () => {\n          addProductsToBranch()\n          deleteProductsFromBranch()\n          handleChange()\n        },\n      }}>\n      <Modal.Section>\n        <Table celled striped selectable>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell>Products</Table.HeaderCell>\n              <Table.HeaderCell textAlign=\"center\">Price</Table.HeaderCell>\n              <Table.HeaderCell>Bonus Percentage</Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {data &&\n              branchInfo &&\n              data.products.edges.map((product) => (\n                <BranchRow\n                  rowId={rowId}\n                  setRowId={setRowId}\n                  branchInfo={branchInfo}\n                  branchId={branchId}\n                  product={product}\n                  state={state}\n                  setState={setState}\n                />\n              ))}\n          </Table.Body>\n          <Table.Footer fullWidth>\n            <Table.Row></Table.Row>\n          </Table.Footer>\n        </Table>\n      </Modal.Section>\n    </Modal>\n  )\n}\n\nexport default ProductsList\n"]},"metadata":{},"sourceType":"module"}