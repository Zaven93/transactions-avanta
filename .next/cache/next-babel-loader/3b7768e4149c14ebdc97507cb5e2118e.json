{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport gql from 'graphql-tag';\nimport { Page, Button, Icon, Card, DataTable, TextField } from '@shopify/polaris';\nimport { SearchMajorMonotone } from '@shopify/polaris-icons';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nAPI.configure(config);\nconst getBranchById = gql`\n    query getBranch($id: ID!) {\n        getBranch(id: $id) {\n            transactions(sortDirection: DESC) {\n                items {\n                    branchId\n                    createdAt\n                    currency\n                    note\n                    customer {\n                        email\n                        id\n                        firstName\n                        lastName\n                        phone\n                    }\n                    totalBonusAmount\n                    totalPrice\n                    updatedAt\n                    sortDate\n                }\n            }\n            branchName\n            adminId\n            id\n            branchProducts {\n                items {\n                    branchId\n                    createdAt\n                    id\n                    productId\n                    tags\n                    updatedAt\n                }\n            }\n        }\n    }\n`;\n\nconst AdminBranchInfo = ({\n  branchId,\n  setBranchId\n}) => {\n  const {\n    0: branchInfo,\n    1: setBranchInfo\n  } = useState('');\n  const {\n    0: searchValue,\n    1: setSearchValue\n  } = useState(null);\n  const handleSearchInput = useCallback(newValue => setSearchValue(newValue), []);\n\n  const getBranch = async () => {\n    try {\n      const branch = await API.graphql(graphqlOperation(getBranchById, {\n        id: branchId\n      }));\n      setBranchInfo(branch.data.getBranch);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getBranch();\n  }, []);\n  console.log('Branch info from admin', branchId);\n  return __jsx(React.Fragment, null, branchInfo && __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: () => setBranchId(null),\n    primary: true\n  }, \"Go back\"), __jsx(TextField, {\n    label: \"Search Product\",\n    value: searchValue,\n    onChange: handleSearchInput,\n    prefix: __jsx(Icon, {\n      source: SearchMajorMonotone\n    }),\n    placeholder: \"Search by Customer phone number\"\n  }), __jsx(Card, null, __jsx(DataTable, {\n    columnContentTypes: ['text', 'text', 'text', 'text'],\n    headings: ['Customer phone number', 'TotalPrice', 'TotalBonusAmount', 'Minus from Bonus Amount', 'CreatedAt'],\n    rows: branchInfo && branchInfo.transactions.items.filter(transaction => {\n      if (searchValue == null) {\n        return transaction;\n      } else if (transaction.customer[0].phone.toLowerCase().includes(searchValue.toLowerCase())) {\n        return transaction;\n      }\n    }).sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt)).map(transaction => [__jsx(Button, {\n      primary: true,\n      onClick: () => redirect.dispatch(Redirect.Action.ADMIN_PATH, {\n        path: `/customers/${transaction.customer[0].id}`,\n        newContext: true\n      })\n    }, transaction.customer[0].phone), toCurrency(Number(transaction.totalPrice)), toCurrency(Number(transaction.totalBonusAmount)), transaction.note === null ? '' : toCurrency(extractNumbersFromString(transaction.note)), formatDate(transaction.createdAt)])\n  }))));\n};\n\nexport default AdminBranchInfo;","map":{"version":3,"sources":["/var/www/transactions-avanta/components/AdminBranchInfo.js"],"names":["React","useState","useEffect","useCallback","API","graphqlOperation","gql","Page","Button","Icon","Card","DataTable","TextField","SearchMajorMonotone","toCurrency","formatDate","config","configure","getBranchById","AdminBranchInfo","branchId","setBranchId","branchInfo","setBranchInfo","searchValue","setSearchValue","handleSearchInput","newValue","getBranch","branch","graphql","id","data","error","console","log","transactions","items","filter","transaction","customer","phone","toLowerCase","includes","sort","a","b","Date","createdAt","map","redirect","dispatch","Redirect","Action","ADMIN_PATH","path","newContext","Number","totalPrice","totalBonusAmount","note","extractNumbersFromString"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\nimport { API, graphqlOperation } from 'aws-amplify'\nimport gql from 'graphql-tag'\nimport { Page, Button, Icon, Card, DataTable, TextField } from '@shopify/polaris'\nimport { SearchMajorMonotone } from '@shopify/polaris-icons'\nimport { toCurrency, formatDate } from '../utils/helper'\nimport config from '../aws-exports'\n\nAPI.configure(config)\n\nconst getBranchById = gql`\n    query getBranch($id: ID!) {\n        getBranch(id: $id) {\n            transactions(sortDirection: DESC) {\n                items {\n                    branchId\n                    createdAt\n                    currency\n                    note\n                    customer {\n                        email\n                        id\n                        firstName\n                        lastName\n                        phone\n                    }\n                    totalBonusAmount\n                    totalPrice\n                    updatedAt\n                    sortDate\n                }\n            }\n            branchName\n            adminId\n            id\n            branchProducts {\n                items {\n                    branchId\n                    createdAt\n                    id\n                    productId\n                    tags\n                    updatedAt\n                }\n            }\n        }\n    }\n`\n\nconst AdminBranchInfo = ({ branchId, setBranchId }) => {\n    const [branchInfo, setBranchInfo] = useState('')\n    const [searchValue, setSearchValue] = useState(null)\n\n    const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\n\n    const getBranch = async () => {\n        try {\n            const branch = await API.graphql(graphqlOperation(getBranchById, { id: branchId }))\n            setBranchInfo(branch.data.getBranch)\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    useEffect(() => {\n        getBranch()\n    }, [])\n\n    console.log('Branch info from admin', branchId)\n    return (\n        <>\n            {branchInfo && (\n                <>\n                    <Button onClick={() => setBranchId(null)} primary>\n                        Go back\n                    </Button>\n                    <TextField\n                        label=\"Search Product\"\n                        value={searchValue}\n                        onChange={handleSearchInput}\n                        prefix={<Icon source={SearchMajorMonotone} />}\n                        placeholder=\"Search by Customer phone number\"\n                    />\n                    <Card>\n                        <DataTable\n                            columnContentTypes={['text', 'text', 'text', 'text']}\n                            headings={[\n                                'Customer phone number',\n                                'TotalPrice',\n                                'TotalBonusAmount',\n                                'Minus from Bonus Amount',\n                                'CreatedAt'\n                            ]}\n                            rows={\n                                branchInfo &&\n                                branchInfo.transactions.items\n                                    .filter((transaction) => {\n                                        if (searchValue == null) {\n                                            return transaction\n                                        } else if (\n                                            transaction.customer[0].phone\n                                                .toLowerCase()\n                                                .includes(searchValue.toLowerCase())\n                                        ) {\n                                            return transaction\n                                        }\n                                    })\n                                    .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))\n                                    .map((transaction) => [\n                                        <Button\n                                            primary\n                                            onClick={() =>\n                                                redirect.dispatch(Redirect.Action.ADMIN_PATH, {\n                                                    path: `/customers/${transaction.customer[0].id}`,\n                                                    newContext: true\n                                                })\n                                            }>\n                                            {transaction.customer[0].phone}\n                                        </Button>,\n                                        toCurrency(Number(transaction.totalPrice)),\n                                        toCurrency(Number(transaction.totalBonusAmount)),\n                                        transaction.note === null\n                                            ? ''\n                                            : toCurrency(\n                                                  extractNumbersFromString(transaction.note)\n                                              ),\n                                        formatDate(transaction.createdAt)\n                                    ])\n                            }\n                        />\n                        {/* <Pagination\n                    hasPrevious={previousPaginateTokens.length > 0}\n                    onPrevious={paginatePrevious}\n                    hasNext={nextPaginateToken}\n                    onNext={paginateNext}\n                /> */}\n                    </Card>\n                </>\n            )}\n        </>\n    )\n}\n\nexport default AdminBranchInfo\n"]},"metadata":{},"sourceType":"module"}