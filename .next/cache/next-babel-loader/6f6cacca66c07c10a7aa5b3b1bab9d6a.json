{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation updateBranchProduct($input: UpdateBranchProductInput) {\\n        updateBranchProduct(input: $input) {\\n            id\\n            tags\\n            branchId\\n            productId\\n        }\\n    }\\n\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n    query getBranch($id: ID!) {\\n        getBranch(id: $id) {\\n            transactions(sortDirection: DESC) {\\n                items {\\n                    branchId\\n                    createdAt\\n                    currency\\n                    note\\n                    customer {\\n                        email\\n                        id\\n                        firstName\\n                        lastName\\n                        phone\\n                    }\\n                    totalBonusAmount\\n                    totalPrice\\n                    updatedAt\\n                    sortDate\\n                }\\n            }\\n            branchName\\n            adminId\\n            id\\n            branchProducts {\\n                items {\\n                    branchId\\n                    createdAt\\n                    id\\n                    productId\\n                    tags\\n                    updatedAt\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation productUpdate($input: ProductInput!) {\\n        productUpdate(input: $input) {\\n            product {\\n                id\\n                metafields(first: 100) {\\n                    edges {\\n                        node {\\n                            namespace\\n                            key\\n                            value\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation createBranchProduct($input: CreateBranchProductInput!) {\\n        createBranchProduct(input: $input) {\\n            id\\n            branchId\\n            productId\\n            tags\\n        }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query Products {\\n        products(first: 100) {\\n            edges {\\n                node {\\n                    id\\n                    title\\n                    tags\\n                    description(truncateAt: 100)\\n                    variants(first: 1) {\\n                        edges {\\n                            node {\\n                                id\\n                                price\\n                            }\\n                        }\\n                    }\\n                    images(first: 1) {\\n                        edges {\\n                            node {\\n                                originalSrc\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { Modal, Thumbnail, Checkbox, TextStyle } from '@shopify/polaris';\nimport { Table, Header } from 'semantic-ui-react';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nimport BranchRow from './BranchRow';\nAPI.configure(config);\nvar listProducts = gql(_templateObject());\nvar createBranchProduct = gql(_templateObject2());\nvar productUpdate = gql(_templateObject3());\nvar getBranchById = gql(_templateObject4());\nvar updateBranchProduct = gql(_templateObject5());\n\nvar ProductsList = function ProductsList(_ref) {\n  _s();\n\n  var active = _ref.active,\n      handleChange = _ref.handleChange,\n      branchId = _ref.branchId,\n      branchName = _ref.branchName;\n\n  var _useQuery = useQuery(listProducts),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  var _useState = useState([]),\n      rowId = _useState[0],\n      setRowId = _useState[1];\n\n  var _useState2 = useState({\n    products: []\n  }),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var _useState3 = useState(null),\n      searchValue = _useState3[0],\n      setSearchValue = _useState3[1];\n\n  var _useState4 = useState(''),\n      branchInfo = _useState4[0],\n      setBranchInfo = _useState4[1];\n\n  var handleSearchInput = useCallback(function (newValue) {\n    return setSearchValue(newValue);\n  }, []);\n\n  var getBranch = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var branch;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return API.graphql(graphqlOperation(getBranchById, {\n                id: branchId\n              }));\n\n            case 3:\n              branch = _context.sent;\n              setBranchInfo(branch.data.getBranch);\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 7]]);\n    }));\n\n    return function getBranch() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    getBranch();\n  }, [branchId]); // const updateProducts = () => {\n  //     Promise.all(\n  //         state.products.map((product) => {\n  //             const updatedProduct = axios({\n  //                 url: 'https://transactions-avanta.myshopify.com/admin/api/2020-07/graphql.json',\n  //                 method: 'post',\n  //                 headers: {\n  //                     'Content-Type': 'application/json',\n  //                     'X-Shopify-Access-Token': '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'\n  //                 },\n  //                 data: {\n  //                     query: productUpdate,\n  //                     variables: {\n  //                         id: product.id,\n  //                         metafields: {\n  //                             namespace: branchName,\n  //                             key: branchId,\n  //                             value: product.tags[0],\n  //                             valueType: 'STRING'\n  //                         }\n  //                     }\n  //                 }\n  //             })\n  //         })\n  //     )\n  //         .then((res) => console.log('Updated product', res))\n  //         .catch((err) => console.log(err))\n  // }\n  // const updateProducts = async () => {\n  //     try {\n  //         await axios({\n  //             url: 'https://ohsxlulbbk.execute-api.us-east-1.amazonaws.com/dev/update-product',\n  //             method: 'POST',\n  //             data: {\n  //                 path: '/update-product',\n  //                 products: state.products,\n  //                 branchName: branchName,\n  //                 branchId: branchId\n  //             }\n  //         })\n  //         console.log('Check your lambda console')\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // }\n\n  if (loading) {\n    return __jsx(\"div\", null, \"Loading products...\");\n  }\n\n  if (error) {\n    console.log('Some error Zaven', error);\n    return __jsx(\"div\", null, \"Some error occured\");\n  }\n\n  var addProductsToBranch = function addProductsToBranch() {\n    Promise.all(state.products.map(function (product) {\n      var updatedProduct = branchInfo.branchProducts.items.filter(function (branchProduct) {\n        return branchProduct.productId === product.id;\n      })[0];\n\n      if (updatedProduct) {\n        console.log('Yes it containes products that should be updated', updatedProduct);\n        API.graphql(graphqlOperation(updateBranchProduct, {\n          input: {\n            id: updatedProduct.id,\n            tags: product.tags\n          }\n        }));\n      } else {\n        console.log(\"No it doesn't contain the product that should be updated\");\n        API.graphql(graphqlOperation(createBranchProduct, {\n          input: {\n            id: uuidv4(),\n            branchId: branchId,\n            productId: product.id,\n            tags: product.tags\n          }\n        }));\n      }\n    })).then(function (res) {\n      return console.log('Branch products', res);\n    })[\"catch\"](function (err) {\n      return console.log(err);\n    });\n  }; // const updateProducts = async () => {\n  //     try {\n  //         await axios({\n  //             url: 'http://localhost:3000/updateProduct',\n  //             method: 'POST',\n  //             data: {\n  //                 products: state.products\n  //             }\n  //         })\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // }\n\n\n  console.log('State data from product list', state);\n  console.log('BranchInfo from modal', branchInfo);\n  return __jsx(Modal, {\n    open: active,\n    onClose: function onClose() {\n      return handleChange();\n    },\n    title: \"Choose products\",\n    primaryAction: {\n      content: 'Add products to branch',\n      onAction: function onAction() {\n        addProductsToBranch(); // updateProducts()\n\n        handleChange();\n      }\n    }\n  }, __jsx(Modal.Section, null, __jsx(Table, {\n    celled: true,\n    striped: true,\n    selectable: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Products\"), __jsx(Table.HeaderCell, {\n    textAlign: \"center\"\n  }, \"Price\"), __jsx(Table.HeaderCell, null, \"Bonus Percentage\"))), __jsx(Table.Body, null, data && branchInfo && data.products.edges // .filter((product) => {\n  //     if (searchValue == null) {\n  //         return product\n  //     } else if (\n  //         product.node.title\n  //             .toLowerCase()\n  //             .includes(searchValue.toLowerCase())\n  //     ) {\n  //         return product\n  //     }\n  // })\n  .map(function (product) {\n    return __jsx(BranchRow, {\n      branchId: branchId,\n      product: product,\n      state: state,\n      setState: setState\n    }) // <Table.Row\n    //     key={product.node.id}\n    //     >\n    //     <Table.Cell>\n    //         <Header as=\"h4\" image className=\"product-header\">\n    //             <Checkbox\n    //                 checked={\n    //                     rowId.includes(product.node.id) && true\n    //                 }\n    //                 onClick={() => {\n    //                     if (rowId.includes(product.node.id)) {\n    //                         setRowId(\n    //                             rowId.filter((id) => id !== product.node.id)\n    //                         )\n    //                         setState({\n    //                             products: state.products.filter(\n    //                                 (filteredProduct) =>\n    //                                     filteredProduct.node.id !==\n    //                                     product.node.id\n    //                             )\n    //                         })\n    //                     } else {\n    //                         setRowId([...rowId, product.node.id])\n    //                         setState({\n    //                             ...state,\n    //                             products: [...state.products, product]\n    //                         })\n    //                     }\n    //                 }}\n    //             />\n    //             <Thumbnail\n    //                 source={\n    //                     product.node.images.edges[0] &&\n    //                     product.node.images.edges[0].node\n    //                         .originalSrc\n    //                 }\n    //                 size=\"small\"\n    //                 alt=\"\"\n    //             />\n    //             <Header.Content>\n    //                 {product.node.title}\n    //             </Header.Content>\n    //         </Header>\n    //     </Table.Cell>\n    //     <Table.Cell>\n    //         <TextStyle variation=\"subdued\">\n    //             {product.node.description}\n    //         </TextStyle>\n    //     </Table.Cell>\n    //     <Table.Cell textAlign=\"center\">\n    //         <TextStyle variation=\"subdued\">\n    //             {product.node.variants.edges[0] &&\n    //                 toCurrency(\n    //                     product.node.variants.edges[0].node.price\n    //                 )}\n    //         </TextStyle>\n    //     </Table.Cell>\n    // </Table.Row>\n    ;\n  })), __jsx(Table.Footer, {\n    fullWidth: true\n  }, __jsx(Table.Row, null)))));\n};\n\n_s(ProductsList, \"a2a4BNyt0kVGInYbkuIrdghIhEE=\", false, function () {\n  return [useQuery];\n});\n\n_c = ProductsList;\nexport default ProductsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductsList\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/components/BranchProducts.js"],"names":["React","useState","useCallback","useEffect","axios","v4","uuidv4","API","graphqlOperation","gql","useQuery","Modal","Thumbnail","Checkbox","TextStyle","Table","Header","toCurrency","formatDate","config","BranchRow","configure","listProducts","createBranchProduct","productUpdate","getBranchById","updateBranchProduct","ProductsList","active","handleChange","branchId","branchName","loading","error","data","rowId","setRowId","products","state","setState","searchValue","setSearchValue","branchInfo","setBranchInfo","handleSearchInput","newValue","getBranch","graphql","id","branch","console","log","addProductsToBranch","Promise","all","map","product","updatedProduct","branchProducts","items","filter","branchProduct","productId","input","tags","then","res","err","content","onAction","edges"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport { API, graphqlOperation } from 'aws-amplify'\r\nimport gql from 'graphql-tag'\r\nimport { useQuery } from '@apollo/client'\r\nimport { Modal, Thumbnail, Checkbox, TextStyle } from '@shopify/polaris'\r\nimport { Table, Header } from 'semantic-ui-react'\r\nimport { toCurrency, formatDate } from '../utils/helper'\r\nimport config from '../aws-exports'\r\nimport BranchRow from './BranchRow'\r\n\r\nAPI.configure(config)\r\n\r\nconst listProducts = gql`\r\n    query Products {\r\n        products(first: 100) {\r\n            edges {\r\n                node {\r\n                    id\r\n                    title\r\n                    tags\r\n                    description(truncateAt: 100)\r\n                    variants(first: 1) {\r\n                        edges {\r\n                            node {\r\n                                id\r\n                                price\r\n                            }\r\n                        }\r\n                    }\r\n                    images(first: 1) {\r\n                        edges {\r\n                            node {\r\n                                originalSrc\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst createBranchProduct = gql`\r\n    mutation createBranchProduct($input: CreateBranchProductInput!) {\r\n        createBranchProduct(input: $input) {\r\n            id\r\n            branchId\r\n            productId\r\n            tags\r\n        }\r\n    }\r\n`\r\nconst productUpdate = gql`\r\n    mutation productUpdate($input: ProductInput!) {\r\n        productUpdate(input: $input) {\r\n            product {\r\n                id\r\n                metafields(first: 100) {\r\n                    edges {\r\n                        node {\r\n                            namespace\r\n                            key\r\n                            value\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\nconst getBranchById = gql`\r\n    query getBranch($id: ID!) {\r\n        getBranch(id: $id) {\r\n            transactions(sortDirection: DESC) {\r\n                items {\r\n                    branchId\r\n                    createdAt\r\n                    currency\r\n                    note\r\n                    customer {\r\n                        email\r\n                        id\r\n                        firstName\r\n                        lastName\r\n                        phone\r\n                    }\r\n                    totalBonusAmount\r\n                    totalPrice\r\n                    updatedAt\r\n                    sortDate\r\n                }\r\n            }\r\n            branchName\r\n            adminId\r\n            id\r\n            branchProducts {\r\n                items {\r\n                    branchId\r\n                    createdAt\r\n                    id\r\n                    productId\r\n                    tags\r\n                    updatedAt\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst updateBranchProduct = gql`\r\n    mutation updateBranchProduct($input: UpdateBranchProductInput) {\r\n        updateBranchProduct(input: $input) {\r\n            id\r\n            tags\r\n            branchId\r\n            productId\r\n        }\r\n    }\r\n`\r\n\r\nconst ProductsList = ({ active, handleChange, branchId, branchName }) => {\r\n    const { loading, error, data } = useQuery(listProducts)\r\n    const [rowId, setRowId] = useState([])\r\n    const [state, setState] = useState({\r\n        products: []\r\n    })\r\n    const [searchValue, setSearchValue] = useState(null)\r\n    const [branchInfo, setBranchInfo] = useState('')\r\n    const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\r\n\r\n    const getBranch = async () => {\r\n        try {\r\n            const branch = await API.graphql(graphqlOperation(getBranchById, { id: branchId }))\r\n            setBranchInfo(branch.data.getBranch)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getBranch()\r\n    }, [branchId])\r\n\r\n    // const updateProducts = () => {\r\n    //     Promise.all(\r\n    //         state.products.map((product) => {\r\n    //             const updatedProduct = axios({\r\n    //                 url: 'https://transactions-avanta.myshopify.com/admin/api/2020-07/graphql.json',\r\n    //                 method: 'post',\r\n    //                 headers: {\r\n    //                     'Content-Type': 'application/json',\r\n    //                     'X-Shopify-Access-Token': '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'\r\n    //                 },\r\n    //                 data: {\r\n    //                     query: productUpdate,\r\n    //                     variables: {\r\n    //                         id: product.id,\r\n    //                         metafields: {\r\n    //                             namespace: branchName,\r\n    //                             key: branchId,\r\n    //                             value: product.tags[0],\r\n    //                             valueType: 'STRING'\r\n    //                         }\r\n    //                     }\r\n    //                 }\r\n    //             })\r\n    //         })\r\n    //     )\r\n    //         .then((res) => console.log('Updated product', res))\r\n    //         .catch((err) => console.log(err))\r\n    // }\r\n\r\n    // const updateProducts = async () => {\r\n    //     try {\r\n    //         await axios({\r\n    //             url: 'https://ohsxlulbbk.execute-api.us-east-1.amazonaws.com/dev/update-product',\r\n    //             method: 'POST',\r\n    //             data: {\r\n    //                 path: '/update-product',\r\n    //                 products: state.products,\r\n    //                 branchName: branchName,\r\n    //                 branchId: branchId\r\n    //             }\r\n    //         })\r\n    //         console.log('Check your lambda console')\r\n    //     } catch (error) {\r\n    //         console.log(error)\r\n    //     }\r\n    // }\r\n\r\n    if (loading) {\r\n        return <div>Loading products...</div>\r\n    }\r\n\r\n    if (error) {\r\n        console.log('Some error Zaven', error)\r\n        return <div>Some error occured</div>\r\n    }\r\n\r\n    const addProductsToBranch = () => {\r\n        Promise.all(\r\n            state.products.map((product) => {\r\n                const updatedProduct = branchInfo.branchProducts.items.filter(\r\n                    (branchProduct) => branchProduct.productId === product.id\r\n                )[0]\r\n                if (updatedProduct) {\r\n                    console.log('Yes it containes products that should be updated', updatedProduct)\r\n                    API.graphql(\r\n                        graphqlOperation(updateBranchProduct, {\r\n                            input: {\r\n                                id: updatedProduct.id,\r\n                                tags: product.tags\r\n                            }\r\n                        })\r\n                    )\r\n                } else {\r\n                    console.log(\"No it doesn't contain the product that should be updated\")\r\n                    API.graphql(\r\n                        graphqlOperation(createBranchProduct, {\r\n                            input: {\r\n                                id: uuidv4(),\r\n                                branchId: branchId,\r\n                                productId: product.id,\r\n                                tags: product.tags\r\n                            }\r\n                        })\r\n                    )\r\n                }\r\n            })\r\n        )\r\n            .then((res) => console.log('Branch products', res))\r\n            .catch((err) => console.log(err))\r\n    }\r\n\r\n    // const updateProducts = async () => {\r\n    //     try {\r\n    //         await axios({\r\n    //             url: 'http://localhost:3000/updateProduct',\r\n    //             method: 'POST',\r\n    //             data: {\r\n    //                 products: state.products\r\n    //             }\r\n    //         })\r\n    //     } catch (error) {\r\n    //         console.log(error)\r\n    //     }\r\n    // }\r\n\r\n    console.log('State data from product list', state)\r\n    console.log('BranchInfo from modal', branchInfo)\r\n\r\n    return (\r\n        <Modal\r\n            open={active}\r\n            onClose={() => handleChange()}\r\n            title=\"Choose products\"\r\n            primaryAction={{\r\n                content: 'Add products to branch',\r\n                onAction: () => {\r\n                    addProductsToBranch()\r\n                    // updateProducts()\r\n                    handleChange()\r\n                }\r\n            }}>\r\n            <Modal.Section>\r\n                <Table celled striped selectable>\r\n                    <Table.Header>\r\n                        <Table.Row>\r\n                            <Table.HeaderCell>Products</Table.HeaderCell>\r\n                            <Table.HeaderCell textAlign=\"center\">Price</Table.HeaderCell>\r\n                            <Table.HeaderCell>Bonus Percentage</Table.HeaderCell>\r\n                        </Table.Row>\r\n                    </Table.Header>\r\n                    <Table.Body>\r\n                        {data &&\r\n                            branchInfo &&\r\n                            data.products.edges\r\n                                // .filter((product) => {\r\n                                //     if (searchValue == null) {\r\n                                //         return product\r\n                                //     } else if (\r\n                                //         product.node.title\r\n                                //             .toLowerCase()\r\n                                //             .includes(searchValue.toLowerCase())\r\n                                //     ) {\r\n                                //         return product\r\n                                //     }\r\n                                // })\r\n                                .map((product) => (\r\n                                    <BranchRow\r\n                                        branchId={branchId}\r\n                                        product={product}\r\n                                        state={state}\r\n                                        setState={setState}\r\n                                    />\r\n                                    // <Table.Row\r\n                                    //     key={product.node.id}\r\n                                    //     >\r\n                                    //     <Table.Cell>\r\n                                    //         <Header as=\"h4\" image className=\"product-header\">\r\n                                    //             <Checkbox\r\n                                    //                 checked={\r\n                                    //                     rowId.includes(product.node.id) && true\r\n                                    //                 }\r\n                                    //                 onClick={() => {\r\n                                    //                     if (rowId.includes(product.node.id)) {\r\n                                    //                         setRowId(\r\n                                    //                             rowId.filter((id) => id !== product.node.id)\r\n                                    //                         )\r\n                                    //                         setState({\r\n                                    //                             products: state.products.filter(\r\n                                    //                                 (filteredProduct) =>\r\n                                    //                                     filteredProduct.node.id !==\r\n                                    //                                     product.node.id\r\n                                    //                             )\r\n                                    //                         })\r\n                                    //                     } else {\r\n                                    //                         setRowId([...rowId, product.node.id])\r\n                                    //                         setState({\r\n                                    //                             ...state,\r\n                                    //                             products: [...state.products, product]\r\n                                    //                         })\r\n                                    //                     }\r\n                                    //                 }}\r\n                                    //             />\r\n                                    //             <Thumbnail\r\n                                    //                 source={\r\n                                    //                     product.node.images.edges[0] &&\r\n                                    //                     product.node.images.edges[0].node\r\n                                    //                         .originalSrc\r\n                                    //                 }\r\n                                    //                 size=\"small\"\r\n                                    //                 alt=\"\"\r\n                                    //             />\r\n                                    //             <Header.Content>\r\n                                    //                 {product.node.title}\r\n                                    //             </Header.Content>\r\n                                    //         </Header>\r\n                                    //     </Table.Cell>\r\n                                    //     <Table.Cell>\r\n                                    //         <TextStyle variation=\"subdued\">\r\n                                    //             {product.node.description}\r\n                                    //         </TextStyle>\r\n                                    //     </Table.Cell>\r\n                                    //     <Table.Cell textAlign=\"center\">\r\n                                    //         <TextStyle variation=\"subdued\">\r\n                                    //             {product.node.variants.edges[0] &&\r\n                                    //                 toCurrency(\r\n                                    //                     product.node.variants.edges[0].node.price\r\n                                    //                 )}\r\n                                    //         </TextStyle>\r\n                                    //     </Table.Cell>\r\n                                    // </Table.Row>\r\n                                ))}\r\n                    </Table.Body>\r\n                    <Table.Footer fullWidth>\r\n                        <Table.Row></Table.Row>\r\n                    </Table.Footer>\r\n                </Table>\r\n            </Modal.Section>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ProductsList\r\n"]},"metadata":{},"sourceType":"module"}