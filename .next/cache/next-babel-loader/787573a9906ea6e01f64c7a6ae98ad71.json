{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation productUpdate($input: ProductInput!) {\\n        productUpdate(input: $input) {\\n            product {\\n                id\\n                metafields(first: 100) {\\n                    edges {\\n                        node {\\n                            namespace\\n                            key\\n                            value\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation createBranchProduct($input: CreateBranchProductInput!) {\\n        createBranchProduct(input: $input) {\\n            id\\n            branchId\\n            productId\\n            tags\\n        }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query Products {\\n        products(first: 100) {\\n            edges {\\n                node {\\n                    id\\n                    title\\n                    tags\\n                    description(truncateAt: 100)\\n                    variants(first: 1) {\\n                        edges {\\n                            node {\\n                                id\\n                                price\\n                            }\\n                        }\\n                    }\\n                    images(first: 1) {\\n                        edges {\\n                            node {\\n                                originalSrc\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useCallback } from 'react';\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { Modal, Thumbnail, Checkbox, TextStyle } from '@shopify/polaris';\nimport { Table, Header } from 'semantic-ui-react';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nimport BranchRow from './BranchRow';\nAPI.configure(config);\nvar listProducts = gql(_templateObject());\nvar createBranchProduct = gql(_templateObject2());\nvar productUpdate = gql(_templateObject3());\n\nvar ProductsList = function ProductsList(_ref) {\n  _s();\n\n  var active = _ref.active,\n      handleChange = _ref.handleChange,\n      branchId = _ref.branchId,\n      branchName = _ref.branchName;\n\n  var _useQuery = useQuery(listProducts),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  var _useState = useState([]),\n      rowId = _useState[0],\n      setRowId = _useState[1];\n\n  var _useState2 = useState({\n    products: []\n  }),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var _useState3 = useState(null),\n      searchValue = _useState3[0],\n      setSearchValue = _useState3[1];\n\n  var handleSearchInput = useCallback(function (newValue) {\n    return setSearchValue(newValue);\n  }, []); // const updateProducts = () => {\n  //     Promise.all(\n  //         state.products.map((product) => {\n  //             const updatedProduct = axios({\n  //                 url: 'https://transactions-avanta.myshopify.com/admin/api/2020-07/graphql.json',\n  //                 method: 'post',\n  //                 headers: {\n  //                     'Content-Type': 'application/json',\n  //                     'X-Shopify-Access-Token': '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'\n  //                 },\n  //                 data: {\n  //                     query: productUpdate,\n  //                     variables: {\n  //                         id: product.id,\n  //                         metafields: {\n  //                             namespace: branchName,\n  //                             key: branchId,\n  //                             value: product.tags[0],\n  //                             valueType: 'STRING'\n  //                         }\n  //                     }\n  //                 }\n  //             })\n  //         })\n  //     )\n  //         .then((res) => console.log('Updated product', res))\n  //         .catch((err) => console.log(err))\n  // }\n\n  var updateProducts = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return axios({\n                url: 'https://wyjl8np1l8.execute-api.us-east-1.amazonaws.com/test/update-product',\n                method: 'POST',\n                data: {\n                  products: state.products\n                }\n              });\n\n            case 3:\n              console.log('Check your lambda console');\n              _context.next = 9;\n              break;\n\n            case 6:\n              _context.prev = 6;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 6]]);\n    }));\n\n    return function updateProducts() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  if (loading) {\n    return __jsx(\"div\", null, \"Loading products...\");\n  }\n\n  if (error) {\n    console.log('Some error Zaven', error);\n    return __jsx(\"div\", null, \"Some error occured\");\n  }\n\n  var addProductsToBranch = function addProductsToBranch() {\n    Promise.all(state.products.map(function (product) {\n      API.graphql(graphqlOperation(createBranchProduct, {\n        input: {\n          id: uuidv4(),\n          branchId: branchId,\n          productId: product.id,\n          tags: product.tags\n        }\n      }));\n    })).then(function (res) {\n      return console.log('Branch products', res);\n    })[\"catch\"](function (err) {\n      return console.log(err);\n    });\n  }; // const updateProducts = async () => {\n  //     try {\n  //         await axios({\n  //             url: 'http://localhost:3000/updateProduct',\n  //             method: 'POST',\n  //             data: {\n  //                 products: state.products\n  //             }\n  //         })\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // }\n\n\n  console.log('State data from product list', state);\n  return __jsx(Modal, {\n    open: active,\n    onClose: handleChange,\n    title: \"Choose products\",\n    primaryAction: {\n      content: 'Add products to branch',\n      onAction: function onAction() {\n        addProductsToBranch();\n        updateProducts();\n        handleChange();\n      }\n    }\n  }, __jsx(Modal.Section, null, __jsx(Table, {\n    celled: true,\n    striped: true,\n    selectable: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Products\"), __jsx(Table.HeaderCell, {\n    textAlign: \"center\"\n  }, \"Price\"), __jsx(Table.HeaderCell, null, \"Bonus Percentage\"))), __jsx(Table.Body, null, data && data.products.edges.filter(function (product) {\n    if (searchValue == null) {\n      return product;\n    } else if (product.node.title.toLowerCase().includes(searchValue.toLowerCase())) {\n      return product;\n    }\n  }).map(function (product) {\n    return __jsx(BranchRow, {\n      product: product,\n      state: state,\n      setState: setState\n    }) // <Table.Row\n    //     key={product.node.id}\n    //     >\n    //     <Table.Cell>\n    //         <Header as=\"h4\" image className=\"product-header\">\n    //             <Checkbox\n    //                 checked={\n    //                     rowId.includes(product.node.id) && true\n    //                 }\n    //                 onClick={() => {\n    //                     if (rowId.includes(product.node.id)) {\n    //                         setRowId(\n    //                             rowId.filter((id) => id !== product.node.id)\n    //                         )\n    //                         setState({\n    //                             products: state.products.filter(\n    //                                 (filteredProduct) =>\n    //                                     filteredProduct.node.id !==\n    //                                     product.node.id\n    //                             )\n    //                         })\n    //                     } else {\n    //                         setRowId([...rowId, product.node.id])\n    //                         setState({\n    //                             ...state,\n    //                             products: [...state.products, product]\n    //                         })\n    //                     }\n    //                 }}\n    //             />\n    //             <Thumbnail\n    //                 source={\n    //                     product.node.images.edges[0] &&\n    //                     product.node.images.edges[0].node\n    //                         .originalSrc\n    //                 }\n    //                 size=\"small\"\n    //                 alt=\"\"\n    //             />\n    //             <Header.Content>\n    //                 {product.node.title}\n    //             </Header.Content>\n    //         </Header>\n    //     </Table.Cell>\n    //     <Table.Cell>\n    //         <TextStyle variation=\"subdued\">\n    //             {product.node.description}\n    //         </TextStyle>\n    //     </Table.Cell>\n    //     <Table.Cell textAlign=\"center\">\n    //         <TextStyle variation=\"subdued\">\n    //             {product.node.variants.edges[0] &&\n    //                 toCurrency(\n    //                     product.node.variants.edges[0].node.price\n    //                 )}\n    //         </TextStyle>\n    //     </Table.Cell>\n    // </Table.Row>\n    ;\n  })), __jsx(Table.Footer, {\n    fullWidth: true\n  }, __jsx(Table.Row, null)))));\n};\n\n_s(ProductsList, \"ZOQQMRoY0l0DY7If6qzl2ilkA1I=\", false, function () {\n  return [useQuery];\n});\n\n_c = ProductsList;\nexport default ProductsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductsList\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/components/BranchProducts.js"],"names":["React","useState","useCallback","axios","v4","uuidv4","API","graphqlOperation","gql","useQuery","Modal","Thumbnail","Checkbox","TextStyle","Table","Header","toCurrency","formatDate","config","BranchRow","configure","listProducts","createBranchProduct","productUpdate","ProductsList","active","handleChange","branchId","branchName","loading","error","data","rowId","setRowId","products","state","setState","searchValue","setSearchValue","handleSearchInput","newValue","updateProducts","url","method","console","log","addProductsToBranch","Promise","all","map","product","graphql","input","id","productId","tags","then","res","err","content","onAction","edges","filter","node","title","toLowerCase","includes"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react'\r\nimport axios from 'axios'\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport { API, graphqlOperation } from 'aws-amplify'\r\nimport gql from 'graphql-tag'\r\nimport { useQuery } from '@apollo/client'\r\nimport { Modal, Thumbnail, Checkbox, TextStyle } from '@shopify/polaris'\r\nimport { Table, Header } from 'semantic-ui-react'\r\nimport { toCurrency, formatDate } from '../utils/helper'\r\nimport config from '../aws-exports'\r\nimport BranchRow from './BranchRow'\r\n\r\nAPI.configure(config)\r\n\r\nconst listProducts = gql`\r\n    query Products {\r\n        products(first: 100) {\r\n            edges {\r\n                node {\r\n                    id\r\n                    title\r\n                    tags\r\n                    description(truncateAt: 100)\r\n                    variants(first: 1) {\r\n                        edges {\r\n                            node {\r\n                                id\r\n                                price\r\n                            }\r\n                        }\r\n                    }\r\n                    images(first: 1) {\r\n                        edges {\r\n                            node {\r\n                                originalSrc\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst createBranchProduct = gql`\r\n    mutation createBranchProduct($input: CreateBranchProductInput!) {\r\n        createBranchProduct(input: $input) {\r\n            id\r\n            branchId\r\n            productId\r\n            tags\r\n        }\r\n    }\r\n`\r\nconst productUpdate = gql`\r\n    mutation productUpdate($input: ProductInput!) {\r\n        productUpdate(input: $input) {\r\n            product {\r\n                id\r\n                metafields(first: 100) {\r\n                    edges {\r\n                        node {\r\n                            namespace\r\n                            key\r\n                            value\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\nconst ProductsList = ({ active, handleChange, branchId, branchName }) => {\r\n    const { loading, error, data } = useQuery(listProducts)\r\n    const [rowId, setRowId] = useState([])\r\n    const [state, setState] = useState({\r\n        products: []\r\n    })\r\n    const [searchValue, setSearchValue] = useState(null)\r\n    const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\r\n\r\n    // const updateProducts = () => {\r\n    //     Promise.all(\r\n    //         state.products.map((product) => {\r\n    //             const updatedProduct = axios({\r\n    //                 url: 'https://transactions-avanta.myshopify.com/admin/api/2020-07/graphql.json',\r\n    //                 method: 'post',\r\n    //                 headers: {\r\n    //                     'Content-Type': 'application/json',\r\n    //                     'X-Shopify-Access-Token': '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'\r\n    //                 },\r\n    //                 data: {\r\n    //                     query: productUpdate,\r\n    //                     variables: {\r\n    //                         id: product.id,\r\n    //                         metafields: {\r\n    //                             namespace: branchName,\r\n    //                             key: branchId,\r\n    //                             value: product.tags[0],\r\n    //                             valueType: 'STRING'\r\n    //                         }\r\n    //                     }\r\n    //                 }\r\n    //             })\r\n    //         })\r\n    //     )\r\n    //         .then((res) => console.log('Updated product', res))\r\n    //         .catch((err) => console.log(err))\r\n    // }\r\n\r\n    const updateProducts = async () => {\r\n        try {\r\n            await axios({\r\n                url: 'https://wyjl8np1l8.execute-api.us-east-1.amazonaws.com/test/update-product',\r\n                method: 'POST',\r\n                data: {\r\n                    products: state.products\r\n                }\r\n            })\r\n            console.log('Check your lambda console')\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    if (loading) {\r\n        return <div>Loading products...</div>\r\n    }\r\n\r\n    if (error) {\r\n        console.log('Some error Zaven', error)\r\n        return <div>Some error occured</div>\r\n    }\r\n\r\n    const addProductsToBranch = () => {\r\n        Promise.all(\r\n            state.products.map((product) => {\r\n                API.graphql(\r\n                    graphqlOperation(createBranchProduct, {\r\n                        input: {\r\n                            id: uuidv4(),\r\n                            branchId: branchId,\r\n                            productId: product.id,\r\n                            tags: product.tags\r\n                        }\r\n                    })\r\n                )\r\n            })\r\n        )\r\n            .then((res) => console.log('Branch products', res))\r\n            .catch((err) => console.log(err))\r\n    }\r\n\r\n    // const updateProducts = async () => {\r\n    //     try {\r\n    //         await axios({\r\n    //             url: 'http://localhost:3000/updateProduct',\r\n    //             method: 'POST',\r\n    //             data: {\r\n    //                 products: state.products\r\n    //             }\r\n    //         })\r\n    //     } catch (error) {\r\n    //         console.log(error)\r\n    //     }\r\n    // }\r\n\r\n    console.log('State data from product list', state)\r\n\r\n    return (\r\n        <Modal\r\n            open={active}\r\n            onClose={handleChange}\r\n            title=\"Choose products\"\r\n            primaryAction={{\r\n                content: 'Add products to branch',\r\n                onAction: () => {\r\n                    addProductsToBranch()\r\n                    updateProducts()\r\n                    handleChange()\r\n                }\r\n            }}>\r\n            <Modal.Section>\r\n                <Table celled striped selectable>\r\n                    <Table.Header>\r\n                        <Table.Row>\r\n                            <Table.HeaderCell>Products</Table.HeaderCell>\r\n                            <Table.HeaderCell textAlign=\"center\">Price</Table.HeaderCell>\r\n                            <Table.HeaderCell>Bonus Percentage</Table.HeaderCell>\r\n                        </Table.Row>\r\n                    </Table.Header>\r\n                    <Table.Body>\r\n                        {data &&\r\n                            data.products.edges\r\n                                .filter((product) => {\r\n                                    if (searchValue == null) {\r\n                                        return product\r\n                                    } else if (\r\n                                        product.node.title\r\n                                            .toLowerCase()\r\n                                            .includes(searchValue.toLowerCase())\r\n                                    ) {\r\n                                        return product\r\n                                    }\r\n                                })\r\n                                .map((product) => (\r\n                                    <BranchRow\r\n                                        product={product}\r\n                                        state={state}\r\n                                        setState={setState}\r\n                                    />\r\n                                    // <Table.Row\r\n                                    //     key={product.node.id}\r\n                                    //     >\r\n                                    //     <Table.Cell>\r\n                                    //         <Header as=\"h4\" image className=\"product-header\">\r\n                                    //             <Checkbox\r\n                                    //                 checked={\r\n                                    //                     rowId.includes(product.node.id) && true\r\n                                    //                 }\r\n                                    //                 onClick={() => {\r\n                                    //                     if (rowId.includes(product.node.id)) {\r\n                                    //                         setRowId(\r\n                                    //                             rowId.filter((id) => id !== product.node.id)\r\n                                    //                         )\r\n                                    //                         setState({\r\n                                    //                             products: state.products.filter(\r\n                                    //                                 (filteredProduct) =>\r\n                                    //                                     filteredProduct.node.id !==\r\n                                    //                                     product.node.id\r\n                                    //                             )\r\n                                    //                         })\r\n                                    //                     } else {\r\n                                    //                         setRowId([...rowId, product.node.id])\r\n                                    //                         setState({\r\n                                    //                             ...state,\r\n                                    //                             products: [...state.products, product]\r\n                                    //                         })\r\n                                    //                     }\r\n                                    //                 }}\r\n                                    //             />\r\n                                    //             <Thumbnail\r\n                                    //                 source={\r\n                                    //                     product.node.images.edges[0] &&\r\n                                    //                     product.node.images.edges[0].node\r\n                                    //                         .originalSrc\r\n                                    //                 }\r\n                                    //                 size=\"small\"\r\n                                    //                 alt=\"\"\r\n                                    //             />\r\n                                    //             <Header.Content>\r\n                                    //                 {product.node.title}\r\n                                    //             </Header.Content>\r\n                                    //         </Header>\r\n                                    //     </Table.Cell>\r\n                                    //     <Table.Cell>\r\n                                    //         <TextStyle variation=\"subdued\">\r\n                                    //             {product.node.description}\r\n                                    //         </TextStyle>\r\n                                    //     </Table.Cell>\r\n                                    //     <Table.Cell textAlign=\"center\">\r\n                                    //         <TextStyle variation=\"subdued\">\r\n                                    //             {product.node.variants.edges[0] &&\r\n                                    //                 toCurrency(\r\n                                    //                     product.node.variants.edges[0].node.price\r\n                                    //                 )}\r\n                                    //         </TextStyle>\r\n                                    //     </Table.Cell>\r\n                                    // </Table.Row>\r\n                                ))}\r\n                    </Table.Body>\r\n                    <Table.Footer fullWidth>\r\n                        <Table.Row></Table.Row>\r\n                    </Table.Footer>\r\n                </Table>\r\n            </Modal.Section>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ProductsList\r\n"]},"metadata":{},"sourceType":"module"}