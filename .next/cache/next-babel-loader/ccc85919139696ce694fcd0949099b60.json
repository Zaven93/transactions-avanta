{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport { Button, Icon, Card, DataTable, TextField } from \"@shopify/polaris\";\nimport { SearchMajorMonotone } from \"@shopify/polaris-icons\";\nimport { useBranchEntity } from \"../core/hooks\";\nimport { toCurrency, formatDate, extractNumbersFromString } from \"../utils/helper\";\nimport config from \"../aws-exports\";\nimport { getBranchById } from \"../graphql/queries\";\nAPI.configure(config);\n\nconst AdminBranchInfo = ({\n  branchId,\n  setBranchId\n}) => {\n  const {\n    0: branchInfo,\n    1: setBranchInfo\n  } = useState(\"\");\n  const {\n    0: searchValue,\n    1: setSearchValue\n  } = useState(null);\n  const {\n    data: branchData,\n    refetch: fetchBranch\n  } = useBranchEntity(branchId);\n  const handleSearchInput = useCallback(newValue => setSearchValue(newValue), []);\n  const getBranch = useCallback(() => {\n    fetchBranch();\n  }, [branchData]);\n  useEffect(() => {\n    getBranch();\n  }, [getBranch]);\n  useEffect(() => {\n    setBranchInfo(branchData && branchData.data.getBranch);\n  }, [branchData]);\n  return __jsx(React.Fragment, null, branchInfo && __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: () => setBranchId(null),\n    primary: true\n  }, \"Go back\"), __jsx(TextField, {\n    label: \"Search Product\",\n    value: searchValue,\n    onChange: handleSearchInput,\n    prefix: __jsx(Icon, {\n      source: SearchMajorMonotone\n    }),\n    placeholder: \"Search by Customer phone number\"\n  }), __jsx(Card, null, __jsx(DataTable, {\n    columnContentTypes: [\"text\", \"text\", \"text\", \"text\"],\n    headings: [\"Customer phone number\", \"TotalPrice\", \"TotalBonusAmount\", \"Minus from Bonus Amount\", \"CreatedAt\"],\n    rows: branchInfo && branchInfo.transactions.items.filter(transaction => {\n      if (searchValue == null) {\n        return transaction;\n      } else if (transaction.customer[0].phone.toLowerCase().includes(searchValue.toLowerCase())) {\n        return transaction;\n      }\n    }).sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt)).map(transaction => [__jsx(Button, {\n      primary: true,\n      onClick: () => redirect.dispatch(Redirect.Action.ADMIN_PATH, {\n        path: `/customers/${transaction.customer[0].id}`,\n        newContext: true\n      })\n    }, transaction.customer[0].phone), toCurrency(Number(transaction.totalPrice)), toCurrency(Number(transaction.totalBonusAmount)), transaction.note === null ? \"\" : toCurrency(extractNumbersFromString(transaction.note)), formatDate(transaction.createdAt)])\n  }))));\n};\n\nexport default AdminBranchInfo;","map":{"version":3,"sources":["/var/www/transactions-avanta/components/AdminBranchInfo.js"],"names":["React","useState","useEffect","useCallback","API","graphqlOperation","Button","Icon","Card","DataTable","TextField","SearchMajorMonotone","useBranchEntity","toCurrency","formatDate","extractNumbersFromString","config","getBranchById","configure","AdminBranchInfo","branchId","setBranchId","branchInfo","setBranchInfo","searchValue","setSearchValue","data","branchData","refetch","fetchBranch","handleSearchInput","newValue","getBranch","transactions","items","filter","transaction","customer","phone","toLowerCase","includes","sort","a","b","Date","createdAt","map","redirect","dispatch","Redirect","Action","ADMIN_PATH","path","id","newContext","Number","totalPrice","totalBonusAmount","note"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\"\nimport { API, graphqlOperation } from \"aws-amplify\"\nimport { Button, Icon, Card, DataTable, TextField } from \"@shopify/polaris\"\nimport { SearchMajorMonotone } from \"@shopify/polaris-icons\"\nimport { useBranchEntity } from \"../core/hooks\"\nimport { toCurrency, formatDate, extractNumbersFromString } from \"../utils/helper\"\nimport config from \"../aws-exports\"\nimport { getBranchById } from \"../graphql/queries\"\n\nAPI.configure(config)\n\nconst AdminBranchInfo = ({ branchId, setBranchId }) => {\n  const [branchInfo, setBranchInfo] = useState(\"\")\n  const [searchValue, setSearchValue] = useState(null)\n\n  const { data: branchData, refetch: fetchBranch } = useBranchEntity(branchId)\n\n  const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\n\n  const getBranch = useCallback(() => {\n    fetchBranch()\n  }, [branchData])\n\n  useEffect(() => {\n    getBranch()\n  }, [getBranch])\n\n  useEffect(() => {\n    setBranchInfo(branchData && branchData.data.getBranch)\n  }, [branchData])\n\n  return (\n    <>\n      {branchInfo && (\n        <>\n          <Button onClick={() => setBranchId(null)} primary>\n            Go back\n          </Button>\n          <TextField\n            label=\"Search Product\"\n            value={searchValue}\n            onChange={handleSearchInput}\n            prefix={<Icon source={SearchMajorMonotone} />}\n            placeholder=\"Search by Customer phone number\"\n          />\n          <Card>\n            <DataTable\n              columnContentTypes={[\"text\", \"text\", \"text\", \"text\"]}\n              headings={[\n                \"Customer phone number\",\n                \"TotalPrice\",\n                \"TotalBonusAmount\",\n                \"Minus from Bonus Amount\",\n                \"CreatedAt\",\n              ]}\n              rows={\n                branchInfo &&\n                branchInfo.transactions.items\n                  .filter((transaction) => {\n                    if (searchValue == null) {\n                      return transaction\n                    } else if (\n                      transaction.customer[0].phone\n                        .toLowerCase()\n                        .includes(searchValue.toLowerCase())\n                    ) {\n                      return transaction\n                    }\n                  })\n                  .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))\n                  .map((transaction) => [\n                    <Button\n                      primary\n                      onClick={() =>\n                        redirect.dispatch(Redirect.Action.ADMIN_PATH, {\n                          path: `/customers/${transaction.customer[0].id}`,\n                          newContext: true,\n                        })\n                      }>\n                      {transaction.customer[0].phone}\n                    </Button>,\n                    toCurrency(Number(transaction.totalPrice)),\n                    toCurrency(Number(transaction.totalBonusAmount)),\n                    transaction.note === null\n                      ? \"\"\n                      : toCurrency(extractNumbersFromString(transaction.note)),\n                    formatDate(transaction.createdAt),\n                  ])\n              }\n            />\n          </Card>\n        </>\n      )}\n    </>\n  )\n}\n\nexport default AdminBranchInfo\n"]},"metadata":{},"sourceType":"module"}