{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport { useQuery } from \"@apollo/client\";\nimport { Modal } from \"@shopify/polaris\";\nimport { Table } from \"semantic-ui-react\";\nimport { useBranchEntity } from \"../core/hooks\";\nimport config from \"../aws-exports\";\nimport BranchRow from \"./BranchRow\";\nimport { listProducts, getBranchById } from \"../graphql/queries\";\nimport { createBranchProduct, productUpdate, updateBranchProduct, deleteBranchProduct } from \"../graphql/mutation\";\nimport { onCreateBranchProduct, onUpdateBranchProduct, onDeleteBranchProduct } from \"../graphql/subscriptions\";\nAPI.configure(config);\n\nvar ProductsList = function ProductsList(_ref) {\n  _s();\n\n  var active = _ref.active,\n      handleChange = _ref.handleChange,\n      branchId = _ref.branchId;\n\n  var _useQuery = useQuery(listProducts),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  var _useState = useState(\"\"),\n      branchProductSubscription = _useState[0],\n      setBranchProductSubscription = _useState[1];\n\n  var _useState2 = useState([]),\n      rowId = _useState2[0],\n      setRowId = _useState2[1];\n\n  var _useState3 = useState({\n    products: []\n  }),\n      state = _useState3[0],\n      setState = _useState3[1];\n\n  var _useState4 = useState(\"\"),\n      branchInfo = _useState4[0],\n      setBranchInfo = _useState4[1];\n\n  var _useBranchEntity = useBranchEntity(branchId),\n      branchData = _useBranchEntity.data,\n      getBranch = _useBranchEntity.refetch; // const getBranch = async () => {\n  //   try {\n  //     const branch = await API.graphql(graphqlOperation(getBranchById, { id: branchId }))\n  //     setBranchInfo(branch.data.getBranch)\n  //     setRowId([\n  //       // ...rowId,\n  //       ...branch.data.getBranch.branchProducts.items.map((item) => item.productId),\n  //     ])\n  //     setState({\n  //       products: [\n  //         ...state.products,\n  //         ...branch.data.getBranch.branchProducts.items.map((product) => ({\n  //           id: product.productId,\n  //         })),\n  //       ],\n  //     })\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  // }\n  // const getBranch = () => {\n  //   try {\n  //     fetchBranch()\n  //     setBranchInfo(branchData.data.getBranch)\n  //     setRowId([\n  //       // ...rowId,\n  //       ...branchData.data.getBranch.branchProducts.items.map((item) => item.productId),\n  //     ])\n  //     setState({\n  //       products: [\n  //         ...state.products,\n  //         ...branchData.data.getBranch.branchProducts.items.map((product) => ({\n  //           id: product.productId,\n  //         })),\n  //       ],\n  //     })\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  // }\n\n\n  useEffect(function () {\n    getBranch();\n  }, [branchId]);\n  useEffect(function () {\n    if (!branchData) {\n      return;\n    }\n\n    setBranchInfo(branchData.data.getBranch);\n    setRowId(branchData.data.getBranch.branchProducts.items.map(function (item) {\n      return item.productId;\n    }));\n    setState({\n      products: [].concat(_toConsumableArray(state.products), _toConsumableArray(branchData.data.getBranch.branchProducts.items.map(function (product) {\n        return {\n          id: product.productId\n        };\n      })))\n    });\n  }, [branchData]);\n  useEffect(function () {\n    var createListener = API.graphql(graphqlOperation(onCreateBranchProduct)).subscribe({\n      next: function next(createdBranchProduct) {\n        return setBranchProductSubscription(createdBranchProduct);\n      }\n    });\n    var updateListener = API.graphql(graphqlOperation(onUpdateBranchProduct)).subscribe({\n      next: function next(updatedBranchProduct) {\n        return setBranchProductSubscription(updatedBranchProduct);\n      }\n    });\n    var deleteListener = API.graphql(graphqlOperation(onDeleteBranchProduct)).subscribe({\n      next: function next(deletedBranchProduct) {\n        return setBranchProductSubscription(deletedBranchProduct);\n      }\n    });\n    return function () {\n      createListener.unsubscribe();\n      updateListener.unsubscribe();\n      deleteListener.unsubscribe();\n    };\n  }, [branchProductSubscription]);\n\n  if (loading) {\n    return __jsx(\"div\", null, \"Loading products...\");\n  }\n\n  if (error) {\n    return __jsx(\"div\", null, \"Some error occured\");\n  }\n\n  var deleteProductsFromBranch = function deleteProductsFromBranch() {\n    var productsToDeleteFromBranch = branchInfo.branchProducts.items.filter(function (branchProduct) {\n      return !state.products.map(function (product) {\n        return product.id;\n      }).includes(branchProduct.productId);\n    });\n    Promise.all(productsToDeleteFromBranch.map(function (deleteProduct) {\n      API.graphql(graphqlOperation(deleteBranchProduct, {\n        input: {\n          id: deleteProduct.id\n        }\n      }));\n    }))[\"catch\"](function (err) {\n      return console.log(err);\n    });\n    return;\n  };\n\n  var addProductsToBranch = function addProductsToBranch() {\n    Promise.all(state.products.map(function (product) {\n      var updatedProduct = branchInfo.branchProducts.items.filter(function (branchProduct) {\n        return branchProduct.productId === product.id;\n      })[0];\n\n      if (updatedProduct) {\n        API.graphql(graphqlOperation(updateBranchProduct, {\n          input: {\n            id: updatedProduct.id,\n            tags: product.tags\n          }\n        }));\n      } else {\n        API.graphql(graphqlOperation(createBranchProduct, {\n          input: {\n            id: uuidv4(),\n            branchId: branchId,\n            productId: product.id,\n            tags: product.tags\n          }\n        }));\n      }\n    }))[\"catch\"](function (err) {\n      return console.log(err);\n    });\n    return;\n  };\n\n  console.log(\"Row id\", rowId);\n  console.log(\"BranchId\", branchId);\n  console.log(\"BranchInfo from branchProducts\", branchInfo);\n  return __jsx(Modal, {\n    open: active,\n    onClose: function onClose() {\n      return handleChange();\n    },\n    title: \"Choose products\",\n    primaryAction: {\n      content: \"Save changes\",\n      onAction: function onAction() {\n        addProductsToBranch();\n        deleteProductsFromBranch();\n        handleChange();\n      }\n    }\n  }, __jsx(Modal.Section, null, __jsx(Table, {\n    celled: true,\n    striped: true,\n    selectable: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Products\"), __jsx(Table.HeaderCell, {\n    textAlign: \"center\"\n  }, \"Price\"), __jsx(Table.HeaderCell, null, \"Bonus Percentage\"))), __jsx(Table.Body, null, data && branchInfo && data.products.edges.map(function (product) {\n    return __jsx(BranchRow, {\n      rowId: rowId,\n      setRowId: setRowId,\n      branchInfo: branchInfo,\n      branchId: branchId,\n      product: product,\n      state: state,\n      setState: setState\n    });\n  })), __jsx(Table.Footer, {\n    fullWidth: true\n  }, __jsx(Table.Row, null)))));\n};\n\n_s(ProductsList, \"Ebvs7k3CwlbmO4diyqFTHfFv5Zk=\", false, function () {\n  return [useQuery, useBranchEntity];\n});\n\n_c = ProductsList;\nexport default ProductsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductsList\");","map":{"version":3,"sources":["/var/www/transactions-avanta/components/BranchProducts.js"],"names":["React","useState","useCallback","useEffect","v4","uuidv4","API","graphqlOperation","useQuery","Modal","Table","useBranchEntity","config","BranchRow","listProducts","getBranchById","createBranchProduct","productUpdate","updateBranchProduct","deleteBranchProduct","onCreateBranchProduct","onUpdateBranchProduct","onDeleteBranchProduct","configure","ProductsList","active","handleChange","branchId","loading","error","data","branchProductSubscription","setBranchProductSubscription","rowId","setRowId","products","state","setState","branchInfo","setBranchInfo","branchData","getBranch","refetch","branchProducts","items","map","item","productId","product","id","createListener","graphql","subscribe","next","createdBranchProduct","updateListener","updatedBranchProduct","deleteListener","deletedBranchProduct","unsubscribe","deleteProductsFromBranch","productsToDeleteFromBranch","filter","branchProduct","includes","Promise","all","deleteProduct","input","err","console","log","addProductsToBranch","updatedProduct","tags","content","onAction","edges"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\"\nimport { v4 as uuidv4 } from \"uuid\"\nimport { API, graphqlOperation } from \"aws-amplify\"\nimport { useQuery } from \"@apollo/client\"\nimport { Modal } from \"@shopify/polaris\"\nimport { Table } from \"semantic-ui-react\"\nimport { useBranchEntity } from \"../core/hooks\"\nimport config from \"../aws-exports\"\nimport BranchRow from \"./BranchRow\"\nimport { listProducts, getBranchById } from \"../graphql/queries\"\nimport {\n  createBranchProduct,\n  productUpdate,\n  updateBranchProduct,\n  deleteBranchProduct,\n} from \"../graphql/mutation\"\nimport {\n  onCreateBranchProduct,\n  onUpdateBranchProduct,\n  onDeleteBranchProduct,\n} from \"../graphql/subscriptions\"\n\nAPI.configure(config)\n\nconst ProductsList = ({ active, handleChange, branchId }) => {\n  const { loading, error, data } = useQuery(listProducts)\n  const [branchProductSubscription, setBranchProductSubscription] = useState(\"\")\n  const [rowId, setRowId] = useState([])\n  const [state, setState] = useState({\n    products: [],\n  })\n  const [branchInfo, setBranchInfo] = useState(\"\")\n\n  const { data: branchData, refetch: getBranch } = useBranchEntity(branchId)\n\n  // const getBranch = async () => {\n  //   try {\n  //     const branch = await API.graphql(graphqlOperation(getBranchById, { id: branchId }))\n  //     setBranchInfo(branch.data.getBranch)\n  //     setRowId([\n  //       // ...rowId,\n  //       ...branch.data.getBranch.branchProducts.items.map((item) => item.productId),\n  //     ])\n  //     setState({\n  //       products: [\n  //         ...state.products,\n  //         ...branch.data.getBranch.branchProducts.items.map((product) => ({\n  //           id: product.productId,\n  //         })),\n  //       ],\n  //     })\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  // }\n\n  // const getBranch = () => {\n  //   try {\n  //     fetchBranch()\n  //     setBranchInfo(branchData.data.getBranch)\n  //     setRowId([\n  //       // ...rowId,\n  //       ...branchData.data.getBranch.branchProducts.items.map((item) => item.productId),\n  //     ])\n  //     setState({\n  //       products: [\n  //         ...state.products,\n  //         ...branchData.data.getBranch.branchProducts.items.map((product) => ({\n  //           id: product.productId,\n  //         })),\n  //       ],\n  //     })\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  // }\n\n  useEffect(() => {\n    getBranch()\n  }, [branchId])\n\n  useEffect(() => {\n    if (!branchData) {\n      return\n    }\n    setBranchInfo(branchData.data.getBranch)\n    setRowId(branchData.data.getBranch.branchProducts.items.map((item) => item.productId))\n    setState({\n      products: [\n        ...state.products,\n        ...branchData.data.getBranch.branchProducts.items.map((product) => ({\n          id: product.productId,\n        })),\n      ],\n    })\n  }, [branchData])\n\n  useEffect(() => {\n    const createListener = API.graphql(graphqlOperation(onCreateBranchProduct)).subscribe({\n      next: (createdBranchProduct) => setBranchProductSubscription(createdBranchProduct),\n    })\n    const updateListener = API.graphql(graphqlOperation(onUpdateBranchProduct)).subscribe({\n      next: (updatedBranchProduct) => setBranchProductSubscription(updatedBranchProduct),\n    })\n    const deleteListener = API.graphql(graphqlOperation(onDeleteBranchProduct)).subscribe({\n      next: (deletedBranchProduct) => setBranchProductSubscription(deletedBranchProduct),\n    })\n\n    return () => {\n      createListener.unsubscribe()\n      updateListener.unsubscribe()\n      deleteListener.unsubscribe()\n    }\n  }, [branchProductSubscription])\n\n  if (loading) {\n    return <div>Loading products...</div>\n  }\n\n  if (error) {\n    return <div>Some error occured</div>\n  }\n\n  const deleteProductsFromBranch = () => {\n    const productsToDeleteFromBranch = branchInfo.branchProducts.items.filter(\n      (branchProduct) =>\n        !state.products.map((product) => product.id).includes(branchProduct.productId)\n    )\n\n    Promise.all(\n      productsToDeleteFromBranch.map((deleteProduct) => {\n        API.graphql(graphqlOperation(deleteBranchProduct, { input: { id: deleteProduct.id } }))\n      })\n    ).catch((err) => console.log(err))\n\n    return\n  }\n\n  const addProductsToBranch = () => {\n    Promise.all(\n      state.products.map((product) => {\n        const updatedProduct = branchInfo.branchProducts.items.filter(\n          (branchProduct) => branchProduct.productId === product.id\n        )[0]\n        if (updatedProduct) {\n          API.graphql(\n            graphqlOperation(updateBranchProduct, {\n              input: {\n                id: updatedProduct.id,\n                tags: product.tags,\n              },\n            })\n          )\n        } else {\n          API.graphql(\n            graphqlOperation(createBranchProduct, {\n              input: {\n                id: uuidv4(),\n                branchId: branchId,\n                productId: product.id,\n                tags: product.tags,\n              },\n            })\n          )\n        }\n      })\n    ).catch((err) => console.log(err))\n\n    return\n  }\n\n  console.log(\"Row id\", rowId)\n  console.log(\"BranchId\", branchId)\n  console.log(\"BranchInfo from branchProducts\", branchInfo)\n\n  return (\n    <Modal\n      open={active}\n      onClose={() => handleChange()}\n      title=\"Choose products\"\n      primaryAction={{\n        content: \"Save changes\",\n        onAction: () => {\n          addProductsToBranch()\n          deleteProductsFromBranch()\n          handleChange()\n        },\n      }}>\n      <Modal.Section>\n        <Table celled striped selectable>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell>Products</Table.HeaderCell>\n              <Table.HeaderCell textAlign=\"center\">Price</Table.HeaderCell>\n              <Table.HeaderCell>Bonus Percentage</Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {data &&\n              branchInfo &&\n              data.products.edges.map((product) => (\n                <BranchRow\n                  rowId={rowId}\n                  setRowId={setRowId}\n                  branchInfo={branchInfo}\n                  branchId={branchId}\n                  product={product}\n                  state={state}\n                  setState={setState}\n                />\n              ))}\n          </Table.Body>\n          <Table.Footer fullWidth>\n            <Table.Row></Table.Row>\n          </Table.Footer>\n        </Table>\n      </Modal.Section>\n    </Modal>\n  )\n}\n\nexport default ProductsList\n"]},"metadata":{},"sourceType":"module"}