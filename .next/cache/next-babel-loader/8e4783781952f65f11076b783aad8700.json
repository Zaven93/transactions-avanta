{"ast":null,"code":"var _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { Auth, API, graphqlOperation } from \"aws-amplify\";\nimport { Page, Button, Modal, Form, FormLayout, TextField, Badge, Stack } from \"@shopify/polaris\";\nimport { Table, Popup, Header, Icon } from \"semantic-ui-react\";\nimport { useForm } from \"react-hook-form\";\nimport { useConfirmSignUp, useSignUp, useCreateBranch, useListBranches } from \"../core/hooks\";\nimport ProductList from \"./ProductsList\";\nimport { formatDate } from \"../utils/helper\";\nimport BranchProducts from \"./BranchProducts\";\nimport BranchList from \"./BranchList\";\nimport AdminBranchInfo from \"./AdminBranchInfo\";\nimport { createBranch } from \"../graphql/mutation\";\nimport { listBranchs } from \"../graphql/queries\";\n\nvar BranchConsole = function BranchConsole(_ref) {\n  _s();\n\n  var updateUser = _ref.updateUser;\n\n  var _useState = useState(false),\n      active = _useState[0],\n      setActive = _useState[1];\n\n  var _useState2 = useState(false),\n      activeBranchName = _useState2[0],\n      setActiveBranchName = _useState2[1];\n\n  var _useState3 = useState(false),\n      activeUsername = _useState3[0],\n      setActiveUsername = _useState3[1];\n\n  var _useState4 = useState(false),\n      activePassword = _useState4[0],\n      setActivePassword = _useState4[1];\n\n  var _useState5 = useState(false),\n      activeEmail = _useState5[0],\n      setActiveEmail = _useState5[1];\n\n  var _useState6 = useState(false),\n      activeConfirm = _useState6[0],\n      setActiveConfirm = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      branchName = _useState7[0],\n      setBranchName = _useState7[1];\n\n  var _useState8 = useState(\"\"),\n      username = _useState8[0],\n      setUsername = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      email = _useState9[0],\n      setEmail = _useState9[1];\n\n  var _useState10 = useState(\"\"),\n      password = _useState10[0],\n      setPassword = _useState10[1];\n\n  var _useState11 = useState(false),\n      showPassword = _useState11[0],\n      setShowPassword = _useState11[1];\n\n  var _useState12 = useState(\"\"),\n      code = _useState12[0],\n      setCode = _useState12[1];\n\n  var _useState13 = useState(\"signUp\"),\n      formType = _useState13[0],\n      setFormType = _useState13[1];\n\n  var _useState14 = useState(null),\n      userSub = _useState14[0],\n      setUserSub = _useState14[1];\n\n  var _useState15 = useState(\"\"),\n      branches = _useState15[0],\n      setBranches = _useState15[1];\n\n  var _useState16 = useState(null),\n      branchId = _useState16[0],\n      setBranchId = _useState16[1];\n\n  var _useSignUp = useSignUp(),\n      signUserUp = _useSignUp.signUserUp,\n      data = _useSignUp.data;\n\n  var _useConfirmSignUp = useConfirmSignUp(),\n      confirmSignUp = _useConfirmSignUp.confirmSignUp;\n\n  var _useCreateBranch = useCreateBranch(),\n      createBranch = _useCreateBranch.createBranch,\n      createdBranch = _useCreateBranch.data;\n\n  var _useListBranches = useListBranches(),\n      branchesData = _useListBranches.data,\n      listBranches = _useListBranches.refetch;\n\n  var _useForm = useForm(),\n      handleSubmit = _useForm.handleSubmit,\n      errors = _useForm.errors,\n      register = _useForm.register;\n\n  var onChangeBranchName = useCallback(function (newValue) {\n    setBranchName(newValue);\n  }, []);\n  var onChangeUsername = useCallback(function (newValue) {\n    setUsername(newValue);\n  }, []);\n  var onChangePassword = useCallback(function (newValue) {\n    setPassword(newValue);\n  }, []);\n  var onChangeEmail = useCallback(function (newValue) {\n    setEmail(newValue);\n  }, []);\n  var onChangeCode = useCallback(function (newValue) {\n    setCode(newValue);\n  }, []);\n\n  var handleChange = function handleChange() {\n    setActive(!active);\n  }; // const signUp = (e) => {\n  //   e.preventDefault()\n  //   try {\n  //     signUserUp({ username, password, attributes: { email } })\n  //     setFormType(\"confirm\")\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  // }\n\n\n  var onSubmit = function onSubmit(data) {\n    var username = data.username,\n        password = data.password,\n        email = data.email;\n\n    try {\n      signUserUp({\n        username: username,\n        password: password,\n        attributes: {\n          email: email\n        }\n      });\n      setFormType(\"confirm\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  var onConfirm = function onConfirm(data) {\n    var username = data.username,\n        code = data.code;\n\n    try {\n      confirmSignUp({\n        username: username,\n        code: code\n      });\n      createBranch({\n        userSub: userSub,\n        username: username,\n        branchName: branchName\n      });\n      setFormType(\"signUp\");\n      handleChange();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(function () {\n    setUserSub(data && data.userSub);\n  }, [data]); // const confirm = async (e) => {\n  //   e.preventDefault()\n  //   try {\n  //     confirmSignUp({ username, code })\n  //     createBranch({ userSub, username, branchName })\n  //     setFormType(\"signUp\")\n  //     handleChange()\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  // }\n\n  useEffect(function () {\n    listBranches();\n  }, []);\n  useEffect(function () {\n    setBranches(branchesData && branchesData.data);\n  }, [branchesData]);\n  console.log(\"Signed up user\", data);\n  return __jsx(React.Fragment, null, branchId && __jsx(AdminBranchInfo, {\n    setBranchId: setBranchId,\n    branchId: branchId\n  }), !branchId && __jsx(React.Fragment, null, __jsx(Stack, null, __jsx(Stack.Item, {\n    fill: true\n  }, __jsx(Button, {\n    onClick: handleChange,\n    primary: true\n  }, __jsx(Icon, {\n    name: \"code branch\"\n  }), \" Create branch\")), __jsx(Stack.Item, null, __jsx(Button, {\n    primary: true,\n    id: \"Logout\",\n    onClick: function onClick() {\n      Auth.signOut();\n      updateUser(null);\n    }\n  }, __jsx(Icon, {\n    name: \"sign out\"\n  }), \" Logout\"))), __jsx(BranchList, {\n    setBranchId: setBranchId\n  }), __jsx(Modal, {\n    open: active,\n    onClose: handleChange,\n    title: \"Fill in Branch info\"\n  }, __jsx(Modal.Section, null, formType === \"signUp\" && __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(\"div\", {\n    className: \"form-controll\"\n  }, __jsx(\"input\", {\n    name: \"branchName\",\n    ref: register({\n      required: \"Branch name is required!\"\n    }),\n    onBlur: function onBlur(e) {\n      if (e.target.value) {\n        return setActiveBranchName(true);\n      }\n\n      return setActiveBranchName(false);\n    }\n  }), __jsx(Icon, {\n    name: \"code branch\"\n  }), __jsx(\"label\", {\n    className: activeBranchName ? \"active\" : \"\",\n    htmlFor: \"branchName\"\n  }, \"Branch Name\"), errors.branchName && __jsx(\"p\", {\n    className: \"error-notification\"\n  }, errors.branchName.message)), __jsx(\"div\", {\n    className: \"form-controll\"\n  }, __jsx(\"input\", {\n    name: \"username\",\n    onChange: function onChange(e) {\n      return setUsername(e.target.value);\n    },\n    ref: register({\n      required: \"Username is required!\"\n    }),\n    onBlur: function onBlur(e) {\n      if (e.target.value) {\n        return setActiveUsername(true);\n      }\n\n      return setActiveUsername(false);\n    }\n  }), __jsx(Icon, {\n    name: \"user\"\n  }), __jsx(\"label\", {\n    className: activeUsername ? \"active\" : \"\",\n    htmlFor: \"username\"\n  }, \"Username\"), errors.username && __jsx(\"p\", {\n    className: \"error-notification\"\n  }, errors.username.message)), __jsx(\"div\", {\n    className: \"form-controll\"\n  }, __jsx(\"input\", {\n    name: \"email\",\n    ref: register({\n      required: \"Email is required!\"\n    }),\n    onBlur: function onBlur(e) {\n      if (e.target.value) {\n        return setActiveEmail(true);\n      }\n\n      return setActiveEmail(false);\n    }\n  }), __jsx(Icon, {\n    name: \"mail\"\n  }), __jsx(\"label\", {\n    className: activeEmail ? \"active\" : \"\",\n    htmlFor: \"email\"\n  }, \"Email\"), errors.email && __jsx(\"p\", {\n    className: \"error-notification\"\n  }, errors.email.message)), __jsx(\"div\", {\n    className: \"form-controll\"\n  }, __jsx(\"input\", {\n    name: \"password\",\n    type: showPassword ? \"text\" : \"password\",\n    ref: register({\n      required: \"Password is required!\"\n    }),\n    onChange: function onChange(e) {\n      return setPassword(e.target.value);\n    },\n    onBlur: function onBlur(e) {\n      if (e.target.value) {\n        return setActivePassword(true);\n      }\n\n      return setActivePassword(false);\n    }\n  }), __jsx(Icon, {\n    name: \"lock\"\n  }), __jsx(\"label\", {\n    className: activePassword ? \"active\" : \"\",\n    htmlFor: \"password\"\n  }, \"Password\"), __jsx(Icon, {\n    className: password ? \"show-eye\" : \"not-show-eye\",\n    onClick: function onClick() {\n      return setShowPassword(!showPassword);\n    },\n    name: showPassword ? \"eye slash\" : \"eye\",\n    style: {\n      color: showPassword ? \"#6774c8\" : \"\"\n    }\n  }), errors.password && __jsx(\"p\", {\n    className: \"error-notification\"\n  }, errors.password.message)), __jsx(Button, {\n    primary: true,\n    submit: true\n  }, __jsx(Icon, {\n    name: \"sign-in\"\n  }), \" Create Branch\")) // <Form onSubmit={signUp}>\n  //   <FormLayout>\n  //     <TextField\n  //       value={branchName}\n  //       onChange={onChangeBranchName}\n  //       label=\"Branch Name\"\n  //     />\n  //     {error.branchNameError && <p>{error.branchNameError}</p>}\n  //     <TextField\n  //       value={username}\n  //       onChange={onChangeUsername}\n  //       label=\"Branch admin username\"\n  //     />\n  //     <TextField value={email} onChange={onChangeEmail} label=\"Branch admin email\" />\n  //     <TextField\n  //       type=\"password\"\n  //       value={password}\n  //       onChange={onChangePassword}\n  //       label=\"Branch admin password\"\n  //     />\n  //     <Button primary submit>\n  //       Create Branch\n  //     </Button>\n  //   </FormLayout>\n  // </Form>\n  , formType === \"confirm\" && __jsx(\"form\", {\n    onSubmit: handleSubmit(onConfirm)\n  }, __jsx(\"div\", {\n    className: \"form-controll\"\n  }, __jsx(\"input\", {\n    name: \"username\",\n    value: username,\n    ref: register({\n      required: \"Username is required!\"\n    }),\n    onBlur: function onBlur(e) {\n      if (e.target.value) {\n        return setActiveUsername(true);\n      }\n\n      return setActiveUsername(false);\n    }\n  }), __jsx(Icon, {\n    name: \"user\"\n  }), __jsx(\"label\", {\n    className: activeUsername ? \"active\" : \"\",\n    htmlFor: \"username\"\n  }, \"Username\"), errors.username && __jsx(\"p\", {\n    className: \"error-notification\"\n  }, errors.username.message)), __jsx(\"div\", {\n    className: \"form-controll\"\n  }, __jsx(\"input\", {\n    name: \"confirm\",\n    ref: register({\n      required: \"Confirm code is required!\"\n    }),\n    onBlur: function onBlur(e) {\n      if (e.target.value) {\n        return setActiveConfirm(true);\n      }\n\n      return setActiveConfirm(false);\n    }\n  }), __jsx(Icon, {\n    name: \"unlock alternate\"\n  }), __jsx(\"label\", {\n    className: activeConfirm ? \"active\" : \"\",\n    htmlFor: \"confirm\"\n  }, \"Confirm code\"), errors.confirm && __jsx(\"p\", {\n    className: \"error-notification\"\n  }, errors.confirm.message)), __jsx(Button, {\n    primary: true,\n    submit: true\n  }, __jsx(Icon, {\n    name: \"sign-in\"\n  }), \" Confirm\")) // <Form onSubmit={confirm}>\n  //   <FormLayout>\n  //     <TextField\n  //       value={username}\n  //       onChange={onChangeUsername}\n  //       label=\"Branch admin username\"\n  //     />\n  //     <TextField value={code} onChange={onChangeCode} label=\"Confirmation code\" />\n  //     <Button primary submit>\n  //       Confirm\n  //     </Button>\n  //   </FormLayout>\n  // </Form>\n  ))));\n};\n\n_s(BranchConsole, \"45A7CmwX+1CEXEq8LBvnS4Z1Sms=\", false, function () {\n  return [useSignUp, useConfirmSignUp, useCreateBranch, useListBranches, useForm];\n});\n\n_c = BranchConsole;\nexport default BranchConsole;\n\nvar _c;\n\n$RefreshReg$(_c, \"BranchConsole\");","map":{"version":3,"sources":["/var/www/transactions-avanta/components/BranchConsole.js"],"names":["React","useState","useEffect","useRef","useCallback","Auth","API","graphqlOperation","Page","Button","Modal","Form","FormLayout","TextField","Badge","Stack","Table","Popup","Header","Icon","useForm","useConfirmSignUp","useSignUp","useCreateBranch","useListBranches","ProductList","formatDate","BranchProducts","BranchList","AdminBranchInfo","createBranch","listBranchs","BranchConsole","updateUser","active","setActive","activeBranchName","setActiveBranchName","activeUsername","setActiveUsername","activePassword","setActivePassword","activeEmail","setActiveEmail","activeConfirm","setActiveConfirm","branchName","setBranchName","username","setUsername","email","setEmail","password","setPassword","showPassword","setShowPassword","code","setCode","formType","setFormType","userSub","setUserSub","branches","setBranches","branchId","setBranchId","signUserUp","data","confirmSignUp","createdBranch","branchesData","listBranches","refetch","handleSubmit","errors","register","onChangeBranchName","newValue","onChangeUsername","onChangePassword","onChangeEmail","onChangeCode","handleChange","onSubmit","attributes","error","console","log","onConfirm","signOut","required","e","target","value","message","color","confirm"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from \"react\"\nimport { Auth, API, graphqlOperation } from \"aws-amplify\"\nimport { Page, Button, Modal, Form, FormLayout, TextField, Badge, Stack } from \"@shopify/polaris\"\nimport { Table, Popup, Header, Icon } from \"semantic-ui-react\"\nimport { useForm } from \"react-hook-form\"\nimport { useConfirmSignUp, useSignUp, useCreateBranch, useListBranches } from \"../core/hooks\"\nimport ProductList from \"./ProductsList\"\nimport { formatDate } from \"../utils/helper\"\nimport BranchProducts from \"./BranchProducts\"\nimport BranchList from \"./BranchList\"\nimport AdminBranchInfo from \"./AdminBranchInfo\"\nimport { createBranch } from \"../graphql/mutation\"\nimport { listBranchs } from \"../graphql/queries\"\n\nconst BranchConsole = ({ updateUser }) => {\n  const [active, setActive] = useState(false)\n  const [activeBranchName, setActiveBranchName] = useState(false)\n  const [activeUsername, setActiveUsername] = useState(false)\n  const [activePassword, setActivePassword] = useState(false)\n  const [activeEmail, setActiveEmail] = useState(false)\n  const [activeConfirm, setActiveConfirm] = useState(false)\n  const [branchName, setBranchName] = useState(\"\")\n  const [username, setUsername] = useState(\"\")\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [showPassword, setShowPassword] = useState(false)\n  const [code, setCode] = useState(\"\")\n  const [formType, setFormType] = useState(\"signUp\")\n  const [userSub, setUserSub] = useState(null)\n  const [branches, setBranches] = useState(\"\")\n  const [branchId, setBranchId] = useState(null)\n\n  const { signUserUp, data } = useSignUp()\n  const { confirmSignUp } = useConfirmSignUp()\n  const { createBranch, data: createdBranch } = useCreateBranch()\n  const { data: branchesData, refetch: listBranches } = useListBranches()\n  const { handleSubmit, errors, register } = useForm()\n\n  const onChangeBranchName = useCallback((newValue) => {\n    setBranchName(newValue)\n  }, [])\n\n  const onChangeUsername = useCallback((newValue) => {\n    setUsername(newValue)\n  }, [])\n\n  const onChangePassword = useCallback((newValue) => {\n    setPassword(newValue)\n  }, [])\n\n  const onChangeEmail = useCallback((newValue) => {\n    setEmail(newValue)\n  }, [])\n\n  const onChangeCode = useCallback((newValue) => {\n    setCode(newValue)\n  }, [])\n\n  const handleChange = () => {\n    setActive(!active)\n  }\n\n  // const signUp = (e) => {\n  //   e.preventDefault()\n  //   try {\n  //     signUserUp({ username, password, attributes: { email } })\n  //     setFormType(\"confirm\")\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  // }\n\n  const onSubmit = (data) => {\n    const { username, password, email } = data\n    try {\n      signUserUp({ username, password, attributes: { email } })\n      setFormType(\"confirm\")\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const onConfirm = (data) => {\n    const { username, code } = data\n    try {\n      confirmSignUp({ username, code })\n      createBranch({ userSub, username, branchName })\n      setFormType(\"signUp\")\n      handleChange()\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    setUserSub(data && data.userSub)\n  }, [data])\n\n  // const confirm = async (e) => {\n  //   e.preventDefault()\n  //   try {\n  //     confirmSignUp({ username, code })\n  //     createBranch({ userSub, username, branchName })\n  //     setFormType(\"signUp\")\n  //     handleChange()\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  // }\n\n  useEffect(() => {\n    listBranches()\n  }, [])\n\n  useEffect(() => {\n    setBranches(branchesData && branchesData.data)\n  }, [branchesData])\n\n  console.log(\"Signed up user\", data)\n\n  return (\n    <>\n      {branchId && <AdminBranchInfo setBranchId={setBranchId} branchId={branchId} />}\n      {!branchId && (\n        <>\n          <Stack>\n            <Stack.Item fill>\n              <Button onClick={handleChange} primary>\n                <Icon name=\"code branch\" /> Create branch\n              </Button>\n            </Stack.Item>\n            <Stack.Item>\n              <Button\n                primary\n                id=\"Logout\"\n                onClick={() => {\n                  Auth.signOut()\n                  updateUser(null)\n                }}>\n                <Icon name=\"sign out\" /> Logout\n              </Button>\n            </Stack.Item>\n          </Stack>\n          <BranchList setBranchId={setBranchId} />\n          <Modal open={active} onClose={handleChange} title=\"Fill in Branch info\">\n            <Modal.Section>\n              {formType === \"signUp\" && (\n                <form onSubmit={handleSubmit(onSubmit)}>\n                  <div className=\"form-controll\">\n                    <input\n                      name=\"branchName\"\n                      ref={register({ required: \"Branch name is required!\" })}\n                      onBlur={(e) => {\n                        if (e.target.value) {\n                          return setActiveBranchName(true)\n                        }\n                        return setActiveBranchName(false)\n                      }}\n                    />\n                    <Icon name=\"code branch\" />\n                    <label className={activeBranchName ? \"active\" : \"\"} htmlFor=\"branchName\">\n                      Branch Name\n                    </label>\n                    {errors.branchName && (\n                      <p className=\"error-notification\">{errors.branchName.message}</p>\n                    )}\n                  </div>\n                  <div className=\"form-controll\">\n                    <input\n                      name=\"username\"\n                      onChange={(e) => setUsername(e.target.value)}\n                      ref={register({ required: \"Username is required!\" })}\n                      onBlur={(e) => {\n                        if (e.target.value) {\n                          return setActiveUsername(true)\n                        }\n                        return setActiveUsername(false)\n                      }}\n                    />\n                    <Icon name=\"user\" />\n                    <label className={activeUsername ? \"active\" : \"\"} htmlFor=\"username\">\n                      Username\n                    </label>\n                    {errors.username && (\n                      <p className=\"error-notification\">{errors.username.message}</p>\n                    )}\n                  </div>\n                  <div className=\"form-controll\">\n                    <input\n                      name=\"email\"\n                      ref={register({ required: \"Email is required!\" })}\n                      onBlur={(e) => {\n                        if (e.target.value) {\n                          return setActiveEmail(true)\n                        }\n                        return setActiveEmail(false)\n                      }}\n                    />\n                    <Icon name=\"mail\" />\n                    <label className={activeEmail ? \"active\" : \"\"} htmlFor=\"email\">\n                      Email\n                    </label>\n                    {errors.email && <p className=\"error-notification\">{errors.email.message}</p>}\n                  </div>\n                  <div className=\"form-controll\">\n                    <input\n                      name=\"password\"\n                      type={showPassword ? \"text\" : \"password\"}\n                      ref={register({ required: \"Password is required!\" })}\n                      onChange={(e) => setPassword(e.target.value)}\n                      onBlur={(e) => {\n                        if (e.target.value) {\n                          return setActivePassword(true)\n                        }\n                        return setActivePassword(false)\n                      }}\n                    />\n                    <Icon name=\"lock\" />\n                    <label className={activePassword ? \"active\" : \"\"} htmlFor=\"password\">\n                      Password\n                    </label>\n                    <Icon\n                      className={password ? \"show-eye\" : \"not-show-eye\"}\n                      onClick={() => setShowPassword(!showPassword)}\n                      name={showPassword ? \"eye slash\" : \"eye\"}\n                      style={{ color: showPassword ? \"#6774c8\" : \"\" }}\n                    />\n                    {errors.password && (\n                      <p className=\"error-notification\">{errors.password.message}</p>\n                    )}\n                  </div>\n                  <Button primary submit>\n                    <Icon name=\"sign-in\" /> Create Branch\n                  </Button>\n                </form>\n                // <Form onSubmit={signUp}>\n                //   <FormLayout>\n                //     <TextField\n                //       value={branchName}\n                //       onChange={onChangeBranchName}\n                //       label=\"Branch Name\"\n                //     />\n                //     {error.branchNameError && <p>{error.branchNameError}</p>}\n                //     <TextField\n                //       value={username}\n                //       onChange={onChangeUsername}\n                //       label=\"Branch admin username\"\n                //     />\n                //     <TextField value={email} onChange={onChangeEmail} label=\"Branch admin email\" />\n                //     <TextField\n                //       type=\"password\"\n                //       value={password}\n                //       onChange={onChangePassword}\n                //       label=\"Branch admin password\"\n                //     />\n                //     <Button primary submit>\n                //       Create Branch\n                //     </Button>\n                //   </FormLayout>\n                // </Form>\n              )}\n              {formType === \"confirm\" && (\n                <form onSubmit={handleSubmit(onConfirm)}>\n                  <div className=\"form-controll\">\n                    <input\n                      name=\"username\"\n                      value={username}\n                      ref={register({ required: \"Username is required!\" })}\n                      onBlur={(e) => {\n                        if (e.target.value) {\n                          return setActiveUsername(true)\n                        }\n                        return setActiveUsername(false)\n                      }}\n                    />\n                    <Icon name=\"user\" />\n                    <label className={activeUsername ? \"active\" : \"\"} htmlFor=\"username\">\n                      Username\n                    </label>\n                    {errors.username && (\n                      <p className=\"error-notification\">{errors.username.message}</p>\n                    )}\n                  </div>\n                  <div className=\"form-controll\">\n                    <input\n                      name=\"confirm\"\n                      ref={register({ required: \"Confirm code is required!\" })}\n                      onBlur={(e) => {\n                        if (e.target.value) {\n                          return setActiveConfirm(true)\n                        }\n                        return setActiveConfirm(false)\n                      }}\n                    />\n                    <Icon name=\"unlock alternate\" />\n                    <label className={activeConfirm ? \"active\" : \"\"} htmlFor=\"confirm\">\n                      Confirm code\n                    </label>\n                    {errors.confirm && (\n                      <p className=\"error-notification\">{errors.confirm.message}</p>\n                    )}\n                  </div>\n                  <Button primary submit>\n                    <Icon name=\"sign-in\" /> Confirm\n                  </Button>\n                </form>\n                // <Form onSubmit={confirm}>\n                //   <FormLayout>\n                //     <TextField\n                //       value={username}\n                //       onChange={onChangeUsername}\n                //       label=\"Branch admin username\"\n                //     />\n                //     <TextField value={code} onChange={onChangeCode} label=\"Confirmation code\" />\n                //     <Button primary submit>\n                //       Confirm\n                //     </Button>\n                //   </FormLayout>\n                // </Form>\n              )}\n            </Modal.Section>\n          </Modal>\n        </>\n      )}\n    </>\n  )\n}\n\nexport default BranchConsole\n"]},"metadata":{},"sourceType":"module"}