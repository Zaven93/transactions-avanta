{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport axios from 'axios';\nimport createApp from '@shopify/app-bridge';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport gql from 'graphql-tag';\nimport { print } from 'graphql';\nimport { Card, DataTable, Button, Page, TextField, ChoiceList, Filters, Icon } from '@shopify/polaris';\nimport { SearchMajorMonotone } from '@shopify/polaris-icons';\nimport { toCurrency } from '../utils/helper';\nconst listTransactions = gql`\n    query listTransactions($limit: Int, $nextToken: String) {\n        listTransactions(limit: $limit, nextToken: $nextToken) {\n            nextToken\n            items {\n                id\n                totalPrice\n                totalBonusAmount\n                currency\n                products {\n                    id\n                    title\n                    bonusPercentage\n                    priceAmount\n                    priceCurrency\n                    image\n                }\n                customer {\n                    id\n                    firstName\n                    lastName\n                    phone\n                    email\n                }\n                createdAt\n            }\n        }\n    }\n`;\n\nconst Index = () => {\n  const {\n    0: searchValue,\n    1: setSearchValue\n  } = useState(null);\n  const {\n    0: nextPaginateToken,\n    1: setNextPaginateToken\n  } = useState(null);\n  const {\n    0: previousPaginateTokens,\n    1: setPreviousPaginateTokens\n  } = useState([]);\n  const {\n    0: fetchCount,\n    1: setFetchCount\n  } = useState(0);\n  const handleSearchInput = useCallback(newValue => setSearchValue(newValue), []);\n  const fetchTransactions = useCallback(async () => {\n    try {\n      const data = await axios({\n        url: 'https://kytejmxrrrgahiikcodklhf6rq.appsync-api.us-east-1.amazonaws.com/graphql',\n        method: 'post',\n        headers: {\n          'x-api-key': 'da2-iwznaxe3h5bxznagzuctrhqekm'\n        },\n        data: {\n          query: print(listTransactions),\n          variables: {\n            limit: 8\n          }\n        }\n      });\n      console.log('Axios data', data.data);\n    } catch (error) {\n      console.log(error);\n    }\n  }, [listTransactions]);\n  useEffect(() => {\n    fetchTransactions();\n  }, [fetchTransactions]);\n  const app = createApp({\n    apiKey: '3b01063bac3031d13101100ef3e44fd5',\n    shopOrigin: 'transactions-avanta.myshopify.com'\n  });\n  const redirect = Redirect.create(app);\n\n  const formatDate = rowDate => {\n    const date = new Date(rowDate);\n    const year = new Intl.DateTimeFormat('en', {\n      year: 'numeric'\n    }).format(date);\n    const month = new Intl.DateTimeFormat('en', {\n      month: 'short'\n    }).format(date);\n    const day = new Intl.DateTimeFormat('en', {\n      day: '2-digit'\n    }).format(date);\n    return `${day}-${month}-${year}`;\n  }; // const rows = data.listTransactions.items\n  //     .filter((transaction) => {\n  //         if (searchValue == null) {\n  //             return transaction\n  //         } else if (\n  //             transaction.customer[0].phone.toLowerCase().includes(searchValue.toLowerCase())\n  //         ) {\n  //             return transaction\n  //         }\n  //     })\n  //     .map((transaction) => [\n  //         <Button\n  //             primary\n  //             onClick={() =>\n  //                 redirect.dispatch(Redirect.Action.ADMIN_PATH, {\n  //                     path: `/customers/${transaction.customer[0].id}`,\n  //                     newContext: true\n  //                 })\n  //             }>\n  //             {transaction.customer[0].phone}\n  //         </Button>,\n  //         toCurrency(Number(transaction.totalPrice)),\n  //         toCurrency(Number(transaction.totalBonusAmount)),\n  //         formatDate(transaction.createdAt)\n  //     ])\n\n\n  return __jsx(Page, {\n    title: \"Transactions\"\n  }, __jsx(TextField, {\n    label: \"Search Product\",\n    value: searchValue,\n    onChange: handleSearchInput,\n    prefix: __jsx(Icon, {\n      source: SearchMajorMonotone\n    }),\n    placeholder: \"Search by Customer phone number\"\n  }), __jsx(Button, {\n    onClick: async () => {\n      await getTransactions({\n        variables: {\n          nextToken: nextPaginateToken,\n          limit: 4\n        }\n      });\n      setNextPaginateToken(previousPaginateTokens.push(nextPaginateToken));\n    }\n  }, \"Paginate next\"), __jsx(Button, {\n    onClick: () => getTransactions()\n  }, \"Paginate previous\"), __jsx(Button, {\n    primary: true,\n    onClick: () => redirect.dispatch(Redirect.Action.REMOTE, {\n      url: 'https://dev.d3ivgpkzuz6hkr.amplifyapp.com',\n      newContext: true\n    })\n  }, \"Create transaction\"));\n}; // export default withApollo(Index)\n\n\nexport default Index;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/pages/index.js"],"names":["React","useState","useCallback","useEffect","axios","createApp","Redirect","gql","print","Card","DataTable","Button","Page","TextField","ChoiceList","Filters","Icon","SearchMajorMonotone","toCurrency","listTransactions","Index","searchValue","setSearchValue","nextPaginateToken","setNextPaginateToken","previousPaginateTokens","setPreviousPaginateTokens","fetchCount","setFetchCount","handleSearchInput","newValue","fetchTransactions","data","url","method","headers","query","variables","limit","console","log","error","app","apiKey","shopOrigin","redirect","create","formatDate","rowDate","date","Date","year","Intl","DateTimeFormat","format","month","day","getTransactions","nextToken","push","dispatch","Action","REMOTE","newContext"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport createApp from '@shopify/app-bridge'\r\nimport { Redirect } from '@shopify/app-bridge/actions'\r\nimport gql from 'graphql-tag'\r\nimport { print } from 'graphql'\r\nimport {\r\n    Card,\r\n    DataTable,\r\n    Button,\r\n    Page,\r\n    TextField,\r\n    ChoiceList,\r\n    Filters,\r\n    Icon\r\n} from '@shopify/polaris'\r\nimport { SearchMajorMonotone } from '@shopify/polaris-icons'\r\nimport { toCurrency } from '../utils/helper'\r\n\r\nconst listTransactions = gql`\r\n    query listTransactions($limit: Int, $nextToken: String) {\r\n        listTransactions(limit: $limit, nextToken: $nextToken) {\r\n            nextToken\r\n            items {\r\n                id\r\n                totalPrice\r\n                totalBonusAmount\r\n                currency\r\n                products {\r\n                    id\r\n                    title\r\n                    bonusPercentage\r\n                    priceAmount\r\n                    priceCurrency\r\n                    image\r\n                }\r\n                customer {\r\n                    id\r\n                    firstName\r\n                    lastName\r\n                    phone\r\n                    email\r\n                }\r\n                createdAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst Index = () => {\r\n    const [searchValue, setSearchValue] = useState(null)\r\n    const [nextPaginateToken, setNextPaginateToken] = useState(null)\r\n    const [previousPaginateTokens, setPreviousPaginateTokens] = useState([])\r\n    const [fetchCount, setFetchCount] = useState(0)\r\n    const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\r\n\r\n    const fetchTransactions = useCallback(async () => {\r\n        try {\r\n            const data = await axios({\r\n                url:\r\n                    'https://kytejmxrrrgahiikcodklhf6rq.appsync-api.us-east-1.amazonaws.com/graphql',\r\n                method: 'post',\r\n                headers: {\r\n                    'x-api-key': 'da2-iwznaxe3h5bxznagzuctrhqekm'\r\n                },\r\n                data: {\r\n                    query: print(listTransactions),\r\n                    variables: {\r\n                        limit: 8\r\n                    }\r\n                }\r\n            })\r\n\r\n            console.log('Axios data', data.data)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }, [listTransactions])\r\n\r\n    useEffect(() => {\r\n        fetchTransactions()\r\n    }, [fetchTransactions])\r\n\r\n    const app = createApp({\r\n        apiKey: '3b01063bac3031d13101100ef3e44fd5',\r\n        shopOrigin: 'transactions-avanta.myshopify.com'\r\n    })\r\n\r\n    const redirect = Redirect.create(app)\r\n\r\n    const formatDate = (rowDate) => {\r\n        const date = new Date(rowDate)\r\n        const year = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(date)\r\n        const month = new Intl.DateTimeFormat('en', { month: 'short' }).format(date)\r\n        const day = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(date)\r\n\r\n        return `${day}-${month}-${year}`\r\n    }\r\n\r\n    // const rows = data.listTransactions.items\r\n    //     .filter((transaction) => {\r\n    //         if (searchValue == null) {\r\n    //             return transaction\r\n    //         } else if (\r\n    //             transaction.customer[0].phone.toLowerCase().includes(searchValue.toLowerCase())\r\n    //         ) {\r\n    //             return transaction\r\n    //         }\r\n    //     })\r\n    //     .map((transaction) => [\r\n    //         <Button\r\n    //             primary\r\n    //             onClick={() =>\r\n    //                 redirect.dispatch(Redirect.Action.ADMIN_PATH, {\r\n    //                     path: `/customers/${transaction.customer[0].id}`,\r\n    //                     newContext: true\r\n    //                 })\r\n    //             }>\r\n    //             {transaction.customer[0].phone}\r\n    //         </Button>,\r\n    //         toCurrency(Number(transaction.totalPrice)),\r\n    //         toCurrency(Number(transaction.totalBonusAmount)),\r\n    //         formatDate(transaction.createdAt)\r\n    //     ])\r\n\r\n    return (\r\n        <Page title=\"Transactions\">\r\n            <TextField\r\n                label=\"Search Product\"\r\n                value={searchValue}\r\n                onChange={handleSearchInput}\r\n                prefix={<Icon source={SearchMajorMonotone} />}\r\n                placeholder=\"Search by Customer phone number\"\r\n            />\r\n            <Button\r\n                onClick={async () => {\r\n                    await getTransactions({\r\n                        variables: { nextToken: nextPaginateToken, limit: 4 }\r\n                    })\r\n                    setNextPaginateToken(previousPaginateTokens.push(nextPaginateToken))\r\n                }}>\r\n                Paginate next\r\n            </Button>\r\n            <Button onClick={() => getTransactions()}>Paginate previous</Button>\r\n            <Button\r\n                primary\r\n                onClick={() =>\r\n                    redirect.dispatch(Redirect.Action.REMOTE, {\r\n                        url: 'https://dev.d3ivgpkzuz6hkr.amplifyapp.com',\r\n                        newContext: true\r\n                    })\r\n                }>\r\n                Create transaction\r\n            </Button>\r\n            {/* <Card>\r\n                <DataTable\r\n                    columnContentTypes={['text', 'text', 'text', 'text']}\r\n                    headings={[\r\n                        'Customer phone number',\r\n                        'TotalPrice',\r\n                        'TotalBonusAmount',\r\n                        'CreatedAt'\r\n                    ]}\r\n                    rows={rows}\r\n                />\r\n            </Card> */}\r\n        </Page>\r\n    )\r\n}\r\n\r\n// export default withApollo(Index)\r\nexport default Index\r\n"]},"metadata":{},"sourceType":"module"}