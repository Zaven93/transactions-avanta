{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query listBranchs {\\n        listBranchs {\\n            items {\\n                adminId\\n                branchName\\n                createdAt\\n                id\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Auth, API, graphqlOperation } from 'aws-amplify';\nimport gql from 'graphql-tag';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Page, Button, Modal, Form, FormLayout, TextField, Badge } from '@shopify/polaris';\nimport { Table, Popup, Header, Icon } from 'semantic-ui-react';\nimport ProductList from './ProductsList';\nimport { formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nimport BranchProducts from './BranchProducts';\nAPI.configure(config);\nvar listBranchs = gql(_templateObject());\n\nvar BranchList = function BranchList() {\n  _s();\n\n  var _useState = useState(false),\n      active = _useState[0],\n      setActive = _useState[1];\n\n  var _useState2 = useState(''),\n      branches = _useState2[0],\n      setBranches = _useState2[1];\n\n  var _useState3 = useState(''),\n      branchId = _useState3[0],\n      setBranchId = _useState3[1];\n\n  var handleChange = function handleChange() {\n    setActive(!active);\n  };\n\n  var fetchBranches = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var getBranches;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return API.graphql(graphqlOperation(listBranchs));\n\n            case 3:\n              getBranches = _context.sent;\n              setBranches(getBranches.data);\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 7]]);\n    }));\n\n    return function fetchBranches() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    fetchBranches();\n  }, []);\n  console.log('Branch id', branchId);\n  return __jsx(React.Fragment, null, __jsx(Table, {\n    selectable: true,\n    celled: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Branch Name\"), __jsx(Table.HeaderCell, null, \"Created At\"), __jsx(Table.HeaderCell, {\n    textAlign: \"center\"\n  }, \"Actions\"))), __jsx(Table.Body, null, branches && branches.listBranchs.items.map(function (item) {\n    return __jsx(Table.Row, {\n      key: item.id\n    }, __jsx(Table.Cell, null, __jsx(Badge, {\n      size: \"medium\",\n      status: \"info\"\n    }, item.branchName)), __jsx(Table.Cell, null, formatDate(item.createdAt)), __jsx(Table.Cell, {\n      className: \"branch-actions\"\n    }, __jsx(Popup, {\n      content: \"Edit branch\",\n      trigger: __jsx(Icon, {\n        onClick: function onClick() {\n          setBranchId(item.id);\n          handleChange();\n        },\n        className: \"edit-branch\",\n        name: \"edit outline\"\n      })\n    }), __jsx(Popup, {\n      content: \"Delete Branch\",\n      trigger: __jsx(Icon, {\n        className: \"remove-branch\",\n        name: \"trash alternate\"\n      })\n    })));\n  }))), __jsx(BranchProducts, {\n    branchId: branchId,\n    active: active,\n    handleChange: handleChange\n  }));\n};\n\n_s(BranchList, \"6JePom5STeztoGkXrs37E6C1kmo=\");\n\n_c = BranchList;\nexport default BranchList;\n\nvar _c;\n\n$RefreshReg$(_c, \"BranchList\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/components/BranchList.js"],"names":["React","useState","useEffect","useRef","useCallback","Auth","API","graphqlOperation","gql","v4","uuidv4","Page","Button","Modal","Form","FormLayout","TextField","Badge","Table","Popup","Header","Icon","ProductList","formatDate","config","BranchProducts","configure","listBranchs","BranchList","active","setActive","branches","setBranches","branchId","setBranchId","handleChange","fetchBranches","graphql","getBranches","data","console","log","items","map","item","id","branchName","createdAt"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react'\r\nimport { Auth, API, graphqlOperation } from 'aws-amplify'\r\nimport gql from 'graphql-tag'\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport { Page, Button, Modal, Form, FormLayout, TextField, Badge } from '@shopify/polaris'\r\nimport { Table, Popup, Header, Icon } from 'semantic-ui-react'\r\nimport ProductList from './ProductsList'\r\nimport { formatDate } from '../utils/helper'\r\nimport config from '../aws-exports'\r\nimport BranchProducts from './BranchProducts'\r\n\r\nAPI.configure(config)\r\n\r\nconst listBranchs = gql`\r\n    query listBranchs {\r\n        listBranchs {\r\n            items {\r\n                adminId\r\n                branchName\r\n                createdAt\r\n                id\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst BranchList = () => {\r\n    const [active, setActive] = useState(false)\r\n    const [branches, setBranches] = useState('')\r\n    const [branchId, setBranchId] = useState('')\r\n\r\n    const handleChange = () => {\r\n        setActive(!active)\r\n    }\r\n\r\n    const fetchBranches = async () => {\r\n        try {\r\n            const getBranches = await API.graphql(graphqlOperation(listBranchs))\r\n            setBranches(getBranches.data)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchBranches()\r\n    }, [])\r\n\r\n    console.log('Branch id', branchId)\r\n\r\n    return (\r\n        <>\r\n            <Table selectable celled>\r\n                <Table.Header>\r\n                    <Table.Row>\r\n                        <Table.HeaderCell>Branch Name</Table.HeaderCell>\r\n                        <Table.HeaderCell>Created At</Table.HeaderCell>\r\n                        <Table.HeaderCell textAlign=\"center\">Actions</Table.HeaderCell>\r\n                    </Table.Row>\r\n                </Table.Header>\r\n                <Table.Body>\r\n                    {branches &&\r\n                        branches.listBranchs.items.map((item) => (\r\n                            <Table.Row key={item.id}>\r\n                                <Table.Cell>\r\n                                    <Badge size=\"medium\" status=\"info\">\r\n                                        {item.branchName}\r\n                                    </Badge>\r\n                                </Table.Cell>\r\n                                <Table.Cell>{formatDate(item.createdAt)}</Table.Cell>\r\n                                <Table.Cell className=\"branch-actions\">\r\n                                    <Popup\r\n                                        content=\"Edit branch\"\r\n                                        trigger={\r\n                                            <Icon\r\n                                                onClick={() => {\r\n                                                    setBranchId(item.id)\r\n                                                    handleChange()\r\n                                                }}\r\n                                                className=\"edit-branch\"\r\n                                                name=\"edit outline\"\r\n                                            />\r\n                                        }\r\n                                    />\r\n                                    <Popup\r\n                                        content=\"Delete Branch\"\r\n                                        trigger={\r\n                                            <Icon\r\n                                                className=\"remove-branch\"\r\n                                                name=\"trash alternate\"\r\n                                            />\r\n                                        }\r\n                                    />\r\n                                </Table.Cell>\r\n                            </Table.Row>\r\n                        ))}\r\n                </Table.Body>\r\n            </Table>\r\n            <BranchProducts branchId={branchId} active={active} handleChange={handleChange} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BranchList\r\n"]},"metadata":{},"sourceType":"module"}