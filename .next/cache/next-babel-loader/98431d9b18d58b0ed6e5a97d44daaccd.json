{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport { Table, Icon, Popup, Header } from \"semantic-ui-react\";\nimport { Badge } from \"@shopify/polaris\";\nimport { useFetchPaymentRequest } from \"../core/hooks\";\nimport { toCurrency, formatDate } from \"../utils/helper\";\nimport ProductList from \"./ProductsList\";\nimport config from \"../aws-exports\";\nimport { updatePaymentRequest } from \"../graphql/mutation\";\nimport { listPaymentRequest } from \"../graphql/queries\";\nimport { paymentSubscription } from \"../graphql/subscriptions\";\nAPI.configure(config);\n\nvar PendingPaymentRequest = function PendingPaymentRequest(_ref) {\n  _s();\n\n  var createUpdatePaymentSubscription = _ref.createUpdatePaymentSubscription,\n      branchId = _ref.branchId;\n\n  var _useState = useState(\"\"),\n      paymentRequestId = _useState[0],\n      setPaymentRequestId = _useState[1];\n\n  var _useState2 = useState(false),\n      active = _useState2[0],\n      setActive = _useState2[1];\n\n  var _useState3 = useState([]),\n      paymentRequestItems = _useState3[0],\n      setPaymentRequestItems = _useState3[1];\n\n  var _useFetchPaymentReque = useFetchPaymentRequest(),\n      fetchPaymentRequest = _useFetchPaymentReque.fetchPaymentRequest,\n      isLoading = _useFetchPaymentReque.isLoading,\n      error = _useFetchPaymentReque.error,\n      data = _useFetchPaymentReque.data;\n\n  var handleChange = useCallback(function () {\n    return setActive(!active);\n  }, [active]);\n  var fetchAcceptedPayments = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            try {\n              fetchPaymentRequest({\n                branchId: branchId,\n                status: \"PENDING\"\n              });\n              setPaymentRequestItems(data.data.listPaymentRequests.items);\n            } catch (error) {\n              console.log(error);\n            }\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), [createUpdatePaymentSubscription, data]); // const fetchAcceptedPayments = useCallback(async () => {\n  //   try {\n  //     const res = await API.graphql(\n  //       graphqlOperation(listPaymentRequest, { branchId, status: \"PENDING\" })\n  //     )\n  //     setPaymentRequestItems(res.data.listPaymentRequests.items)\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  // }, [createUpdatePaymentSubscription])\n\n  useEffect(function () {\n    fetchAcceptedPayments();\n  }, [fetchAcceptedPayments]);\n\n  var declinePayment = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(paymentId) {\n      var paymentResponse;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return API.graphql(graphqlOperation(updatePaymentRequest, {\n                input: {\n                  id: paymentId,\n                  status: \"DECLINED\"\n                }\n              }));\n\n            case 3:\n              paymentResponse = _context2.sent;\n              _context2.next = 9;\n              break;\n\n            case 6:\n              _context2.prev = 6;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(_context2.t0);\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 6]]);\n    }));\n\n    return function declinePayment(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  console.log(\"Data from fetch payment useMutation\", data);\n  return __jsx(React.Fragment, null, __jsx(Table, {\n    selectable: true,\n    celled: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Customer Id\"), __jsx(Table.HeaderCell, null, \"Bonus Amount\"), __jsx(Table.HeaderCell, null, \"Created At\"), __jsx(Table.HeaderCell, null, \"Updated At\"), __jsx(Table.HeaderCell, null, \"Status\"), __jsx(Table.HeaderCell, null, \"Action\"))), __jsx(Table.Body, null, paymentRequestItems && paymentRequestItems.sort(function (a, b) {\n    return new Date(b.updatedAt) - new Date(a.updatedAt);\n  }).map(function (item) {\n    return __jsx(Table.Row, {\n      key: item.id\n    }, __jsx(Table.Cell, null, __jsx(Badge, {\n      size: \"small\"\n    }, item.customerId)), __jsx(Table.Cell, null, toCurrency(item.bonusAmount)), __jsx(Table.Cell, null, formatDate(item.createdAt)), __jsx(Table.Cell, null, formatDate(item.updatedAt)), __jsx(Table.Cell, null, __jsx(Badge, {\n      size: \"small\",\n      progress: \"partiallyComplete\",\n      status: \"attention\"\n    }, item.status)), __jsx(Table.Cell, {\n      className: \"actions-cell\"\n    }, __jsx(Popup, {\n      content: \"Approve payment\",\n      trigger: __jsx(Icon, {\n        className: \"accept\",\n        name: \"check\",\n        onClick: function onClick() {\n          setPaymentRequestId(item.id);\n          handleChange();\n        }\n      })\n    }), __jsx(Popup, {\n      content: \"Decline payment\",\n      trigger: __jsx(Icon, {\n        className: \"decline\",\n        name: \"remove\",\n        onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  declinePayment(item.id);\n\n                case 1:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }))\n      })\n    })));\n  }))), __jsx(ProductList, {\n    paymentRequestId: paymentRequestId,\n    active: active,\n    handleChange: handleChange\n  }));\n};\n\n_s(PendingPaymentRequest, \"T+QflVqvgVSqwf6ewFgr/WLyr+w=\", false, function () {\n  return [useFetchPaymentRequest];\n});\n\n_c = PendingPaymentRequest;\nexport default PendingPaymentRequest;\n\nvar _c;\n\n$RefreshReg$(_c, \"PendingPaymentRequest\");","map":{"version":3,"sources":["/var/www/transactions-avanta/components/PendingPaymentRequest.js"],"names":["React","useState","useCallback","useEffect","API","graphqlOperation","Table","Icon","Popup","Header","Badge","useFetchPaymentRequest","toCurrency","formatDate","ProductList","config","updatePaymentRequest","listPaymentRequest","paymentSubscription","configure","PendingPaymentRequest","createUpdatePaymentSubscription","branchId","paymentRequestId","setPaymentRequestId","active","setActive","paymentRequestItems","setPaymentRequestItems","fetchPaymentRequest","isLoading","error","data","handleChange","fetchAcceptedPayments","status","listPaymentRequests","items","console","log","declinePayment","paymentId","graphql","input","id","paymentResponse","sort","a","b","Date","updatedAt","map","item","customerId","bonusAmount","createdAt"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\"\nimport { API, graphqlOperation } from \"aws-amplify\"\nimport { Table, Icon, Popup, Header } from \"semantic-ui-react\"\nimport { Badge } from \"@shopify/polaris\"\nimport { useFetchPaymentRequest } from \"../core/hooks\"\nimport { toCurrency, formatDate } from \"../utils/helper\"\nimport ProductList from \"./ProductsList\"\nimport config from \"../aws-exports\"\nimport { updatePaymentRequest } from \"../graphql/mutation\"\nimport { listPaymentRequest } from \"../graphql/queries\"\nimport { paymentSubscription } from \"../graphql/subscriptions\"\n\nAPI.configure(config)\n\nconst PendingPaymentRequest = ({ createUpdatePaymentSubscription, branchId }) => {\n  const [paymentRequestId, setPaymentRequestId] = useState(\"\")\n  const [active, setActive] = useState(false)\n  const [paymentRequestItems, setPaymentRequestItems] = useState([])\n  const { fetchPaymentRequest, isLoading, error, data } = useFetchPaymentRequest()\n\n  const handleChange = useCallback(() => setActive(!active), [active])\n\n  const fetchAcceptedPayments = useCallback(async () => {\n    try {\n      fetchPaymentRequest({ branchId, status: \"PENDING\" })\n      setPaymentRequestItems(data.data.listPaymentRequests.items)\n    } catch (error) {\n      console.log(error)\n    }\n  }, [createUpdatePaymentSubscription, data])\n\n  // const fetchAcceptedPayments = useCallback(async () => {\n  //   try {\n  //     const res = await API.graphql(\n  //       graphqlOperation(listPaymentRequest, { branchId, status: \"PENDING\" })\n  //     )\n  //     setPaymentRequestItems(res.data.listPaymentRequests.items)\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  // }, [createUpdatePaymentSubscription])\n\n  useEffect(() => {\n    fetchAcceptedPayments()\n  }, [fetchAcceptedPayments])\n\n  const declinePayment = async (paymentId) => {\n    try {\n      const paymentResponse = await API.graphql(\n        graphqlOperation(updatePaymentRequest, {\n          input: {\n            id: paymentId,\n            status: \"DECLINED\",\n          },\n        })\n      )\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  console.log(\"Data from fetch payment useMutation\", data)\n\n  return (\n    <>\n      <Table selectable celled>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Customer Id</Table.HeaderCell>\n            <Table.HeaderCell>Bonus Amount</Table.HeaderCell>\n            <Table.HeaderCell>Created At</Table.HeaderCell>\n            <Table.HeaderCell>Updated At</Table.HeaderCell>\n            <Table.HeaderCell>Status</Table.HeaderCell>\n            <Table.HeaderCell>Action</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {paymentRequestItems &&\n            paymentRequestItems\n              .sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt))\n              .map((item) => (\n                <Table.Row key={item.id}>\n                  <Table.Cell>\n                    <Badge size=\"small\">{item.customerId}</Badge>\n                  </Table.Cell>\n                  <Table.Cell>{toCurrency(item.bonusAmount)}</Table.Cell>\n                  <Table.Cell>{formatDate(item.createdAt)}</Table.Cell>\n                  <Table.Cell>{formatDate(item.updatedAt)}</Table.Cell>\n                  <Table.Cell>\n                    <Badge size=\"small\" progress=\"partiallyComplete\" status=\"attention\">\n                      {item.status}\n                    </Badge>\n                  </Table.Cell>\n                  <Table.Cell className=\"actions-cell\">\n                    <Popup\n                      content=\"Approve payment\"\n                      trigger={\n                        <Icon\n                          className=\"accept\"\n                          name=\"check\"\n                          onClick={() => {\n                            setPaymentRequestId(item.id)\n                            handleChange()\n                          }}\n                        />\n                      }\n                    />\n                    <Popup\n                      content=\"Decline payment\"\n                      trigger={\n                        <Icon\n                          className=\"decline\"\n                          name=\"remove\"\n                          onClick={async () => {\n                            declinePayment(item.id)\n                          }}\n                        />\n                      }\n                    />\n                  </Table.Cell>\n                </Table.Row>\n              ))}\n        </Table.Body>\n      </Table>\n      <ProductList\n        paymentRequestId={paymentRequestId}\n        active={active}\n        handleChange={handleChange}\n      />\n    </>\n  )\n}\n\nexport default PendingPaymentRequest\n"]},"metadata":{},"sourceType":"module"}