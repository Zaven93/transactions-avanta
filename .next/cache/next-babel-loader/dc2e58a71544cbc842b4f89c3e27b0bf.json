{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    subscription onCreateTransaction {\\n        onCreateTransaction {\\n            id\\n        }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query branchByAdminId($adminId: ID!) {\\n        branchByAdminId(adminId: $adminId) {\\n            items {\\n                adminId\\n                branchName\\n                id\\n                transactions {\\n                    items {\\n                        branchId\\n                        createdAt\\n                        currency\\n                        id\\n                        note\\n                        customer {\\n                            email\\n                            firstName\\n                            id\\n                            lastName\\n                            phone\\n                        }\\n                        products {\\n                            bonusPercentage\\n                            id\\n                            image\\n                            priceAmount\\n                            priceCurrency\\n                            title\\n                        }\\n                        sortDate\\n                        totalBonusAmount\\n                        totalPrice\\n                        updatedAt\\n                    }\\n                }\\n                branchProducts {\\n                    items {\\n                        branchId\\n                        createdAt\\n                        id\\n                        productId\\n                        tags\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport axios from 'axios';\nimport { useRouter } from 'next/router';\nimport { Auth, API, graphqlOperation } from 'aws-amplify';\nimport createApp from '@shopify/app-bridge';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport gql from 'graphql-tag';\nimport { Card, DataTable, Button, Page, Pagination, TextField, ChoiceList, Filters, Icon, Stack } from '@shopify/polaris';\nimport { SearchMajorMonotone, TransactionMajorMonotone, BalanceMajorMonotone, LogOutMinor } from '@shopify/polaris-icons';\nimport { toCurrency, formatDate, extractNumbersFromString } from '../utils/helper';\nimport config from '../aws-exports';\nimport Login from '../components/Login';\nimport BranchConsole from '../components/BranchConsole';\nimport PaymentRequest from '../components/PaymentRequest';\nAPI.configure(config);\nvar branchByAdminId = gql(_templateObject());\nvar onCreateTransaction = gql(_templateObject2());\n\nvar BranchData = function BranchData(_ref) {\n  var user = _ref.user,\n      updateUser = _ref.updateUser;\n\n  var _useState = useState(''),\n      branchInfo = _useState[0],\n      setBranchInfo = _useState[1];\n\n  var _useState2 = useState(null),\n      searchValue = _useState2[0],\n      setSearchValue = _useState2[1];\n\n  var _useState3 = useState(''),\n      newCreatedTransaction = _useState3[0],\n      setNewCreatedTransaction = _useState3[1];\n\n  var _useState4 = useState(false),\n      showPaymentRequest = _useState4[0],\n      setShowPaymentRequest = _useState4[1]; // const [transactionItems, setTransactionItems] = useState(transactions.listTransactions.items)\n  // const [nextPaginateToken, setNextPaginateToken] = useState(\n  //     transactions.listTransactions.nextToken\n  // )\n  // const [previousPaginateTokens, setPreviousPaginateTokens] = useState([])\n\n\n  var handleSearchInput = useCallback(function (newValue) {\n    return setSearchValue(newValue);\n  }, []);\n  var router = useRouter();\n  var app = createApp({\n    apiKey: '3b01063bac3031d13101100ef3e44fd5',\n    shopOrigin: 'transactions-avanta.myshopify.com'\n  });\n  var redirect = Redirect.create(app); // const paginateNext = async () => {\n  //     setPreviousPaginateTokens([...previousPaginateTokens, nextPaginateToken])\n  //     try {\n  //         const data = await API.graphql(\n  //             graphqlOperation(listTransactions, { limit: 5, nextToken: nextPaginateToken })\n  //         )\n  //         console.log('Data from pagination', data)\n  //         setTransactionItems(data.data.listTransactions.items)\n  //         setNextPaginateToken(data.data.listTransactions.nextToken)\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // }\n  // const paginatePrevious = async () => {\n  //     const previousToken =\n  //         previousPaginateTokens[\n  //             previousPaginateTokens.length === 1 ? 0 : previousPaginateTokens.length - 2\n  //         ]\n  //     setPreviousPaginateTokens([\n  //         ...previousPaginateTokens.slice(0, previousPaginateTokens.length - 1)\n  //     ])\n  //     try {\n  //         if (previousPaginateTokens.length === 1) {\n  //             const data = await API.graphql(graphqlOperation(listTransactions, { limit: 5 }))\n  //             setTransactionItems(data.data.listTransactions.items)\n  //             setNextPaginateToken(data.data.listTransactions.nextToken)\n  //         } else {\n  //             const data = await API.graphql(\n  //                 graphqlOperation(listTransactions, { limit: 5, nextToken: previousToken })\n  //             )\n  //             setTransactionItems(data.data.listTransactions.items)\n  //             setNextPaginateToken(data.data.listTransactions.nextToken)\n  //         }\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // }\n\n  var getBranch = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var fetchBranch;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return API.graphql(graphqlOperation(branchByAdminId, {\n                adminId: user.attributes.sub\n              }));\n\n            case 3:\n              fetchBranch = _context.sent;\n              setBranchInfo(fetchBranch.data.branchByAdminId.items[0]);\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 7]]);\n    }));\n\n    return function getBranch() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    getBranch();\n    API.graphql(graphqlOperation(onCreateTransaction)).subscribe({\n      next: function next(createdTransaction) {\n        return setNewCreatedTransaction(createdTransaction);\n      }\n    });\n  }, [newCreatedTransaction]);\n  console.log('Branch data user', user);\n  console.log('Branch info', branchInfo);\n  return __jsx(React.Fragment, null, showPaymentRequest ? __jsx(PaymentRequest, {\n    setShowPaymentRequest: setShowPaymentRequest,\n    branchId: branchInfo.id\n  }) : __jsx(Page, {\n    title: branchInfo && branchInfo.branchName\n  }, __jsx(TextField, {\n    label: \"Search Product\",\n    value: searchValue,\n    onChange: handleSearchInput,\n    prefix: __jsx(Icon, {\n      source: SearchMajorMonotone\n    }),\n    placeholder: \"Search by Customer phone number\"\n  }), __jsx(Stack, null, __jsx(Stack.Item, {\n    fill: true\n  }, __jsx(Button, {\n    id: \"Accept-Payment\",\n    onClick: function onClick() {\n      return (// redirect.dispatch(\n        //     Redirect.Action.ADMIN_PATH,\n        //     '/apps/3b01063bac3031d13101100ef3e44fd5/accept-payment'\n        // )\n        setShowPaymentRequest(true)\n      );\n    }\n  }, __jsx(Icon, {\n    source: BalanceMajorMonotone\n  }), \" Accept Payment\")), __jsx(Stack.Item, null, __jsx(Button, {\n    id: \"Create-Transaction\",\n    primary: true,\n    onClick: function onClick() {\n      return redirect.dispatch(Redirect.Action.REMOTE, {\n        // url: `https://dev.d3ivgpkzuz6hkr.amplifyapp.com?adminId=${user.attributes.sub}`,\n        url: \"http://localhost:3001/transactions/\".concat(user.attributes.sub),\n        newContext: true\n      });\n    }\n  }, __jsx(Icon, {\n    source: TransactionMajorMonotone\n  }), \" Create transaction\")), __jsx(Stack.Item, null, __jsx(Button, {\n    primary: true,\n    id: \"Logout\",\n    onClick: function onClick() {\n      Auth.signOut();\n      updateUser(null);\n    }\n  }, __jsx(Icon, {\n    source: LogOutMinor\n  }), \" Logout\"))), branchInfo && __jsx(Card, null, __jsx(DataTable, {\n    columnContentTypes: ['text', 'text', 'text', 'text'],\n    headings: ['Customer phone number', 'TotalPrice', 'TotalBonusAmount', 'Minus from Bonus Amount', 'CreatedAt'],\n    rows: branchInfo && branchInfo.transactions.items.filter(function (transaction) {\n      if (searchValue == null) {\n        return transaction;\n      } else if (transaction.customer[0].phone.toLowerCase().includes(searchValue.toLowerCase())) {\n        return transaction;\n      }\n    }).sort(function (a, b) {\n      return new Date(b.createdAt) - new Date(a.createdAt);\n    }).map(function (transaction) {\n      return [__jsx(Button, {\n        primary: true,\n        onClick: function onClick() {\n          return redirect.dispatch(Redirect.Action.ADMIN_PATH, {\n            path: \"/customers/\".concat(transaction.customer[0].id),\n            newContext: true\n          });\n        }\n      }, transaction.customer[0].phone), toCurrency(Number(transaction.totalPrice)), toCurrency(Number(transaction.totalBonusAmount)), transaction.note === null ? '' : toCurrency(extractNumbersFromString(transaction.note)), formatDate(transaction.createdAt)];\n    })\n  }))));\n};\n\nexport default BranchData;","map":null,"metadata":{},"sourceType":"module"}