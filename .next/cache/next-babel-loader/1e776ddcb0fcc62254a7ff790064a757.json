{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query listPaymentRequest($limit: Int, $nextToken: String) {\\n        listPaymentRequests(\\n            limit: $limit\\n            nextToken: $nextToken\\n            filter: { status: { eq: APPROVED } }\\n        ) {\\n            items {\\n                bonusAmount\\n                createdAt\\n                customerId\\n                id\\n                orderId\\n                status\\n                updatedAt\\n            }\\n            nextToken\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport gql from 'graphql-tag';\nimport { Table, Icon, Popup, Header } from 'semantic-ui-react';\nimport { Badge, Pagination } from '@shopify/polaris';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nAPI.configure(config);\nvar listPaymentRequest = gql(_templateObject());\n\nvar AcceptedPaymentRequest = function AcceptedPaymentRequest() {\n  _s();\n\n  var _useState = useState(''),\n      nextPaginateToken = _useState[0],\n      setNextPaginateToken = _useState[1];\n\n  var _useState2 = useState([]),\n      previousPaginateTokens = _useState2[0],\n      setPreviousPaginateTokens = _useState2[1];\n\n  var _useState3 = useState([]),\n      paymentRequestItems = _useState3[0],\n      setPaymentRequestItems = _useState3[1];\n\n  var fetchAcceptedPayments = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var _res;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return API.graphql(graphqlOperation(listPaymentRequest, {\n              limit: 3\n            }));\n\n          case 3:\n            _res = _context.sent;\n            setNextPaginateToken(_res.data.listPaymentRequests.nextToken);\n            setPaymentRequestItems(_res.data.listPaymentRequests.items);\n            console.log('Accepted payments', _res.data);\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 9]]);\n  })), []);\n  useEffect(function () {\n    fetchAcceptedPayments();\n  }, [fetchAcceptedPayments]);\n\n  var paginateNext = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var _res2;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setPreviousPaginateTokens([].concat(_toConsumableArray(previousPaginateTokens), [nextPaginateToken]));\n              _context2.prev = 1;\n              _context2.next = 4;\n              return API.graphql(graphqlOperation(listPaymentRequest, {\n                limit: 3,\n                nextToken: nextPaginateToken\n              }));\n\n            case 4:\n              _res2 = _context2.sent;\n              console.log('Data from pagination', _res2);\n              setNextPaginateToken(_res2.data.listPaymentRequests.nextToken);\n              setPaymentRequestItems(_res2.data.listPaymentRequests.items);\n              _context2.next = 13;\n              break;\n\n            case 10:\n              _context2.prev = 10;\n              _context2.t0 = _context2[\"catch\"](1);\n              console.log(_context2.t0);\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 10]]);\n    }));\n\n    return function paginateNext() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var paginatePrevious = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var previousToken, _res3, data;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              previousToken = previousPaginateTokens[previousPaginateTokens.length === 1 ? 0 : previousPaginateTokens.length - 2];\n              setPreviousPaginateTokens(_toConsumableArray(previousPaginateTokens.slice(0, previousPaginateTokens.length - 1)));\n              _context3.prev = 2;\n\n              if (!(previousPaginateTokens.length === 1)) {\n                _context3.next = 11;\n                break;\n              }\n\n              _context3.next = 6;\n              return API.graphql(graphqlOperation(listPaymentRequest, {\n                limit: 3\n              }));\n\n            case 6:\n              _res3 = _context3.sent;\n              setNextPaginateToken(_res3.data.listPaymentRequests.nextToken);\n              setPaymentRequestItems(_res3.data.listPaymentRequests.items);\n              _context3.next = 16;\n              break;\n\n            case 11:\n              _context3.next = 13;\n              return API.graphql(graphqlOperation(listTransactions, {\n                limit: 3,\n                nextToken: previousToken\n              }));\n\n            case 13:\n              data = _context3.sent;\n              setNextPaginateToken(res.data.listPaymentRequests.nextToken);\n              setPaymentRequestItems(res.data.listPaymentRequests.items);\n\n            case 16:\n              _context3.next = 21;\n              break;\n\n            case 18:\n              _context3.prev = 18;\n              _context3.t0 = _context3[\"catch\"](2);\n              console.log(_context3.t0);\n\n            case 21:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[2, 18]]);\n    }));\n\n    return function paginatePrevious() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  console.log('Next paginate token', nextPaginateToken);\n  console.log('Accepted state data', paymentRequestItems);\n  return __jsx(Table, {\n    celled: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Customer Id\"), __jsx(Table.HeaderCell, null, \"Order Id\"), __jsx(Table.HeaderCell, null, \"Bonus Amount\"), __jsx(Table.HeaderCell, null, \"Created At\"), __jsx(Table.HeaderCell, null, \"Updated At\"), __jsx(Table.HeaderCell, null, \"Status\"))), __jsx(Table.Body, null, paymentRequestItems && paymentRequestItems.filter(function (item) {\n    return item.status === 'APPROVED';\n  }).map(function (item) {\n    return __jsx(Table.Row, {\n      key: item.id\n    }, __jsx(Table.Cell, null, __jsx(Badge, {\n      size: \"small\"\n    }, item.customerId)), __jsx(Table.Cell, null, __jsx(Badge, {\n      size: \"small\"\n    }, item.orderId)), __jsx(Table.Cell, null, toCurrency(item.bonusAmount)), __jsx(Table.Cell, null, formatDate(item.createdAt)), __jsx(Table.Cell, null, formatDate(item.updatedAt)), __jsx(Table.Cell, null, __jsx(Badge, {\n      size: \"small\",\n      progress: \"complete\",\n      status: \"success\"\n    }, item.status)));\n  })), __jsx(Table.Footer, null, __jsx(Pagination, {\n    hasPrevious: previousPaginateTokens.length > 0,\n    onPrevious: paginatePrevious,\n    hasNext: nextPaginateToken,\n    onNext: paginateNext\n  })));\n};\n\n_s(AcceptedPaymentRequest, \"ddW8Jm/BhwmeS95UhTkLVmrgMTU=\");\n\n_c = AcceptedPaymentRequest;\nexport default AcceptedPaymentRequest;\n\nvar _c;\n\n$RefreshReg$(_c, \"AcceptedPaymentRequest\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/components/AcceptedPaymentRequest.js"],"names":["React","useState","useEffect","useCallback","API","graphqlOperation","gql","Table","Icon","Popup","Header","Badge","Pagination","toCurrency","formatDate","config","configure","listPaymentRequest","AcceptedPaymentRequest","nextPaginateToken","setNextPaginateToken","previousPaginateTokens","setPreviousPaginateTokens","paymentRequestItems","setPaymentRequestItems","fetchAcceptedPayments","graphql","limit","res","data","listPaymentRequests","nextToken","items","console","log","paginateNext","paginatePrevious","previousToken","length","slice","listTransactions","filter","item","status","map","id","customerId","orderId","bonusAmount","createdAt","updatedAt"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\r\nimport { API, graphqlOperation } from 'aws-amplify'\r\nimport gql from 'graphql-tag'\r\nimport { Table, Icon, Popup, Header } from 'semantic-ui-react'\r\nimport { Badge, Pagination } from '@shopify/polaris'\r\nimport { toCurrency, formatDate } from '../utils/helper'\r\nimport config from '../aws-exports'\r\n\r\nAPI.configure(config)\r\n\r\nconst listPaymentRequest = gql`\r\n    query listPaymentRequest($limit: Int, $nextToken: String) {\r\n        listPaymentRequests(\r\n            limit: $limit\r\n            nextToken: $nextToken\r\n            filter: { status: { eq: APPROVED } }\r\n        ) {\r\n            items {\r\n                bonusAmount\r\n                createdAt\r\n                customerId\r\n                id\r\n                orderId\r\n                status\r\n                updatedAt\r\n            }\r\n            nextToken\r\n        }\r\n    }\r\n`\r\n\r\nconst AcceptedPaymentRequest = () => {\r\n    const [nextPaginateToken, setNextPaginateToken] = useState('')\r\n    const [previousPaginateTokens, setPreviousPaginateTokens] = useState([])\r\n    const [paymentRequestItems, setPaymentRequestItems] = useState([])\r\n\r\n    const fetchAcceptedPayments = useCallback(async () => {\r\n        try {\r\n            const res = await API.graphql(graphqlOperation(listPaymentRequest, { limit: 3 }))\r\n            setNextPaginateToken(res.data.listPaymentRequests.nextToken)\r\n            setPaymentRequestItems(res.data.listPaymentRequests.items)\r\n            console.log('Accepted payments', res.data)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        fetchAcceptedPayments()\r\n    }, [fetchAcceptedPayments])\r\n\r\n    const paginateNext = async () => {\r\n        setPreviousPaginateTokens([...previousPaginateTokens, nextPaginateToken])\r\n        try {\r\n            const res = await API.graphql(\r\n                graphqlOperation(listPaymentRequest, { limit: 3, nextToken: nextPaginateToken })\r\n            )\r\n\r\n            console.log('Data from pagination', res)\r\n            setNextPaginateToken(res.data.listPaymentRequests.nextToken)\r\n            setPaymentRequestItems(res.data.listPaymentRequests.items)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    const paginatePrevious = async () => {\r\n        const previousToken =\r\n            previousPaginateTokens[\r\n                previousPaginateTokens.length === 1 ? 0 : previousPaginateTokens.length - 2\r\n            ]\r\n        setPreviousPaginateTokens([\r\n            ...previousPaginateTokens.slice(0, previousPaginateTokens.length - 1)\r\n        ])\r\n        try {\r\n            if (previousPaginateTokens.length === 1) {\r\n                const res = await API.graphql(graphqlOperation(listPaymentRequest, { limit: 3 }))\r\n                setNextPaginateToken(res.data.listPaymentRequests.nextToken)\r\n                setPaymentRequestItems(res.data.listPaymentRequests.items)\r\n            } else {\r\n                const data = await API.graphql(\r\n                    graphqlOperation(listTransactions, { limit: 3, nextToken: previousToken })\r\n                )\r\n                setNextPaginateToken(res.data.listPaymentRequests.nextToken)\r\n                setPaymentRequestItems(res.data.listPaymentRequests.items)\r\n            }\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    console.log('Next paginate token', nextPaginateToken)\r\n    console.log('Accepted state data', paymentRequestItems)\r\n\r\n    return (\r\n        <Table celled>\r\n            <Table.Header>\r\n                <Table.Row>\r\n                    <Table.HeaderCell>Customer Id</Table.HeaderCell>\r\n                    <Table.HeaderCell>Order Id</Table.HeaderCell>\r\n                    <Table.HeaderCell>Bonus Amount</Table.HeaderCell>\r\n                    <Table.HeaderCell>Created At</Table.HeaderCell>\r\n                    <Table.HeaderCell>Updated At</Table.HeaderCell>\r\n                    <Table.HeaderCell>Status</Table.HeaderCell>\r\n                </Table.Row>\r\n            </Table.Header>\r\n            <Table.Body>\r\n                {paymentRequestItems &&\r\n                    paymentRequestItems\r\n                        .filter((item) => item.status === 'APPROVED')\r\n                        .map((item) => (\r\n                            <Table.Row key={item.id}>\r\n                                <Table.Cell>\r\n                                    <Badge size=\"small\">{item.customerId}</Badge>\r\n                                </Table.Cell>\r\n                                <Table.Cell>\r\n                                    <Badge size=\"small\">{item.orderId}</Badge>\r\n                                </Table.Cell>\r\n                                <Table.Cell>{toCurrency(item.bonusAmount)}</Table.Cell>\r\n                                <Table.Cell>{formatDate(item.createdAt)}</Table.Cell>\r\n                                <Table.Cell>{formatDate(item.updatedAt)}</Table.Cell>\r\n                                <Table.Cell>\r\n                                    <Badge size=\"small\" progress=\"complete\" status=\"success\">\r\n                                        {item.status}\r\n                                    </Badge>\r\n                                </Table.Cell>\r\n                            </Table.Row>\r\n                        ))}\r\n            </Table.Body>\r\n            <Table.Footer>\r\n                <Pagination\r\n                    hasPrevious={previousPaginateTokens.length > 0}\r\n                    onPrevious={paginatePrevious}\r\n                    hasNext={nextPaginateToken}\r\n                    onNext={paginateNext}\r\n                />\r\n            </Table.Footer>\r\n        </Table>\r\n    )\r\n}\r\n\r\nexport default AcceptedPaymentRequest\r\n"]},"metadata":{},"sourceType":"module"}