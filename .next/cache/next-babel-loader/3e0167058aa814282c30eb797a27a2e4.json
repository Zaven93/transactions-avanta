{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport gql from 'graphql-tag';\nimport { Table, Icon, Popup, Header } from 'semantic-ui-react';\nimport { Badge, Button } from '@shopify/polaris';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nAPI.configure(config);\nconst listPaymentRequest = gql`\n    query listPaymentRequest($limit: Int, $nextToken: String) {\n        listPaymentRequests(\n            limit: $limit\n            nextToken: $nextToken\n            filter: { status: { eq: APPROVED } }\n        ) {\n            items {\n                bonusAmount\n                createdAt\n                customerId\n                id\n                orderId\n                status\n                updatedAt\n            }\n            nextToken\n        }\n    }\n`;\n\nconst AcceptedPaymentRequest = () => {\n  const {\n    0: nextPaginateToken,\n    1: setNextPaginateToken\n  } = useState('');\n  const {\n    0: previousPaginateTokens,\n    1: setPreviousPaginateTokens\n  } = useState([]);\n  const {\n    0: paymentRequestItems,\n    1: setPaymentRequestItems\n  } = useState([]);\n  const {\n    0: pageOffset,\n    1: setPageOffset\n  } = useState(0);\n  const {\n    0: itemsPerPage,\n    1: setItemsPerPage\n  } = useState(7);\n  console.log('Next token is', nextPaginateToken);\n  const fetchAcceptedPayments = useCallback(async () => {\n    try {\n      const res = await API.graphql(graphqlOperation(listPaymentRequest, {\n        limit: 20\n      }));\n      setNextPaginateToken(res.data.listPaymentRequests.nextToken);\n      setPaymentRequestItems(res.data.listPaymentRequests.items);\n      console.log('Accepted payments', res.data);\n    } catch (error) {\n      console.log(error);\n    }\n  }, []);\n  useEffect(() => {\n    fetchAcceptedPayments();\n  }, [fetchAcceptedPayments]);\n\n  const loadMore = async () => {\n    try {\n      const res = await API.graphql(graphqlOperation(listPaymentRequest, {\n        limit: 20,\n        nextToken: nextPaginateToken\n      }));\n      setNextPaginateToken(res.data.listPaymentRequests.nextToken);\n      setPaymentRequestItems([...paymentRequestItems, ...res.data.listPaymentRequests.items]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  console.log('Next paginate token', nextPaginateToken);\n  console.log('Accepted state data', paymentRequestItems);\n  return __jsx(Table, {\n    celled: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Customer Id\"), __jsx(Table.HeaderCell, null, \"Order Id\"), __jsx(Table.HeaderCell, null, \"Bonus Amount\"), __jsx(Table.HeaderCell, null, \"Created At\"), __jsx(Table.HeaderCell, null, \"Updated At\"), __jsx(Table.HeaderCell, null, \"Status\"))), __jsx(Table.Body, null, paymentRequestItems && paymentRequestItems.map(item => __jsx(Table.Row, {\n    key: item.id\n  }, __jsx(Table.Cell, null, __jsx(Badge, {\n    size: \"small\"\n  }, item.customerId)), __jsx(Table.Cell, null, __jsx(Badge, {\n    size: \"small\"\n  }, item.orderId)), __jsx(Table.Cell, null, toCurrency(item.bonusAmount)), __jsx(Table.Cell, null, formatDate(item.createdAt)), __jsx(Table.Cell, null, formatDate(item.updatedAt)), __jsx(Table.Cell, null, __jsx(Badge, {\n    size: \"small\",\n    progress: \"complete\",\n    status: \"success\"\n  }, item.status))))), __jsx(Button, {\n    primary: true,\n    onClick: loadMore\n  }, \"Load more\"));\n};\n\nexport default AcceptedPaymentRequest;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/components/AcceptedPaymentRequest.js"],"names":["React","useState","useEffect","useCallback","API","graphqlOperation","gql","Table","Icon","Popup","Header","Badge","Button","toCurrency","formatDate","config","configure","listPaymentRequest","AcceptedPaymentRequest","nextPaginateToken","setNextPaginateToken","previousPaginateTokens","setPreviousPaginateTokens","paymentRequestItems","setPaymentRequestItems","pageOffset","setPageOffset","itemsPerPage","setItemsPerPage","console","log","fetchAcceptedPayments","res","graphql","limit","data","listPaymentRequests","nextToken","items","error","loadMore","map","item","id","customerId","orderId","bonusAmount","createdAt","updatedAt","status"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\r\nimport { API, graphqlOperation } from 'aws-amplify'\r\nimport gql from 'graphql-tag'\r\nimport { Table, Icon, Popup, Header } from 'semantic-ui-react'\r\nimport { Badge, Button } from '@shopify/polaris'\r\nimport { toCurrency, formatDate } from '../utils/helper'\r\nimport config from '../aws-exports'\r\n\r\nAPI.configure(config)\r\n\r\nconst listPaymentRequest = gql`\r\n    query listPaymentRequest($limit: Int, $nextToken: String) {\r\n        listPaymentRequests(\r\n            limit: $limit\r\n            nextToken: $nextToken\r\n            filter: { status: { eq: APPROVED } }\r\n        ) {\r\n            items {\r\n                bonusAmount\r\n                createdAt\r\n                customerId\r\n                id\r\n                orderId\r\n                status\r\n                updatedAt\r\n            }\r\n            nextToken\r\n        }\r\n    }\r\n`\r\n\r\nconst AcceptedPaymentRequest = () => {\r\n    const [nextPaginateToken, setNextPaginateToken] = useState('')\r\n    const [previousPaginateTokens, setPreviousPaginateTokens] = useState([])\r\n    const [paymentRequestItems, setPaymentRequestItems] = useState([])\r\n    const [pageOffset, setPageOffset] = useState(0)\r\n    const [itemsPerPage, setItemsPerPage] = useState(7)\r\n\r\n    console.log('Next token is', nextPaginateToken)\r\n\r\n    const fetchAcceptedPayments = useCallback(async () => {\r\n        try {\r\n            const res = await API.graphql(graphqlOperation(listPaymentRequest, { limit: 20 }))\r\n            setNextPaginateToken(res.data.listPaymentRequests.nextToken)\r\n            setPaymentRequestItems(res.data.listPaymentRequests.items)\r\n            console.log('Accepted payments', res.data)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        fetchAcceptedPayments()\r\n    }, [fetchAcceptedPayments])\r\n\r\n    const loadMore = async () => {\r\n        try {\r\n            const res = await API.graphql(\r\n                graphqlOperation(listPaymentRequest, { limit: 20, nextToken: nextPaginateToken })\r\n            )\r\n            setNextPaginateToken(res.data.listPaymentRequests.nextToken)\r\n            setPaymentRequestItems([...paymentRequestItems, ...res.data.listPaymentRequests.items])\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    console.log('Next paginate token', nextPaginateToken)\r\n    console.log('Accepted state data', paymentRequestItems)\r\n\r\n    return (\r\n        <Table celled>\r\n            <Table.Header>\r\n                <Table.Row>\r\n                    <Table.HeaderCell>Customer Id</Table.HeaderCell>\r\n                    <Table.HeaderCell>Order Id</Table.HeaderCell>\r\n                    <Table.HeaderCell>Bonus Amount</Table.HeaderCell>\r\n                    <Table.HeaderCell>Created At</Table.HeaderCell>\r\n                    <Table.HeaderCell>Updated At</Table.HeaderCell>\r\n                    <Table.HeaderCell>Status</Table.HeaderCell>\r\n                </Table.Row>\r\n            </Table.Header>\r\n            <Table.Body>\r\n                {paymentRequestItems &&\r\n                    paymentRequestItems.map((item) => (\r\n                        <Table.Row key={item.id}>\r\n                            <Table.Cell>\r\n                                <Badge size=\"small\">{item.customerId}</Badge>\r\n                            </Table.Cell>\r\n                            <Table.Cell>\r\n                                <Badge size=\"small\">{item.orderId}</Badge>\r\n                            </Table.Cell>\r\n                            <Table.Cell>{toCurrency(item.bonusAmount)}</Table.Cell>\r\n                            <Table.Cell>{formatDate(item.createdAt)}</Table.Cell>\r\n                            <Table.Cell>{formatDate(item.updatedAt)}</Table.Cell>\r\n                            <Table.Cell>\r\n                                <Badge size=\"small\" progress=\"complete\" status=\"success\">\r\n                                    {item.status}\r\n                                </Badge>\r\n                            </Table.Cell>\r\n                        </Table.Row>\r\n                    ))}\r\n            </Table.Body>\r\n            <Button primary onClick={loadMore}>\r\n                Load more\r\n            </Button>\r\n        </Table>\r\n    )\r\n}\r\n\r\nexport default AcceptedPaymentRequest\r\n"]},"metadata":{},"sourceType":"module"}