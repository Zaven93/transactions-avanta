{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport AWS from \"aws-sdk\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport { Button, Form } from \"@shopify/polaris\";\nimport { Table, Popup, Icon } from \"semantic-ui-react\";\nimport { useListBranches } from \"../core/hooks\";\nimport { formatDate } from \"../utils/helper\";\nimport config from \"../aws-exports\";\nimport BranchProducts from \"./BranchProducts\";\nimport { listBranchs } from \"../graphql/queries\";\nimport { onCreateBranchSubscription, onDeleteBranchSubscription } from \"../graphql/subscriptions\";\nimport { removeBranch, deleteTransaction, deleteBranchProduct, deletePaymentRequest } from \"../graphql/mutation\";\nAPI.configure(config);\nAWS.config.update({\n  accessKeyId: \"AKIA5VX4IMFOFTVY5X57\",\n  secretAccessKey: \"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\",\n  region: \"us-east-1\"\n});\nconst cognito = new AWS.CognitoIdentityServiceProvider();\n\nconst BranchList = ({\n  setBranchId,\n  branchId\n}) => {\n  const {\n    0: active,\n    1: setActive\n  } = useState(false);\n  const {\n    0: branches,\n    1: setBranches\n  } = useState(\"\");\n  const {\n    0: branchName,\n    1: setBranchName\n  } = useState(\"\");\n  const {\n    0: productBranchId,\n    1: setProductBranchId\n  } = useState(\"\");\n  const {\n    0: newCreatedBranch,\n    1: setNewCreatedBranch\n  } = useState(\"\");\n  const {\n    data: branchesData,\n    refetch: fetchBranches\n  } = useListBranches();\n\n  const handleChange = () => {\n    setActive(!active);\n  }; // const fetchBranches = async () => {\n  //   try {\n  //     const getBranches = await API.graphql(graphqlOperation(listBranchs))\n  //     setBranches(getBranches.data)\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  // }\n\n\n  const deleteBranch = async id => {\n    const branchToDelete = branches.listBranchs.items.filter(item => item.id === id)[0];\n    const transactionsToDelete = branchToDelete.transactions.items ? branchToDelete.transactions.items.map(transaction => transaction.id) : \"\";\n    const productsToDelete = branchToDelete.branchProducts.items ? branchToDelete.branchProducts.items.map(product => product.id) : \"\";\n    const paymentRequestToDelete = branchToDelete.branchPaymentRequests.items ? branchToDelete.branchPaymentRequests.items.map(paymentRequest => paymentRequest.id) : \"\";\n\n    try {\n      const deletedBranch = await API.graphql(graphqlOperation(removeBranch, {\n        input: {\n          id\n        }\n      }));\n      await Promise.all(transactionsToDelete.map(transactionId => {\n        API.graphql(graphqlOperation(deleteTransaction, {\n          input: {\n            id: transactionId\n          }\n        }));\n      })).catch(err => console.log(err));\n      await Promise.all(productsToDelete.map(productId => {\n        API.graphql(graphqlOperation(deleteBranchProduct, {\n          input: {\n            id: productId\n          }\n        }));\n      })).catch(err => console.log(err));\n      await Promise.all(paymentRequestToDelete.map(paymentId => {\n        API.graphql(graphqlOperation(deletePaymentRequest, {\n          input: {\n            id: paymentId\n          }\n        }));\n      }));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const deleteUserFromCognito = async username => {\n    try {\n      await cognito.adminDeleteUser({\n        UserPoolId: \"us-east-1_egI4Bi1bx\",\n        Username: username\n      }).promise();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    fetchBranches();\n    const createListener = API.graphql(graphqlOperation(onCreateBranchSubscription)).subscribe({\n      next: createdBranch => {\n        setNewCreatedBranch(createdBranch);\n      }\n    });\n    const deleteListener = API.graphql(graphqlOperation(onDeleteBranchSubscription)).subscribe({\n      next: deletedBranch => {\n        setNewCreatedBranch(deletedBranch);\n      }\n    });\n    return () => {\n      createListener.unsubscribe();\n      deleteListener.unsubscribe();\n    };\n  }, [newCreatedBranch]);\n  useEffect(() => {\n    setBranches(branchesData && branchesData.data);\n  }, [branchesData]);\n  return __jsx(React.Fragment, null, __jsx(Table, {\n    selectable: true,\n    celled: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Branch Name\"), __jsx(Table.HeaderCell, {\n    textAlign: \"center\"\n  }, \"Created At\"), __jsx(Table.HeaderCell, {\n    textAlign: \"center\"\n  }, \"Actions\"))), __jsx(Table.Body, null, branches && branches.listBranchs.items.map(item => __jsx(Table.Row, {\n    key: item.id\n  }, __jsx(Table.Cell, null, __jsx(Button, {\n    primary: true,\n    onClick: () => {\n      setBranchId(item.id);\n    }\n  }, __jsx(Icon, {\n    name: \"code branch\"\n  }), \" \", item.branchName)), __jsx(Table.Cell, {\n    textAlign: \"center\"\n  }, formatDate(item.createdAt)), __jsx(Table.Cell, {\n    textAlign: \"center\",\n    className: \"branch-actions\"\n  }, __jsx(Popup, {\n    content: \"Edit branch\",\n    trigger: __jsx(Icon, {\n      onClick: () => {\n        setProductBranchId(item.id);\n        setBranchName(item.branchName);\n        handleChange();\n      },\n      className: \"edit-branch\",\n      name: \"edit outline\"\n    })\n  }), __jsx(Popup, {\n    content: \"Delete Branch\",\n    trigger: __jsx(Icon, {\n      className: \"remove-branch\",\n      name: \"trash alternate\",\n      onClick: () => {\n        deleteBranch(item.id);\n        deleteUserFromCognito(item.branchUsername);\n      }\n    })\n  })))))), __jsx(BranchProducts, {\n    branchName: branchName,\n    branchId: productBranchId,\n    active: active,\n    handleChange: handleChange\n  }));\n};\n\nexport default BranchList;","map":{"version":3,"sources":["/var/www/transactions-avanta/components/BranchList.js"],"names":["React","useState","useEffect","AWS","API","graphqlOperation","Button","Form","Table","Popup","Icon","useListBranches","formatDate","config","BranchProducts","listBranchs","onCreateBranchSubscription","onDeleteBranchSubscription","removeBranch","deleteTransaction","deleteBranchProduct","deletePaymentRequest","configure","update","accessKeyId","secretAccessKey","region","cognito","CognitoIdentityServiceProvider","BranchList","setBranchId","branchId","active","setActive","branches","setBranches","branchName","setBranchName","productBranchId","setProductBranchId","newCreatedBranch","setNewCreatedBranch","data","branchesData","refetch","fetchBranches","handleChange","deleteBranch","id","branchToDelete","items","filter","item","transactionsToDelete","transactions","map","transaction","productsToDelete","branchProducts","product","paymentRequestToDelete","branchPaymentRequests","paymentRequest","deletedBranch","graphql","input","Promise","all","transactionId","catch","err","console","log","productId","paymentId","error","deleteUserFromCognito","username","adminDeleteUser","UserPoolId","Username","promise","createListener","subscribe","next","createdBranch","deleteListener","unsubscribe","createdAt","branchUsername"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport AWS from \"aws-sdk\"\nimport { API, graphqlOperation } from \"aws-amplify\"\nimport { Button, Form } from \"@shopify/polaris\"\nimport { Table, Popup, Icon } from \"semantic-ui-react\"\nimport { useListBranches } from \"../core/hooks\"\nimport { formatDate } from \"../utils/helper\"\nimport config from \"../aws-exports\"\nimport BranchProducts from \"./BranchProducts\"\nimport { listBranchs } from \"../graphql/queries\"\nimport { onCreateBranchSubscription, onDeleteBranchSubscription } from \"../graphql/subscriptions\"\nimport {\n  removeBranch,\n  deleteTransaction,\n  deleteBranchProduct,\n  deletePaymentRequest,\n} from \"../graphql/mutation\"\n\nAPI.configure(config)\n\nAWS.config.update({\n  accessKeyId: \"AKIA5VX4IMFOFTVY5X57\",\n  secretAccessKey: \"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\",\n  region: \"us-east-1\",\n})\n\nconst cognito = new AWS.CognitoIdentityServiceProvider()\n\nconst BranchList = ({ setBranchId, branchId }) => {\n  const [active, setActive] = useState(false)\n  const [branches, setBranches] = useState(\"\")\n  const [branchName, setBranchName] = useState(\"\")\n  const [productBranchId, setProductBranchId] = useState(\"\")\n  const [newCreatedBranch, setNewCreatedBranch] = useState(\"\")\n\n  const { data: branchesData, refetch: fetchBranches } = useListBranches()\n\n  const handleChange = () => {\n    setActive(!active)\n  }\n\n  // const fetchBranches = async () => {\n  //   try {\n  //     const getBranches = await API.graphql(graphqlOperation(listBranchs))\n  //     setBranches(getBranches.data)\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  // }\n\n  const deleteBranch = async (id) => {\n    const branchToDelete = branches.listBranchs.items.filter((item) => item.id === id)[0]\n\n    const transactionsToDelete = branchToDelete.transactions.items\n      ? branchToDelete.transactions.items.map((transaction) => transaction.id)\n      : \"\"\n\n    const productsToDelete = branchToDelete.branchProducts.items\n      ? branchToDelete.branchProducts.items.map((product) => product.id)\n      : \"\"\n\n    const paymentRequestToDelete = branchToDelete.branchPaymentRequests.items\n      ? branchToDelete.branchPaymentRequests.items.map((paymentRequest) => paymentRequest.id)\n      : \"\"\n\n    try {\n      const deletedBranch = await API.graphql(graphqlOperation(removeBranch, { input: { id } }))\n\n      await Promise.all(\n        transactionsToDelete.map((transactionId) => {\n          API.graphql(graphqlOperation(deleteTransaction, { input: { id: transactionId } }))\n        })\n      ).catch((err) => console.log(err))\n\n      await Promise.all(\n        productsToDelete.map((productId) => {\n          API.graphql(graphqlOperation(deleteBranchProduct, { input: { id: productId } }))\n        })\n      ).catch((err) => console.log(err))\n\n      await Promise.all(\n        paymentRequestToDelete.map((paymentId) => {\n          API.graphql(graphqlOperation(deletePaymentRequest, { input: { id: paymentId } }))\n        })\n      )\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const deleteUserFromCognito = async (username) => {\n    try {\n      await cognito\n        .adminDeleteUser({\n          UserPoolId: \"us-east-1_egI4Bi1bx\",\n          Username: username,\n        })\n        .promise()\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    fetchBranches()\n\n    const createListener = API.graphql(graphqlOperation(onCreateBranchSubscription)).subscribe({\n      next: (createdBranch) => {\n        setNewCreatedBranch(createdBranch)\n      },\n    })\n\n    const deleteListener = API.graphql(graphqlOperation(onDeleteBranchSubscription)).subscribe({\n      next: (deletedBranch) => {\n        setNewCreatedBranch(deletedBranch)\n      },\n    })\n\n    return () => {\n      createListener.unsubscribe()\n      deleteListener.unsubscribe()\n    }\n  }, [newCreatedBranch])\n\n  useEffect(() => {\n    setBranches(branchesData && branchesData.data)\n  }, [branchesData])\n\n  return (\n    <>\n      <Table selectable celled>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Branch Name</Table.HeaderCell>\n            <Table.HeaderCell textAlign=\"center\">Created At</Table.HeaderCell>\n            <Table.HeaderCell textAlign=\"center\">Actions</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {branches &&\n            branches.listBranchs.items.map((item) => (\n              <Table.Row key={item.id}>\n                <Table.Cell>\n                  <Button\n                    primary\n                    onClick={() => {\n                      setBranchId(item.id)\n                    }}>\n                    <Icon name=\"code branch\" /> {item.branchName}\n                  </Button>\n                </Table.Cell>\n                <Table.Cell textAlign=\"center\">{formatDate(item.createdAt)}</Table.Cell>\n                <Table.Cell textAlign=\"center\" className=\"branch-actions\">\n                  <Popup\n                    content=\"Edit branch\"\n                    trigger={\n                      <Icon\n                        onClick={() => {\n                          setProductBranchId(item.id)\n                          setBranchName(item.branchName)\n                          handleChange()\n                        }}\n                        className=\"edit-branch\"\n                        name=\"edit outline\"\n                      />\n                    }\n                  />\n                  <Popup\n                    content=\"Delete Branch\"\n                    trigger={\n                      <Icon\n                        className=\"remove-branch\"\n                        name=\"trash alternate\"\n                        onClick={() => {\n                          deleteBranch(item.id)\n                          deleteUserFromCognito(item.branchUsername)\n                        }}\n                      />\n                    }\n                  />\n                </Table.Cell>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n      <BranchProducts\n        branchName={branchName}\n        branchId={productBranchId}\n        active={active}\n        handleChange={handleChange}\n      />\n    </>\n  )\n}\n\nexport default BranchList\n"]},"metadata":{},"sourceType":"module"}