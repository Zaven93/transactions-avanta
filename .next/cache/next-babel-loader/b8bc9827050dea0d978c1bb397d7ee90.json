{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    query listPaymentRequest($limit: Int, $nextToken: Int) {\\n        listPaymentRequests(\\n            limit: $limit\\n            nextToken: $nextToken\\n            filter: { status: { eq: APPROVED } }\\n        ) {\\n            items {\\n                bonusAmount\\n                createdAt\\n                customerId\\n                id\\n                orderId\\n                status\\n                updatedAt\\n            }\\n            nextToken\\n        }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation updatePaymentRequest($input: UpdatePaymentRequestInput!) {\\n        updatePaymentRequest(input: $input) {\\n            bonusAmount\\n            customerId\\n            id\\n            orderId\\n            status\\n            products {\\n                originalUnitPrice\\n                quantity\\n                variantId\\n            }\\n            createdAt\\n            updatedAt\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport gql from 'graphql-tag';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { Table, Icon, Popup, Header } from 'semantic-ui-react';\nimport { Badge } from '@shopify/polaris';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport ProductList from './ProductsList';\nimport config from '../aws-exports';\nAPI.configure(config);\nvar updatePaymentRequest = gql(_templateObject());\nvar listPaymentRequest = gql(_templateObject2());\n\nvar AcceptedPaymentRequest = function AcceptedPaymentRequest() {\n  _s();\n\n  var _useState = useState(''),\n      paymentRequestId = _useState[0],\n      setPaymentRequestId = _useState[1];\n\n  var _useState2 = useState(false),\n      active = _useState2[0],\n      setActive = _useState2[1];\n\n  var handleChange = useCallback(function () {\n    return setActive(!active);\n  }, [active]);\n  console.log('Payment request id for decline', paymentRequestId);\n  var fetchAcceptedPayments = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return API.graphql(graphqlOperation(listPaymentRequest, {\n              limit: 7\n            }));\n\n          case 3:\n            res = _context.sent;\n            console.log('Accepted payments', res.data);\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 7]]);\n  })), []);\n  useEffect(function () {\n    fetchAcceptedPayments();\n  }, [fetchAcceptedPayments]);\n\n  var declinePayment = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(paymentId) {\n      var paymentResponse;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return API.graphql(graphqlOperation(updatePaymentRequest, {\n                input: {\n                  id: paymentId,\n                  status: 'DECLINED'\n                }\n              }));\n\n            case 3:\n              paymentResponse = _context2.sent;\n              console.log('Declined Payment data from lambda', paymentResponse.data);\n              _context2.next = 10;\n              break;\n\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(_context2.t0);\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 7]]);\n    }));\n\n    return function declinePayment(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(React.Fragment, null, __jsx(Table, {\n    selectable: true,\n    celled: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Customer Id\"), __jsx(Table.HeaderCell, null, \"Bonus Amount\"), __jsx(Table.HeaderCell, null, \"Created At\"), __jsx(Table.HeaderCell, null, \"Updated At\"), __jsx(Table.HeaderCell, null, \"Status\"), __jsx(Table.HeaderCell, null, \"Action\")))), __jsx(ProductList, {\n    paymentRequestId: paymentRequestId,\n    active: active,\n    handleChange: handleChange\n  }));\n};\n\n_s(AcceptedPaymentRequest, \"g24CFtr4qIccyGg1AdK60Btf2jw=\");\n\n_c = AcceptedPaymentRequest;\nexport default AcceptedPaymentRequest;\n\nvar _c;\n\n$RefreshReg$(_c, \"AcceptedPaymentRequest\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/components/PendingPaymentRequest.js"],"names":["React","useState","useCallback","useEffect","gql","API","graphqlOperation","Table","Icon","Popup","Header","Badge","toCurrency","formatDate","ProductList","config","configure","updatePaymentRequest","listPaymentRequest","AcceptedPaymentRequest","paymentRequestId","setPaymentRequestId","active","setActive","handleChange","console","log","fetchAcceptedPayments","graphql","limit","res","data","declinePayment","paymentId","input","id","status","paymentResponse"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport gql from 'graphql-tag'\r\nimport { API, graphqlOperation } from 'aws-amplify'\r\nimport { Table, Icon, Popup, Header } from 'semantic-ui-react'\r\nimport { Badge } from '@shopify/polaris'\r\nimport { toCurrency, formatDate } from '../utils/helper'\r\nimport ProductList from './ProductsList'\r\nimport config from '../aws-exports'\r\n\r\nAPI.configure(config)\r\n\r\nconst updatePaymentRequest = gql`\r\n    mutation updatePaymentRequest($input: UpdatePaymentRequestInput!) {\r\n        updatePaymentRequest(input: $input) {\r\n            bonusAmount\r\n            customerId\r\n            id\r\n            orderId\r\n            status\r\n            products {\r\n                originalUnitPrice\r\n                quantity\r\n                variantId\r\n            }\r\n            createdAt\r\n            updatedAt\r\n        }\r\n    }\r\n`\r\n\r\nconst listPaymentRequest = gql`\r\n    query listPaymentRequest($limit: Int, $nextToken: Int) {\r\n        listPaymentRequests(\r\n            limit: $limit\r\n            nextToken: $nextToken\r\n            filter: { status: { eq: APPROVED } }\r\n        ) {\r\n            items {\r\n                bonusAmount\r\n                createdAt\r\n                customerId\r\n                id\r\n                orderId\r\n                status\r\n                updatedAt\r\n            }\r\n            nextToken\r\n        }\r\n    }\r\n`\r\n\r\nconst AcceptedPaymentRequest = () => {\r\n    const [paymentRequestId, setPaymentRequestId] = useState('')\r\n    const [active, setActive] = useState(false)\r\n\r\n    const handleChange = useCallback(() => setActive(!active), [active])\r\n\r\n    console.log('Payment request id for decline', paymentRequestId)\r\n\r\n    const fetchAcceptedPayments = useCallback(async () => {\r\n        try {\r\n            const res = await API.graphql(graphqlOperation(listPaymentRequest, { limit: 7 }))\r\n\r\n            console.log('Accepted payments', res.data)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        fetchAcceptedPayments()\r\n    }, [fetchAcceptedPayments])\r\n\r\n    const declinePayment = async (paymentId) => {\r\n        try {\r\n            const paymentResponse = await API.graphql(\r\n                graphqlOperation(updatePaymentRequest, {\r\n                    input: {\r\n                        id: paymentId,\r\n                        status: 'DECLINED'\r\n                    }\r\n                })\r\n            )\r\n\r\n            console.log('Declined Payment data from lambda', paymentResponse.data)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <Table selectable celled>\r\n                <Table.Header>\r\n                    <Table.Row>\r\n                        <Table.HeaderCell>Customer Id</Table.HeaderCell>\r\n                        <Table.HeaderCell>Bonus Amount</Table.HeaderCell>\r\n                        <Table.HeaderCell>Created At</Table.HeaderCell>\r\n                        <Table.HeaderCell>Updated At</Table.HeaderCell>\r\n                        <Table.HeaderCell>Status</Table.HeaderCell>\r\n                        <Table.HeaderCell>Action</Table.HeaderCell>\r\n                    </Table.Row>\r\n                </Table.Header>\r\n                {/* <Table.Body>\r\n                    {paymentRequestItems &&\r\n                        paymentRequestItems\r\n                            .filter((item) => item.status === 'PENDING')\r\n                            .map((item) => (\r\n                                <Table.Row key={item.id}>\r\n                                    <Table.Cell>\r\n                                        <Badge size=\"small\">{item.customerId}</Badge>\r\n                                    </Table.Cell>\r\n                                    <Table.Cell>{toCurrency(item.bonusAmount)}</Table.Cell>\r\n                                    <Table.Cell>{formatDate(item.createdAt)}</Table.Cell>\r\n                                    <Table.Cell>{formatDate(item.updatedAt)}</Table.Cell>\r\n                                    <Table.Cell>\r\n                                        <Badge\r\n                                            size=\"small\"\r\n                                            progress=\"partiallyComplete\"\r\n                                            status=\"attention\">\r\n                                            {item.status}\r\n                                        </Badge>\r\n                                    </Table.Cell>\r\n                                    <Table.Cell className=\"actions-cell\">\r\n                                        <Popup\r\n                                            content=\"Approve payment\"\r\n                                            trigger={\r\n                                                <Icon\r\n                                                    className=\"accept\"\r\n                                                    name=\"check\"\r\n                                                    onClick={() => {\r\n                                                        setPaymentRequestId(item.id)\r\n                                                        handleChange()\r\n                                                    }}\r\n                                                />\r\n                                            }\r\n                                        />\r\n                                        <Popup\r\n                                            content=\"Decline payment\"\r\n                                            trigger={\r\n                                                <Icon\r\n                                                    className=\"decline\"\r\n                                                    name=\"remove\"\r\n                                                    onClick={async () => {\r\n                                                        declinePayment(item.id)\r\n                                                    }}\r\n                                                />\r\n                                            }\r\n                                        />\r\n                                    </Table.Cell>\r\n                                </Table.Row>\r\n                            ))}\r\n                </Table.Body> */}\r\n            </Table>\r\n            <ProductList\r\n                paymentRequestId={paymentRequestId}\r\n                active={active}\r\n                handleChange={handleChange}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AcceptedPaymentRequest\r\n"]},"metadata":{},"sourceType":"module"}