{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport AWS from \"aws-sdk\";\nimport { Page, Button, Modal, Badge, Stack } from \"@shopify/polaris\";\nimport { Table, Popup, Header, Icon } from \"semantic-ui-react\";\nimport { useForm } from \"react-hook-form\";\nimport { useConfirmSignUp, useSignUp, useCreateBranch, useListBranches, useCheckBranchName } from \"../core/hooks\";\nimport ProductList from \"./ProductsList\";\nimport { formatDate } from \"../utils/helper\";\nimport BranchProducts from \"./BranchProducts\";\nimport BranchList from \"./BranchList\";\nimport AdminBranchInfo from \"./AdminBranchInfo\";\nimport { createBranch } from \"../graphql/mutation\";\nimport { listBranchs } from \"../graphql/queries\";\n\nconst BranchConsole = ({\n  updateUser\n}) => {\n  const {\n    0: active,\n    1: setActive\n  } = useState(false);\n  const {\n    0: activeFields,\n    1: setActiveFields\n  } = useState({\n    activeBranchName: false,\n    activeUsername: false,\n    activePassword: false,\n    activeEmail: false,\n    activeCode: false\n  });\n  const {\n    0: activeBranchName,\n    1: setActiveBranchName\n  } = useState(false);\n  const {\n    0: activeUsername,\n    1: setActiveUsername\n  } = useState(false);\n  const {\n    0: activePassword,\n    1: setActivePassword\n  } = useState(false);\n  const {\n    0: activeEmail,\n    1: setActiveEmail\n  } = useState(false);\n  const {\n    0: activeCode,\n    1: setActiveCode\n  } = useState(false);\n  const {\n    0: branchName,\n    1: setBranchName\n  } = useState(\"\");\n  const {\n    0: username,\n    1: setUsername\n  } = useState(\"\");\n  const {\n    0: password,\n    1: setPassword\n  } = useState(\"\");\n  const {\n    0: showPassword,\n    1: setShowPassword\n  } = useState(false);\n  const {\n    0: formType,\n    1: setFormType\n  } = useState(\"signUp\");\n  const {\n    0: userSub,\n    1: setUserSub\n  } = useState(null);\n  const {\n    0: branches,\n    1: setBranches\n  } = useState(\"\");\n  const {\n    0: branchId,\n    1: setBranchId\n  } = useState(null);\n  const {\n    0: confirmErrorMessage,\n    1: setConfirmErrorMessage\n  } = useState();\n  const {\n    0: signUpErrorMessage,\n    1: setSignUpErrorMessage\n  } = useState(\"\");\n  const {\n    0: checkBranchNameErrorMessage,\n    1: setCheckBranchNameErrorMessage\n  } = useState(\"\");\n  const {\n    signUserUp,\n    data: signUpData,\n    error: signUpError\n  } = useSignUp();\n  const {\n    confirmSignUp,\n    data: confirmSignUpData,\n    error: confirmSignUpError\n  } = useConfirmSignUp();\n  const {\n    createBranch,\n    data: createdBranch,\n    error: createdBranchError\n  } = useCreateBranch();\n  const {\n    data: branchesData,\n    refetch: listBranches\n  } = useListBranches();\n  const {\n    data: branchByNameData,\n    refetch: getBranchByName\n  } = useCheckBranchName(branchName);\n  const {\n    handleSubmit,\n    errors,\n    register,\n    reset\n  } = useForm();\n\n  const handleChange = () => {\n    setActive(!active);\n  };\n\n  const onSubmit = async data => {\n    const {\n      username,\n      password\n    } = data;\n    console.log(\"Submitted data\", data);\n\n    try {\n      await getBranchByName();\n\n      if (branchByNameData && branchByNameData.data.branchByName.items.length > 0) {\n        setCheckBranchNameErrorMessage(\"Branch with such a name already exists\");\n        return;\n      }\n\n      await signUserUp({\n        username,\n        password\n      });\n\n      if (signUpError) {\n        setSignUpErrorMessage(\"Branch with such a username already exists\");\n        return;\n      }\n\n      await createBranch({\n        userSub,\n        username,\n        branchName\n      });\n      setActiveFields(activeFields => {\n        for (let key in activeFields) {\n          if (activeFields.hasOwnProperty(key)) {\n            activeFields[key] = false;\n          }\n        }\n\n        return activeFields;\n      });\n      handleChange();\n      reset();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    setUserSub(signUpData && signUpData.userSub);\n  }, [signUpData]);\n  useEffect(() => {\n    listBranches();\n  }, []);\n  useEffect(() => {\n    setBranches(branchesData && branchesData.data);\n  }, [branchesData]);\n  console.log(\"Branches data\", branches);\n  console.log(\"BranchByName Data\", branchByNameData);\n  console.log(\"Branch by name error\", checkBranchNameErrorMessage);\n  console.log(\"Create branch data\", createdBranch);\n  console.log(\"Created branch error\", createdBranchError);\n  console.log(\"User data userSub\", signUpData);\n  return __jsx(React.Fragment, null, branchId && __jsx(AdminBranchInfo, {\n    setBranchId: setBranchId,\n    branchId: branchId\n  }), !branchId && __jsx(React.Fragment, null, __jsx(Stack, null, __jsx(Stack.Item, {\n    fill: true\n  }, __jsx(Button, {\n    onClick: handleChange,\n    primary: true\n  }, __jsx(Icon, {\n    name: \"code branch\"\n  }), \" Create branch\")), __jsx(Stack.Item, null, __jsx(Button, {\n    primary: true,\n    id: \"Logout\",\n    onClick: () => {\n      Auth.signOut();\n      updateUser(null);\n    }\n  }, __jsx(Icon, {\n    name: \"sign out\"\n  }), \" Logout\"))), __jsx(BranchList, {\n    setBranchId: setBranchId\n  }), __jsx(Modal, {\n    open: active,\n    onClose: () => {\n      handleChange();\n      setActiveFields(activeFields => {\n        for (let key in activeFields) {\n          if (activeFields.hasOwnProperty(key)) {\n            activeFields[key] = false;\n          }\n        }\n\n        return activeFields;\n      });\n      setFormType(\"signUp\");\n      setSignUpErrorMessage(\"\");\n      setCheckBranchNameErrorMessage(\"\");\n      reset();\n    },\n    title: \"Fill in Branch info\"\n  }, __jsx(Modal.Section, null, formType === \"signUp\" && __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(\"div\", {\n    className: \"form-controll\"\n  }, __jsx(\"input\", {\n    name: \"branchName\",\n    onChange: e => {\n      setBranchName(e.target.value);\n      setCheckBranchNameErrorMessage(\"\");\n    },\n    ref: register({\n      required: \"Branch name is required!\"\n    }),\n    onBlur: e => {\n      if (e.target.value) {\n        return setActiveFields(_objectSpread(_objectSpread({}, activeFields), {}, {\n          activeBranchName: true\n        }));\n      }\n\n      return setActiveFields(_objectSpread(_objectSpread({}, activeFields), {}, {\n        activeBranchName: false\n      }));\n    }\n  }), __jsx(Icon, {\n    name: \"code branch\"\n  }), __jsx(\"label\", {\n    className: activeFields.activeBranchName ? \"active\" : \"\",\n    htmlFor: \"branchName\"\n  }, \"Branch Name\"), checkBranchNameErrorMessage && __jsx(\"p\", {\n    className: \"error-notification\"\n  }, checkBranchNameErrorMessage), !checkBranchNameErrorMessage && errors.branchName && __jsx(\"p\", {\n    className: \"error-notification\"\n  }, errors.branchName.message)), __jsx(\"div\", {\n    className: \"form-controll\"\n  }, __jsx(\"input\", {\n    name: \"username\",\n    onChange: e => {\n      setUsername(e.target.value);\n      setSignUpErrorMessage(\"\");\n    },\n    ref: register({\n      required: \"Username is required!\"\n    }),\n    onBlur: e => {\n      if (e.target.value) {\n        return setActiveFields(_objectSpread(_objectSpread({}, activeFields), {}, {\n          activeUsername: true\n        }));\n      }\n\n      return setActiveFields(_objectSpread(_objectSpread({}, activeFields), {}, {\n        activeUsername: false\n      }));\n    }\n  }), __jsx(Icon, {\n    name: \"user\"\n  }), __jsx(\"label\", {\n    className: activeFields.activeUsername ? \"active\" : \"\",\n    htmlFor: \"username\"\n  }, \"Username\"), signUpErrorMessage && __jsx(\"p\", {\n    className: \"error-notification\"\n  }, signUpErrorMessage), !signUpErrorMessage && errors.username && __jsx(\"p\", {\n    className: \"error-notification\"\n  }, errors.username.message)), __jsx(\"div\", {\n    className: \"form-controll\"\n  }, __jsx(\"input\", {\n    name: \"password\",\n    type: showPassword ? \"text\" : \"password\",\n    ref: register({\n      required: \"Password is required!\",\n      minLength: {\n        value: 8,\n        message: \"Password must be at least 8 characters long\"\n      }\n    }),\n    onChange: e => setPassword(e.target.value),\n    onBlur: e => {\n      if (e.target.value) {\n        return setActiveFields(_objectSpread(_objectSpread({}, activeFields), {}, {\n          activePassword: true\n        }));\n      }\n\n      return setActiveFields(_objectSpread(_objectSpread({}, activeFields), {}, {\n        activePassword: false\n      }));\n    }\n  }), __jsx(Icon, {\n    name: \"lock\"\n  }), __jsx(\"label\", {\n    className: activeFields.activePassword ? \"active\" : \"\",\n    htmlFor: \"password\"\n  }, \"Password\"), __jsx(Icon, {\n    className: password ? \"show-eye\" : \"not-show-eye\",\n    onClick: () => setShowPassword(!showPassword),\n    name: showPassword ? \"eye slash\" : \"eye\",\n    style: {\n      color: showPassword ? \"#6774c8\" : \"\"\n    }\n  }), errors.password && __jsx(\"p\", {\n    className: \"error-notification\"\n  }, errors.password.message)), __jsx(Button, {\n    primary: true,\n    submit: true\n  }, __jsx(Icon, {\n    name: \"sign-in\"\n  }), \" Create Branch\"))))));\n};\n\nexport default BranchConsole;","map":{"version":3,"sources":["/var/www/transactions-avanta/components/BranchConsole.js"],"names":["React","useState","useEffect","useRef","useCallback","AWS","Page","Button","Modal","Badge","Stack","Table","Popup","Header","Icon","useForm","useConfirmSignUp","useSignUp","useCreateBranch","useListBranches","useCheckBranchName","ProductList","formatDate","BranchProducts","BranchList","AdminBranchInfo","createBranch","listBranchs","BranchConsole","updateUser","active","setActive","activeFields","setActiveFields","activeBranchName","activeUsername","activePassword","activeEmail","activeCode","setActiveBranchName","setActiveUsername","setActivePassword","setActiveEmail","setActiveCode","branchName","setBranchName","username","setUsername","password","setPassword","showPassword","setShowPassword","formType","setFormType","userSub","setUserSub","branches","setBranches","branchId","setBranchId","confirmErrorMessage","setConfirmErrorMessage","signUpErrorMessage","setSignUpErrorMessage","checkBranchNameErrorMessage","setCheckBranchNameErrorMessage","signUserUp","data","signUpData","error","signUpError","confirmSignUp","confirmSignUpData","confirmSignUpError","createdBranch","createdBranchError","branchesData","refetch","listBranches","branchByNameData","getBranchByName","handleSubmit","errors","register","reset","handleChange","onSubmit","console","log","branchByName","items","length","key","hasOwnProperty","Auth","signOut","e","target","value","required","message","minLength","color"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from \"react\"\nimport AWS from \"aws-sdk\"\nimport { Page, Button, Modal, Badge, Stack } from \"@shopify/polaris\"\nimport { Table, Popup, Header, Icon } from \"semantic-ui-react\"\nimport { useForm } from \"react-hook-form\"\nimport {\n  useConfirmSignUp,\n  useSignUp,\n  useCreateBranch,\n  useListBranches,\n  useCheckBranchName,\n} from \"../core/hooks\"\nimport ProductList from \"./ProductsList\"\nimport { formatDate } from \"../utils/helper\"\nimport BranchProducts from \"./BranchProducts\"\nimport BranchList from \"./BranchList\"\nimport AdminBranchInfo from \"./AdminBranchInfo\"\nimport { createBranch } from \"../graphql/mutation\"\nimport { listBranchs } from \"../graphql/queries\"\n\nconst BranchConsole = ({ updateUser }) => {\n  const [active, setActive] = useState(false)\n  const [activeFields, setActiveFields] = useState({\n    activeBranchName: false,\n    activeUsername: false,\n    activePassword: false,\n    activeEmail: false,\n    activeCode: false,\n  })\n  const [activeBranchName, setActiveBranchName] = useState(false)\n  const [activeUsername, setActiveUsername] = useState(false)\n  const [activePassword, setActivePassword] = useState(false)\n  const [activeEmail, setActiveEmail] = useState(false)\n  const [activeCode, setActiveCode] = useState(false)\n  const [branchName, setBranchName] = useState(\"\")\n  const [username, setUsername] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [showPassword, setShowPassword] = useState(false)\n  const [formType, setFormType] = useState(\"signUp\")\n  const [userSub, setUserSub] = useState(null)\n  const [branches, setBranches] = useState(\"\")\n  const [branchId, setBranchId] = useState(null)\n  const [confirmErrorMessage, setConfirmErrorMessage] = useState()\n  const [signUpErrorMessage, setSignUpErrorMessage] = useState(\"\")\n  const [checkBranchNameErrorMessage, setCheckBranchNameErrorMessage] = useState(\"\")\n\n  const { signUserUp, data: signUpData, error: signUpError } = useSignUp()\n  const { confirmSignUp, data: confirmSignUpData, error: confirmSignUpError } = useConfirmSignUp()\n  const { createBranch, data: createdBranch, error: createdBranchError } = useCreateBranch()\n  const { data: branchesData, refetch: listBranches } = useListBranches()\n  const { data: branchByNameData, refetch: getBranchByName } = useCheckBranchName(branchName)\n  const { handleSubmit, errors, register, reset } = useForm()\n\n  const handleChange = () => {\n    setActive(!active)\n  }\n\n  const onSubmit = async (data) => {\n    const { username, password } = data\n\n    console.log(\"Submitted data\", data)\n\n    try {\n      await getBranchByName()\n      if (branchByNameData && branchByNameData.data.branchByName.items.length > 0) {\n        setCheckBranchNameErrorMessage(\"Branch with such a name already exists\")\n        return\n      }\n\n      await signUserUp({ username, password })\n\n      if (signUpError) {\n        setSignUpErrorMessage(\"Branch with such a username already exists\")\n        return\n      }\n\n      await createBranch({ userSub, username, branchName })\n\n      setActiveFields((activeFields) => {\n        for (let key in activeFields) {\n          if (activeFields.hasOwnProperty(key)) {\n            activeFields[key] = false\n          }\n        }\n        return activeFields\n      })\n      handleChange()\n      reset()\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    setUserSub(signUpData && signUpData.userSub)\n  }, [signUpData])\n\n  useEffect(() => {\n    listBranches()\n  }, [])\n\n  useEffect(() => {\n    setBranches(branchesData && branchesData.data)\n  }, [branchesData])\n\n  console.log(\"Branches data\", branches)\n  console.log(\"BranchByName Data\", branchByNameData)\n  console.log(\"Branch by name error\", checkBranchNameErrorMessage)\n  console.log(\"Create branch data\", createdBranch)\n  console.log(\"Created branch error\", createdBranchError)\n  console.log(\"User data userSub\", signUpData)\n\n  return (\n    <>\n      {branchId && <AdminBranchInfo setBranchId={setBranchId} branchId={branchId} />}\n      {!branchId && (\n        <>\n          <Stack>\n            <Stack.Item fill>\n              <Button onClick={handleChange} primary>\n                <Icon name=\"code branch\" /> Create branch\n              </Button>\n            </Stack.Item>\n            <Stack.Item>\n              <Button\n                primary\n                id=\"Logout\"\n                onClick={() => {\n                  Auth.signOut()\n                  updateUser(null)\n                }}>\n                <Icon name=\"sign out\" /> Logout\n              </Button>\n            </Stack.Item>\n          </Stack>\n          <BranchList setBranchId={setBranchId} />\n          <Modal\n            open={active}\n            onClose={() => {\n              handleChange()\n              setActiveFields((activeFields) => {\n                for (let key in activeFields) {\n                  if (activeFields.hasOwnProperty(key)) {\n                    activeFields[key] = false\n                  }\n                }\n                return activeFields\n              })\n              setFormType(\"signUp\")\n              setSignUpErrorMessage(\"\")\n              setCheckBranchNameErrorMessage(\"\")\n              reset()\n            }}\n            title=\"Fill in Branch info\">\n            <Modal.Section>\n              {formType === \"signUp\" && (\n                <form onSubmit={handleSubmit(onSubmit)}>\n                  <div className=\"form-controll\">\n                    <input\n                      name=\"branchName\"\n                      onChange={(e) => {\n                        setBranchName(e.target.value)\n                        setCheckBranchNameErrorMessage(\"\")\n                      }}\n                      ref={register({ required: \"Branch name is required!\" })}\n                      onBlur={(e) => {\n                        if (e.target.value) {\n                          return setActiveFields({ ...activeFields, activeBranchName: true })\n                        }\n                        return setActiveFields({ ...activeFields, activeBranchName: false })\n                      }}\n                    />\n                    <Icon name=\"code branch\" />\n                    <label\n                      className={activeFields.activeBranchName ? \"active\" : \"\"}\n                      htmlFor=\"branchName\">\n                      Branch Name\n                    </label>\n                    {checkBranchNameErrorMessage && (\n                      <p className=\"error-notification\">{checkBranchNameErrorMessage}</p>\n                    )}\n                    {!checkBranchNameErrorMessage && errors.branchName && (\n                      <p className=\"error-notification\">{errors.branchName.message}</p>\n                    )}\n                  </div>\n                  <div className=\"form-controll\">\n                    <input\n                      name=\"username\"\n                      onChange={(e) => {\n                        setUsername(e.target.value)\n                        setSignUpErrorMessage(\"\")\n                      }}\n                      ref={register({ required: \"Username is required!\" })}\n                      onBlur={(e) => {\n                        if (e.target.value) {\n                          return setActiveFields({ ...activeFields, activeUsername: true })\n                        }\n                        return setActiveFields({ ...activeFields, activeUsername: false })\n                      }}\n                    />\n                    <Icon name=\"user\" />\n                    <label\n                      className={activeFields.activeUsername ? \"active\" : \"\"}\n                      htmlFor=\"username\">\n                      Username\n                    </label>\n                    {signUpErrorMessage && (\n                      <p className=\"error-notification\">{signUpErrorMessage}</p>\n                    )}\n                    {!signUpErrorMessage && errors.username && (\n                      <p className=\"error-notification\">{errors.username.message}</p>\n                    )}\n                  </div>\n                  {/* <div className=\"form-controll\">\n                    <input\n                      name=\"email\"\n                      ref={register({\n                        required: \"Email is required!\",\n                        pattern: {\n                          value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                          message: \"invalid email address\",\n                        },\n                      })}\n                      onBlur={(e) => {\n                        if (e.target.value) {\n                          return setActiveFields({ ...activeFields, activeEmail: true })\n                        }\n                        return setActiveFields({ ...activeFields, activeEmail: false })\n                      }}\n                    />\n                    <Icon name=\"mail\" />\n                    <label className={activeFields.activeEmail ? \"active\" : \"\"} htmlFor=\"email\">\n                      Email\n                    </label>\n                    {errors.email && <p className=\"error-notification\">{errors.email.message}</p>}\n                  </div> */}\n                  <div className=\"form-controll\">\n                    <input\n                      name=\"password\"\n                      type={showPassword ? \"text\" : \"password\"}\n                      ref={register({\n                        required: \"Password is required!\",\n                        minLength: {\n                          value: 8,\n                          message: \"Password must be at least 8 characters long\",\n                        },\n                      })}\n                      onChange={(e) => setPassword(e.target.value)}\n                      onBlur={(e) => {\n                        if (e.target.value) {\n                          return setActiveFields({ ...activeFields, activePassword: true })\n                        }\n                        return setActiveFields({ ...activeFields, activePassword: false })\n                      }}\n                    />\n                    <Icon name=\"lock\" />\n                    <label\n                      className={activeFields.activePassword ? \"active\" : \"\"}\n                      htmlFor=\"password\">\n                      Password\n                    </label>\n                    <Icon\n                      className={password ? \"show-eye\" : \"not-show-eye\"}\n                      onClick={() => setShowPassword(!showPassword)}\n                      name={showPassword ? \"eye slash\" : \"eye\"}\n                      style={{ color: showPassword ? \"#6774c8\" : \"\" }}\n                    />\n                    {errors.password && (\n                      <p className=\"error-notification\">{errors.password.message}</p>\n                    )}\n                  </div>\n                  <Button primary submit>\n                    <Icon name=\"sign-in\" /> Create Branch\n                  </Button>\n                </form>\n              )}\n              {/* {formType === \"confirm\" && (\n                <form onSubmit={handleSubmit(onConfirm)}>\n                  <div className=\"form-controll\">\n                    <input\n                      name=\"username\"\n                      value={username}\n                      onChange={(e) => setUsername(e.target.value)}\n                      ref={register({ required: \"Username is required!\" })}\n                      onBlur={(e) => {\n                        if (e.target.value) {\n                          return setActiveFields({ ...activeFields, activeUsername: true })\n                        }\n                        return setActiveFields({ ...activeFields, activeUsername: false })\n                      }}\n                    />\n                    <Icon name=\"user\" />\n                    <label\n                      className={activeFields.activeUsername ? \"active\" : \"\"}\n                      htmlFor=\"username\">\n                      Username\n                    </label>\n                    {errors.username && (\n                      <p className=\"error-notification\">{errors.username.message}</p>\n                    )}\n                  </div>\n                  <div className=\"form-controll\">\n                    <input\n                      name=\"code\"\n                      ref={register({ required: \"Confirm code is required!\" })}\n                      onChange={() => setConfirmErrorMessage(\"\")}\n                      onBlur={(e) => {\n                        if (e.target.value) {\n                          return setActiveFields({ ...activeFields, activeCode: true })\n                        }\n                        return setActiveFields({ ...activeFields, activeCode: false })\n                      }}\n                    />\n                    <Icon name=\"unlock alternate\" />\n                    <label className={activeFields.activeCode ? \"active\" : \"\"} htmlFor=\"code\">\n                      Confirm code\n                    </label>\n                    {!errors.code && confirmErrorMessage && (\n                      <p className=\"error-notification\">{confirmErrorMessage}</p>\n                    )}\n                    {errors.code && <p className=\"error-notification\">{errors.code.message}</p>}\n                  </div>\n                  <Button primary submit>\n                    <Icon name=\"sign-in\" /> Confirm\n                  </Button>\n                </form>\n              )} */}\n            </Modal.Section>\n          </Modal>\n        </>\n      )}\n    </>\n  )\n}\n\nexport default BranchConsole\n"]},"metadata":{},"sourceType":"module"}