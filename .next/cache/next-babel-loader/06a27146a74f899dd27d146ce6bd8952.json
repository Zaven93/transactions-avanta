{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { ClientApplication } from '@shopify/app-bridge';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport gql from 'graphql-tag';\nimport config from '../../aws-exports';\nimport BranchContext from '../../context/branchContext';\nimport { BarcodeMajorMonotone } from '@shopify/polaris-icons';\nAPI.configure(config);\nconst getBranchById = gql`\n    query getBranch($id: ID) {\n        getBranch(id: $id) {\n            branchName\n            adminId\n            id\n            branchProducts {\n                items {\n                    branchId\n                    createdAt\n                    id\n                    productId\n                    tags\n                    updatedAt\n                }\n            }\n        }\n    }\n`;\n\nconst Branch = () => {\n  const router = useRouter();\n  const {\n    0: branchId,\n    1: setBranchId\n  } = useState('');\n  console.log('Router from branch', router.asPath.split('/')[2].split('?')[0]);\n  console.log('Type of branch Id', typeof router.asPath.split('/')[2].split('?')[0]);\n\n  const fetchBranch = async () => {\n    console.log('Branch id', branchId);\n\n    try {\n      const branch = await API.graphql(graphqlOperation(getBranchById, {\n        id: branchId\n      }));\n      console.log('Fetched branch', branch);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    setBranchId(router.asPath.split('/')[2].split('?')[0]);\n\n    if (branchId === '[branchId]') {\n      console.log('No branch id yet');\n      return;\n    }\n\n    fetchBranch();\n  }, [branchId]);\n  return __jsx(\"div\", null, \"Branch\");\n};\n\nexport default Branch;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/pages/branch/[branchId].js"],"names":["React","useState","useEffect","useRouter","ClientApplication","API","graphqlOperation","gql","config","BranchContext","BarcodeMajorMonotone","configure","getBranchById","Branch","router","branchId","setBranchId","console","log","asPath","split","fetchBranch","branch","graphql","id","error"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,SAASC,GAAT,EAAcC,gBAAd,QAAsC,aAAtC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,SAASC,oBAAT,QAAqC,wBAArC;AAEAL,GAAG,CAACM,SAAJ,CAAcH,MAAd;AAEA,MAAMI,aAAa,GAAGL,GAAI;;;;;;;;;;;;;;;;;;CAA1B;;AAoBA,MAAMM,MAAM,GAAG,MAAM;AACjB,QAAMC,MAAM,GAAGX,SAAS,EAAxB;AACA,QAAM;AAAA,OAACY,QAAD;AAAA,OAAWC;AAAX,MAA0Bf,QAAQ,CAAC,EAAD,CAAxC;AACAgB,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCJ,MAAM,CAACK,MAAP,CAAcC,KAAd,CAAoB,GAApB,EAAyB,CAAzB,EAA4BA,KAA5B,CAAkC,GAAlC,EAAuC,CAAvC,CAAlC;AACAH,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiC,OAAOJ,MAAM,CAACK,MAAP,CAAcC,KAAd,CAAoB,GAApB,EAAyB,CAAzB,EAA4BA,KAA5B,CAAkC,GAAlC,EAAuC,CAAvC,CAAxC;;AAEA,QAAMC,WAAW,GAAG,YAAY;AAC5BJ,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBH,QAAzB;;AACA,QAAI;AACA,YAAMO,MAAM,GAAG,MAAMjB,GAAG,CAACkB,OAAJ,CAAYjB,gBAAgB,CAACM,aAAD,EAAgB;AAAEY,QAAAA,EAAE,EAAET;AAAN,OAAhB,CAA5B,CAArB;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BI,MAA9B;AACH,KAHD,CAGE,OAAOG,KAAP,EAAc;AACZR,MAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACH;AACJ,GARD;;AASAvB,EAAAA,SAAS,CAAC,MAAM;AACZc,IAAAA,WAAW,CAACF,MAAM,CAACK,MAAP,CAAcC,KAAd,CAAoB,GAApB,EAAyB,CAAzB,EAA4BA,KAA5B,CAAkC,GAAlC,EAAuC,CAAvC,CAAD,CAAX;;AACA,QAAIL,QAAQ,KAAK,YAAjB,EAA+B;AAC3BE,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA;AACH;;AACDG,IAAAA,WAAW;AACd,GAPQ,EAON,CAACN,QAAD,CAPM,CAAT;AASA,SAAO,4BAAP;AACH,CAzBD;;AA2BA,eAAeF,MAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { ClientApplication } from '@shopify/app-bridge'\r\nimport { API, graphqlOperation } from 'aws-amplify'\r\nimport gql from 'graphql-tag'\r\nimport config from '../../aws-exports'\r\nimport BranchContext from '../../context/branchContext'\r\nimport { BarcodeMajorMonotone } from '@shopify/polaris-icons'\r\n\r\nAPI.configure(config)\r\n\r\nconst getBranchById = gql`\r\n    query getBranch($id: ID) {\r\n        getBranch(id: $id) {\r\n            branchName\r\n            adminId\r\n            id\r\n            branchProducts {\r\n                items {\r\n                    branchId\r\n                    createdAt\r\n                    id\r\n                    productId\r\n                    tags\r\n                    updatedAt\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst Branch = () => {\r\n    const router = useRouter()\r\n    const [branchId, setBranchId] = useState('')\r\n    console.log('Router from branch', router.asPath.split('/')[2].split('?')[0])\r\n    console.log('Type of branch Id', typeof router.asPath.split('/')[2].split('?')[0])\r\n\r\n    const fetchBranch = async () => {\r\n        console.log('Branch id', branchId)\r\n        try {\r\n            const branch = await API.graphql(graphqlOperation(getBranchById, { id: branchId }))\r\n            console.log('Fetched branch', branch)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        setBranchId(router.asPath.split('/')[2].split('?')[0])\r\n        if (branchId === '[branchId]') {\r\n            console.log('No branch id yet')\r\n            return\r\n        }\r\n        fetchBranch()\r\n    }, [branchId])\r\n\r\n    return <div>Branch</div>\r\n}\r\n\r\nexport default Branch\r\n"]},"metadata":{},"sourceType":"module"}