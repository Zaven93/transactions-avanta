{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport gql from 'graphql-tag';\nimport { Page, Button, Icon, Card, DataTable } from '@shopify/polaris';\nimport config from '../aws-exports';\nAPI.configure(config);\nconst getBranchById = gql`\n    query getBranch($id: ID!) {\n        getBranch(id: $id) {\n            transactions(sortDirection: DESC) {\n                items {\n                    branchId\n                    createdAt\n                    currency\n                    note\n                    customer {\n                        email\n                        id\n                        firstName\n                        lastName\n                        phone\n                    }\n                    totalBonusAmount\n                    totalPrice\n                    updatedAt\n                    sortDate\n                }\n            }\n            branchName\n            adminId\n            id\n            branchProducts {\n                items {\n                    branchId\n                    createdAt\n                    id\n                    productId\n                    tags\n                    updatedAt\n                }\n            }\n        }\n    }\n`;\n\nconst AdminBranchInfo = ({\n  branchId\n}) => {\n  const {\n    0: branchInfo,\n    1: setBranchInfo\n  } = useState('');\n  const {\n    0: searchValue,\n    1: setSearchValue\n  } = useState(null);\n  const handleSearchInput = useCallback(newValue => setSearchValue(newValue), []);\n\n  const getBranch = async () => {\n    try {\n      const branch = await API.graphql(graphqlOperation(getBranchById, {\n        id: branchId\n      }));\n      setBranchInfo(branch.data.getBranch);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getBranch();\n  }, []);\n  console.log('Branch info from admin', branchId);\n  return __jsx(React.Fragment, null, branchInfo && __jsx(React.Fragment, null, __jsx(TextField, {\n    label: \"Search Product\",\n    value: searchValue,\n    onChange: handleSearchInput,\n    prefix: __jsx(Icon, {\n      source: SearchMajorMonotone\n    }),\n    placeholder: \"Search by Customer phone number\"\n  }), __jsx(Card, null, __jsx(DataTable, {\n    columnContentTypes: ['text', 'text', 'text', 'text'],\n    headings: ['Customer phone number', 'TotalPrice', 'TotalBonusAmount', 'Minus from Bonus Amount', 'CreatedAt'],\n    rows: branchInfo && branchInfo.transactions.items.filter(transaction => {\n      if (searchValue == null) {\n        return transaction;\n      } else if (transaction.customer[0].phone.toLowerCase().includes(searchValue.toLowerCase())) {\n        return transaction;\n      }\n    }).sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt)).map(transaction => [__jsx(Button, {\n      primary: true,\n      onClick: () => redirect.dispatch(Redirect.Action.ADMIN_PATH, {\n        path: `/customers/${transaction.customer[0].id}`,\n        newContext: true\n      })\n    }, transaction.customer[0].phone), toCurrency(Number(transaction.totalPrice)), toCurrency(Number(transaction.totalBonusAmount)), transaction.note === null ? '' : toCurrency(extractNumbersFromString(transaction.note)), formatDate(transaction.createdAt)])\n  }))));\n};\n\nexport default AdminBranchInfo;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/components/AdminBranchInfo.js"],"names":["React","useState","useEffect","useCallback","API","graphqlOperation","gql","Page","Button","Icon","Card","DataTable","config","configure","getBranchById","AdminBranchInfo","branchId","branchInfo","setBranchInfo","searchValue","setSearchValue","handleSearchInput","newValue","getBranch","branch","graphql","id","data","error","console","log","SearchMajorMonotone","transactions","items","filter","transaction","customer","phone","toLowerCase","includes","sort","a","b","Date","createdAt","map","redirect","dispatch","Redirect","Action","ADMIN_PATH","path","newContext","toCurrency","Number","totalPrice","totalBonusAmount","note","extractNumbersFromString","formatDate"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\r\nimport { API, graphqlOperation } from 'aws-amplify'\r\nimport gql from 'graphql-tag'\r\nimport { Page, Button, Icon, Card, DataTable } from '@shopify/polaris'\r\nimport config from '../aws-exports'\r\n\r\nAPI.configure(config)\r\n\r\nconst getBranchById = gql`\r\n    query getBranch($id: ID!) {\r\n        getBranch(id: $id) {\r\n            transactions(sortDirection: DESC) {\r\n                items {\r\n                    branchId\r\n                    createdAt\r\n                    currency\r\n                    note\r\n                    customer {\r\n                        email\r\n                        id\r\n                        firstName\r\n                        lastName\r\n                        phone\r\n                    }\r\n                    totalBonusAmount\r\n                    totalPrice\r\n                    updatedAt\r\n                    sortDate\r\n                }\r\n            }\r\n            branchName\r\n            adminId\r\n            id\r\n            branchProducts {\r\n                items {\r\n                    branchId\r\n                    createdAt\r\n                    id\r\n                    productId\r\n                    tags\r\n                    updatedAt\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst AdminBranchInfo = ({ branchId }) => {\r\n    const [branchInfo, setBranchInfo] = useState('')\r\n    const [searchValue, setSearchValue] = useState(null)\r\n\r\n    const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\r\n\r\n    const getBranch = async () => {\r\n        try {\r\n            const branch = await API.graphql(graphqlOperation(getBranchById, { id: branchId }))\r\n            setBranchInfo(branch.data.getBranch)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getBranch()\r\n    }, [])\r\n\r\n    console.log('Branch info from admin', branchId)\r\n    return (\r\n        <>\r\n            {branchInfo && (\r\n                <>\r\n                    <TextField\r\n                        label=\"Search Product\"\r\n                        value={searchValue}\r\n                        onChange={handleSearchInput}\r\n                        prefix={<Icon source={SearchMajorMonotone} />}\r\n                        placeholder=\"Search by Customer phone number\"\r\n                    />\r\n                    <Card>\r\n                        <DataTable\r\n                            columnContentTypes={['text', 'text', 'text', 'text']}\r\n                            headings={[\r\n                                'Customer phone number',\r\n                                'TotalPrice',\r\n                                'TotalBonusAmount',\r\n                                'Minus from Bonus Amount',\r\n                                'CreatedAt'\r\n                            ]}\r\n                            rows={\r\n                                branchInfo &&\r\n                                branchInfo.transactions.items\r\n                                    .filter((transaction) => {\r\n                                        if (searchValue == null) {\r\n                                            return transaction\r\n                                        } else if (\r\n                                            transaction.customer[0].phone\r\n                                                .toLowerCase()\r\n                                                .includes(searchValue.toLowerCase())\r\n                                        ) {\r\n                                            return transaction\r\n                                        }\r\n                                    })\r\n                                    .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))\r\n                                    .map((transaction) => [\r\n                                        <Button\r\n                                            primary\r\n                                            onClick={() =>\r\n                                                redirect.dispatch(Redirect.Action.ADMIN_PATH, {\r\n                                                    path: `/customers/${transaction.customer[0].id}`,\r\n                                                    newContext: true\r\n                                                })\r\n                                            }>\r\n                                            {transaction.customer[0].phone}\r\n                                        </Button>,\r\n                                        toCurrency(Number(transaction.totalPrice)),\r\n                                        toCurrency(Number(transaction.totalBonusAmount)),\r\n                                        transaction.note === null\r\n                                            ? ''\r\n                                            : toCurrency(\r\n                                                  extractNumbersFromString(transaction.note)\r\n                                              ),\r\n                                        formatDate(transaction.createdAt)\r\n                                    ])\r\n                            }\r\n                        />\r\n                        {/* <Pagination\r\n                    hasPrevious={previousPaginateTokens.length > 0}\r\n                    onPrevious={paginatePrevious}\r\n                    hasNext={nextPaginateToken}\r\n                    onNext={paginateNext}\r\n                /> */}\r\n                    </Card>\r\n                </>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AdminBranchInfo\r\n"]},"metadata":{},"sourceType":"module"}