{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect, useCallback } from 'react';\nimport AWS from 'aws-sdk';\nimport { Auth, API, graphqlOperation } from 'aws-amplify';\nimport createApp from '@shopify/app-bridge';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport gql from 'graphql-tag';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Page, Button, Modal, Form, FormLayout, TextField, Badge } from '@shopify/polaris';\nimport { Table, Popup, Header, Icon } from 'semantic-ui-react';\nimport ProductList from './ProductsList';\nimport { formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nimport BranchProducts from './BranchProducts';\nimport BranchContext from '../context/branchContext';\nimport AdminBranchInfo from '../components/AdminBranchInfo';\nAPI.configure(config);\nAWS.config.update({\n  accessKeyId: 'AKIAI53OMMWOAP5X3K5Q',\n  secretAccessKey: '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',\n  region: 'us-east-1'\n});\nconst cognito = new AWS.CognitoIdentityServiceProvider();\nconst listBranchs = gql`\n    query listBranchs {\n        listBranchs {\n            items {\n                adminId\n                branchName\n                branchUsername\n                createdAt\n                id\n                branchProducts {\n                    items {\n                        branchId\n                        createdAt\n                        id\n                        productId\n                        tags\n                        updatedAt\n                    }\n                }\n            }\n        }\n    }\n`;\nconst onCreateBranchSubscription = gql`\n    subscription onCreateBranch {\n        onCreateBranch {\n            adminId\n            branchName\n            id\n            createdAt\n        }\n    }\n`;\nconst onDeleteBranchSubscription = gql`\n    subscription onDeleteBranch {\n        onDeleteBranch {\n            id\n        }\n    }\n`;\nconst removeBranch = gql`\n    mutation deleteBranch($input: DeleteBranchInput!) {\n        deleteBranch(input: $input) {\n            id\n        }\n    }\n`;\n\nconst BranchList = ({\n  setBranchId,\n  branchId\n}) => {\n  const {\n    0: active,\n    1: setActive\n  } = useState(false);\n  const {\n    0: branches,\n    1: setBranches\n  } = useState('');\n  const {\n    0: branchName,\n    1: setBranchName\n  } = useState('');\n  const {\n    0: productBranchId,\n    1: setProductBranchId\n  } = useState('');\n  const {\n    0: newCreatedBranch,\n    1: setNewCreatedBranch\n  } = useState('');\n  const {\n    0: branchProducts,\n    1: setBranchProducts\n  } = useState('');\n  const app = createApp({\n    apiKey: '3b01063bac3031d13101100ef3e44fd5',\n    shopOrigin: 'transactions-avanta.myshopify.com'\n  });\n  const redirect = Redirect.create(app);\n\n  const handleChange = () => {\n    setActive(!active);\n  };\n\n  const fetchBranches = async () => {\n    try {\n      const getBranches = await API.graphql(graphqlOperation(listBranchs));\n      setBranches(getBranches.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const deleteBranch = async id => {\n    try {\n      const deletedBranch = await API.graphql(graphqlOperation(removeBranch, {\n        input: {\n          id\n        }\n      }));\n      console.log('Deleted branch', deletedBranch);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const deleteUserFromCognito = async username => {\n    try {\n      await cognito.adminDeleteUser({\n        UserPoolId: 'us-east-1_IfrnnzGFR',\n        Username: username\n      }).promise();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    fetchBranches();\n    API.graphql(graphqlOperation(onCreateBranchSubscription)).subscribe({\n      next: createdBranch => {\n        setNewCreatedBranch(createdBranch);\n      }\n    });\n    API.graphql(graphqlOperation(onDeleteBranchSubscription)).subscribe({\n      next: deletedBranch => {\n        setNewCreatedBranch(deletedBranch);\n      }\n    });\n  }, [newCreatedBranch]);\n  console.log('Branches from Branch list', branches);\n  return __jsx(React.Fragment, null, __jsx(Table, {\n    selectable: true,\n    celled: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Branch Name\"), __jsx(Table.HeaderCell, {\n    textAlign: \"center\"\n  }, \"Created At\"), __jsx(Table.HeaderCell, {\n    textAlign: \"center\"\n  }, \"Actions\"))), __jsx(Table.Body, null, branches && branches.listBranchs.items.map(item => __jsx(Table.Row, {\n    key: item.id\n  }, __jsx(Table.Cell, null, __jsx(Button, {\n    primary: true,\n    onClick: () => {\n      setBranchId(item.id); // redirect.dispatch(\n      //     Redirect.Action.ADMIN_PATH,\n      //     `/apps/3b01063bac3031d13101100ef3e44fd5/branch/${item.id}`\n      // )\n    }\n  }, __jsx(Icon, {\n    name: \"code branch\"\n  }), \" \", item.branchName)), __jsx(Table.Cell, {\n    textAlign: \"center\"\n  }, formatDate(item.createdAt)), __jsx(Table.Cell, {\n    textAlign: \"center\",\n    className: \"branch-actions\"\n  }, __jsx(Popup, {\n    content: \"Edit branch\",\n    trigger: __jsx(Icon, {\n      onClick: () => {\n        setProductBranchId(item.id);\n        setBranchName(item.branchName);\n        setBranchProducts(items.branchProducts.items);\n        handleChange();\n      },\n      className: \"edit-branch\",\n      name: \"edit outline\"\n    })\n  }), __jsx(Popup, {\n    content: \"Delete Branch\",\n    trigger: __jsx(Icon, {\n      className: \"remove-branch\",\n      name: \"trash alternate\",\n      onClick: () => {\n        deleteBranch(item.id);\n        deleteUserFromCognito(item.branchUsername);\n      }\n    })\n  })))))), __jsx(BranchProducts, {\n    branchProducts: branchProducts,\n    branchName: branchName,\n    branchId: productBranchId,\n    active: active,\n    handleChange: handleChange\n  }));\n};\n\nexport default BranchList;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/components/BranchList.js"],"names":["React","useState","useEffect","useCallback","AWS","Auth","API","graphqlOperation","createApp","Redirect","gql","v4","uuidv4","Page","Button","Modal","Form","FormLayout","TextField","Badge","Table","Popup","Header","Icon","ProductList","formatDate","config","BranchProducts","BranchContext","AdminBranchInfo","configure","update","accessKeyId","secretAccessKey","region","cognito","CognitoIdentityServiceProvider","listBranchs","onCreateBranchSubscription","onDeleteBranchSubscription","removeBranch","BranchList","setBranchId","branchId","active","setActive","branches","setBranches","branchName","setBranchName","productBranchId","setProductBranchId","newCreatedBranch","setNewCreatedBranch","branchProducts","setBranchProducts","app","apiKey","shopOrigin","redirect","create","handleChange","fetchBranches","getBranches","graphql","data","error","console","log","deleteBranch","id","deletedBranch","input","deleteUserFromCognito","username","adminDeleteUser","UserPoolId","Username","promise","subscribe","next","createdBranch","items","map","item","createdAt","branchUsername"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\r\nimport AWS from 'aws-sdk'\r\nimport { Auth, API, graphqlOperation } from 'aws-amplify'\r\nimport createApp from '@shopify/app-bridge'\r\nimport { Redirect } from '@shopify/app-bridge/actions'\r\nimport gql from 'graphql-tag'\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport { Page, Button, Modal, Form, FormLayout, TextField, Badge } from '@shopify/polaris'\r\nimport { Table, Popup, Header, Icon } from 'semantic-ui-react'\r\nimport ProductList from './ProductsList'\r\nimport { formatDate } from '../utils/helper'\r\nimport config from '../aws-exports'\r\nimport BranchProducts from './BranchProducts'\r\nimport BranchContext from '../context/branchContext'\r\nimport AdminBranchInfo from '../components/AdminBranchInfo'\r\n\r\nAPI.configure(config)\r\n\r\nAWS.config.update({\r\n    accessKeyId: 'AKIAI53OMMWOAP5X3K5Q',\r\n    secretAccessKey: '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',\r\n    region: 'us-east-1'\r\n})\r\n\r\nconst cognito = new AWS.CognitoIdentityServiceProvider()\r\n\r\nconst listBranchs = gql`\r\n    query listBranchs {\r\n        listBranchs {\r\n            items {\r\n                adminId\r\n                branchName\r\n                branchUsername\r\n                createdAt\r\n                id\r\n                branchProducts {\r\n                    items {\r\n                        branchId\r\n                        createdAt\r\n                        id\r\n                        productId\r\n                        tags\r\n                        updatedAt\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\nconst onCreateBranchSubscription = gql`\r\n    subscription onCreateBranch {\r\n        onCreateBranch {\r\n            adminId\r\n            branchName\r\n            id\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nconst onDeleteBranchSubscription = gql`\r\n    subscription onDeleteBranch {\r\n        onDeleteBranch {\r\n            id\r\n        }\r\n    }\r\n`\r\n\r\nconst removeBranch = gql`\r\n    mutation deleteBranch($input: DeleteBranchInput!) {\r\n        deleteBranch(input: $input) {\r\n            id\r\n        }\r\n    }\r\n`\r\n\r\nconst BranchList = ({ setBranchId, branchId }) => {\r\n    const [active, setActive] = useState(false)\r\n    const [branches, setBranches] = useState('')\r\n    const [branchName, setBranchName] = useState('')\r\n    const [productBranchId, setProductBranchId] = useState('')\r\n    const [newCreatedBranch, setNewCreatedBranch] = useState('')\r\n    const [branchProducts, setBranchProducts] = useState('')\r\n\r\n    const app = createApp({\r\n        apiKey: '3b01063bac3031d13101100ef3e44fd5',\r\n        shopOrigin: 'transactions-avanta.myshopify.com'\r\n    })\r\n\r\n    const redirect = Redirect.create(app)\r\n\r\n    const handleChange = () => {\r\n        setActive(!active)\r\n    }\r\n\r\n    const fetchBranches = async () => {\r\n        try {\r\n            const getBranches = await API.graphql(graphqlOperation(listBranchs))\r\n            setBranches(getBranches.data)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    const deleteBranch = async (id) => {\r\n        try {\r\n            const deletedBranch = await API.graphql(\r\n                graphqlOperation(removeBranch, { input: { id } })\r\n            )\r\n            console.log('Deleted branch', deletedBranch)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    const deleteUserFromCognito = async (username) => {\r\n        try {\r\n            await cognito\r\n                .adminDeleteUser({\r\n                    UserPoolId: 'us-east-1_IfrnnzGFR',\r\n                    Username: username\r\n                })\r\n                .promise()\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchBranches()\r\n        API.graphql(graphqlOperation(onCreateBranchSubscription)).subscribe({\r\n            next: (createdBranch) => {\r\n                setNewCreatedBranch(createdBranch)\r\n            }\r\n        })\r\n        API.graphql(graphqlOperation(onDeleteBranchSubscription)).subscribe({\r\n            next: (deletedBranch) => {\r\n                setNewCreatedBranch(deletedBranch)\r\n            }\r\n        })\r\n    }, [newCreatedBranch])\r\n\r\n    console.log('Branches from Branch list', branches)\r\n\r\n    return (\r\n        <>\r\n            <Table selectable celled>\r\n                <Table.Header>\r\n                    <Table.Row>\r\n                        <Table.HeaderCell>Branch Name</Table.HeaderCell>\r\n                        <Table.HeaderCell textAlign=\"center\">Created At</Table.HeaderCell>\r\n                        <Table.HeaderCell textAlign=\"center\">Actions</Table.HeaderCell>\r\n                    </Table.Row>\r\n                </Table.Header>\r\n                <Table.Body>\r\n                    {branches &&\r\n                        branches.listBranchs.items.map((item) => (\r\n                            <Table.Row key={item.id}>\r\n                                <Table.Cell>\r\n                                    {/* <Badge size=\"medium\" status=\"info\">\r\n                                        {item.branchName}\r\n                                    </Badge> */}\r\n                                    <Button\r\n                                        primary\r\n                                        onClick={() => {\r\n                                            setBranchId(item.id)\r\n                                            // redirect.dispatch(\r\n                                            //     Redirect.Action.ADMIN_PATH,\r\n                                            //     `/apps/3b01063bac3031d13101100ef3e44fd5/branch/${item.id}`\r\n                                            // )\r\n                                        }}>\r\n                                        <Icon name=\"code branch\" /> {item.branchName}\r\n                                    </Button>\r\n                                </Table.Cell>\r\n                                <Table.Cell textAlign=\"center\">\r\n                                    {formatDate(item.createdAt)}\r\n                                </Table.Cell>\r\n                                <Table.Cell textAlign=\"center\" className=\"branch-actions\">\r\n                                    <Popup\r\n                                        content=\"Edit branch\"\r\n                                        trigger={\r\n                                            <Icon\r\n                                                onClick={() => {\r\n                                                    setProductBranchId(item.id)\r\n                                                    setBranchName(item.branchName)\r\n                                                    setBranchProducts(items.branchProducts.items)\r\n                                                    handleChange()\r\n                                                }}\r\n                                                className=\"edit-branch\"\r\n                                                name=\"edit outline\"\r\n                                            />\r\n                                        }\r\n                                    />\r\n                                    <Popup\r\n                                        content=\"Delete Branch\"\r\n                                        trigger={\r\n                                            <Icon\r\n                                                className=\"remove-branch\"\r\n                                                name=\"trash alternate\"\r\n                                                onClick={() => {\r\n                                                    deleteBranch(item.id)\r\n                                                    deleteUserFromCognito(item.branchUsername)\r\n                                                }}\r\n                                            />\r\n                                        }\r\n                                    />\r\n                                </Table.Cell>\r\n                            </Table.Row>\r\n                        ))}\r\n                </Table.Body>\r\n            </Table>\r\n            <BranchProducts\r\n                branchProducts={branchProducts}\r\n                branchName={branchName}\r\n                branchId={productBranchId}\r\n                active={active}\r\n                handleChange={handleChange}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BranchList\r\n"]},"metadata":{},"sourceType":"module"}