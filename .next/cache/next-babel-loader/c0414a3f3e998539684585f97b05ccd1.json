{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { Modal, Thumbnail, Checkbox, TextStyle } from '@shopify/polaris';\nimport { Table, Header } from 'semantic-ui-react';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nimport BranchRow from './BranchRow';\nimport { subscribe } from 'graphql';\nAPI.configure(config);\nconst listProducts = gql`\n    query Products {\n        products(first: 100) {\n            edges {\n                node {\n                    id\n                    title\n                    tags\n                    description(truncateAt: 100)\n                    variants(first: 1) {\n                        edges {\n                            node {\n                                id\n                                price\n                            }\n                        }\n                    }\n                    images(first: 1) {\n                        edges {\n                            node {\n                                originalSrc\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n`;\nconst createBranchProduct = gql`\n    mutation createBranchProduct($input: CreateBranchProductInput!) {\n        createBranchProduct(input: $input) {\n            id\n            branchId\n            productId\n            tags\n        }\n    }\n`;\nconst productUpdate = gql`\n    mutation productUpdate($input: ProductInput!) {\n        productUpdate(input: $input) {\n            product {\n                id\n                metafields(first: 100) {\n                    edges {\n                        node {\n                            namespace\n                            key\n                            value\n                        }\n                    }\n                }\n            }\n        }\n    }\n`;\nconst getBranchById = gql`\n    query getBranch($id: ID!) {\n        getBranch(id: $id) {\n            transactions(sortDirection: DESC) {\n                items {\n                    branchId\n                    createdAt\n                    currency\n                    note\n                    customer {\n                        email\n                        id\n                        firstName\n                        lastName\n                        phone\n                    }\n                    totalBonusAmount\n                    totalPrice\n                    updatedAt\n                    sortDate\n                }\n            }\n            branchName\n            adminId\n            id\n            branchProducts {\n                items {\n                    branchId\n                    createdAt\n                    id\n                    productId\n                    tags\n                    updatedAt\n                }\n            }\n        }\n    }\n`;\nconst updateBranchProduct = gql`\n    mutation updateBranchProduct($input: UpdateBranchProductInput!) {\n        updateBranchProduct(input: $input) {\n            id\n            tags\n            branchId\n            productId\n        }\n    }\n`;\nconst deleteBranchProduct = gql`\n    mutation deleteBranchProduct($input: DeleteBranchProductInput!) {\n        deleteBranchProduct(input: $input) {\n            id\n        }\n    }\n`;\nconst onCreateBranchProduct = gql`\n    subscription onCreateBranchProduct {\n        onCreateBranchProduct {\n            id\n        }\n    }\n`;\nconst onUpdateBranchProduct = gql`\n    subscription onUpdateBranchProduct {\n        onUpdateBranchProduct {\n            id\n        }\n    }\n`;\nconst onDeleteBranchProduct = gql`\n    subscription onDeleteBranchProduct {\n        onDeleteBranchProduct {\n            id\n        }\n    }\n`;\n\nconst ProductsList = ({\n  active,\n  handleChange,\n  branchId,\n  branchName\n}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(listProducts);\n  const {\n    0: branchProductSubscription,\n    1: setBranchProductSubscription\n  } = useState('');\n  const {\n    0: rowId,\n    1: setRowId\n  } = useState([]);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    products: []\n  });\n  const {\n    0: searchValue,\n    1: setSearchValue\n  } = useState(null);\n  const {\n    0: branchInfo,\n    1: setBranchInfo\n  } = useState('');\n  const handleSearchInput = useCallback(newValue => setSearchValue(newValue), []);\n\n  const getBranch = async () => {\n    try {\n      const branch = await API.graphql(graphqlOperation(getBranchById, {\n        id: branchId\n      }));\n      setBranchInfo(branch.data.getBranch);\n      setRowId([...rowId, ...branch.data.getBranch.branchProducts.items.map(item => item.productId)]);\n      setState({\n        products: [...state.products, ...branch.data.getBranch.branchProducts.items.map(product => ({\n          id: product.productId\n        }))]\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getBranch();\n    const createListener = API.graphql(graphqlOperation(onCreateBranchProduct)).subscribe({\n      next: createdBranchProduct => setBranchProductSubscription(createdBranchProduct)\n    });\n    const updateListener = API.graphql(graphqlOperation(onUpdateBranchProduct)).subscribe({\n      next: updatedBranchProduct => setBranchProductSubscription(updatedBranchProduct)\n    });\n    const deleteListener = API.graphql(graphqlOperation(onDeleteBranchProduct)).subscribe({\n      next: deletedBranchProduct => setBranchProductSubscription(deletedBranchProduct)\n    });\n    return () => {\n      createListener.unsubscribe();\n      updateListener.unsubscribe();\n      deleteListener.unsubscribe();\n    };\n  }, [branchId, branchProductSubscription]);\n\n  if (loading) {\n    return __jsx(\"div\", null, \"Loading products...\");\n  }\n\n  if (error) {\n    return __jsx(\"div\", null, \"Some error occured\");\n  }\n\n  console.log('Branch info from BranchProducts', branchInfo);\n  console.log('Products from state in BranchProducts', state.products);\n\n  const deleteProductsFromBranch = () => {\n    const productsToDeleteFromBranch = branchInfo.branchProducts.items.filter(branchProduct => !state.products.map(product => product.id).includes(branchProduct.productId));\n    console.log('Products that are not included in products array', productsToDeleteFromBranch);\n    Promise.all(productsToDeleteFromBranch.map(deleteProduct => {\n      API.graphql(graphqlOperation(deleteBranchProduct, {\n        input: {\n          id: deleteProduct.id\n        }\n      }));\n    })).catch(err => console.log(err));\n    return;\n  };\n\n  const addProductsToBranch = () => {\n    Promise.all(state.products.map(product => {\n      const updatedProduct = branchInfo.branchProducts.items.filter(branchProduct => branchProduct.productId === product.id)[0];\n\n      if (updatedProduct) {\n        console.log('Yes it containes products that should be updated', updatedProduct);\n        API.graphql(graphqlOperation(updateBranchProduct, {\n          input: {\n            id: updatedProduct.id,\n            tags: product.tags\n          }\n        }));\n      } else {\n        console.log(\"No it doesn't contain the product that should be updated\");\n        API.graphql(graphqlOperation(createBranchProduct, {\n          input: {\n            id: uuidv4(),\n            branchId: branchId,\n            productId: product.id,\n            tags: product.tags\n          }\n        }));\n      }\n    })).catch(err => console.log(err));\n    return;\n  }; // const updateProducts = async () => {\n  //     try {\n  //         await axios({\n  //             url: 'http://localhost:3000/updateProduct',\n  //             method: 'POST',\n  //             data: {\n  //                 products: state.products\n  //             }\n  //         })\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // }\n\n\n  console.log('State data from product list', state);\n  console.log('BranchInfo from modalZaven jan', branchInfo);\n  return __jsx(Modal, {\n    open: active,\n    onClose: () => handleChange(),\n    title: \"Choose products\",\n    primaryAction: {\n      content: 'Save changes',\n      onAction: () => {\n        addProductsToBranch();\n        deleteProductsFromBranch(); // updateProducts()\n\n        handleChange();\n      }\n    }\n  }, __jsx(Modal.Section, null, __jsx(Table, {\n    celled: true,\n    striped: true,\n    selectable: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Products\"), __jsx(Table.HeaderCell, {\n    textAlign: \"center\"\n  }, \"Price\"), __jsx(Table.HeaderCell, null, \"Bonus Percentage\"))), __jsx(Table.Body, null, data && branchInfo && data.products.edges // .filter((product) => {\n  //     if (searchValue == null) {\n  //         return product\n  //     } else if (\n  //         product.node.title\n  //             .toLowerCase()\n  //             .includes(searchValue.toLowerCase())\n  //     ) {\n  //         return product\n  //     }\n  // })\n  .map(product => __jsx(BranchRow, {\n    rowId: rowId,\n    setRowId: setRowId,\n    branchInfo: branchInfo,\n    branchId: branchId,\n    product: product,\n    state: state,\n    setState: setState\n  }) // <Table.Row\n  //     key={product.node.id}\n  //     >\n  //     <Table.Cell>\n  //         <Header as=\"h4\" image className=\"product-header\">\n  //             <Checkbox\n  //                 checked={\n  //                     rowId.includes(product.node.id) && true\n  //                 }\n  //                 onClick={() => {\n  //                     if (rowId.includes(product.node.id)) {\n  //                         setRowId(\n  //                             rowId.filter((id) => id !== product.node.id)\n  //                         )\n  //                         setState({\n  //                             products: state.products.filter(\n  //                                 (filteredProduct) =>\n  //                                     filteredProduct.node.id !==\n  //                                     product.node.id\n  //                             )\n  //                         })\n  //                     } else {\n  //                         setRowId([...rowId, product.node.id])\n  //                         setState({\n  //                             ...state,\n  //                             products: [...state.products, product]\n  //                         })\n  //                     }\n  //                 }}\n  //             />\n  //             <Thumbnail\n  //                 source={\n  //                     product.node.images.edges[0] &&\n  //                     product.node.images.edges[0].node\n  //                         .originalSrc\n  //                 }\n  //                 size=\"small\"\n  //                 alt=\"\"\n  //             />\n  //             <Header.Content>\n  //                 {product.node.title}\n  //             </Header.Content>\n  //         </Header>\n  //     </Table.Cell>\n  //     <Table.Cell>\n  //         <TextStyle variation=\"subdued\">\n  //             {product.node.description}\n  //         </TextStyle>\n  //     </Table.Cell>\n  //     <Table.Cell textAlign=\"center\">\n  //         <TextStyle variation=\"subdued\">\n  //             {product.node.variants.edges[0] &&\n  //                 toCurrency(\n  //                     product.node.variants.edges[0].node.price\n  //                 )}\n  //         </TextStyle>\n  //     </Table.Cell>\n  // </Table.Row>\n  )), __jsx(Table.Footer, {\n    fullWidth: true\n  }, __jsx(Table.Row, null)))));\n};\n\nexport default ProductsList;","map":{"version":3,"sources":["/var/www/transactions-avanta/components/BranchProducts.js"],"names":["React","useState","useCallback","useEffect","axios","v4","uuidv4","API","graphqlOperation","gql","useQuery","Modal","Thumbnail","Checkbox","TextStyle","Table","Header","toCurrency","formatDate","config","BranchRow","subscribe","configure","listProducts","createBranchProduct","productUpdate","getBranchById","updateBranchProduct","deleteBranchProduct","onCreateBranchProduct","onUpdateBranchProduct","onDeleteBranchProduct","ProductsList","active","handleChange","branchId","branchName","loading","error","data","branchProductSubscription","setBranchProductSubscription","rowId","setRowId","state","setState","products","searchValue","setSearchValue","branchInfo","setBranchInfo","handleSearchInput","newValue","getBranch","branch","graphql","id","branchProducts","items","map","item","productId","product","console","log","createListener","next","createdBranchProduct","updateListener","updatedBranchProduct","deleteListener","deletedBranchProduct","unsubscribe","deleteProductsFromBranch","productsToDeleteFromBranch","filter","branchProduct","includes","Promise","all","deleteProduct","input","catch","err","addProductsToBranch","updatedProduct","tags","content","onAction","edges"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\nimport axios from 'axios'\nimport { v4 as uuidv4 } from 'uuid'\nimport { API, graphqlOperation } from 'aws-amplify'\nimport gql from 'graphql-tag'\nimport { useQuery } from '@apollo/client'\nimport { Modal, Thumbnail, Checkbox, TextStyle } from '@shopify/polaris'\nimport { Table, Header } from 'semantic-ui-react'\nimport { toCurrency, formatDate } from '../utils/helper'\nimport config from '../aws-exports'\nimport BranchRow from './BranchRow'\nimport { subscribe } from 'graphql'\n\nAPI.configure(config)\n\nconst listProducts = gql`\n    query Products {\n        products(first: 100) {\n            edges {\n                node {\n                    id\n                    title\n                    tags\n                    description(truncateAt: 100)\n                    variants(first: 1) {\n                        edges {\n                            node {\n                                id\n                                price\n                            }\n                        }\n                    }\n                    images(first: 1) {\n                        edges {\n                            node {\n                                originalSrc\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n`\n\nconst createBranchProduct = gql`\n    mutation createBranchProduct($input: CreateBranchProductInput!) {\n        createBranchProduct(input: $input) {\n            id\n            branchId\n            productId\n            tags\n        }\n    }\n`\nconst productUpdate = gql`\n    mutation productUpdate($input: ProductInput!) {\n        productUpdate(input: $input) {\n            product {\n                id\n                metafields(first: 100) {\n                    edges {\n                        node {\n                            namespace\n                            key\n                            value\n                        }\n                    }\n                }\n            }\n        }\n    }\n`\nconst getBranchById = gql`\n    query getBranch($id: ID!) {\n        getBranch(id: $id) {\n            transactions(sortDirection: DESC) {\n                items {\n                    branchId\n                    createdAt\n                    currency\n                    note\n                    customer {\n                        email\n                        id\n                        firstName\n                        lastName\n                        phone\n                    }\n                    totalBonusAmount\n                    totalPrice\n                    updatedAt\n                    sortDate\n                }\n            }\n            branchName\n            adminId\n            id\n            branchProducts {\n                items {\n                    branchId\n                    createdAt\n                    id\n                    productId\n                    tags\n                    updatedAt\n                }\n            }\n        }\n    }\n`\n\nconst updateBranchProduct = gql`\n    mutation updateBranchProduct($input: UpdateBranchProductInput!) {\n        updateBranchProduct(input: $input) {\n            id\n            tags\n            branchId\n            productId\n        }\n    }\n`\n\nconst deleteBranchProduct = gql`\n    mutation deleteBranchProduct($input: DeleteBranchProductInput!) {\n        deleteBranchProduct(input: $input) {\n            id\n        }\n    }\n`\n\nconst onCreateBranchProduct = gql`\n    subscription onCreateBranchProduct {\n        onCreateBranchProduct {\n            id\n        }\n    }\n`\nconst onUpdateBranchProduct = gql`\n    subscription onUpdateBranchProduct {\n        onUpdateBranchProduct {\n            id\n        }\n    }\n`\n\nconst onDeleteBranchProduct = gql`\n    subscription onDeleteBranchProduct {\n        onDeleteBranchProduct {\n            id\n        }\n    }\n`\n\nconst ProductsList = ({ active, handleChange, branchId, branchName }) => {\n    const { loading, error, data } = useQuery(listProducts)\n    const [branchProductSubscription, setBranchProductSubscription] = useState('')\n    const [rowId, setRowId] = useState([])\n    const [state, setState] = useState({\n        products: []\n    })\n    const [searchValue, setSearchValue] = useState(null)\n    const [branchInfo, setBranchInfo] = useState('')\n    const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\n\n    const getBranch = async () => {\n        try {\n            const branch = await API.graphql(graphqlOperation(getBranchById, { id: branchId }))\n            setBranchInfo(branch.data.getBranch)\n            setRowId([\n                ...rowId,\n                ...branch.data.getBranch.branchProducts.items.map((item) => item.productId)\n            ])\n            setState({\n                products: [\n                    ...state.products,\n                    ...branch.data.getBranch.branchProducts.items.map((product) => ({\n                        id: product.productId\n                    }))\n                ]\n            })\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    useEffect(() => {\n        getBranch()\n\n        const createListener = API.graphql(graphqlOperation(onCreateBranchProduct)).subscribe({\n            next: (createdBranchProduct) => setBranchProductSubscription(createdBranchProduct)\n        })\n        const updateListener = API.graphql(graphqlOperation(onUpdateBranchProduct)).subscribe({\n            next: (updatedBranchProduct) => setBranchProductSubscription(updatedBranchProduct)\n        })\n        const deleteListener = API.graphql(graphqlOperation(onDeleteBranchProduct)).subscribe({\n            next: (deletedBranchProduct) => setBranchProductSubscription(deletedBranchProduct)\n        })\n\n        return () => {\n            createListener.unsubscribe()\n            updateListener.unsubscribe()\n            deleteListener.unsubscribe()\n        }\n    }, [branchId, branchProductSubscription])\n\n    if (loading) {\n        return <div>Loading products...</div>\n    }\n\n    if (error) {\n        return <div>Some error occured</div>\n    }\n\n    console.log('Branch info from BranchProducts', branchInfo)\n    console.log('Products from state in BranchProducts', state.products)\n\n    const deleteProductsFromBranch = () => {\n        const productsToDeleteFromBranch = branchInfo.branchProducts.items.filter(\n            (branchProduct) =>\n                !state.products.map((product) => product.id).includes(branchProduct.productId)\n        )\n        console.log('Products that are not included in products array', productsToDeleteFromBranch)\n        Promise.all(\n            productsToDeleteFromBranch.map((deleteProduct) => {\n                API.graphql(\n                    graphqlOperation(deleteBranchProduct, { input: { id: deleteProduct.id } })\n                )\n            })\n        ).catch((err) => console.log(err))\n        return\n    }\n\n    const addProductsToBranch = () => {\n        Promise.all(\n            state.products.map((product) => {\n                const updatedProduct = branchInfo.branchProducts.items.filter(\n                    (branchProduct) => branchProduct.productId === product.id\n                )[0]\n                if (updatedProduct) {\n                    console.log('Yes it containes products that should be updated', updatedProduct)\n                    API.graphql(\n                        graphqlOperation(updateBranchProduct, {\n                            input: {\n                                id: updatedProduct.id,\n                                tags: product.tags\n                            }\n                        })\n                    )\n                } else {\n                    console.log(\"No it doesn't contain the product that should be updated\")\n                    API.graphql(\n                        graphqlOperation(createBranchProduct, {\n                            input: {\n                                id: uuidv4(),\n                                branchId: branchId,\n                                productId: product.id,\n                                tags: product.tags\n                            }\n                        })\n                    )\n                }\n            })\n        ).catch((err) => console.log(err))\n        return\n    }\n\n    // const updateProducts = async () => {\n    //     try {\n    //         await axios({\n    //             url: 'http://localhost:3000/updateProduct',\n    //             method: 'POST',\n    //             data: {\n    //                 products: state.products\n    //             }\n    //         })\n    //     } catch (error) {\n    //         console.log(error)\n    //     }\n    // }\n\n    console.log('State data from product list', state)\n    console.log('BranchInfo from modalZaven jan', branchInfo)\n\n    return (\n        <Modal\n            open={active}\n            onClose={() => handleChange()}\n            title=\"Choose products\"\n            primaryAction={{\n                content: 'Save changes',\n                onAction: () => {\n                    addProductsToBranch()\n                    deleteProductsFromBranch()\n                    // updateProducts()\n                    handleChange()\n                }\n            }}>\n            <Modal.Section>\n                <Table celled striped selectable>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>Products</Table.HeaderCell>\n                            <Table.HeaderCell textAlign=\"center\">Price</Table.HeaderCell>\n                            <Table.HeaderCell>Bonus Percentage</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {data &&\n                            branchInfo &&\n                            data.products.edges\n                                // .filter((product) => {\n                                //     if (searchValue == null) {\n                                //         return product\n                                //     } else if (\n                                //         product.node.title\n                                //             .toLowerCase()\n                                //             .includes(searchValue.toLowerCase())\n                                //     ) {\n                                //         return product\n                                //     }\n                                // })\n                                .map((product) => (\n                                    <BranchRow\n                                        rowId={rowId}\n                                        setRowId={setRowId}\n                                        branchInfo={branchInfo}\n                                        branchId={branchId}\n                                        product={product}\n                                        state={state}\n                                        setState={setState}\n                                    />\n                                    // <Table.Row\n                                    //     key={product.node.id}\n                                    //     >\n                                    //     <Table.Cell>\n                                    //         <Header as=\"h4\" image className=\"product-header\">\n                                    //             <Checkbox\n                                    //                 checked={\n                                    //                     rowId.includes(product.node.id) && true\n                                    //                 }\n                                    //                 onClick={() => {\n                                    //                     if (rowId.includes(product.node.id)) {\n                                    //                         setRowId(\n                                    //                             rowId.filter((id) => id !== product.node.id)\n                                    //                         )\n                                    //                         setState({\n                                    //                             products: state.products.filter(\n                                    //                                 (filteredProduct) =>\n                                    //                                     filteredProduct.node.id !==\n                                    //                                     product.node.id\n                                    //                             )\n                                    //                         })\n                                    //                     } else {\n                                    //                         setRowId([...rowId, product.node.id])\n                                    //                         setState({\n                                    //                             ...state,\n                                    //                             products: [...state.products, product]\n                                    //                         })\n                                    //                     }\n                                    //                 }}\n                                    //             />\n                                    //             <Thumbnail\n                                    //                 source={\n                                    //                     product.node.images.edges[0] &&\n                                    //                     product.node.images.edges[0].node\n                                    //                         .originalSrc\n                                    //                 }\n                                    //                 size=\"small\"\n                                    //                 alt=\"\"\n                                    //             />\n                                    //             <Header.Content>\n                                    //                 {product.node.title}\n                                    //             </Header.Content>\n                                    //         </Header>\n                                    //     </Table.Cell>\n                                    //     <Table.Cell>\n                                    //         <TextStyle variation=\"subdued\">\n                                    //             {product.node.description}\n                                    //         </TextStyle>\n                                    //     </Table.Cell>\n                                    //     <Table.Cell textAlign=\"center\">\n                                    //         <TextStyle variation=\"subdued\">\n                                    //             {product.node.variants.edges[0] &&\n                                    //                 toCurrency(\n                                    //                     product.node.variants.edges[0].node.price\n                                    //                 )}\n                                    //         </TextStyle>\n                                    //     </Table.Cell>\n                                    // </Table.Row>\n                                ))}\n                    </Table.Body>\n                    <Table.Footer fullWidth>\n                        <Table.Row></Table.Row>\n                    </Table.Footer>\n                </Table>\n            </Modal.Section>\n        </Modal>\n    )\n}\n\nexport default ProductsList\n"]},"metadata":{},"sourceType":"module"}