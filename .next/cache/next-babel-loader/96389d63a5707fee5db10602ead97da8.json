{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    subscription paymentRequest {\\n        onCreatePaymentRequest {\\n            bonusAmount\\n            createdAt\\n            customerId\\n            id\\n            orderId\\n            status\\n            updatedAt\\n        }\\n    }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    query listPaymentRequest($branchId: ID) {\\n        listPaymentRequests(filter: { status: { eq: PENDING }, branchId: { eq: $branchId } }) {\\n            items {\\n                bonusAmount\\n                createdAt\\n                customerId\\n                id\\n                orderId\\n                status\\n                updatedAt\\n            }\\n            nextToken\\n        }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation updatePaymentRequest($input: UpdatePaymentRequestInput!) {\\n        updatePaymentRequest(input: $input) {\\n            bonusAmount\\n            customerId\\n            id\\n            orderId\\n            status\\n            products {\\n                originalUnitPrice\\n                quantity\\n                variantId\\n            }\\n            createdAt\\n            updatedAt\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport gql from 'graphql-tag';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { Table, Icon, Popup, Header } from 'semantic-ui-react';\nimport { Badge } from '@shopify/polaris';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport ProductList from './ProductsList';\nimport config from '../aws-exports';\nAPI.configure(config);\nvar updatePaymentRequest = gql(_templateObject());\nvar listPaymentRequest = gql(_templateObject2());\nvar paymentSubscription = gql(_templateObject3());\n\nvar PendingPaymentRequest = function PendingPaymentRequest(_ref) {\n  _s();\n\n  var createUpdatePaymentSubscription = _ref.createUpdatePaymentSubscription,\n      branchId = _ref.branchId;\n\n  var _useState = useState(''),\n      paymentRequestId = _useState[0],\n      setPaymentRequestId = _useState[1];\n\n  var _useState2 = useState(false),\n      active = _useState2[0],\n      setActive = _useState2[1];\n\n  var _useState3 = useState([]),\n      paymentRequestItems = _useState3[0],\n      setPaymentRequestItems = _useState3[1];\n\n  var handleChange = useCallback(function () {\n    return setActive(!active);\n  }, [active]);\n  console.log('Payment request id for decline', paymentRequestId);\n  var fetchAcceptedPayments = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return API.graphql(graphqlOperation(listPaymentRequest, {\n              branchId: branchId\n            }));\n\n          case 3:\n            res = _context.sent;\n            setPaymentRequestItems(res.data.listPaymentRequests.items);\n            console.log('Accepted payments', res.data);\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 8]]);\n  })), [createUpdatePaymentSubscription]);\n  useEffect(function () {\n    fetchAcceptedPayments();\n  }, [fetchAcceptedPayments]);\n\n  var declinePayment = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(paymentId) {\n      var paymentResponse;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return API.graphql(graphqlOperation(updatePaymentRequest, {\n                input: {\n                  id: paymentId,\n                  status: 'DECLINED'\n                }\n              }));\n\n            case 3:\n              paymentResponse = _context2.sent;\n              console.log('Declined Payment data from lambda', paymentResponse.data);\n              _context2.next = 10;\n              break;\n\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(_context2.t0);\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 7]]);\n    }));\n\n    return function declinePayment(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(React.Fragment, null, __jsx(Table, {\n    selectable: true,\n    celled: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Customer Id\"), __jsx(Table.HeaderCell, null, \"Bonus Amount\"), __jsx(Table.HeaderCell, null, \"Created At\"), __jsx(Table.HeaderCell, null, \"Updated At\"), __jsx(Table.HeaderCell, null, \"Status\"), __jsx(Table.HeaderCell, null, \"Action\"))), __jsx(Table.Body, null, paymentRequestItems && paymentRequestItems.sort(function (a, b) {\n    return new Date(b.updatedAt) - new Date(a.updatedAt);\n  }).map(function (item) {\n    return __jsx(Table.Row, {\n      key: item.id\n    }, __jsx(Table.Cell, null, __jsx(Badge, {\n      size: \"small\"\n    }, item.customerId)), __jsx(Table.Cell, null, toCurrency(item.bonusAmount)), __jsx(Table.Cell, null, formatDate(item.createdAt)), __jsx(Table.Cell, null, formatDate(item.updatedAt)), __jsx(Table.Cell, null, __jsx(Badge, {\n      size: \"small\",\n      progress: \"partiallyComplete\",\n      status: \"attention\"\n    }, item.status)), __jsx(Table.Cell, {\n      className: \"actions-cell\"\n    }, __jsx(Popup, {\n      content: \"Approve payment\",\n      trigger: __jsx(Icon, {\n        className: \"accept\",\n        name: \"check\",\n        onClick: function onClick() {\n          setPaymentRequestId(item.id);\n          handleChange();\n        }\n      })\n    }), __jsx(Popup, {\n      content: \"Decline payment\",\n      trigger: __jsx(Icon, {\n        className: \"decline\",\n        name: \"remove\",\n        onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  declinePayment(item.id);\n\n                case 1:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }))\n      })\n    })));\n  }))), __jsx(ProductList, {\n    paymentRequestId: paymentRequestId,\n    active: active,\n    handleChange: handleChange\n  }));\n};\n\n_s(PendingPaymentRequest, \"WWtLohHfmtlYoydB9uj8MxzdlWE=\");\n\n_c = PendingPaymentRequest;\nexport default PendingPaymentRequest;\n\nvar _c;\n\n$RefreshReg$(_c, \"PendingPaymentRequest\");","map":{"version":3,"sources":["/var/www/transactions-avanta/components/PendingPaymentRequest.js"],"names":["React","useState","useCallback","useEffect","gql","API","graphqlOperation","Table","Icon","Popup","Header","Badge","toCurrency","formatDate","ProductList","config","configure","updatePaymentRequest","listPaymentRequest","paymentSubscription","PendingPaymentRequest","createUpdatePaymentSubscription","branchId","paymentRequestId","setPaymentRequestId","active","setActive","paymentRequestItems","setPaymentRequestItems","handleChange","console","log","fetchAcceptedPayments","graphql","res","data","listPaymentRequests","items","declinePayment","paymentId","input","id","status","paymentResponse","sort","a","b","Date","updatedAt","map","item","customerId","bonusAmount","createdAt"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\nimport gql from 'graphql-tag'\nimport { API, graphqlOperation } from 'aws-amplify'\nimport { Table, Icon, Popup, Header } from 'semantic-ui-react'\nimport { Badge } from '@shopify/polaris'\nimport { toCurrency, formatDate } from '../utils/helper'\nimport ProductList from './ProductsList'\nimport config from '../aws-exports'\n\nAPI.configure(config)\n\nconst updatePaymentRequest = gql`\n    mutation updatePaymentRequest($input: UpdatePaymentRequestInput!) {\n        updatePaymentRequest(input: $input) {\n            bonusAmount\n            customerId\n            id\n            orderId\n            status\n            products {\n                originalUnitPrice\n                quantity\n                variantId\n            }\n            createdAt\n            updatedAt\n        }\n    }\n`\n\nconst listPaymentRequest = gql`\n    query listPaymentRequest($branchId: ID) {\n        listPaymentRequests(filter: { status: { eq: PENDING }, branchId: { eq: $branchId } }) {\n            items {\n                bonusAmount\n                createdAt\n                customerId\n                id\n                orderId\n                status\n                updatedAt\n            }\n            nextToken\n        }\n    }\n`\n\nconst paymentSubscription = gql`\n    subscription paymentRequest {\n        onCreatePaymentRequest {\n            bonusAmount\n            createdAt\n            customerId\n            id\n            orderId\n            status\n            updatedAt\n        }\n    }\n`\n\nconst PendingPaymentRequest = ({ createUpdatePaymentSubscription, branchId }) => {\n    const [paymentRequestId, setPaymentRequestId] = useState('')\n    const [active, setActive] = useState(false)\n    const [paymentRequestItems, setPaymentRequestItems] = useState([])\n\n    const handleChange = useCallback(() => setActive(!active), [active])\n\n    console.log('Payment request id for decline', paymentRequestId)\n\n    const fetchAcceptedPayments = useCallback(async () => {\n        try {\n            const res = await API.graphql(graphqlOperation(listPaymentRequest, { branchId }))\n            setPaymentRequestItems(res.data.listPaymentRequests.items)\n            console.log('Accepted payments', res.data)\n        } catch (error) {\n            console.log(error)\n        }\n    }, [createUpdatePaymentSubscription])\n\n    useEffect(() => {\n        fetchAcceptedPayments()\n    }, [fetchAcceptedPayments])\n\n    const declinePayment = async (paymentId) => {\n        try {\n            const paymentResponse = await API.graphql(\n                graphqlOperation(updatePaymentRequest, {\n                    input: {\n                        id: paymentId,\n                        status: 'DECLINED'\n                    }\n                })\n            )\n\n            console.log('Declined Payment data from lambda', paymentResponse.data)\n        } catch (error) {\n            console.log(error)\n        }\n    }\n    return (\n        <>\n            <Table selectable celled>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Customer Id</Table.HeaderCell>\n                        <Table.HeaderCell>Bonus Amount</Table.HeaderCell>\n                        <Table.HeaderCell>Created At</Table.HeaderCell>\n                        <Table.HeaderCell>Updated At</Table.HeaderCell>\n                        <Table.HeaderCell>Status</Table.HeaderCell>\n                        <Table.HeaderCell>Action</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {paymentRequestItems &&\n                        paymentRequestItems\n                            .sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt))\n                            .map((item) => (\n                                <Table.Row key={item.id}>\n                                    <Table.Cell>\n                                        <Badge size=\"small\">{item.customerId}</Badge>\n                                    </Table.Cell>\n                                    <Table.Cell>{toCurrency(item.bonusAmount)}</Table.Cell>\n                                    <Table.Cell>{formatDate(item.createdAt)}</Table.Cell>\n                                    <Table.Cell>{formatDate(item.updatedAt)}</Table.Cell>\n                                    <Table.Cell>\n                                        <Badge\n                                            size=\"small\"\n                                            progress=\"partiallyComplete\"\n                                            status=\"attention\">\n                                            {item.status}\n                                        </Badge>\n                                    </Table.Cell>\n                                    <Table.Cell className=\"actions-cell\">\n                                        <Popup\n                                            content=\"Approve payment\"\n                                            trigger={\n                                                <Icon\n                                                    className=\"accept\"\n                                                    name=\"check\"\n                                                    onClick={() => {\n                                                        setPaymentRequestId(item.id)\n                                                        handleChange()\n                                                    }}\n                                                />\n                                            }\n                                        />\n                                        <Popup\n                                            content=\"Decline payment\"\n                                            trigger={\n                                                <Icon\n                                                    className=\"decline\"\n                                                    name=\"remove\"\n                                                    onClick={async () => {\n                                                        declinePayment(item.id)\n                                                    }}\n                                                />\n                                            }\n                                        />\n                                    </Table.Cell>\n                                </Table.Row>\n                            ))}\n                </Table.Body>\n            </Table>\n            <ProductList\n                paymentRequestId={paymentRequestId}\n                active={active}\n                handleChange={handleChange}\n            />\n        </>\n    )\n}\n\nexport default PendingPaymentRequest\n"]},"metadata":{},"sourceType":"module"}