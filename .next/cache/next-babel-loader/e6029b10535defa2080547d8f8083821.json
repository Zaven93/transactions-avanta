{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback } from 'react';\nimport createApp from '@shopify/app-bridge';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport withApollo from '../lib/withApollo';\nimport { Card, DataTable, Button, Page, TextField, ChoiceList, Filters, Icon } from '@shopify/polaris';\nimport { SearchMajorMonotone } from '@shopify/polaris-icons';\nimport { toCurrency } from '../utils/helper';\nconst listTransactions = gql`\n    query listTransactions {\n        listTransactions {\n            items {\n                id\n                totalPrice\n                totalBonusAmount\n                currency\n                products {\n                    id\n                    title\n                    bonusPercentage\n                    priceAmount\n                    priceCurrency\n                    image\n                }\n                customer {\n                    id\n                    firstName\n                    lastName\n                    phone\n                    email\n                }\n                createdAt\n            }\n        }\n    }\n`;\n\nconst Index = () => {\n  const {\n    loading,\n    data,\n    error\n  } = useQuery(listTransactions);\n  const {\n    0: searchValue,\n    1: setSearchValue\n  } = useState(null);\n  const handleSearchInput = useCallback(newValue => setSearchValue(newValue), []);\n  console.log('Searching value', searchValue);\n  const app = createApp({\n    apiKey: '3b01063bac3031d13101100ef3e44fd5',\n    shopOrigin: 'transactions-avanta.myshopify.com'\n  });\n  const redirect = Redirect.create(app);\n\n  if (loading) {\n    return __jsx(\"div\", null, \"Loading...\");\n  }\n\n  if (error) {\n    console.log('Some error occured Zaven', error);\n  }\n\n  const formatDate = rowDate => {\n    const date = new Date(rowDate);\n    const year = new Intl.DateTimeFormat('en', {\n      year: 'numeric'\n    }).format(date);\n    const month = new Intl.DateTimeFormat('en', {\n      month: 'short'\n    }).format(date);\n    const day = new Intl.DateTimeFormat('en', {\n      day: '2-digit'\n    }).format(date);\n    return `${day}-${month}-${year}`;\n  };\n\n  const rows = data.listTransactions.items.map(transaction => [__jsx(Button, {\n    onClick: () => redirect.dispatch(Redirect.Action.ADMIN_PATH, {\n      path: `/orders/${transaction.id}?orderListBeta=true`,\n      newContext: true\n    })\n  }, transaction.id), toCurrency(Number(transaction.totalPrice)), toCurrency(Number(transaction.totalBonusAmount)), formatDate(transaction.createdAt), __jsx(Button, {\n    primary: true,\n    onClick: () => redirect.dispatch(Redirect.Action.ADMIN_PATH, {\n      path: `/customers/${transaction.customer[0].id}`,\n      newContext: true\n    })\n  }, transaction.customer[0].email)]);\n  console.log('Rows', rows);\n  console.log('Here is transaction data Zvo', data);\n  return __jsx(Page, {\n    title: \"Transactions\"\n  }, __jsx(TextField, {\n    label: \"Search Product\",\n    value: searchValue,\n    onChange: handleSearchInput,\n    prefix: __jsx(Icon, {\n      source: SearchMajorMonotone\n    })\n  }), __jsx(Button, {\n    primary: true,\n    onClick: () => redirect.dispatch(Redirect.Action.REMOTE, {\n      url: 'https://dev.d3ivgpkzuz6hkr.amplifyapp.com',\n      newContext: true\n    })\n  }, \"Create transaction\"), __jsx(Card, null, __jsx(DataTable, {\n    columnContentTypes: ['text', 'text', 'text', 'text', 'text'],\n    headings: ['OrderId', 'TotalPrice', 'TotalBonusAmount', 'CreatedAt', 'Customer'],\n    rows: rows\n  })));\n};\n\nexport default withApollo(Index);","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/pages/index.js"],"names":["React","useState","useCallback","createApp","Redirect","gql","useQuery","withApollo","Card","DataTable","Button","Page","TextField","ChoiceList","Filters","Icon","SearchMajorMonotone","toCurrency","listTransactions","Index","loading","data","error","searchValue","setSearchValue","handleSearchInput","newValue","console","log","app","apiKey","shopOrigin","redirect","create","formatDate","rowDate","date","Date","year","Intl","DateTimeFormat","format","month","day","rows","items","map","transaction","dispatch","Action","ADMIN_PATH","path","id","newContext","Number","totalPrice","totalBonusAmount","createdAt","customer","email","REMOTE","url"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react'\r\nimport createApp from '@shopify/app-bridge'\r\nimport { Redirect } from '@shopify/app-bridge/actions'\r\nimport gql from 'graphql-tag'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport withApollo from '../lib/withApollo'\r\nimport {\r\n    Card,\r\n    DataTable,\r\n    Button,\r\n    Page,\r\n    TextField,\r\n    ChoiceList,\r\n    Filters,\r\n    Icon\r\n} from '@shopify/polaris'\r\nimport { SearchMajorMonotone } from '@shopify/polaris-icons'\r\nimport { toCurrency } from '../utils/helper'\r\n\r\nconst listTransactions = gql`\r\n    query listTransactions {\r\n        listTransactions {\r\n            items {\r\n                id\r\n                totalPrice\r\n                totalBonusAmount\r\n                currency\r\n                products {\r\n                    id\r\n                    title\r\n                    bonusPercentage\r\n                    priceAmount\r\n                    priceCurrency\r\n                    image\r\n                }\r\n                customer {\r\n                    id\r\n                    firstName\r\n                    lastName\r\n                    phone\r\n                    email\r\n                }\r\n                createdAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst Index = () => {\r\n    const { loading, data, error } = useQuery(listTransactions)\r\n    const [searchValue, setSearchValue] = useState(null)\r\n    const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\r\n\r\n    console.log('Searching value', searchValue)\r\n\r\n    const app = createApp({\r\n        apiKey: '3b01063bac3031d13101100ef3e44fd5',\r\n        shopOrigin: 'transactions-avanta.myshopify.com'\r\n    })\r\n\r\n    const redirect = Redirect.create(app)\r\n    if (loading) {\r\n        return <div>Loading...</div>\r\n    }\r\n\r\n    if (error) {\r\n        console.log('Some error occured Zaven', error)\r\n    }\r\n\r\n    const formatDate = (rowDate) => {\r\n        const date = new Date(rowDate)\r\n        const year = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(date)\r\n        const month = new Intl.DateTimeFormat('en', { month: 'short' }).format(date)\r\n        const day = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(date)\r\n\r\n        return `${day}-${month}-${year}`\r\n    }\r\n\r\n    const rows = data.listTransactions.items.map((transaction) => [\r\n        <Button\r\n            onClick={() =>\r\n                redirect.dispatch(Redirect.Action.ADMIN_PATH, {\r\n                    path: `/orders/${transaction.id}?orderListBeta=true`,\r\n                    newContext: true\r\n                })\r\n            }>\r\n            {transaction.id}\r\n        </Button>,\r\n        toCurrency(Number(transaction.totalPrice)),\r\n        toCurrency(Number(transaction.totalBonusAmount)),\r\n        formatDate(transaction.createdAt),\r\n        <Button\r\n            primary\r\n            onClick={() =>\r\n                redirect.dispatch(Redirect.Action.ADMIN_PATH, {\r\n                    path: `/customers/${transaction.customer[0].id}`,\r\n                    newContext: true\r\n                })\r\n            }>\r\n            {transaction.customer[0].email}\r\n        </Button>\r\n    ])\r\n\r\n    console.log('Rows', rows)\r\n    console.log('Here is transaction data Zvo', data)\r\n    return (\r\n        <Page title=\"Transactions\">\r\n            <TextField\r\n                label=\"Search Product\"\r\n                value={searchValue}\r\n                onChange={handleSearchInput}\r\n                prefix={<Icon source={SearchMajorMonotone} />}\r\n            />\r\n            <Button\r\n                primary\r\n                onClick={() =>\r\n                    redirect.dispatch(Redirect.Action.REMOTE, {\r\n                        url: 'https://dev.d3ivgpkzuz6hkr.amplifyapp.com',\r\n                        newContext: true\r\n                    })\r\n                }>\r\n                Create transaction\r\n            </Button>\r\n            <Card>\r\n                <DataTable\r\n                    columnContentTypes={['text', 'text', 'text', 'text', 'text']}\r\n                    headings={[\r\n                        'OrderId',\r\n                        'TotalPrice',\r\n                        'TotalBonusAmount',\r\n                        'CreatedAt',\r\n                        'Customer'\r\n                    ]}\r\n                    rows={rows}\r\n                />\r\n            </Card>\r\n        </Page>\r\n    )\r\n}\r\n\r\nexport default withApollo(Index)\r\n"]},"metadata":{},"sourceType":"module"}