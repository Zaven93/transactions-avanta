{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport gql from 'graphql-tag';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { print } from 'graphql';\nimport { ResourcePicker } from '@shopify/app-bridge/actions';\nimport { Page, Layout, Badge } from '@shopify/polaris';\nimport { CustomersMajorMonotone } from '@shopify/polaris-icons';\nimport { Table, TableCell, Icon, Popup } from 'semantic-ui-react';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nAPI.configure(config);\nconst listPaymentRequest = gql`\n    query listPaymentRequest {\n        listPaymentRequests {\n            items {\n                bonusAmount\n                createdAt\n                customerId\n                id\n                orderId\n                status\n                updatedAt\n            }\n        }\n    }\n`;\n\nconst AcceptPayment = ({\n  paymentRequest\n}) => {\n  const {\n    0: paymentRequestItems,\n    1: setPaymentRequestItems\n  } = useState(null);\n  const {\n    0: openPicker,\n    1: setOpenPicker\n  } = useState(false); // const fetchPaymentRequests = useCallback(async () => {\n  //     try {\n  //         const data = await axios({\n  //             url:\n  //                 'https://kytejmxrrrgahiikcodklhf6rq.appsync-api.us-east-1.amazonaws.com/graphql',\n  //             method: 'post',\n  //             headers: {\n  //                 'x-api-key': 'da2-iwznaxe3h5bxznagzuctrhqekm'\n  //             },\n  //             data: {\n  //                 query: print(listPaymentRequest)\n  //             }\n  //         })\n  //         console.log('Zaven jan here is the data about payment request', data)\n  //         setPaymentRequestItems(data.data.data.listPaymentRequests.items)\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // }, [])\n  // useEffect(() => {\n  //     fetchPaymentRequests()\n  // }, [fetchPaymentRequests])\n\n  console.log('Payment requests from getStaticProps', paymentRequest);\n  console.log('Payment request items', paymentRequestItems);\n  return __jsx(Page, {\n    title: \"Payment Request\"\n  }, __jsx(Layout, null, __jsx(Table, {\n    selectable: true,\n    celled: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Customer Id\"), __jsx(Table.HeaderCell, null, \"Order Id\"), __jsx(Table.HeaderCell, null, \"Bonus Amount\"), __jsx(Table.HeaderCell, null, \"Created At\"), __jsx(Table.HeaderCell, null, \"Updated At\"), __jsx(Table.HeaderCell, null, \"Status\"), __jsx(Table.HeaderCell, null, \"Action\"))))));\n};\n\nexport async function getStaticProps() {\n  try {\n    const payments = await API.graphql(graphqlOperation(listPaymentRequest));\n    return {\n      props: {\n        paymentRequests: payments.data\n      }\n    };\n  } catch (error) {\n    console.log(error);\n    return {\n      props: {\n        paymentRequests: []\n      }\n    };\n  }\n}\nexport default AcceptPayment;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/pages/accept-payment.js"],"names":["React","useState","useEffect","useCallback","axios","gql","API","graphqlOperation","print","ResourcePicker","Page","Layout","Badge","CustomersMajorMonotone","Table","TableCell","Icon","Popup","toCurrency","formatDate","config","configure","listPaymentRequest","AcceptPayment","paymentRequest","paymentRequestItems","setPaymentRequestItems","openPicker","setOpenPicker","console","log","getStaticProps","payments","graphql","props","paymentRequests","data","error"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,QAAwD,OAAxD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,GAAT,EAAcC,gBAAd,QAAsC,aAAtC;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA,SAASC,cAAT,QAA+B,6BAA/B;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,KAAvB,QAAoC,kBAApC;AACA,SAASC,sBAAT,QAAuC,wBAAvC;AACA,SAASC,KAAT,EAAgBC,SAAhB,EAA2BC,IAA3B,EAAiCC,KAAjC,QAA8C,mBAA9C;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,iBAAvC;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AAEAd,GAAG,CAACe,SAAJ,CAAcD,MAAd;AAEA,MAAME,kBAAkB,GAAGjB,GAAI;;;;;;;;;;;;;;CAA/B;;AAgBA,MAAMkB,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAwB;AAC1C,QAAM;AAAA,OAACC,mBAAD;AAAA,OAAsBC;AAAtB,MAAgDzB,QAAQ,CAAC,IAAD,CAA9D;AACA,QAAM;AAAA,OAAC0B,UAAD;AAAA,OAAaC;AAAb,MAA8B3B,QAAQ,CAAC,KAAD,CAA5C,CAF0C,CAG1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA4B,EAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ,EAAoDN,cAApD;AAEAK,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCL,mBAArC;AACA,SACI,MAAC,IAAD;AAAM,IAAA,KAAK,EAAC;AAAZ,KACI,MAAC,MAAD,QACI,MAAC,KAAD;AAAO,IAAA,UAAU,MAAjB;AAAkB,IAAA,MAAM;AAAxB,KACI,MAAC,KAAD,CAAO,MAAP,QACI,MAAC,KAAD,CAAO,GAAP,QACI,MAAC,KAAD,CAAO,UAAP,sBADJ,EAEI,MAAC,KAAD,CAAO,UAAP,mBAFJ,EAGI,MAAC,KAAD,CAAO,UAAP,uBAHJ,EAII,MAAC,KAAD,CAAO,UAAP,qBAJJ,EAKI,MAAC,KAAD,CAAO,UAAP,qBALJ,EAMI,MAAC,KAAD,CAAO,UAAP,iBANJ,EAOI,MAAC,KAAD,CAAO,UAAP,iBAPJ,CADJ,CADJ,CADJ,CADJ,CADJ;AA2EH,CAzGD;;AA2GA,OAAO,eAAeM,cAAf,GAAgC;AACnC,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAM1B,GAAG,CAAC2B,OAAJ,CAAY1B,gBAAgB,CAACe,kBAAD,CAA5B,CAAvB;AACA,WAAO;AAAEY,MAAAA,KAAK,EAAE;AAAEC,QAAAA,eAAe,EAAEH,QAAQ,CAACI;AAA5B;AAAT,KAAP;AACH,GAHD,CAGE,OAAOC,KAAP,EAAc;AACZR,IAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACA,WAAO;AAAEH,MAAAA,KAAK,EAAE;AAAEC,QAAAA,eAAe,EAAE;AAAnB;AAAT,KAAP;AACH;AACJ;AAED,eAAeZ,aAAf","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\r\nimport axios from 'axios'\r\nimport gql from 'graphql-tag'\r\nimport { API, graphqlOperation } from 'aws-amplify'\r\nimport { print } from 'graphql'\r\nimport { ResourcePicker } from '@shopify/app-bridge/actions'\r\nimport { Page, Layout, Badge } from '@shopify/polaris'\r\nimport { CustomersMajorMonotone } from '@shopify/polaris-icons'\r\nimport { Table, TableCell, Icon, Popup } from 'semantic-ui-react'\r\nimport { toCurrency, formatDate } from '../utils/helper'\r\nimport config from '../aws-exports'\r\n\r\nAPI.configure(config)\r\n\r\nconst listPaymentRequest = gql`\r\n    query listPaymentRequest {\r\n        listPaymentRequests {\r\n            items {\r\n                bonusAmount\r\n                createdAt\r\n                customerId\r\n                id\r\n                orderId\r\n                status\r\n                updatedAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst AcceptPayment = ({ paymentRequest }) => {\r\n    const [paymentRequestItems, setPaymentRequestItems] = useState(null)\r\n    const [openPicker, setOpenPicker] = useState(false)\r\n    // const fetchPaymentRequests = useCallback(async () => {\r\n    //     try {\r\n    //         const data = await axios({\r\n    //             url:\r\n    //                 'https://kytejmxrrrgahiikcodklhf6rq.appsync-api.us-east-1.amazonaws.com/graphql',\r\n    //             method: 'post',\r\n    //             headers: {\r\n    //                 'x-api-key': 'da2-iwznaxe3h5bxznagzuctrhqekm'\r\n    //             },\r\n    //             data: {\r\n    //                 query: print(listPaymentRequest)\r\n    //             }\r\n    //         })\r\n    //         console.log('Zaven jan here is the data about payment request', data)\r\n    //         setPaymentRequestItems(data.data.data.listPaymentRequests.items)\r\n    //     } catch (error) {\r\n    //         console.log(error)\r\n    //     }\r\n    // }, [])\r\n\r\n    // useEffect(() => {\r\n    //     fetchPaymentRequests()\r\n    // }, [fetchPaymentRequests])\r\n\r\n    console.log('Payment requests from getStaticProps', paymentRequest)\r\n\r\n    console.log('Payment request items', paymentRequestItems)\r\n    return (\r\n        <Page title=\"Payment Request\">\r\n            <Layout>\r\n                <Table selectable celled>\r\n                    <Table.Header>\r\n                        <Table.Row>\r\n                            <Table.HeaderCell>Customer Id</Table.HeaderCell>\r\n                            <Table.HeaderCell>Order Id</Table.HeaderCell>\r\n                            <Table.HeaderCell>Bonus Amount</Table.HeaderCell>\r\n                            <Table.HeaderCell>Created At</Table.HeaderCell>\r\n                            <Table.HeaderCell>Updated At</Table.HeaderCell>\r\n                            <Table.HeaderCell>Status</Table.HeaderCell>\r\n                            <Table.HeaderCell>Action</Table.HeaderCell>\r\n                        </Table.Row>\r\n                    </Table.Header>\r\n                    {/* <Table.Body>\r\n                        {paymentRequestItems &&\r\n                            paymentRequestItems.map((item) => (\r\n                                <Table.Row key={item.id}>\r\n                                    <Table.Cell>\r\n                                        <Badge size=\"small\">{item.customerId}</Badge>\r\n                                    </Table.Cell>\r\n                                    <Table.Cell>\r\n                                        <Badge size=\"small\">{item.orderId}</Badge>\r\n                                    </Table.Cell>\r\n                                    <Table.Cell>{toCurrency(item.bonusAmount)}</Table.Cell>\r\n                                    <Table.Cell>{formatDate(item.createdAt)}</Table.Cell>\r\n                                    <Table.Cell>{formatDate(item.updatedAt)}</Table.Cell>\r\n                                    <Table.Cell>\r\n                                        <Badge\r\n                                            size=\"small\"\r\n                                            status={\r\n                                                item.status === 'PENDING'\r\n                                                    ? 'attention'\r\n                                                    : item.status === 'APPROVED'\r\n                                                    ? 'success'\r\n                                                    : 'critical'\r\n                                            }>\r\n                                            {item.status}\r\n                                        </Badge>\r\n                                    </Table.Cell>\r\n                                    <Table.Cell className=\"actions-cell\">\r\n                                        <Popup\r\n                                            content=\"Approve payment\"\r\n                                            trigger={\r\n                                                <Icon\r\n                                                    className=\"accept\"\r\n                                                    name=\"check\"\r\n                                                    onClick={() => setOpenPicker(true)}\r\n                                                />\r\n                                            }\r\n                                        />\r\n                                        <Popup\r\n                                            content=\"Decline payment\"\r\n                                            trigger={\r\n                                                <Icon\r\n                                                    className=\"decline\"\r\n                                                    // color={hoveredItemId === item.id ? 'red' : ''}\r\n                                                    // className={\r\n                                                    //     hoveredItemId === item.id ? 'decline-hovered' : ''\r\n                                                    // }\r\n                                                    name=\"remove\"\r\n                                                    // onMouseEnter={() => setHoveredItemId(item.id)}\r\n                                                    // onMouseLeave={() => setHoveredItemId(null)}\r\n                                                />\r\n                                            }\r\n                                        />\r\n                                    </Table.Cell>\r\n                                </Table.Row>\r\n                            ))}\r\n                    </Table.Body> */}\r\n                </Table>\r\n            </Layout>\r\n        </Page>\r\n    )\r\n}\r\n\r\nexport async function getStaticProps() {\r\n    try {\r\n        const payments = await API.graphql(graphqlOperation(listPaymentRequest))\r\n        return { props: { paymentRequests: payments.data } }\r\n    } catch (error) {\r\n        console.log(error)\r\n        return { props: { paymentRequests: [] } }\r\n    }\r\n}\r\n\r\nexport default AcceptPayment\r\n"]},"metadata":{},"sourceType":"module"}