{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { Auth, API, graphqlOperation } from \"aws-amplify\";\nimport { Redirect } from \"@shopify/app-bridge/actions\";\nimport createApp from \"@shopify/app-bridge\";\nimport { Card, DataTable, Button, Page, TextField, Icon, Stack } from \"@shopify/polaris\";\nimport { SearchMajorMonotone, TransactionMajorMonotone, BalanceMajorMonotone, LogOutMinor } from \"@shopify/polaris-icons\";\nimport { useBranchByAdmin } from \"../core/hooks\";\nimport { toCurrency, formatDate, extractNumbersFromString } from \"../utils/helper\";\nimport PaymentRequest from \"./PaymentRequest\";\nimport { branchByAdminId } from \"../graphql/queries\";\nimport { onCreateTransaction, onDeleteTransaction } from \"../graphql/subscriptions\";\n\nconst BranchData = ({\n  user,\n  updateUser\n}) => {\n  const {\n    0: branchInfo,\n    1: setBranchInfo\n  } = useState(\"\");\n  const {\n    0: searchValue,\n    1: setSearchValue\n  } = useState(null);\n  const {\n    0: newCreatedTransaction,\n    1: setNewCreatedTransaction\n  } = useState(\"\");\n  const {\n    0: showPaymentRequest,\n    1: setShowPaymentRequest\n  } = useState(false);\n  const {\n    data: branchData,\n    refetch: getBranch\n  } = useBranchByAdmin(user.attributes.sub);\n  const handleSearchInput = useCallback(newValue => setSearchValue(newValue), []);\n  const app = createApp({\n    apiKey: \"3b01063bac3031d13101100ef3e44fd5\",\n    shopOrigin: \"transactions-avanta.myshopify.com\"\n  });\n  const redirect = Redirect.create(app);\n  useEffect(() => {\n    getBranch();\n    const createListener = API.graphql(graphqlOperation(onCreateTransaction)).subscribe({\n      next: createdTransaction => setNewCreatedTransaction(createdTransaction)\n    });\n    const deleteListener = API.graphql(graphqlOperation(onDeleteTransaction)).subscribe({\n      next: deletedTransaction => setNewCreatedTransaction(deletedTransaction)\n    });\n    return () => {\n      createListener.unsubscribe();\n      deleteListener.unsubscribe();\n    };\n  }, [newCreatedTransaction]);\n  useEffect(() => {\n    setBranchInfo(branchData && branchData.data.branchByAdminId.items[0]);\n  }, [branchData]);\n  console.log(\"User sub\", user.attributes.sub);\n  return __jsx(React.Fragment, null, showPaymentRequest ? __jsx(PaymentRequest, {\n    setShowPaymentRequest: setShowPaymentRequest,\n    branchId: branchInfo ? branchInfo.id : \"\"\n  }) : __jsx(Page, {\n    title: branchInfo && branchInfo.branchName\n  }, __jsx(TextField, {\n    label: \"Search Product\",\n    value: searchValue,\n    onChange: handleSearchInput,\n    prefix: __jsx(Icon, {\n      source: SearchMajorMonotone\n    }),\n    placeholder: \"Search by Customer phone number\"\n  }), __jsx(Stack, null, __jsx(Stack.Item, {\n    fill: true\n  }, __jsx(Button, {\n    id: \"Accept-Payment\",\n    onClick: () => setShowPaymentRequest(true)\n  }, __jsx(Icon, {\n    source: BalanceMajorMonotone\n  }), \" Accept Payment\")), __jsx(Stack.Item, null, __jsx(Button, {\n    id: \"Create-Transaction\",\n    primary: true,\n    onClick: () => redirect.dispatch(Redirect.Action.REMOTE, {\n      // url: `https://dev.d3ivgpkzuz6hkr.amplifyapp.com?adminId=${user.attributes.sub}`,\n      url: `http://localhost:3001/transactions/${user.attributes.sub}`,\n      newContext: true\n    })\n  }, __jsx(Icon, {\n    source: TransactionMajorMonotone\n  }), \" Create transaction\")), __jsx(Stack.Item, null, __jsx(Button, {\n    primary: true,\n    id: \"Logout\",\n    onClick: () => {\n      Auth.signOut();\n      updateUser(null);\n    }\n  }, __jsx(Icon, {\n    source: LogOutMinor\n  }), \" Logout\"))), branchInfo && __jsx(Card, null, __jsx(DataTable, {\n    columnContentTypes: [\"text\", \"text\", \"text\", \"text\"],\n    headings: [\"Customer phone number\", \"TotalPrice\", \"TotalBonusAmount\", \"Minus from Bonus Amount\", \"CreatedAt\"],\n    rows: branchInfo && branchInfo.transactions.items.filter(transaction => {\n      if (searchValue == null) {\n        return transaction;\n      } else if (transaction.customer[0].phone.toLowerCase().includes(searchValue.toLowerCase())) {\n        return transaction;\n      }\n    }).sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt)).map(transaction => [__jsx(Button, {\n      primary: true,\n      onClick: () => redirect.dispatch(Redirect.Action.ADMIN_PATH, {\n        path: `/customers/${transaction.customer[0].id}`,\n        newContext: true\n      })\n    }, transaction.customer[0].phone), toCurrency(Number(transaction.totalPrice)), toCurrency(Number(transaction.totalBonusAmount)), transaction.note === null ? \"\" : toCurrency(extractNumbersFromString(transaction.note)), formatDate(transaction.createdAt)])\n  }))));\n};\n\nexport default BranchData;","map":{"version":3,"sources":["/var/www/transactions-avanta/components/BranchData.js"],"names":["React","useState","useCallback","useEffect","Auth","API","graphqlOperation","Redirect","createApp","Card","DataTable","Button","Page","TextField","Icon","Stack","SearchMajorMonotone","TransactionMajorMonotone","BalanceMajorMonotone","LogOutMinor","useBranchByAdmin","toCurrency","formatDate","extractNumbersFromString","PaymentRequest","branchByAdminId","onCreateTransaction","onDeleteTransaction","BranchData","user","updateUser","branchInfo","setBranchInfo","searchValue","setSearchValue","newCreatedTransaction","setNewCreatedTransaction","showPaymentRequest","setShowPaymentRequest","data","branchData","refetch","getBranch","attributes","sub","handleSearchInput","newValue","app","apiKey","shopOrigin","redirect","create","createListener","graphql","subscribe","next","createdTransaction","deleteListener","deletedTransaction","unsubscribe","items","console","log","id","branchName","dispatch","Action","REMOTE","url","newContext","signOut","transactions","filter","transaction","customer","phone","toLowerCase","includes","sort","a","b","Date","createdAt","map","ADMIN_PATH","path","Number","totalPrice","totalBonusAmount","note"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\"\nimport { Auth, API, graphqlOperation } from \"aws-amplify\"\nimport { Redirect } from \"@shopify/app-bridge/actions\"\nimport createApp from \"@shopify/app-bridge\"\nimport { Card, DataTable, Button, Page, TextField, Icon, Stack } from \"@shopify/polaris\"\nimport {\n  SearchMajorMonotone,\n  TransactionMajorMonotone,\n  BalanceMajorMonotone,\n  LogOutMinor,\n} from \"@shopify/polaris-icons\"\nimport { useBranchByAdmin } from \"../core/hooks\"\nimport { toCurrency, formatDate, extractNumbersFromString } from \"../utils/helper\"\nimport PaymentRequest from \"./PaymentRequest\"\nimport { branchByAdminId } from \"../graphql/queries\"\nimport { onCreateTransaction, onDeleteTransaction } from \"../graphql/subscriptions\"\n\nconst BranchData = ({ user, updateUser }) => {\n  const [branchInfo, setBranchInfo] = useState(\"\")\n  const [searchValue, setSearchValue] = useState(null)\n  const [newCreatedTransaction, setNewCreatedTransaction] = useState(\"\")\n  const [showPaymentRequest, setShowPaymentRequest] = useState(false)\n\n  const { data: branchData, refetch: getBranch } = useBranchByAdmin(user.attributes.sub)\n\n  const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\n\n  const app = createApp({\n    apiKey: \"3b01063bac3031d13101100ef3e44fd5\",\n    shopOrigin: \"transactions-avanta.myshopify.com\",\n  })\n\n  const redirect = Redirect.create(app)\n\n  useEffect(() => {\n    getBranch()\n\n    const createListener = API.graphql(graphqlOperation(onCreateTransaction)).subscribe({\n      next: (createdTransaction) => setNewCreatedTransaction(createdTransaction),\n    })\n\n    const deleteListener = API.graphql(graphqlOperation(onDeleteTransaction)).subscribe({\n      next: (deletedTransaction) => setNewCreatedTransaction(deletedTransaction),\n    })\n\n    return () => {\n      createListener.unsubscribe()\n      deleteListener.unsubscribe()\n    }\n  }, [newCreatedTransaction])\n\n  useEffect(() => {\n    setBranchInfo(branchData && branchData.data.branchByAdminId.items[0])\n  }, [branchData])\n\n  console.log(\"User sub\", user.attributes.sub)\n\n  return (\n    <>\n      {showPaymentRequest ? (\n        <PaymentRequest\n          setShowPaymentRequest={setShowPaymentRequest}\n          branchId={branchInfo ? branchInfo.id : \"\"}\n        />\n      ) : (\n        <Page title={branchInfo && branchInfo.branchName}>\n          <TextField\n            label=\"Search Product\"\n            value={searchValue}\n            onChange={handleSearchInput}\n            prefix={<Icon source={SearchMajorMonotone} />}\n            placeholder=\"Search by Customer phone number\"\n          />\n          <Stack>\n            <Stack.Item fill>\n              <Button id=\"Accept-Payment\" onClick={() => setShowPaymentRequest(true)}>\n                <Icon source={BalanceMajorMonotone} /> Accept Payment\n              </Button>\n            </Stack.Item>\n            <Stack.Item>\n              <Button\n                id=\"Create-Transaction\"\n                primary\n                onClick={() =>\n                  redirect.dispatch(Redirect.Action.REMOTE, {\n                    // url: `https://dev.d3ivgpkzuz6hkr.amplifyapp.com?adminId=${user.attributes.sub}`,\n                    url: `http://localhost:3001/transactions/${user.attributes.sub}`,\n                    newContext: true,\n                  })\n                }>\n                <Icon source={TransactionMajorMonotone} /> Create transaction\n              </Button>\n            </Stack.Item>\n            <Stack.Item>\n              <Button\n                primary\n                id=\"Logout\"\n                onClick={() => {\n                  Auth.signOut()\n                  updateUser(null)\n                }}>\n                <Icon source={LogOutMinor} /> Logout\n              </Button>\n            </Stack.Item>\n          </Stack>\n          {branchInfo && (\n            <Card>\n              <DataTable\n                columnContentTypes={[\"text\", \"text\", \"text\", \"text\"]}\n                headings={[\n                  \"Customer phone number\",\n                  \"TotalPrice\",\n                  \"TotalBonusAmount\",\n                  \"Minus from Bonus Amount\",\n                  \"CreatedAt\",\n                ]}\n                rows={\n                  branchInfo &&\n                  branchInfo.transactions.items\n                    .filter((transaction) => {\n                      if (searchValue == null) {\n                        return transaction\n                      } else if (\n                        transaction.customer[0].phone\n                          .toLowerCase()\n                          .includes(searchValue.toLowerCase())\n                      ) {\n                        return transaction\n                      }\n                    })\n                    .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))\n                    .map((transaction) => [\n                      <Button\n                        primary\n                        onClick={() =>\n                          redirect.dispatch(Redirect.Action.ADMIN_PATH, {\n                            path: `/customers/${transaction.customer[0].id}`,\n                            newContext: true,\n                          })\n                        }>\n                        {transaction.customer[0].phone}\n                      </Button>,\n                      toCurrency(Number(transaction.totalPrice)),\n                      toCurrency(Number(transaction.totalBonusAmount)),\n                      transaction.note === null\n                        ? \"\"\n                        : toCurrency(extractNumbersFromString(transaction.note)),\n                      formatDate(transaction.createdAt),\n                    ])\n                }\n              />\n            </Card>\n          )}\n        </Page>\n      )}\n    </>\n  )\n}\n\nexport default BranchData\n"]},"metadata":{},"sourceType":"module"}