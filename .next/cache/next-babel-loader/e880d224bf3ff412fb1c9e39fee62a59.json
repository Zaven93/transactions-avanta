{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { Auth, API, graphqlOperation } from \"aws-amplify\";\nimport gql from \"graphql-tag\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { Page, Button, Modal, Form, FormLayout, TextField, Badge, Stack } from \"@shopify/polaris\";\nimport { Table, Popup, Header, Icon } from \"semantic-ui-react\";\nimport { useForm } from \"react-hook-form\";\nimport { useConfirmSignUp, useSignUp, useCreateBranch, useListBranches } from \"../core/hooks\";\nimport ProductList from \"./ProductsList\";\nimport { formatDate } from \"../utils/helper\";\nimport config from \"../aws-exports\";\nimport BranchProducts from \"./BranchProducts\";\nimport BranchList from \"./BranchList\";\nimport AdminBranchInfo from \"./AdminBranchInfo\";\nimport { createBranch } from \"../graphql/mutation\";\nimport { listBranchs } from \"../graphql/queries\";\nAPI.configure(config);\n\nvar BranchConsole = function BranchConsole(_ref) {\n  _s();\n\n  var updateUser = _ref.updateUser;\n\n  var _useState = useState(false),\n      active = _useState[0],\n      setActive = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      branchName = _useState2[0],\n      setBranchName = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      username = _useState3[0],\n      setUsername = _useState3[1];\n\n  var _useState4 = useState(\"\"),\n      email = _useState4[0],\n      setEmail = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      password = _useState5[0],\n      setPassword = _useState5[1];\n\n  var _useState6 = useState(\"\"),\n      code = _useState6[0],\n      setCode = _useState6[1];\n\n  var _useState7 = useState(\"signUp\"),\n      formType = _useState7[0],\n      setFormType = _useState7[1];\n\n  var _useState8 = useState(null),\n      userSub = _useState8[0],\n      setUserSub = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      branches = _useState9[0],\n      setBranches = _useState9[1];\n\n  var _useState10 = useState(null),\n      branchId = _useState10[0],\n      setBranchId = _useState10[1];\n\n  var _useSignUp = useSignUp(),\n      signUserUp = _useSignUp.signUserUp,\n      data = _useSignUp.data;\n\n  var _useConfirmSignUp = useConfirmSignUp(),\n      confirmSignUp = _useConfirmSignUp.confirmSignUp;\n\n  var _useCreateBranch = useCreateBranch(),\n      createBranch = _useCreateBranch.createBranch,\n      createdBranch = _useCreateBranch.data;\n\n  var _useListBranches = useListBranches(),\n      branchesData = _useListBranches.data,\n      listBranches = _useListBranches.refetch;\n\n  var _useForm = useForm(),\n      errors = _useForm.errors,\n      register = _useForm.register;\n\n  var onChangeBranchName = useCallback(function (newValue) {\n    setBranchName(newValue);\n  }, []);\n  var onChangeUsername = useCallback(function (newValue) {\n    setUsername(newValue);\n  }, []);\n  var onChangePassword = useCallback(function (newValue) {\n    setPassword(newValue);\n  }, []);\n  var onChangeEmail = useCallback(function (newValue) {\n    setEmail(newValue);\n  }, []);\n  var onChangeCode = useCallback(function (newValue) {\n    setCode(newValue);\n  }, []);\n\n  var handleChange = function handleChange() {\n    setActive(!active);\n  };\n\n  var signUp = function signUp(e) {\n    e.preventDefault();\n\n    try {\n      signUserUp({\n        username: username,\n        password: password,\n        attributes: {\n          email: email\n        }\n      });\n      setFormType(\"confirm\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(function () {\n    setUserSub(data && data.userSub);\n  }, [data]);\n\n  var confirm = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n\n              try {\n                confirmSignUp({\n                  username: username,\n                  code: code\n                });\n                createBranch({\n                  userSub: userSub,\n                  username: username,\n                  branchName: branchName\n                });\n                setFormType(\"signUp\");\n                handleChange();\n              } catch (error) {\n                console.log(error);\n              }\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function confirm(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    listBranches();\n  }, []);\n  useEffect(function () {\n    setBranches(branchesData && branchesData.data);\n  }, [branchesData]);\n  return __jsx(React.Fragment, null, branchId && __jsx(AdminBranchInfo, {\n    setBranchId: setBranchId,\n    branchId: branchId\n  }), !branchId && __jsx(React.Fragment, null, __jsx(Stack, null, __jsx(Stack.Item, {\n    fill: true\n  }, __jsx(Button, {\n    onClick: handleChange,\n    primary: true\n  }, __jsx(Icon, {\n    name: \"code branch\"\n  }), \" Create branch\")), __jsx(Stack.Item, null, __jsx(Button, {\n    primary: true,\n    id: \"Logout\",\n    onClick: function onClick() {\n      Auth.signOut();\n      updateUser(null);\n    }\n  }, __jsx(Icon, {\n    name: \"sign out\"\n  }), \" Logout\"))), __jsx(BranchList, {\n    setBranchId: setBranchId\n  }), __jsx(Modal, {\n    open: active,\n    onClose: handleChange,\n    title: \"Fill in Branch info\"\n  }, __jsx(Modal.Section, null, formType === \"signUp\" && __jsx(\"form\", {\n    onSubmit: signUp\n  }, __jsx(\"div\", {\n    className: \"form-controll\"\n  }, __jsx(\"input\", {\n    className: \"input\",\n    name: \"branchName\",\n    ref: register({\n      required: \"Branch Name is required!\"\n    }),\n    placeholder: \"Branch Name\"\n  }), __jsx(Icon, {\n    name: \"branch\"\n  }), errors.branchName && __jsx(\"p\", {\n    className: \"error-notification\"\n  }, errors.branchName.message)), __jsx(\"div\", {\n    className: \"form-controll\"\n  }, __jsx(\"input\", {\n    className: \"input\",\n    name: \"username\",\n    ref: register({\n      required: \"Username is required\"\n    }),\n    placeholder: \"Username\"\n  }), __jsx(Icon, {\n    name: \"user\"\n  }), errors.username && __jsx(\"p\", {\n    className: \"error-notification\"\n  }, errors.username.message)), __jsx(\"div\", {\n    className: \"form-controll\"\n  }, __jsx(\"input\", {\n    className: \"input\",\n    name: \"email\",\n    ref: register({\n      required: \"Email is required\"\n    }),\n    placeholder: \"Email\"\n  }), __jsx(Icon, {\n    name: \"user\"\n  }), errors.email && __jsx(\"p\", {\n    className: \"error-notification\"\n  }, errors.email.message)), __jsx(\"div\", {\n    className: \"form-controll\"\n  }, __jsx(\"input\", {\n    className: \"input\",\n    name: \"password\",\n    type: \"password\",\n    ref: register({\n      required: \"Password is required\"\n    }),\n    placeholder: \"Password\"\n  }), __jsx(Icon, {\n    name: \"lock\"\n  }), errors.password && __jsx(\"p\", {\n    className: \"error-notification\"\n  }, errors.password.message)), __jsx(Button, {\n    primary: true,\n    submit: true\n  }, __jsx(Icon, {\n    name: \"sign-in\"\n  }), \" Login\")) // <Form onSubmit={signUp}>\n  //   <FormLayout>\n  //     <TextField\n  //       value={branchName}\n  //       onChange={onChangeBranchName}\n  //       label=\"Branch Name\"\n  //     />\n  //     <TextField\n  //       value={username}\n  //       onChange={onChangeUsername}\n  //       label=\"Branch admin username\"\n  //     />\n  //     <TextField value={email} onChange={onChangeEmail} label=\"Branch admin email\" />\n  //     <TextField\n  //       type=\"password\"\n  //       value={password}\n  //       onChange={onChangePassword}\n  //       label=\"Branch admin password\"\n  //     />\n  //     <Button primary submit>\n  //       Create Branch\n  //     </Button>\n  //   </FormLayout>\n  // </Form>\n  , formType === \"confirm\" && __jsx(\"form\", {\n    onSubmit: handleSubmit(login)\n  }, __jsx(\"div\", {\n    className: \"form-controll\"\n  }, __jsx(\"input\", {\n    className: \"input\",\n    name: \"username\",\n    ref: register({\n      required: \"Username is required\"\n    }),\n    placeholder: \"Username\"\n  }), __jsx(Icon, {\n    name: \"user\"\n  }), errors.username && __jsx(\"p\", {\n    className: \"error-notification\"\n  }, errors.username.message)), __jsx(\"div\", {\n    className: \"form-controll\"\n  }, __jsx(\"input\", {\n    className: \"input\",\n    name: \"password\",\n    type: \"password\",\n    ref: register({\n      required: \"Password is required\"\n    }),\n    placeholder: \"Password\"\n  }), __jsx(Icon, {\n    name: \"lock\"\n  }), errors.password && __jsx(\"p\", {\n    className: \"error-notification\"\n  }, errors.password.message)), __jsx(Button, {\n    primary: true,\n    submit: true\n  }, __jsx(Icon, {\n    name: \"sign-in\"\n  }), \" Login\")) // <Form onSubmit={confirm}>\n  //   <FormLayout>\n  //     <TextField\n  //       value={username}\n  //       onChange={onChangeUsername}\n  //       label=\"Branch admin username\"\n  //     />\n  //     <TextField value={code} onChange={onChangeCode} label=\"Confirmation code\" />\n  //     <Button primary submit>\n  //       Confirm\n  //     </Button>\n  //   </FormLayout>\n  // </Form>\n  ))));\n};\n\n_s(BranchConsole, \"12iE5V3/EIY5U+GcqKd5IuAC2LM=\", false, function () {\n  return [useSignUp, useConfirmSignUp, useCreateBranch, useListBranches, useForm];\n});\n\n_c = BranchConsole;\nexport default BranchConsole;\n\nvar _c;\n\n$RefreshReg$(_c, \"BranchConsole\");","map":{"version":3,"sources":["/var/www/transactions-avanta/components/BranchConsole.js"],"names":["React","useState","useEffect","useRef","useCallback","Auth","API","graphqlOperation","gql","v4","uuidv4","Page","Button","Modal","Form","FormLayout","TextField","Badge","Stack","Table","Popup","Header","Icon","useForm","useConfirmSignUp","useSignUp","useCreateBranch","useListBranches","ProductList","formatDate","config","BranchProducts","BranchList","AdminBranchInfo","createBranch","listBranchs","configure","BranchConsole","updateUser","active","setActive","branchName","setBranchName","username","setUsername","email","setEmail","password","setPassword","code","setCode","formType","setFormType","userSub","setUserSub","branches","setBranches","branchId","setBranchId","signUserUp","data","confirmSignUp","createdBranch","branchesData","listBranches","refetch","errors","register","onChangeBranchName","newValue","onChangeUsername","onChangePassword","onChangeEmail","onChangeCode","handleChange","signUp","e","preventDefault","attributes","error","console","log","confirm","signOut","required","message","handleSubmit","login"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from \"react\"\nimport { Auth, API, graphqlOperation } from \"aws-amplify\"\nimport gql from \"graphql-tag\"\nimport { v4 as uuidv4 } from \"uuid\"\nimport { Page, Button, Modal, Form, FormLayout, TextField, Badge, Stack } from \"@shopify/polaris\"\nimport { Table, Popup, Header, Icon } from \"semantic-ui-react\"\nimport { useForm } from \"react-hook-form\"\nimport { useConfirmSignUp, useSignUp, useCreateBranch, useListBranches } from \"../core/hooks\"\nimport ProductList from \"./ProductsList\"\nimport { formatDate } from \"../utils/helper\"\nimport config from \"../aws-exports\"\nimport BranchProducts from \"./BranchProducts\"\nimport BranchList from \"./BranchList\"\nimport AdminBranchInfo from \"./AdminBranchInfo\"\nimport { createBranch } from \"../graphql/mutation\"\nimport { listBranchs } from \"../graphql/queries\"\n\nAPI.configure(config)\n\nconst BranchConsole = ({ updateUser }) => {\n  const [active, setActive] = useState(false)\n  const [branchName, setBranchName] = useState(\"\")\n  const [username, setUsername] = useState(\"\")\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [code, setCode] = useState(\"\")\n  const [formType, setFormType] = useState(\"signUp\")\n  const [userSub, setUserSub] = useState(null)\n  const [branches, setBranches] = useState(\"\")\n  const [branchId, setBranchId] = useState(null)\n\n  const { signUserUp, data } = useSignUp()\n  const { confirmSignUp } = useConfirmSignUp()\n  const { createBranch, data: createdBranch } = useCreateBranch()\n  const { data: branchesData, refetch: listBranches } = useListBranches()\n  const { errors, register } = useForm()\n\n  const onChangeBranchName = useCallback((newValue) => {\n    setBranchName(newValue)\n  }, [])\n\n  const onChangeUsername = useCallback((newValue) => {\n    setUsername(newValue)\n  }, [])\n\n  const onChangePassword = useCallback((newValue) => {\n    setPassword(newValue)\n  }, [])\n\n  const onChangeEmail = useCallback((newValue) => {\n    setEmail(newValue)\n  }, [])\n\n  const onChangeCode = useCallback((newValue) => {\n    setCode(newValue)\n  }, [])\n\n  const handleChange = () => {\n    setActive(!active)\n  }\n\n  const signUp = (e) => {\n    e.preventDefault()\n    try {\n      signUserUp({ username, password, attributes: { email } })\n      setFormType(\"confirm\")\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    setUserSub(data && data.userSub)\n  }, [data])\n\n  const confirm = async (e) => {\n    e.preventDefault()\n    try {\n      confirmSignUp({ username, code })\n      createBranch({ userSub, username, branchName })\n      setFormType(\"signUp\")\n      handleChange()\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    listBranches()\n  }, [])\n\n  useEffect(() => {\n    setBranches(branchesData && branchesData.data)\n  }, [branchesData])\n\n  return (\n    <>\n      {branchId && <AdminBranchInfo setBranchId={setBranchId} branchId={branchId} />}\n      {!branchId && (\n        <>\n          <Stack>\n            <Stack.Item fill>\n              <Button onClick={handleChange} primary>\n                <Icon name=\"code branch\" /> Create branch\n              </Button>\n            </Stack.Item>\n            <Stack.Item>\n              <Button\n                primary\n                id=\"Logout\"\n                onClick={() => {\n                  Auth.signOut()\n                  updateUser(null)\n                }}>\n                <Icon name=\"sign out\" /> Logout\n              </Button>\n            </Stack.Item>\n          </Stack>\n          <BranchList setBranchId={setBranchId} />\n          <Modal open={active} onClose={handleChange} title=\"Fill in Branch info\">\n            <Modal.Section>\n              {formType === \"signUp\" && (\n                <form onSubmit={signUp}>\n                  <div className=\"form-controll\">\n                    <input\n                      className=\"input\"\n                      name=\"branchName\"\n                      ref={register({ required: \"Branch Name is required!\" })}\n                      placeholder=\"Branch Name\"\n                    />\n                    <Icon name=\"branch\" />\n                    {errors.branchName && (\n                      <p className=\"error-notification\">{errors.branchName.message}</p>\n                    )}\n                  </div>\n                  <div className=\"form-controll\">\n                    <input\n                      className=\"input\"\n                      name=\"username\"\n                      ref={register({ required: \"Username is required\" })}\n                      placeholder=\"Username\"\n                    />\n                    <Icon name=\"user\" />\n                    {errors.username && (\n                      <p className=\"error-notification\">{errors.username.message}</p>\n                    )}\n                  </div>\n                  <div className=\"form-controll\">\n                    <input\n                      className=\"input\"\n                      name=\"email\"\n                      ref={register({ required: \"Email is required\" })}\n                      placeholder=\"Email\"\n                    />\n                    <Icon name=\"user\" />\n                    {errors.email && <p className=\"error-notification\">{errors.email.message}</p>}\n                  </div>\n                  <div className=\"form-controll\">\n                    <input\n                      className=\"input\"\n                      name=\"password\"\n                      type=\"password\"\n                      ref={register({ required: \"Password is required\" })}\n                      placeholder=\"Password\"\n                    />\n                    <Icon name=\"lock\" />\n                    {errors.password && (\n                      <p className=\"error-notification\">{errors.password.message}</p>\n                    )}\n                  </div>\n                  <Button primary submit>\n                    <Icon name=\"sign-in\" /> Login\n                  </Button>\n                </form>\n                // <Form onSubmit={signUp}>\n                //   <FormLayout>\n                //     <TextField\n                //       value={branchName}\n                //       onChange={onChangeBranchName}\n                //       label=\"Branch Name\"\n                //     />\n                //     <TextField\n                //       value={username}\n                //       onChange={onChangeUsername}\n                //       label=\"Branch admin username\"\n                //     />\n                //     <TextField value={email} onChange={onChangeEmail} label=\"Branch admin email\" />\n                //     <TextField\n                //       type=\"password\"\n                //       value={password}\n                //       onChange={onChangePassword}\n                //       label=\"Branch admin password\"\n                //     />\n                //     <Button primary submit>\n                //       Create Branch\n                //     </Button>\n                //   </FormLayout>\n                // </Form>\n              )}\n              {formType === \"confirm\" && (\n                <form onSubmit={handleSubmit(login)}>\n                  <div className=\"form-controll\">\n                    <input\n                      className=\"input\"\n                      name=\"username\"\n                      ref={register({ required: \"Username is required\" })}\n                      placeholder=\"Username\"\n                    />\n                    <Icon name=\"user\" />\n                    {errors.username && (\n                      <p className=\"error-notification\">{errors.username.message}</p>\n                    )}\n                  </div>\n                  <div className=\"form-controll\">\n                    <input\n                      className=\"input\"\n                      name=\"password\"\n                      type=\"password\"\n                      ref={register({ required: \"Password is required\" })}\n                      placeholder=\"Password\"\n                    />\n                    <Icon name=\"lock\" />\n                    {errors.password && (\n                      <p className=\"error-notification\">{errors.password.message}</p>\n                    )}\n                  </div>\n                  <Button primary submit>\n                    <Icon name=\"sign-in\" /> Login\n                  </Button>\n                </form>\n                // <Form onSubmit={confirm}>\n                //   <FormLayout>\n                //     <TextField\n                //       value={username}\n                //       onChange={onChangeUsername}\n                //       label=\"Branch admin username\"\n                //     />\n                //     <TextField value={code} onChange={onChangeCode} label=\"Confirmation code\" />\n                //     <Button primary submit>\n                //       Confirm\n                //     </Button>\n                //   </FormLayout>\n                // </Form>\n              )}\n            </Modal.Section>\n          </Modal>\n        </>\n      )}\n    </>\n  )\n}\n\nexport default BranchConsole\n"]},"metadata":{},"sourceType":"module"}