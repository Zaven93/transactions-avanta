{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Auth } from 'aws-amplify';\nimport { Page, Button, Icon, Modal, Form, FormLayout, TextField } from '@shopify/polaris';\nimport { Table, Popup, Header } from 'semantic-ui-react';\nimport ProductList from './ProductsList';\n\nvar BranchConsole = function BranchConsole() {\n  _s();\n\n  var _useState = useState(false),\n      active = _useState[0],\n      setActive = _useState[1];\n\n  var _useState2 = useState(''),\n      username = _useState2[0],\n      setUsername = _useState2[1];\n\n  var _useState3 = useState(''),\n      email = _useState3[0],\n      setEmail = _useState3[1];\n\n  var _useState4 = useState(''),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var _useState5 = useState(''),\n      code = _useState5[0],\n      setCode = _useState5[1];\n\n  var _useState6 = useState('signUp'),\n      formType = _useState6[0],\n      setFormType = _useState6[1];\n\n  var onChangeUsername = useCallback(function (username) {\n    setUsername(username);\n  }, []);\n  var onChangePassword = useCallback(function (password) {\n    setPassword(password);\n  }, []);\n  var onChangeEmail = useCallback(function (email) {\n    setEmail(email);\n  }, []);\n  var onChangeCode = useCallback(function (code) {\n    setCode(code);\n  }, []);\n\n  var handleChange = function handleChange() {\n    setActive(!active);\n  };\n\n  var signUp = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _yield$Auth$signUp, user;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return Auth.signUp({\n                username: username,\n                password: password,\n                attributes: {\n                  email: email\n                }\n              });\n\n            case 3:\n              _yield$Auth$signUp = _context.sent;\n              user = _yield$Auth$signUp.user;\n              console.log('User from Modal', user);\n              setFormType('confirm');\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 9]]);\n    }));\n\n    return function signUp() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var confirm = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return Auth.confirmSignUp(username, code);\n\n            case 3:\n              handleChange();\n              _context2.next = 9;\n              break;\n\n            case 6:\n              _context2.prev = 6;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(_context2.t0);\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 6]]);\n    }));\n\n    return function confirm() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  console.log('Username', username);\n  console.log('Password', password);\n  console.log('Email', email);\n  console.log('Code', code);\n  return __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: handleChange,\n    primary: true\n  }, \"Create branch\"), __jsx(Table, {\n    selectable: true,\n    celled: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Branch Name\"), __jsx(Table.HeaderCell, null, \"Created At\")))), __jsx(Modal, {\n    open: active,\n    onClose: handleChange,\n    title: \"Fill in Branch info\" //  primaryAction={{\n    //      content: 'Proceed',\n    //     //  onAction: () => {\n    //     //  }\n    //  }}\n\n  }, __jsx(Modal.Section, null, formType === 'signUp' && __jsx(Form, null, __jsx(FormLayout, null, __jsx(TextField, {\n    label: \"Branch Name\"\n  }), __jsx(TextField, {\n    value: username,\n    onChange: onChangeUsername,\n    label: \"Branch admin username\"\n  }), __jsx(TextField, {\n    value: email,\n    onChange: onChangeEmail,\n    label: \"Branch admin email\"\n  }), __jsx(TextField, {\n    type: \"password\",\n    value: password,\n    onChange: onChangePassword,\n    label: \"Branch admin password\"\n  }), __jsx(Button, {\n    onClick: signUp,\n    primary: true,\n    submit: true\n  }, \"Create Branch\"))), formType === 'confirm' && __jsx(Form, null, __jsx(FormLayout, null, __jsx(TextField, {\n    value: username,\n    onChange: onChangeUsername,\n    label: \"Branch admin username\"\n  }), __jsx(TextField, {\n    value: code,\n    onChange: onChangeCode,\n    label: \"Confirmation code\"\n  }), __jsx(Button, {\n    onClick: confirm,\n    primary: true,\n    submit: true\n  }, \"Confirm\"))))));\n};\n\n_s(BranchConsole, \"Tf5EVqRrrBijjR6DVQEm+w9m4G4=\");\n\n_c = BranchConsole;\nexport default BranchConsole;\n\nvar _c;\n\n$RefreshReg$(_c, \"BranchConsole\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/components/BranchConsole.js"],"names":["React","useState","useEffect","useRef","useCallback","Auth","Page","Button","Icon","Modal","Form","FormLayout","TextField","Table","Popup","Header","ProductList","BranchConsole","active","setActive","username","setUsername","email","setEmail","password","setPassword","code","setCode","formType","setFormType","onChangeUsername","onChangePassword","onChangeEmail","onChangeCode","handleChange","signUp","attributes","user","console","log","confirm","confirmSignUp"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,EAA6CC,WAA7C,QAAgE,OAAhE;AACA,SAASC,IAAT,QAAqB,aAArB;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,IAAvB,EAA6BC,KAA7B,EAAoCC,IAApC,EAA0CC,UAA1C,EAAsDC,SAAtD,QAAuE,kBAAvE;AACA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,MAAvB,QAAqC,mBAArC;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAAA;;AAAA,kBACIhB,QAAQ,CAAC,KAAD,CADZ;AAAA,MACjBiB,MADiB;AAAA,MACTC,SADS;;AAAA,mBAEQlB,QAAQ,CAAC,EAAD,CAFhB;AAAA,MAEjBmB,QAFiB;AAAA,MAEPC,WAFO;;AAAA,mBAGEpB,QAAQ,CAAC,EAAD,CAHV;AAAA,MAGjBqB,KAHiB;AAAA,MAGVC,QAHU;;AAAA,mBAIQtB,QAAQ,CAAC,EAAD,CAJhB;AAAA,MAIjBuB,QAJiB;AAAA,MAIPC,WAJO;;AAAA,mBAKAxB,QAAQ,CAAC,EAAD,CALR;AAAA,MAKjByB,IALiB;AAAA,MAKXC,OALW;;AAAA,mBAMQ1B,QAAQ,CAAC,QAAD,CANhB;AAAA,MAMjB2B,QANiB;AAAA,MAMPC,WANO;;AAQxB,MAAMC,gBAAgB,GAAG1B,WAAW,CAAC,UAACgB,QAAD,EAAc;AAC/CC,IAAAA,WAAW,CAACD,QAAD,CAAX;AACH,GAFmC,EAEjC,EAFiC,CAApC;AAIA,MAAMW,gBAAgB,GAAG3B,WAAW,CAAC,UAACoB,QAAD,EAAc;AAC/CC,IAAAA,WAAW,CAACD,QAAD,CAAX;AACH,GAFmC,EAEjC,EAFiC,CAApC;AAIA,MAAMQ,aAAa,GAAG5B,WAAW,CAAC,UAACkB,KAAD,EAAW;AACzCC,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACH,GAFgC,EAE9B,EAF8B,CAAjC;AAIA,MAAMW,YAAY,GAAG7B,WAAW,CAAC,UAACsB,IAAD,EAAU;AACvCC,IAAAA,OAAO,CAACD,IAAD,CAAP;AACH,GAF+B,EAE7B,EAF6B,CAAhC;;AAIA,MAAMQ,YAAY,GAAG,SAAfA,YAAe,GAAM;AACvBf,IAAAA,SAAS,CAAC,CAACD,MAAF,CAAT;AACH,GAFD;;AAIA,MAAMiB,MAAM;AAAA,wEAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEgB9B,IAAI,CAAC8B,MAAL,CAAY;AAAEf,gBAAAA,QAAQ,EAARA,QAAF;AAAYI,gBAAAA,QAAQ,EAARA,QAAZ;AAAsBY,gBAAAA,UAAU,EAAE;AAAEd,kBAAAA,KAAK,EAALA;AAAF;AAAlC,eAAZ,CAFhB;;AAAA;AAAA;AAECe,cAAAA,IAFD,sBAECA,IAFD;AAGPC,cAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BF,IAA/B;AACAR,cAAAA,WAAW,CAAC,SAAD,CAAX;AAJO;AAAA;;AAAA;AAAA;AAAA;AAMPS,cAAAA,OAAO,CAACC,GAAR;;AANO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAANJ,MAAM;AAAA;AAAA;AAAA,KAAZ;;AAUA,MAAMK,OAAO;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEFnC,IAAI,CAACoC,aAAL,CAAmBrB,QAAnB,EAA6BM,IAA7B,CAFE;;AAAA;AAGRQ,cAAAA,YAAY;AAHJ;AAAA;;AAAA;AAAA;AAAA;AAKRI,cAAAA,OAAO,CAACC,GAAR;;AALQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAPC,OAAO;AAAA;AAAA;AAAA,KAAb;;AASAF,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBnB,QAAxB;AACAkB,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBf,QAAxB;AACAc,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBjB,KAArB;AACAgB,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBb,IAApB;AAEA,SACI,4BACI,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAEQ,YAAjB;AAA+B,IAAA,OAAO;AAAtC,qBADJ,EAII,MAAC,KAAD;AAAO,IAAA,UAAU,MAAjB;AAAkB,IAAA,MAAM;AAAxB,KACI,MAAC,KAAD,CAAO,MAAP,QACI,MAAC,KAAD,CAAO,GAAP,QACI,MAAC,KAAD,CAAO,UAAP,sBADJ,EAEI,MAAC,KAAD,CAAO,UAAP,qBAFJ,CADJ,CADJ,CAJJ,EA8DI,MAAC,KAAD;AACI,IAAA,IAAI,EAAEhB,MADV;AAEI,IAAA,OAAO,EAAEgB,YAFb;AAGI,IAAA,KAAK,EAAC,qBAHV,CAII;AACA;AACA;AAEA;AACA;;AATJ,KAWI,MAAC,KAAD,CAAO,OAAP,QACKN,QAAQ,KAAK,QAAb,IACG,MAAC,IAAD,QACI,MAAC,UAAD,QACI,MAAC,SAAD;AAAW,IAAA,KAAK,EAAC;AAAjB,IADJ,EAEI,MAAC,SAAD;AACI,IAAA,KAAK,EAAER,QADX;AAEI,IAAA,QAAQ,EAAEU,gBAFd;AAGI,IAAA,KAAK,EAAC;AAHV,IAFJ,EAOI,MAAC,SAAD;AACI,IAAA,KAAK,EAAER,KADX;AAEI,IAAA,QAAQ,EAAEU,aAFd;AAGI,IAAA,KAAK,EAAC;AAHV,IAPJ,EAYI,MAAC,SAAD;AACI,IAAA,IAAI,EAAC,UADT;AAEI,IAAA,KAAK,EAAER,QAFX;AAGI,IAAA,QAAQ,EAAEO,gBAHd;AAII,IAAA,KAAK,EAAC;AAJV,IAZJ,EAkBI,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAEI,MAAjB;AAAyB,IAAA,OAAO,MAAhC;AAAiC,IAAA,MAAM;AAAvC,qBAlBJ,CADJ,CAFR,EA2BKP,QAAQ,KAAK,SAAb,IACG,MAAC,IAAD,QACI,MAAC,UAAD,QACI,MAAC,SAAD;AACI,IAAA,KAAK,EAAER,QADX;AAEI,IAAA,QAAQ,EAAEU,gBAFd;AAGI,IAAA,KAAK,EAAC;AAHV,IADJ,EAMI,MAAC,SAAD;AACI,IAAA,KAAK,EAAEJ,IADX;AAEI,IAAA,QAAQ,EAAEO,YAFd;AAGI,IAAA,KAAK,EAAC;AAHV,IANJ,EAWI,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAEO,OAAjB;AAA0B,IAAA,OAAO,MAAjC;AAAkC,IAAA,MAAM;AAAxC,eAXJ,CADJ,CA5BR,CAXJ,CA9DJ,CADJ;AA4HH,CAhLD;;GAAMvB,a;;KAAAA,a;AAkLN,eAAeA,aAAf","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react'\r\nimport { Auth } from 'aws-amplify'\r\nimport { Page, Button, Icon, Modal, Form, FormLayout, TextField } from '@shopify/polaris'\r\nimport { Table, Popup, Header } from 'semantic-ui-react'\r\nimport ProductList from './ProductsList'\r\n\r\nconst BranchConsole = () => {\r\n    const [active, setActive] = useState(false)\r\n    const [username, setUsername] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [code, setCode] = useState('')\r\n    const [formType, setFormType] = useState('signUp')\r\n\r\n    const onChangeUsername = useCallback((username) => {\r\n        setUsername(username)\r\n    }, [])\r\n\r\n    const onChangePassword = useCallback((password) => {\r\n        setPassword(password)\r\n    }, [])\r\n\r\n    const onChangeEmail = useCallback((email) => {\r\n        setEmail(email)\r\n    }, [])\r\n\r\n    const onChangeCode = useCallback((code) => {\r\n        setCode(code)\r\n    }, [])\r\n\r\n    const handleChange = () => {\r\n        setActive(!active)\r\n    }\r\n\r\n    const signUp = async () => {\r\n        try {\r\n            const { user } = await Auth.signUp({ username, password, attributes: { email } })\r\n            console.log('User from Modal', user)\r\n            setFormType('confirm')\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    const confirm = async () => {\r\n        try {\r\n            await Auth.confirmSignUp(username, code)\r\n            handleChange()\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    console.log('Username', username)\r\n    console.log('Password', password)\r\n    console.log('Email', email)\r\n    console.log('Code', code)\r\n\r\n    return (\r\n        <>\r\n            <Button onClick={handleChange} primary>\r\n                Create branch\r\n            </Button>\r\n            <Table selectable celled>\r\n                <Table.Header>\r\n                    <Table.Row>\r\n                        <Table.HeaderCell>Branch Name</Table.HeaderCell>\r\n                        <Table.HeaderCell>Created At</Table.HeaderCell>\r\n                    </Table.Row>\r\n                </Table.Header>\r\n                {/* <Table.Body>\r\n                    {paymentRequestItems &&\r\n                        paymentRequestItems\r\n                            .sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt))\r\n                            .map((item) => (\r\n                                <Table.Row key={item.id}>\r\n                                    <Table.Cell>\r\n                                        <Badge size=\"small\">{item.customerId}</Badge>\r\n                                    </Table.Cell>\r\n                                    <Table.Cell>{toCurrency(item.bonusAmount)}</Table.Cell>\r\n                                    <Table.Cell>{formatDate(item.createdAt)}</Table.Cell>\r\n                                    <Table.Cell>{formatDate(item.updatedAt)}</Table.Cell>\r\n                                    <Table.Cell>\r\n                                        <Badge\r\n                                            size=\"small\"\r\n                                            progress=\"partiallyComplete\"\r\n                                            status=\"attention\">\r\n                                            {item.status}\r\n                                        </Badge>\r\n                                    </Table.Cell>\r\n                                    <Table.Cell className=\"actions-cell\">\r\n                                        <Popup\r\n                                            content=\"Approve payment\"\r\n                                            trigger={\r\n                                                <Icon\r\n                                                    className=\"accept\"\r\n                                                    name=\"check\"\r\n                                                    onClick={() => {\r\n                                                        setPaymentRequestId(item.id)\r\n                                                        handleChange()\r\n                                                    }}\r\n                                                />\r\n                                            }\r\n                                        />\r\n                                        <Popup\r\n                                            content=\"Decline payment\"\r\n                                            trigger={\r\n                                                <Icon\r\n                                                    className=\"decline\"\r\n                                                    name=\"remove\"\r\n                                                    onClick={async () => {\r\n                                                        declinePayment(item.id)\r\n                                                    }}\r\n                                                />\r\n                                            }\r\n                                        />\r\n                                    </Table.Cell>\r\n                                </Table.Row>\r\n                            ))}\r\n                </Table.Body> */}\r\n            </Table>\r\n            <Modal\r\n                open={active}\r\n                onClose={handleChange}\r\n                title=\"Fill in Branch info\"\r\n                //  primaryAction={{\r\n                //      content: 'Proceed',\r\n                //     //  onAction: () => {\r\n\r\n                //     //  }\r\n                //  }}\r\n            >\r\n                <Modal.Section>\r\n                    {formType === 'signUp' && (\r\n                        <Form>\r\n                            <FormLayout>\r\n                                <TextField label=\"Branch Name\" />\r\n                                <TextField\r\n                                    value={username}\r\n                                    onChange={onChangeUsername}\r\n                                    label=\"Branch admin username\"\r\n                                />\r\n                                <TextField\r\n                                    value={email}\r\n                                    onChange={onChangeEmail}\r\n                                    label=\"Branch admin email\"\r\n                                />\r\n                                <TextField\r\n                                    type=\"password\"\r\n                                    value={password}\r\n                                    onChange={onChangePassword}\r\n                                    label=\"Branch admin password\"\r\n                                />\r\n                                <Button onClick={signUp} primary submit>\r\n                                    Create Branch\r\n                                </Button>\r\n                            </FormLayout>\r\n                        </Form>\r\n                    )}\r\n                    {formType === 'confirm' && (\r\n                        <Form>\r\n                            <FormLayout>\r\n                                <TextField\r\n                                    value={username}\r\n                                    onChange={onChangeUsername}\r\n                                    label=\"Branch admin username\"\r\n                                />\r\n                                <TextField\r\n                                    value={code}\r\n                                    onChange={onChangeCode}\r\n                                    label=\"Confirmation code\"\r\n                                />\r\n                                <Button onClick={confirm} primary submit>\r\n                                    Confirm\r\n                                </Button>\r\n                            </FormLayout>\r\n                        </Form>\r\n                    )}\r\n                </Modal.Section>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BranchConsole\r\n"]},"metadata":{},"sourceType":"module"}