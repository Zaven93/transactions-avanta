{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport axios from 'axios';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { Modal, Thumbnail, Checkbox, TextStyle, TextField } from '@shopify/polaris';\nimport { Table, Header, Icon } from 'semantic-ui-react';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nimport { getBranchById } from '../graphql/queries';\nAPI.configure(config);\n\nconst BranchRow = ({\n  product,\n  state,\n  setState,\n  branchId,\n  branchInfo,\n  rowId,\n  setRowId\n}) => {\n  const {\n    0: fetchedProduct,\n    1: setFetchedProduct\n  } = useState({\n    description: product.node.description,\n    id: product.node.id,\n    image: product.node.images.edges[0] ? product.node.images.edges[0].node.originalSrc : '',\n    tags: product.node.tags,\n    title: product.node.title,\n    variants: {\n      id: product.node.variants.edges[0].node.id,\n      price: product.node.variants.edges[0].node.price\n    }\n  }); // const [branchInfo, setBranchInfo] = useState('')\n  // const [rowId, setRowId] = useState('')\n\n  const {\n    0: searchValue,\n    1: setSearchValue\n  } = useState(null);\n  const {\n    0: bonus,\n    1: setBonus\n  } = useState('');\n  const {\n    0: checked,\n    1: setChecked\n  } = useState(false);\n  const handleSearchInput = useCallback(newValue => setSearchValue(newValue), []);\n  const handleBonus = useCallback(value => {\n    setBonus(value);\n    fetchedProduct.tags = [value];\n    setFetchedProduct(fetchedProduct);\n  }, []);\n\n  const compareProduct = () => {\n    const comparedProduct = branchInfo.branchProducts.items.filter(branchProduct => branchProduct.productId === fetchedProduct.id);\n    console.log('Here is your compared product', comparedProduct);\n\n    if (!comparedProduct || comparedProduct === undefined) {\n      return;\n    }\n\n    setBonus(comparedProduct[0] ? comparedProduct[0].tags[0] : '');\n    return;\n  }; // const getBranch = async () => {\n  //     try {\n  //         const branch = await API.graphql(graphqlOperation(getBranchById, { id: branchId }))\n  //         setBranchInfo(branch.data.getBranch)\n  //         setRowId(\n  //             branch.data.getBranch.branchProducts.items\n  //                 .map((item) => item.productId)\n  //                 .filter((productId) => productId === fetchedProduct.id)[0]\n  //         )\n  //         setState({\n  //             products: [\n  //                 ...state.products,\n  //                 ...branch.data.getBranch.branchProducts.items.filter(\n  //                     (product) => product.productId === fetchedProduct.id\n  //                 )[0]\n  //             ]\n  //         })\n  //         compareProduct(branch.data.getBranch.branchProducts)\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // }\n\n\n  useEffect(() => {\n    console.log('Row id from useEffect', branchInfo.branchProducts.items.map(item => item.productId).filter(productId => productId === fetchedProduct.id)[0]); // setRowId([...rowId, branchInfo.branchProducts.items\n    //         .map((item) => item.productId)\n    //         .filter((productId) => productId === fetchedProduct.id)[0]])\n\n    compareProduct();\n  }, [product, branchInfo]);\n  console.log('Fetched product', fetchedProduct);\n  console.log('State from BranchRow', state);\n  console.log('Row id from BranchRow', rowId);\n  return __jsx(Table.Row, {\n    key: fetchedProduct.id\n  }, __jsx(Table.Cell, null, __jsx(Header, {\n    as: \"h4\",\n    image: true,\n    className: \"product-header\"\n  }, __jsx(Checkbox, {\n    checked: rowId.includes(fetchedProduct.id) && true,\n    onChange: () => {\n      if (rowId.includes(fetchedProduct.id)) {\n        setRowId(rowId.filter(id => id !== product.node.id));\n        setState({\n          products: state.products.filter(filteredProduct => {\n            filteredProduct.id !== fetchedProduct.id;\n          })\n        });\n      } else {\n        setRowId([...rowId, fetchedProduct.id]);\n        setState(_objectSpread(_objectSpread({}, state), {}, {\n          products: [...state.products, fetchedProduct]\n        }));\n      }\n    }\n  }), __jsx(Thumbnail, {\n    source: fetchedProduct.image,\n    size: \"small\",\n    alt: \"\"\n  }), __jsx(Header.Content, null, fetchedProduct.title))), __jsx(Table.Cell, {\n    textAlign: \"center\"\n  }, __jsx(TextStyle, {\n    variation: \"subdued\"\n  }, fetchedProduct.variants && toCurrency(fetchedProduct.variants.price))), __jsx(Table.Cell, null, __jsx(TextField, {\n    id: \"percentage-input\",\n    placeholder: \"Bonus Percentage\",\n    value: bonus,\n    onChange: handleBonus,\n    prefix: __jsx(Icon, {\n      name: \"percent\"\n    }),\n    disabled: !rowId\n  })));\n};\n\nexport default BranchRow;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/components/BranchRow.js"],"names":["React","useState","useCallback","useEffect","axios","API","graphqlOperation","gql","useQuery","Modal","Thumbnail","Checkbox","TextStyle","TextField","Table","Header","Icon","toCurrency","formatDate","config","getBranchById","configure","BranchRow","product","state","setState","branchId","branchInfo","rowId","setRowId","fetchedProduct","setFetchedProduct","description","node","id","image","images","edges","originalSrc","tags","title","variants","price","searchValue","setSearchValue","bonus","setBonus","checked","setChecked","handleSearchInput","newValue","handleBonus","value","compareProduct","comparedProduct","branchProducts","items","filter","branchProduct","productId","console","log","undefined","map","item","includes","products","filteredProduct"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { API, graphqlOperation } from 'aws-amplify'\r\nimport gql from 'graphql-tag'\r\nimport { useQuery } from '@apollo/client'\r\nimport { Modal, Thumbnail, Checkbox, TextStyle, TextField } from '@shopify/polaris'\r\nimport { Table, Header, Icon } from 'semantic-ui-react'\r\nimport { toCurrency, formatDate } from '../utils/helper'\r\nimport config from '../aws-exports'\r\nimport { getBranchById } from '../graphql/queries'\r\n\r\nAPI.configure(config)\r\n\r\nconst BranchRow = ({ product, state, setState, branchId, branchInfo, rowId, setRowId }) => {\r\n    const [fetchedProduct, setFetchedProduct] = useState({\r\n        description: product.node.description,\r\n        id: product.node.id,\r\n        image: product.node.images.edges[0] ? product.node.images.edges[0].node.originalSrc : '',\r\n        tags: product.node.tags,\r\n        title: product.node.title,\r\n        variants: {\r\n            id: product.node.variants.edges[0].node.id,\r\n            price: product.node.variants.edges[0].node.price\r\n        }\r\n    })\r\n    // const [branchInfo, setBranchInfo] = useState('')\r\n    // const [rowId, setRowId] = useState('')\r\n    const [searchValue, setSearchValue] = useState(null)\r\n    const [bonus, setBonus] = useState('')\r\n    const [checked, setChecked] = useState(false)\r\n    const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\r\n\r\n    const handleBonus = useCallback((value) => {\r\n        setBonus(value)\r\n        fetchedProduct.tags = [value]\r\n        setFetchedProduct(fetchedProduct)\r\n    }, [])\r\n\r\n    const compareProduct = () => {\r\n        const comparedProduct = branchInfo.branchProducts.items.filter(\r\n            (branchProduct) => branchProduct.productId === fetchedProduct.id\r\n        )\r\n\r\n        console.log('Here is your compared product', comparedProduct)\r\n\r\n        if (!comparedProduct || comparedProduct === undefined) {\r\n            return\r\n        }\r\n        setBonus(comparedProduct[0] ? comparedProduct[0].tags[0] : '')\r\n        return\r\n    }\r\n\r\n    // const getBranch = async () => {\r\n    //     try {\r\n    //         const branch = await API.graphql(graphqlOperation(getBranchById, { id: branchId }))\r\n    //         setBranchInfo(branch.data.getBranch)\r\n    //         setRowId(\r\n    //             branch.data.getBranch.branchProducts.items\r\n    //                 .map((item) => item.productId)\r\n    //                 .filter((productId) => productId === fetchedProduct.id)[0]\r\n    //         )\r\n    //         setState({\r\n    //             products: [\r\n    //                 ...state.products,\r\n    //                 ...branch.data.getBranch.branchProducts.items.filter(\r\n    //                     (product) => product.productId === fetchedProduct.id\r\n    //                 )[0]\r\n    //             ]\r\n    //         })\r\n    //         compareProduct(branch.data.getBranch.branchProducts)\r\n    //     } catch (error) {\r\n    //         console.log(error)\r\n    //     }\r\n    // }\r\n\r\n    useEffect(() => {\r\n        console.log(\r\n            'Row id from useEffect',\r\n            branchInfo.branchProducts.items\r\n                .map((item) => item.productId)\r\n                .filter((productId) => productId === fetchedProduct.id)[0]\r\n        )\r\n        // setRowId([...rowId, branchInfo.branchProducts.items\r\n        //         .map((item) => item.productId)\r\n        //         .filter((productId) => productId === fetchedProduct.id)[0]])\r\n        compareProduct()\r\n    }, [product, branchInfo])\r\n\r\n    console.log('Fetched product', fetchedProduct)\r\n    console.log('State from BranchRow', state)\r\n    console.log('Row id from BranchRow', rowId)\r\n\r\n    return (\r\n        <Table.Row key={fetchedProduct.id}>\r\n            <Table.Cell>\r\n                <Header as=\"h4\" image className=\"product-header\">\r\n                    <Checkbox\r\n                        checked={rowId.includes(fetchedProduct.id) && true}\r\n                        onChange={() => {\r\n                            if (rowId.includes(fetchedProduct.id)) {\r\n                                setRowId(rowId.filter((id) => id !== product.node.id))\r\n                                setState({\r\n                                    products: state.products.filter((filteredProduct) => {\r\n                                        filteredProduct.id !== fetchedProduct.id\r\n                                    })\r\n                                })\r\n                            } else {\r\n                                setRowId([...rowId, fetchedProduct.id])\r\n                                setState({\r\n                                    ...state,\r\n                                    products: [...state.products, fetchedProduct]\r\n                                })\r\n                            }\r\n                        }}\r\n                    />\r\n                    <Thumbnail source={fetchedProduct.image} size=\"small\" alt=\"\" />\r\n                    <Header.Content>{fetchedProduct.title}</Header.Content>\r\n                </Header>\r\n            </Table.Cell>\r\n            <Table.Cell textAlign=\"center\">\r\n                <TextStyle variation=\"subdued\">\r\n                    {fetchedProduct.variants && toCurrency(fetchedProduct.variants.price)}\r\n                </TextStyle>\r\n            </Table.Cell>\r\n            <Table.Cell>\r\n                <TextField\r\n                    id=\"percentage-input\"\r\n                    placeholder=\"Bonus Percentage\"\r\n                    value={bonus}\r\n                    onChange={handleBonus}\r\n                    prefix={<Icon name=\"percent\" />}\r\n                    disabled={!rowId}\r\n                />\r\n            </Table.Cell>\r\n        </Table.Row>\r\n    )\r\n}\r\n\r\nexport default BranchRow\r\n"]},"metadata":{},"sourceType":"module"}