{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport AWS from \"aws-sdk\";\nimport { Page, Button, Modal, Badge, Stack } from \"@shopify/polaris\";\nimport { Table, Popup, Header, Icon } from \"semantic-ui-react\";\nimport { useForm } from \"react-hook-form\";\nimport { useConfirmSignUp, useSignUp, useCreateBranch, useListBranches, useCheckBranchName } from \"../core/hooks\";\nimport ProductList from \"./ProductsList\";\nimport { formatDate } from \"../utils/helper\";\nimport BranchProducts from \"./BranchProducts\";\nimport BranchList from \"./BranchList\";\nimport AdminBranchInfo from \"./AdminBranchInfo\";\nimport { createBranch } from \"../graphql/mutation\";\nimport { listBranchs } from \"../graphql/queries\";\n\nvar BranchConsole = function BranchConsole(_ref) {\n  _s();\n\n  var updateUser = _ref.updateUser;\n\n  var _useState = useState(false),\n      active = _useState[0],\n      setActive = _useState[1];\n\n  var _useState2 = useState({\n    activeBranchName: false,\n    activeUsername: false,\n    activePassword: false,\n    activeEmail: false,\n    activeCode: false\n  }),\n      activeFields = _useState2[0],\n      setActiveFields = _useState2[1];\n\n  var _useState3 = useState(false),\n      activeBranchName = _useState3[0],\n      setActiveBranchName = _useState3[1];\n\n  var _useState4 = useState(false),\n      activeUsername = _useState4[0],\n      setActiveUsername = _useState4[1];\n\n  var _useState5 = useState(false),\n      activePassword = _useState5[0],\n      setActivePassword = _useState5[1];\n\n  var _useState6 = useState(false),\n      activeEmail = _useState6[0],\n      setActiveEmail = _useState6[1];\n\n  var _useState7 = useState(false),\n      activeCode = _useState7[0],\n      setActiveCode = _useState7[1];\n\n  var _useState8 = useState(\"\"),\n      branchName = _useState8[0],\n      setBranchName = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      username = _useState9[0],\n      setUsername = _useState9[1];\n\n  var _useState10 = useState(\"\"),\n      password = _useState10[0],\n      setPassword = _useState10[1];\n\n  var _useState11 = useState(false),\n      showPassword = _useState11[0],\n      setShowPassword = _useState11[1];\n\n  var _useState12 = useState(\"signUp\"),\n      formType = _useState12[0],\n      setFormType = _useState12[1];\n\n  var _useState13 = useState(null),\n      userSub = _useState13[0],\n      setUserSub = _useState13[1];\n\n  var _useState14 = useState(\"\"),\n      branches = _useState14[0],\n      setBranches = _useState14[1];\n\n  var _useState15 = useState(null),\n      branchId = _useState15[0],\n      setBranchId = _useState15[1];\n\n  var _useState16 = useState(),\n      confirmErrorMessage = _useState16[0],\n      setConfirmErrorMessage = _useState16[1];\n\n  var _useState17 = useState(\"\"),\n      signUpErrorMessage = _useState17[0],\n      setSignUpErrorMessage = _useState17[1];\n\n  var _useState18 = useState(\"\"),\n      checkBranchNameErrorMessage = _useState18[0],\n      setCheckBranchNameErrorMessage = _useState18[1];\n\n  var _useSignUp = useSignUp(),\n      signUserUp = _useSignUp.signUserUp,\n      signUpData = _useSignUp.data,\n      signUpError = _useSignUp.error;\n\n  var _useConfirmSignUp = useConfirmSignUp(),\n      confirmSignUp = _useConfirmSignUp.confirmSignUp,\n      confirmSignUpData = _useConfirmSignUp.data,\n      confirmSignUpError = _useConfirmSignUp.error;\n\n  var _useCreateBranch = useCreateBranch(),\n      createBranch = _useCreateBranch.createBranch,\n      createdBranch = _useCreateBranch.data,\n      createdBranchError = _useCreateBranch.error;\n\n  var _useListBranches = useListBranches(),\n      branchesData = _useListBranches.data,\n      listBranches = _useListBranches.refetch;\n\n  var _useCheckBranchName = useCheckBranchName(branchName),\n      branchByNameData = _useCheckBranchName.data,\n      getBranchByName = _useCheckBranchName.refetch;\n\n  var _useForm = useForm(),\n      handleSubmit = _useForm.handleSubmit,\n      errors = _useForm.errors,\n      register = _useForm.register,\n      reset = _useForm.reset,\n      getValues = _useForm.getValues;\n\n  var handleChange = function handleChange() {\n    setActive(!active);\n  };\n\n  var onSubmit = function onSubmit(e) {\n    e.preventDefault();\n    handleSubmit( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n        var username, password;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                username = data.username, password = data.password;\n                console.log(\"Submitted data\", data);\n                getBranchByName(); // try {\n                //   await getBranchByName()\n                //   if (branchByNameData && branchByNameData.data.branchByName.items.length > 0) {\n                //     setCheckBranchNameErrorMessage(\"Branch with such a name already exists\")\n                //     return\n                //   } else {\n                //     await signUserUp({ username, password })\n                //   }\n                //   // await signUserUp({ username, password })\n                //   if (signUpData === undefined && signUpError.code === \"UsernameExistsException\") {\n                //     setSignUpErrorMessage(\"Branch with such a username already exists\")\n                //     return\n                //   } else {\n                //     await createBranch({ userSub, username, branchName })\n                //     setActiveFields((activeFields) => {\n                //       for (let key in activeFields) {\n                //         if (activeFields.hasOwnProperty(key)) {\n                //           activeFields[key] = false\n                //         }\n                //       }\n                //       return activeFields\n                //     })\n                //     handleChange()\n                //     reset()\n                //   }\n                // await createBranch({ userSub, username, branchName })\n                // setActiveFields((activeFields) => {\n                //   for (let key in activeFields) {\n                //     if (activeFields.hasOwnProperty(key)) {\n                //       activeFields[key] = false\n                //     }\n                //   }\n                //   return activeFields\n                // })\n                // handleChange()\n                // reset()\n                // } catch (error) {\n                //   console.log(error)\n                // }\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }())(e);\n  };\n\n  useEffect(function () {\n    if (branchByNameData && branchByNameData.data.branchByName.items.length > 0) {\n      setCheckBranchNameErrorMessage(\"Branch with such a name already exists\");\n      return;\n    }\n\n    var _getValues = getValues(),\n        username = _getValues.username,\n        password = _getValues.password;\n\n    signUserUp({\n      username: username,\n      password: password\n    });\n  }, [branchByNameData]);\n  useEffect(function () {\n    if (!signUpError) {\n      return;\n    }\n\n    if (signUpData === undefined && signUpError.code === \"UsernameExistsException\") {\n      setSignUpErrorMessage(\"Branch with such a username already exists\");\n      return;\n    }\n\n    var _getValues2 = getValues(),\n        username = _getValues2.username;\n\n    createBranch({\n      userSub: userSub,\n      username: username,\n      branchName: branchName\n    });\n    setActiveFields(function (activeFields) {\n      for (var key in activeFields) {\n        if (activeFields.hasOwnProperty(key)) {\n          activeFields[key] = false;\n        }\n      }\n\n      return activeFields;\n    });\n    handleChange();\n    reset();\n  }, [signUpData, signUpError]);\n  useEffect(function () {\n    setUserSub(signUpData && signUpData.userSub);\n  }, [signUpData]);\n  useEffect(function () {\n    listBranches();\n  }, []);\n  useEffect(function () {\n    setBranches(branchesData && branchesData.data);\n  }, [branchesData]);\n  console.log(\"Sign up error data\", signUpError);\n  console.log(\"Sign up data\", signUpData);\n  console.log(\"Branch name Data\", branchByNameData);\n  console.log(\"Form values\", getValues());\n  return __jsx(React.Fragment, null, branchId && __jsx(AdminBranchInfo, {\n    setBranchId: setBranchId,\n    branchId: branchId\n  }), !branchId && __jsx(React.Fragment, null, __jsx(Stack, null, __jsx(Stack.Item, {\n    fill: true\n  }, __jsx(Button, {\n    onClick: handleChange,\n    primary: true\n  }, __jsx(Icon, {\n    name: \"code branch\"\n  }), \" Create branch\")), __jsx(Stack.Item, null, __jsx(Button, {\n    primary: true,\n    id: \"Logout\",\n    onClick: function onClick() {\n      Auth.signOut();\n      updateUser(null);\n    }\n  }, __jsx(Icon, {\n    name: \"sign out\"\n  }), \" Logout\"))), __jsx(BranchList, {\n    setBranchId: setBranchId\n  }), __jsx(Modal, {\n    open: active,\n    onClose: function onClose() {\n      handleChange();\n      setActiveFields(function (activeFields) {\n        for (var key in activeFields) {\n          if (activeFields.hasOwnProperty(key)) {\n            activeFields[key] = false;\n          }\n        }\n\n        return activeFields;\n      });\n      setFormType(\"signUp\");\n      setSignUpErrorMessage(\"\");\n      setCheckBranchNameErrorMessage(\"\");\n      reset();\n    },\n    title: \"Fill in Branch info\"\n  }, __jsx(Modal.Section, null, formType === \"signUp\" && __jsx(\"form\", {\n    onSubmit: onSubmit\n  }, __jsx(\"div\", {\n    className: \"form-controll\"\n  }, __jsx(\"input\", {\n    name: \"branchName\",\n    onChange: function onChange(e) {\n      setBranchName(e.target.value);\n      setCheckBranchNameErrorMessage(\"\");\n    },\n    ref: register({\n      required: \"Branch name is required!\"\n    }),\n    onBlur: function onBlur(e) {\n      if (e.target.value) {\n        return setActiveFields(_objectSpread(_objectSpread({}, activeFields), {}, {\n          activeBranchName: true\n        }));\n      }\n\n      return setActiveFields(_objectSpread(_objectSpread({}, activeFields), {}, {\n        activeBranchName: false\n      }));\n    }\n  }), __jsx(Icon, {\n    name: \"code branch\"\n  }), __jsx(\"label\", {\n    className: activeFields.activeBranchName ? \"active\" : \"\",\n    htmlFor: \"branchName\"\n  }, \"Branch Name\"), checkBranchNameErrorMessage && __jsx(\"p\", {\n    className: \"error-notification\"\n  }, checkBranchNameErrorMessage), !checkBranchNameErrorMessage && errors.branchName && __jsx(\"p\", {\n    className: \"error-notification\"\n  }, errors.branchName.message)), __jsx(\"div\", {\n    className: \"form-controll\"\n  }, __jsx(\"input\", {\n    name: \"username\",\n    onChange: function onChange(e) {\n      setUsername(e.target.value);\n      setSignUpErrorMessage(\"\");\n    },\n    ref: register({\n      required: \"Username is required!\"\n    }),\n    onBlur: function onBlur(e) {\n      if (e.target.value) {\n        return setActiveFields(_objectSpread(_objectSpread({}, activeFields), {}, {\n          activeUsername: true\n        }));\n      }\n\n      return setActiveFields(_objectSpread(_objectSpread({}, activeFields), {}, {\n        activeUsername: false\n      }));\n    }\n  }), __jsx(Icon, {\n    name: \"user\"\n  }), __jsx(\"label\", {\n    className: activeFields.activeUsername ? \"active\" : \"\",\n    htmlFor: \"username\"\n  }, \"Username\"), signUpErrorMessage && __jsx(\"p\", {\n    className: \"error-notification\"\n  }, signUpErrorMessage), !signUpErrorMessage && errors.username && __jsx(\"p\", {\n    className: \"error-notification\"\n  }, errors.username.message)), __jsx(\"div\", {\n    className: \"form-controll\"\n  }, __jsx(\"input\", {\n    name: \"password\",\n    type: showPassword ? \"text\" : \"password\",\n    ref: register({\n      required: \"Password is required!\",\n      minLength: {\n        value: 8,\n        message: \"Password must be at least 8 characters long\"\n      }\n    }),\n    onChange: function onChange(e) {\n      return setPassword(e.target.value);\n    },\n    onBlur: function onBlur(e) {\n      if (e.target.value) {\n        return setActiveFields(_objectSpread(_objectSpread({}, activeFields), {}, {\n          activePassword: true\n        }));\n      }\n\n      return setActiveFields(_objectSpread(_objectSpread({}, activeFields), {}, {\n        activePassword: false\n      }));\n    }\n  }), __jsx(Icon, {\n    name: \"lock\"\n  }), __jsx(\"label\", {\n    className: activeFields.activePassword ? \"active\" : \"\",\n    htmlFor: \"password\"\n  }, \"Password\"), __jsx(Icon, {\n    className: password ? \"show-eye\" : \"not-show-eye\",\n    onClick: function onClick() {\n      return setShowPassword(!showPassword);\n    },\n    name: showPassword ? \"eye slash\" : \"eye\",\n    style: {\n      color: showPassword ? \"#6774c8\" : \"\"\n    }\n  }), errors.password && __jsx(\"p\", {\n    className: \"error-notification\"\n  }, errors.password.message)), __jsx(Button, {\n    primary: true,\n    submit: true\n  }, __jsx(Icon, {\n    name: \"sign-in\"\n  }), \" Create Branch\"))))));\n};\n\n_s(BranchConsole, \"WJIK9eVLWS/DtojqqbTenjpd0CM=\", false, function () {\n  return [useSignUp, useConfirmSignUp, useCreateBranch, useListBranches, useCheckBranchName, useForm];\n});\n\n_c = BranchConsole;\nexport default BranchConsole;\n\nvar _c;\n\n$RefreshReg$(_c, \"BranchConsole\");","map":{"version":3,"sources":["/var/www/transactions-avanta/components/BranchConsole.js"],"names":["React","useState","useEffect","useRef","useCallback","AWS","Page","Button","Modal","Badge","Stack","Table","Popup","Header","Icon","useForm","useConfirmSignUp","useSignUp","useCreateBranch","useListBranches","useCheckBranchName","ProductList","formatDate","BranchProducts","BranchList","AdminBranchInfo","createBranch","listBranchs","BranchConsole","updateUser","active","setActive","activeBranchName","activeUsername","activePassword","activeEmail","activeCode","activeFields","setActiveFields","setActiveBranchName","setActiveUsername","setActivePassword","setActiveEmail","setActiveCode","branchName","setBranchName","username","setUsername","password","setPassword","showPassword","setShowPassword","formType","setFormType","userSub","setUserSub","branches","setBranches","branchId","setBranchId","confirmErrorMessage","setConfirmErrorMessage","signUpErrorMessage","setSignUpErrorMessage","checkBranchNameErrorMessage","setCheckBranchNameErrorMessage","signUserUp","signUpData","data","signUpError","error","confirmSignUp","confirmSignUpData","confirmSignUpError","createdBranch","createdBranchError","branchesData","listBranches","refetch","branchByNameData","getBranchByName","handleSubmit","errors","register","reset","getValues","handleChange","onSubmit","e","preventDefault","console","log","branchByName","items","length","undefined","code","key","hasOwnProperty","Auth","signOut","target","value","required","message","minLength","color"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from \"react\"\nimport AWS from \"aws-sdk\"\nimport { Page, Button, Modal, Badge, Stack } from \"@shopify/polaris\"\nimport { Table, Popup, Header, Icon } from \"semantic-ui-react\"\nimport { useForm } from \"react-hook-form\"\nimport {\n  useConfirmSignUp,\n  useSignUp,\n  useCreateBranch,\n  useListBranches,\n  useCheckBranchName,\n} from \"../core/hooks\"\nimport ProductList from \"./ProductsList\"\nimport { formatDate } from \"../utils/helper\"\nimport BranchProducts from \"./BranchProducts\"\nimport BranchList from \"./BranchList\"\nimport AdminBranchInfo from \"./AdminBranchInfo\"\nimport { createBranch } from \"../graphql/mutation\"\nimport { listBranchs } from \"../graphql/queries\"\n\nconst BranchConsole = ({ updateUser }) => {\n  const [active, setActive] = useState(false)\n  const [activeFields, setActiveFields] = useState({\n    activeBranchName: false,\n    activeUsername: false,\n    activePassword: false,\n    activeEmail: false,\n    activeCode: false,\n  })\n  const [activeBranchName, setActiveBranchName] = useState(false)\n  const [activeUsername, setActiveUsername] = useState(false)\n  const [activePassword, setActivePassword] = useState(false)\n  const [activeEmail, setActiveEmail] = useState(false)\n  const [activeCode, setActiveCode] = useState(false)\n  const [branchName, setBranchName] = useState(\"\")\n  const [username, setUsername] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [showPassword, setShowPassword] = useState(false)\n  const [formType, setFormType] = useState(\"signUp\")\n  const [userSub, setUserSub] = useState(null)\n  const [branches, setBranches] = useState(\"\")\n  const [branchId, setBranchId] = useState(null)\n  const [confirmErrorMessage, setConfirmErrorMessage] = useState()\n  const [signUpErrorMessage, setSignUpErrorMessage] = useState(\"\")\n  const [checkBranchNameErrorMessage, setCheckBranchNameErrorMessage] = useState(\"\")\n\n  const { signUserUp, data: signUpData, error: signUpError } = useSignUp()\n  const { confirmSignUp, data: confirmSignUpData, error: confirmSignUpError } = useConfirmSignUp()\n  const { createBranch, data: createdBranch, error: createdBranchError } = useCreateBranch()\n  const { data: branchesData, refetch: listBranches } = useListBranches()\n  const { data: branchByNameData, refetch: getBranchByName } = useCheckBranchName(branchName)\n  const { handleSubmit, errors, register, reset, getValues } = useForm()\n\n  const handleChange = () => {\n    setActive(!active)\n  }\n\n  const onSubmit = (e) => {\n    e.preventDefault()\n\n    handleSubmit(async (data) => {\n      const { username, password } = data\n\n      console.log(\"Submitted data\", data)\n\n      getBranchByName()\n\n      // try {\n      //   await getBranchByName()\n      //   if (branchByNameData && branchByNameData.data.branchByName.items.length > 0) {\n      //     setCheckBranchNameErrorMessage(\"Branch with such a name already exists\")\n      //     return\n      //   } else {\n      //     await signUserUp({ username, password })\n      //   }\n      //   // await signUserUp({ username, password })\n      //   if (signUpData === undefined && signUpError.code === \"UsernameExistsException\") {\n      //     setSignUpErrorMessage(\"Branch with such a username already exists\")\n      //     return\n      //   } else {\n      //     await createBranch({ userSub, username, branchName })\n      //     setActiveFields((activeFields) => {\n      //       for (let key in activeFields) {\n      //         if (activeFields.hasOwnProperty(key)) {\n      //           activeFields[key] = false\n      //         }\n      //       }\n      //       return activeFields\n      //     })\n      //     handleChange()\n      //     reset()\n      //   }\n      // await createBranch({ userSub, username, branchName })\n      // setActiveFields((activeFields) => {\n      //   for (let key in activeFields) {\n      //     if (activeFields.hasOwnProperty(key)) {\n      //       activeFields[key] = false\n      //     }\n      //   }\n      //   return activeFields\n      // })\n      // handleChange()\n      // reset()\n      // } catch (error) {\n      //   console.log(error)\n      // }\n    })(e)\n  }\n\n  useEffect(() => {\n    if (branchByNameData && branchByNameData.data.branchByName.items.length > 0) {\n      setCheckBranchNameErrorMessage(\"Branch with such a name already exists\")\n      return\n    }\n    const { username, password } = getValues()\n    signUserUp({ username, password })\n  }, [branchByNameData])\n\n  useEffect(() => {\n    if (!signUpError) {\n      return\n    }\n\n    if (signUpData === undefined && signUpError.code === \"UsernameExistsException\") {\n      setSignUpErrorMessage(\"Branch with such a username already exists\")\n      return\n    }\n    const { username } = getValues()\n    createBranch({ userSub, username, branchName })\n    setActiveFields((activeFields) => {\n      for (let key in activeFields) {\n        if (activeFields.hasOwnProperty(key)) {\n          activeFields[key] = false\n        }\n      }\n      return activeFields\n    })\n    handleChange()\n    reset()\n  }, [signUpData, signUpError])\n\n  useEffect(() => {\n    setUserSub(signUpData && signUpData.userSub)\n  }, [signUpData])\n\n  useEffect(() => {\n    listBranches()\n  }, [])\n\n  useEffect(() => {\n    setBranches(branchesData && branchesData.data)\n  }, [branchesData])\n\n  console.log(\"Sign up error data\", signUpError)\n  console.log(\"Sign up data\", signUpData)\n  console.log(\"Branch name Data\", branchByNameData)\n  console.log(\"Form values\", getValues())\n\n  return (\n    <>\n      {branchId && <AdminBranchInfo setBranchId={setBranchId} branchId={branchId} />}\n      {!branchId && (\n        <>\n          <Stack>\n            <Stack.Item fill>\n              <Button onClick={handleChange} primary>\n                <Icon name=\"code branch\" /> Create branch\n              </Button>\n            </Stack.Item>\n            <Stack.Item>\n              <Button\n                primary\n                id=\"Logout\"\n                onClick={() => {\n                  Auth.signOut()\n                  updateUser(null)\n                }}>\n                <Icon name=\"sign out\" /> Logout\n              </Button>\n            </Stack.Item>\n          </Stack>\n          <BranchList setBranchId={setBranchId} />\n          <Modal\n            open={active}\n            onClose={() => {\n              handleChange()\n              setActiveFields((activeFields) => {\n                for (let key in activeFields) {\n                  if (activeFields.hasOwnProperty(key)) {\n                    activeFields[key] = false\n                  }\n                }\n                return activeFields\n              })\n              setFormType(\"signUp\")\n              setSignUpErrorMessage(\"\")\n              setCheckBranchNameErrorMessage(\"\")\n              reset()\n            }}\n            title=\"Fill in Branch info\">\n            <Modal.Section>\n              {formType === \"signUp\" && (\n                <form onSubmit={onSubmit}>\n                  <div className=\"form-controll\">\n                    <input\n                      name=\"branchName\"\n                      onChange={(e) => {\n                        setBranchName(e.target.value)\n                        setCheckBranchNameErrorMessage(\"\")\n                      }}\n                      ref={register({ required: \"Branch name is required!\" })}\n                      onBlur={(e) => {\n                        if (e.target.value) {\n                          return setActiveFields({ ...activeFields, activeBranchName: true })\n                        }\n                        return setActiveFields({ ...activeFields, activeBranchName: false })\n                      }}\n                    />\n                    <Icon name=\"code branch\" />\n                    <label\n                      className={activeFields.activeBranchName ? \"active\" : \"\"}\n                      htmlFor=\"branchName\">\n                      Branch Name\n                    </label>\n                    {checkBranchNameErrorMessage && (\n                      <p className=\"error-notification\">{checkBranchNameErrorMessage}</p>\n                    )}\n                    {!checkBranchNameErrorMessage && errors.branchName && (\n                      <p className=\"error-notification\">{errors.branchName.message}</p>\n                    )}\n                  </div>\n                  <div className=\"form-controll\">\n                    <input\n                      name=\"username\"\n                      onChange={(e) => {\n                        setUsername(e.target.value)\n                        setSignUpErrorMessage(\"\")\n                      }}\n                      ref={register({ required: \"Username is required!\" })}\n                      onBlur={(e) => {\n                        if (e.target.value) {\n                          return setActiveFields({ ...activeFields, activeUsername: true })\n                        }\n                        return setActiveFields({ ...activeFields, activeUsername: false })\n                      }}\n                    />\n                    <Icon name=\"user\" />\n                    <label\n                      className={activeFields.activeUsername ? \"active\" : \"\"}\n                      htmlFor=\"username\">\n                      Username\n                    </label>\n                    {signUpErrorMessage && (\n                      <p className=\"error-notification\">{signUpErrorMessage}</p>\n                    )}\n                    {!signUpErrorMessage && errors.username && (\n                      <p className=\"error-notification\">{errors.username.message}</p>\n                    )}\n                  </div>\n                  {/* <div className=\"form-controll\">\n                    <input\n                      name=\"email\"\n                      ref={register({\n                        required: \"Email is required!\",\n                        pattern: {\n                          value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                          message: \"invalid email address\",\n                        },\n                      })}\n                      onBlur={(e) => {\n                        if (e.target.value) {\n                          return setActiveFields({ ...activeFields, activeEmail: true })\n                        }\n                        return setActiveFields({ ...activeFields, activeEmail: false })\n                      }}\n                    />\n                    <Icon name=\"mail\" />\n                    <label className={activeFields.activeEmail ? \"active\" : \"\"} htmlFor=\"email\">\n                      Email\n                    </label>\n                    {errors.email && <p className=\"error-notification\">{errors.email.message}</p>}\n                  </div> */}\n                  <div className=\"form-controll\">\n                    <input\n                      name=\"password\"\n                      type={showPassword ? \"text\" : \"password\"}\n                      ref={register({\n                        required: \"Password is required!\",\n                        minLength: {\n                          value: 8,\n                          message: \"Password must be at least 8 characters long\",\n                        },\n                      })}\n                      onChange={(e) => setPassword(e.target.value)}\n                      onBlur={(e) => {\n                        if (e.target.value) {\n                          return setActiveFields({ ...activeFields, activePassword: true })\n                        }\n                        return setActiveFields({ ...activeFields, activePassword: false })\n                      }}\n                    />\n                    <Icon name=\"lock\" />\n                    <label\n                      className={activeFields.activePassword ? \"active\" : \"\"}\n                      htmlFor=\"password\">\n                      Password\n                    </label>\n                    <Icon\n                      className={password ? \"show-eye\" : \"not-show-eye\"}\n                      onClick={() => setShowPassword(!showPassword)}\n                      name={showPassword ? \"eye slash\" : \"eye\"}\n                      style={{ color: showPassword ? \"#6774c8\" : \"\" }}\n                    />\n                    {errors.password && (\n                      <p className=\"error-notification\">{errors.password.message}</p>\n                    )}\n                  </div>\n                  <Button primary submit>\n                    <Icon name=\"sign-in\" /> Create Branch\n                  </Button>\n                </form>\n              )}\n              {/* {formType === \"confirm\" && (\n                <form onSubmit={handleSubmit(onConfirm)}>\n                  <div className=\"form-controll\">\n                    <input\n                      name=\"username\"\n                      value={username}\n                      onChange={(e) => setUsername(e.target.value)}\n                      ref={register({ required: \"Username is required!\" })}\n                      onBlur={(e) => {\n                        if (e.target.value) {\n                          return setActiveFields({ ...activeFields, activeUsername: true })\n                        }\n                        return setActiveFields({ ...activeFields, activeUsername: false })\n                      }}\n                    />\n                    <Icon name=\"user\" />\n                    <label\n                      className={activeFields.activeUsername ? \"active\" : \"\"}\n                      htmlFor=\"username\">\n                      Username\n                    </label>\n                    {errors.username && (\n                      <p className=\"error-notification\">{errors.username.message}</p>\n                    )}\n                  </div>\n                  <div className=\"form-controll\">\n                    <input\n                      name=\"code\"\n                      ref={register({ required: \"Confirm code is required!\" })}\n                      onChange={() => setConfirmErrorMessage(\"\")}\n                      onBlur={(e) => {\n                        if (e.target.value) {\n                          return setActiveFields({ ...activeFields, activeCode: true })\n                        }\n                        return setActiveFields({ ...activeFields, activeCode: false })\n                      }}\n                    />\n                    <Icon name=\"unlock alternate\" />\n                    <label className={activeFields.activeCode ? \"active\" : \"\"} htmlFor=\"code\">\n                      Confirm code\n                    </label>\n                    {!errors.code && confirmErrorMessage && (\n                      <p className=\"error-notification\">{confirmErrorMessage}</p>\n                    )}\n                    {errors.code && <p className=\"error-notification\">{errors.code.message}</p>}\n                  </div>\n                  <Button primary submit>\n                    <Icon name=\"sign-in\" /> Confirm\n                  </Button>\n                </form>\n              )} */}\n            </Modal.Section>\n          </Modal>\n        </>\n      )}\n    </>\n  )\n}\n\nexport default BranchConsole\n"]},"metadata":{},"sourceType":"module"}