{"ast":null,"code":"var _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport AWS from \"aws-sdk\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport { Button, Form } from \"@shopify/polaris\";\nimport { Table, Popup, Icon } from \"semantic-ui-react\";\nimport { useListBranches, useDeleteBranch } from \"../core/hooks\";\nimport { formatDate } from \"../utils/helper\";\nimport config from \"../aws-exports\";\nimport BranchProducts from \"./BranchProducts\";\nimport { listBranchs } from \"../graphql/queries\";\nimport { onCreateBranchSubscription, onDeleteBranchSubscription, onUpdateBranchSubscription } from \"../graphql/subscriptions\";\nimport { removeBranch, deleteTransaction, deleteBranchProduct, deletePaymentRequest } from \"../graphql/mutation\";\n\nvar BranchList = function BranchList(_ref) {\n  _s();\n\n  var setBranchId = _ref.setBranchId,\n      branchId = _ref.branchId;\n\n  var _useState = useState(false),\n      active = _useState[0],\n      setActive = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      branches = _useState2[0],\n      setBranches = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      branchName = _useState3[0],\n      setBranchName = _useState3[1];\n\n  var _useState4 = useState(\"\"),\n      productBranchId = _useState4[0],\n      setProductBranchId = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      newCreatedBranch = _useState5[0],\n      setNewCreatedBranch = _useState5[1];\n\n  var _useState6 = useState(\"\"),\n      updatedBranch = _useState6[0],\n      setUpdatedBranch = _useState6[1];\n\n  var _useListBranches = useListBranches(),\n      branchesData = _useListBranches.data,\n      fetchBranches = _useListBranches.refetch;\n\n  var _useDeleteBranch = useDeleteBranch(),\n      deleteBranch = _useDeleteBranch.deleteBranch,\n      isLoading = _useDeleteBranch.isLoading,\n      error = _useDeleteBranch.error,\n      data = _useDeleteBranch.data;\n\n  var handleChange = function handleChange() {\n    setActive(!active);\n  };\n\n  useEffect(function () {\n    fetchBranches();\n    var createListener = API.graphql(graphqlOperation(onCreateBranchSubscription)).subscribe({\n      next: function next(createdBranch) {\n        setNewCreatedBranch(createdBranch);\n      }\n    });\n    var deleteListener = API.graphql(graphqlOperation(onDeleteBranchSubscription)).subscribe({\n      next: function next(deletedBranch) {\n        setNewCreatedBranch(deletedBranch);\n      }\n    });\n    return function () {\n      createListener.unsubscribe();\n      deleteListener.unsubscribe();\n    };\n  }, [newCreatedBranch]);\n  useEffect(function () {\n    setBranches(branchesData && branchesData.data);\n    var updateBranchListener = API.graphql(graphqlOperation(onUpdateBranchSubscription)).subscribe({\n      next: function next(updated) {\n        return setUpdatedBranch(updated);\n      }\n    });\n  }, [branchesData, updatedBranch]);\n  console.log(\"Updated branch\", updatedBranch);\n  return __jsx(React.Fragment, null, __jsx(Table, {\n    selectable: true,\n    celled: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Branch Name\"), __jsx(Table.HeaderCell, {\n    textAlign: \"center\"\n  }, \"Created At\"), __jsx(Table.HeaderCell, {\n    textAlign: \"center\"\n  }, \"Actions\"))), __jsx(Table.Body, null, branches && branches.listBranchs.items.map(function (item) {\n    return __jsx(Table.Row, {\n      key: item.id\n    }, __jsx(Table.Cell, null, __jsx(Button, {\n      primary: true,\n      onClick: function onClick() {\n        setBranchId(item.id);\n      }\n    }, __jsx(Icon, {\n      name: \"code branch\"\n    }), \" \", item.branchName)), __jsx(Table.Cell, {\n      textAlign: \"center\"\n    }, formatDate(item.createdAt)), __jsx(Table.Cell, {\n      textAlign: \"center\",\n      className: \"branch-actions\"\n    }, __jsx(Popup, {\n      content: \"Edit branch\",\n      trigger: __jsx(Icon, {\n        onClick: function onClick() {\n          setProductBranchId(item.id);\n          setBranchName(item.branchName);\n          handleChange();\n        },\n        className: \"edit-branch\",\n        name: \"edit outline\"\n      })\n    }), __jsx(Popup, {\n      content: \"Delete Branch\",\n      trigger: __jsx(Icon, {\n        className: \"remove-branch\",\n        name: \"trash alternate\",\n        onClick: function onClick() {\n          deleteBranch({\n            branches: branches,\n            username: item.branchUsername,\n            id: item.id\n          });\n        }\n      })\n    })));\n  }))), __jsx(BranchProducts, {\n    branchName: branchName,\n    branchId: productBranchId,\n    active: active,\n    handleChange: handleChange\n  }));\n};\n\n_s(BranchList, \"hfxkF6rBdAot7q7V2OUb1SJ3T2U=\", false, function () {\n  return [useListBranches, useDeleteBranch];\n});\n\n_c = BranchList;\nexport default BranchList;\n\nvar _c;\n\n$RefreshReg$(_c, \"BranchList\");","map":{"version":3,"sources":["/var/www/transactions-avanta/components/BranchList.js"],"names":["React","useState","useEffect","AWS","API","graphqlOperation","Button","Form","Table","Popup","Icon","useListBranches","useDeleteBranch","formatDate","config","BranchProducts","listBranchs","onCreateBranchSubscription","onDeleteBranchSubscription","onUpdateBranchSubscription","removeBranch","deleteTransaction","deleteBranchProduct","deletePaymentRequest","BranchList","setBranchId","branchId","active","setActive","branches","setBranches","branchName","setBranchName","productBranchId","setProductBranchId","newCreatedBranch","setNewCreatedBranch","updatedBranch","setUpdatedBranch","branchesData","data","fetchBranches","refetch","deleteBranch","isLoading","error","handleChange","createListener","graphql","subscribe","next","createdBranch","deleteListener","deletedBranch","unsubscribe","updateBranchListener","updated","console","log","items","map","item","id","createdAt","username","branchUsername"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport AWS from \"aws-sdk\"\nimport { API, graphqlOperation } from \"aws-amplify\"\nimport { Button, Form } from \"@shopify/polaris\"\nimport { Table, Popup, Icon } from \"semantic-ui-react\"\nimport { useListBranches, useDeleteBranch } from \"../core/hooks\"\nimport { formatDate } from \"../utils/helper\"\nimport config from \"../aws-exports\"\nimport BranchProducts from \"./BranchProducts\"\nimport { listBranchs } from \"../graphql/queries\"\nimport {\n  onCreateBranchSubscription,\n  onDeleteBranchSubscription,\n  onUpdateBranchSubscription,\n} from \"../graphql/subscriptions\"\nimport {\n  removeBranch,\n  deleteTransaction,\n  deleteBranchProduct,\n  deletePaymentRequest,\n} from \"../graphql/mutation\"\n\nconst BranchList = ({ setBranchId, branchId }) => {\n  const [active, setActive] = useState(false)\n  const [branches, setBranches] = useState(\"\")\n  const [branchName, setBranchName] = useState(\"\")\n  const [productBranchId, setProductBranchId] = useState(\"\")\n  const [newCreatedBranch, setNewCreatedBranch] = useState(\"\")\n  const [updatedBranch, setUpdatedBranch] = useState(\"\")\n\n  const { data: branchesData, refetch: fetchBranches } = useListBranches()\n  const { deleteBranch, isLoading, error, data } = useDeleteBranch()\n\n  const handleChange = () => {\n    setActive(!active)\n  }\n\n  useEffect(() => {\n    fetchBranches()\n\n    const createListener = API.graphql(graphqlOperation(onCreateBranchSubscription)).subscribe({\n      next: (createdBranch) => {\n        setNewCreatedBranch(createdBranch)\n      },\n    })\n\n    const deleteListener = API.graphql(graphqlOperation(onDeleteBranchSubscription)).subscribe({\n      next: (deletedBranch) => {\n        setNewCreatedBranch(deletedBranch)\n      },\n    })\n\n    return () => {\n      createListener.unsubscribe()\n      deleteListener.unsubscribe()\n    }\n  }, [newCreatedBranch])\n\n  useEffect(() => {\n    setBranches(branchesData && branchesData.data)\n\n    const updateBranchListener = API.graphql(\n      graphqlOperation(onUpdateBranchSubscription)\n    ).subscribe({\n      next: (updated) => setUpdatedBranch(updated),\n    })\n  }, [branchesData, updatedBranch])\n\n  console.log(\"Updated branch\", updatedBranch)\n\n  return (\n    <>\n      <Table selectable celled>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Branch Name</Table.HeaderCell>\n            <Table.HeaderCell textAlign=\"center\">Created At</Table.HeaderCell>\n            <Table.HeaderCell textAlign=\"center\">Actions</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {branches &&\n            branches.listBranchs.items.map((item) => (\n              <Table.Row key={item.id}>\n                <Table.Cell>\n                  <Button\n                    primary\n                    onClick={() => {\n                      setBranchId(item.id)\n                    }}>\n                    <Icon name=\"code branch\" /> {item.branchName}\n                  </Button>\n                </Table.Cell>\n                <Table.Cell textAlign=\"center\">{formatDate(item.createdAt)}</Table.Cell>\n                <Table.Cell textAlign=\"center\" className=\"branch-actions\">\n                  <Popup\n                    content=\"Edit branch\"\n                    trigger={\n                      <Icon\n                        onClick={() => {\n                          setProductBranchId(item.id)\n                          setBranchName(item.branchName)\n                          handleChange()\n                        }}\n                        className=\"edit-branch\"\n                        name=\"edit outline\"\n                      />\n                    }\n                  />\n                  <Popup\n                    content=\"Delete Branch\"\n                    trigger={\n                      <Icon\n                        className=\"remove-branch\"\n                        name=\"trash alternate\"\n                        onClick={() => {\n                          deleteBranch({\n                            branches,\n                            username: item.branchUsername,\n                            id: item.id,\n                          })\n                        }}\n                      />\n                    }\n                  />\n                </Table.Cell>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n      <BranchProducts\n        branchName={branchName}\n        branchId={productBranchId}\n        active={active}\n        handleChange={handleChange}\n      />\n    </>\n  )\n}\n\nexport default BranchList\n"]},"metadata":{},"sourceType":"module"}