{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    query Products {\\n        products(first: 100) {\\n            edges {\\n                node {\\n                    id\\n                    title\\n                    tags\\n                    description(truncateAt: 100)\\n                    variants(first: 1) {\\n                        edges {\\n                            node {\\n                                id\\n                                price\\n                            }\\n                        }\\n                    }\\n                    images(first: 1) {\\n                        edges {\\n                            node {\\n                                originalSrc\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    subscription paymentRequest {\\n        onCreatePaymentRequest {\\n            bonusAmount\\n            createdAt\\n            customerId\\n            orderId\\n            updatedAt\\n        }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query listTransactions($limit: Int, $nextToken: String) {\\n        listTransactions(limit: $limit, nextToken: $nextToken) {\\n            nextToken\\n            items {\\n                id\\n                totalPrice\\n                totalBonusAmount\\n                currency\\n                products {\\n                    id\\n                    title\\n                    bonusPercentage\\n                    priceAmount\\n                    priceCurrency\\n                    image\\n                }\\n                customer {\\n                    id\\n                    firstName\\n                    lastName\\n                    phone\\n                    email\\n                }\\n                createdAt\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport axios from 'axios';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport createApp from '@shopify/app-bridge';\nimport { Redirect, ResourcePicker } from '@shopify/app-bridge/actions';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { print } from 'graphql';\nimport { Card, DataTable, Button, Page, Pagination, TextField, ChoiceList, Filters, Icon, Stack } from '@shopify/polaris';\nimport { SearchMajorMonotone, TransactionMajorMonotone, BalanceMajorMonotone } from '@shopify/polaris-icons';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nAPI.configure(config);\nvar listTransactions = gql(_templateObject());\nvar paymentSubscription = gql(_templateObject2());\nvar listProducts = gql(_templateObject3());\n\nvar Index = function Index(_ref) {\n  _s();\n\n  var transactions = _ref.transactions;\n\n  var _useState = useState(null),\n      searchValue = _useState[0],\n      setSearchValue = _useState[1];\n\n  var _useState2 = useState(transactions.listTransactions.items),\n      transactionItems = _useState2[0],\n      setTransactionItems = _useState2[1];\n\n  var _useState3 = useState(transactions.listTransactions.nextToken),\n      nextPaginateToken = _useState3[0],\n      setNextPaginateToken = _useState3[1];\n\n  var _useState4 = useState([]),\n      previousPaginateTokens = _useState4[0],\n      setPreviousPaginateTokens = _useState4[1];\n\n  var handleSearchInput = useCallback(function (newValue) {\n    return setSearchValue(newValue);\n  }, []);\n  var app = createApp({\n    apiKey: '3b01063bac3031d13101100ef3e44fd5',\n    shopOrigin: 'transactions-avanta.myshopify.com'\n  });\n  var redirect = Redirect.create(app);\n\n  var paginateNext = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _data;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setPreviousPaginateTokens([].concat(_toConsumableArray(previousPaginateTokens), [nextPaginateToken]));\n              _context.prev = 1;\n              _context.next = 4;\n              return API.graphql(graphqlOperation(listTransactions, {\n                limit: 5,\n                nextToken: nextPaginateToken\n              }));\n\n            case 4:\n              _data = _context.sent;\n              console.log('Data from pagination', _data);\n              setTransactionItems(_data.data.listTransactions.items);\n              setNextPaginateToken(_data.data.listTransactions.nextToken);\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](1);\n              console.log(_context.t0);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 10]]);\n    }));\n\n    return function paginateNext() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var paginatePrevious = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var previousToken, _data2, _data3;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              previousToken = previousPaginateTokens[previousPaginateTokens.length === 1 ? 0 : previousPaginateTokens.length - 2];\n              setPreviousPaginateTokens(_toConsumableArray(previousPaginateTokens.slice(0, previousPaginateTokens.length - 1)));\n              _context2.prev = 2;\n\n              if (!(previousPaginateTokens.length === 1)) {\n                _context2.next = 11;\n                break;\n              }\n\n              _context2.next = 6;\n              return API.graphql(graphqlOperation(listTransactions, {\n                limit: 5\n              }));\n\n            case 6:\n              _data2 = _context2.sent;\n              setTransactionItems(_data2.data.listTransactions.items);\n              setNextPaginateToken(_data2.data.listTransactions.nextToken);\n              _context2.next = 16;\n              break;\n\n            case 11:\n              _context2.next = 13;\n              return API.graphql(graphqlOperation(listTransactions, {\n                limit: 5,\n                nextToken: previousToken\n              }));\n\n            case 13:\n              _data3 = _context2.sent;\n              setTransactionItems(_data3.data.listTransactions.items);\n              setNextPaginateToken(_data3.data.listTransactions.nextToken);\n\n            case 16:\n              _context2.next = 21;\n              break;\n\n            case 18:\n              _context2.prev = 18;\n              _context2.t0 = _context2[\"catch\"](2);\n              console.log(_context2.t0);\n\n            case 21:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[2, 18]]);\n    }));\n\n    return function paginatePrevious() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    var listener = API.graphql(graphqlOperation(paymentSubscription)).subscribe({\n      next: function next(paymentRequest) {\n        return console.log('Subscribed transaction', paymentRequest);\n      }\n    });\n    return function () {\n      return listener.unsubscribe();\n    };\n  }, []);\n\n  if (loading) {\n    return __jsx(\"div\", null, \"Loading from useQuery...\");\n  }\n\n  if (error) {\n    return __jsx(\"div\", null, \"Some error occured...\");\n  }\n\n  console.log('Here is data from useQuery', data);\n  return __jsx(Page, {\n    title: \"Transactions\"\n  }, __jsx(TextField, {\n    label: \"Search Product\",\n    value: searchValue,\n    onChange: handleSearchInput,\n    prefix: __jsx(Icon, {\n      source: SearchMajorMonotone\n    }),\n    placeholder: \"Search by Customer phone number\"\n  }), __jsx(Stack, null, __jsx(Stack.Item, {\n    fill: true\n  }, __jsx(Button, {\n    id: \"Accept-Payment\",\n    onClick: function onClick() {\n      return redirect.dispatch(Redirect.Action.ADMIN_PATH, '/apps/3b01063bac3031d13101100ef3e44fd5/accept-payment');\n    }\n  }, __jsx(Icon, {\n    source: BalanceMajorMonotone\n  }), \" Accept Payment\")), __jsx(Stack.Item, null, __jsx(Button, {\n    id: \"Create-Transaction\",\n    primary: true,\n    onClick: function onClick() {\n      return redirect.dispatch(Redirect.Action.REMOTE, {\n        url: 'https://dev.d3ivgpkzuz6hkr.amplifyapp.com',\n        newContext: true\n      });\n    }\n  }, __jsx(Icon, {\n    source: TransactionMajorMonotone\n  }), \" Create transaction\"))), transactionItems && __jsx(Card, null, __jsx(DataTable, {\n    columnContentTypes: ['text', 'text', 'text', 'text'],\n    headings: ['Customer phone number', 'TotalPrice', 'TotalBonusAmount', 'CreatedAt'],\n    rows: transactionItems && transactionItems.filter(function (transaction) {\n      if (searchValue == null) {\n        return transaction;\n      } else if (transaction.customer[0].phone.toLowerCase().includes(searchValue.toLowerCase())) {\n        return transaction;\n      }\n    }).map(function (transaction) {\n      return [__jsx(Button, {\n        primary: true,\n        onClick: function onClick() {\n          return redirect.dispatch(Redirect.Action.ADMIN_PATH, {\n            path: \"/customers/\".concat(transaction.customer[0].id),\n            newContext: true\n          });\n        }\n      }, transaction.customer[0].phone), toCurrency(Number(transaction.totalPrice)), toCurrency(Number(transaction.totalBonusAmount)), formatDate(transaction.createdAt)];\n    })\n  }), __jsx(Pagination, {\n    hasPrevious: previousPaginateTokens.length > 0,\n    onPrevious: paginatePrevious,\n    hasNext: nextPaginateToken,\n    onNext: paginateNext\n  })));\n};\n\n_s(Index, \"aB+wwBC5C+F4/3QbcgsVvxeLFF0=\");\n\n_c = Index;\nexport var __N_SSG = true;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/pages/index.js"],"names":["React","useState","useCallback","useEffect","axios","API","graphqlOperation","createApp","Redirect","ResourcePicker","Query","gql","print","Card","DataTable","Button","Page","Pagination","TextField","ChoiceList","Filters","Icon","Stack","SearchMajorMonotone","TransactionMajorMonotone","BalanceMajorMonotone","toCurrency","formatDate","config","configure","listTransactions","paymentSubscription","listProducts","Index","transactions","searchValue","setSearchValue","items","transactionItems","setTransactionItems","nextToken","nextPaginateToken","setNextPaginateToken","previousPaginateTokens","setPreviousPaginateTokens","handleSearchInput","newValue","app","apiKey","shopOrigin","redirect","create","paginateNext","graphql","limit","data","console","log","paginatePrevious","previousToken","length","slice","listener","subscribe","next","paymentRequest","unsubscribe","loading","error","dispatch","Action","ADMIN_PATH","REMOTE","url","newContext","filter","transaction","customer","phone","toLowerCase","includes","map","path","id","Number","totalPrice","totalBonusAmount","createdAt"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { API, graphqlOperation } from 'aws-amplify'\r\nimport createApp from '@shopify/app-bridge'\r\nimport { Redirect, ResourcePicker } from '@shopify/app-bridge/actions'\r\nimport { Query } from 'react-apollo'\r\nimport gql from 'graphql-tag'\r\nimport { print } from 'graphql'\r\nimport {\r\n    Card,\r\n    DataTable,\r\n    Button,\r\n    Page,\r\n    Pagination,\r\n    TextField,\r\n    ChoiceList,\r\n    Filters,\r\n    Icon,\r\n    Stack\r\n} from '@shopify/polaris'\r\nimport {\r\n    SearchMajorMonotone,\r\n    TransactionMajorMonotone,\r\n    BalanceMajorMonotone\r\n} from '@shopify/polaris-icons'\r\nimport { toCurrency, formatDate } from '../utils/helper'\r\nimport config from '../aws-exports'\r\n\r\nAPI.configure(config)\r\n\r\nconst listTransactions = gql`\r\n    query listTransactions($limit: Int, $nextToken: String) {\r\n        listTransactions(limit: $limit, nextToken: $nextToken) {\r\n            nextToken\r\n            items {\r\n                id\r\n                totalPrice\r\n                totalBonusAmount\r\n                currency\r\n                products {\r\n                    id\r\n                    title\r\n                    bonusPercentage\r\n                    priceAmount\r\n                    priceCurrency\r\n                    image\r\n                }\r\n                customer {\r\n                    id\r\n                    firstName\r\n                    lastName\r\n                    phone\r\n                    email\r\n                }\r\n                createdAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst paymentSubscription = gql`\r\n    subscription paymentRequest {\r\n        onCreatePaymentRequest {\r\n            bonusAmount\r\n            createdAt\r\n            customerId\r\n            orderId\r\n            updatedAt\r\n        }\r\n    }\r\n`\r\n\r\nconst listProducts = gql`\r\n    query Products {\r\n        products(first: 100) {\r\n            edges {\r\n                node {\r\n                    id\r\n                    title\r\n                    tags\r\n                    description(truncateAt: 100)\r\n                    variants(first: 1) {\r\n                        edges {\r\n                            node {\r\n                                id\r\n                                price\r\n                            }\r\n                        }\r\n                    }\r\n                    images(first: 1) {\r\n                        edges {\r\n                            node {\r\n                                originalSrc\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst Index = ({ transactions }) => {\r\n    const [searchValue, setSearchValue] = useState(null)\r\n    const [transactionItems, setTransactionItems] = useState(transactions.listTransactions.items)\r\n    const [nextPaginateToken, setNextPaginateToken] = useState(\r\n        transactions.listTransactions.nextToken\r\n    )\r\n    const [previousPaginateTokens, setPreviousPaginateTokens] = useState([])\r\n    const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\r\n\r\n    const app = createApp({\r\n        apiKey: '3b01063bac3031d13101100ef3e44fd5',\r\n        shopOrigin: 'transactions-avanta.myshopify.com'\r\n    })\r\n\r\n    const redirect = Redirect.create(app)\r\n\r\n    const paginateNext = async () => {\r\n        setPreviousPaginateTokens([...previousPaginateTokens, nextPaginateToken])\r\n        try {\r\n            const data = await API.graphql(\r\n                graphqlOperation(listTransactions, { limit: 5, nextToken: nextPaginateToken })\r\n            )\r\n\r\n            console.log('Data from pagination', data)\r\n            setTransactionItems(data.data.listTransactions.items)\r\n            setNextPaginateToken(data.data.listTransactions.nextToken)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    const paginatePrevious = async () => {\r\n        const previousToken =\r\n            previousPaginateTokens[\r\n                previousPaginateTokens.length === 1 ? 0 : previousPaginateTokens.length - 2\r\n            ]\r\n        setPreviousPaginateTokens([\r\n            ...previousPaginateTokens.slice(0, previousPaginateTokens.length - 1)\r\n        ])\r\n        try {\r\n            if (previousPaginateTokens.length === 1) {\r\n                const data = await API.graphql(graphqlOperation(listTransactions, { limit: 5 }))\r\n                setTransactionItems(data.data.listTransactions.items)\r\n                setNextPaginateToken(data.data.listTransactions.nextToken)\r\n            } else {\r\n                const data = await API.graphql(\r\n                    graphqlOperation(listTransactions, { limit: 5, nextToken: previousToken })\r\n                )\r\n                setTransactionItems(data.data.listTransactions.items)\r\n                setNextPaginateToken(data.data.listTransactions.nextToken)\r\n            }\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const listener = API.graphql(graphqlOperation(paymentSubscription)).subscribe({\r\n            next: (paymentRequest) => console.log('Subscribed transaction', paymentRequest)\r\n        })\r\n\r\n        return () => listener.unsubscribe()\r\n    }, [])\r\n\r\n    if (loading) {\r\n        return <div>Loading from useQuery...</div>\r\n    }\r\n\r\n    if (error) {\r\n        return <div>Some error occured...</div>\r\n    }\r\n\r\n    console.log('Here is data from useQuery', data)\r\n\r\n    return (\r\n        <Page title=\"Transactions\">\r\n            <TextField\r\n                label=\"Search Product\"\r\n                value={searchValue}\r\n                onChange={handleSearchInput}\r\n                prefix={<Icon source={SearchMajorMonotone} />}\r\n                placeholder=\"Search by Customer phone number\"\r\n            />\r\n            <Stack>\r\n                <Stack.Item fill>\r\n                    <Button\r\n                        id=\"Accept-Payment\"\r\n                        onClick={() =>\r\n                            redirect.dispatch(\r\n                                Redirect.Action.ADMIN_PATH,\r\n                                '/apps/3b01063bac3031d13101100ef3e44fd5/accept-payment'\r\n                            )\r\n                        }>\r\n                        <Icon source={BalanceMajorMonotone} /> Accept Payment\r\n                    </Button>\r\n                </Stack.Item>\r\n                <Stack.Item>\r\n                    <Button\r\n                        id=\"Create-Transaction\"\r\n                        primary\r\n                        onClick={() =>\r\n                            redirect.dispatch(Redirect.Action.REMOTE, {\r\n                                url: 'https://dev.d3ivgpkzuz6hkr.amplifyapp.com',\r\n                                newContext: true\r\n                            })\r\n                        }>\r\n                        <Icon source={TransactionMajorMonotone} /> Create transaction\r\n                    </Button>\r\n                </Stack.Item>\r\n            </Stack>\r\n            {transactionItems && (\r\n                <Card>\r\n                    <DataTable\r\n                        columnContentTypes={['text', 'text', 'text', 'text']}\r\n                        headings={[\r\n                            'Customer phone number',\r\n                            'TotalPrice',\r\n                            'TotalBonusAmount',\r\n                            'CreatedAt'\r\n                        ]}\r\n                        rows={\r\n                            transactionItems &&\r\n                            transactionItems\r\n                                .filter((transaction) => {\r\n                                    if (searchValue == null) {\r\n                                        return transaction\r\n                                    } else if (\r\n                                        transaction.customer[0].phone\r\n                                            .toLowerCase()\r\n                                            .includes(searchValue.toLowerCase())\r\n                                    ) {\r\n                                        return transaction\r\n                                    }\r\n                                })\r\n                                .map((transaction) => [\r\n                                    <Button\r\n                                        primary\r\n                                        onClick={() =>\r\n                                            redirect.dispatch(Redirect.Action.ADMIN_PATH, {\r\n                                                path: `/customers/${transaction.customer[0].id}`,\r\n                                                newContext: true\r\n                                            })\r\n                                        }>\r\n                                        {transaction.customer[0].phone}\r\n                                    </Button>,\r\n                                    toCurrency(Number(transaction.totalPrice)),\r\n                                    toCurrency(Number(transaction.totalBonusAmount)),\r\n                                    formatDate(transaction.createdAt)\r\n                                ])\r\n                        }\r\n                    />\r\n                    <Pagination\r\n                        hasPrevious={previousPaginateTokens.length > 0}\r\n                        onPrevious={paginatePrevious}\r\n                        hasNext={nextPaginateToken}\r\n                        onNext={paginateNext}\r\n                    />\r\n                </Card>\r\n            )}\r\n        </Page>\r\n    )\r\n}\r\n\r\nexport async function getStaticProps() {\r\n    let result\r\n    try {\r\n        result = await API.graphql(graphqlOperation(listTransactions, { limit: 5 }))\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n\r\n    if (result.errors) {\r\n        console.warn('Failed to fetch transactions.', result.errors)\r\n        return { props: { transactions: [] } }\r\n    }\r\n    if (result.data !== null) {\r\n        return { props: { transactions: result.data } }\r\n    }\r\n}\r\n\r\nexport default Index\r\n"]},"metadata":{},"sourceType":"module"}