{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport axios from 'axios';\nimport gql from 'graphql-tag';\nimport { print } from 'graphql';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { Page, Badge, Avatar, TextStyle, Card, TextContainer, Modal, Checkbox, Thumbnail, Toast, Frame, Button, Tabs } from '@shopify/polaris';\nimport { CustomersMajorMonotone } from '@shopify/polaris-icons';\nimport { Table, Icon, Popup, Header } from 'semantic-ui-react';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nimport ProductList from '../components/ProductsList';\nimport AcceptedPaymentRequest from '../components/AcceptedPaymentRequest';\nimport PendingPaymentRequest from '../components/PendingPaymentRequest';\nimport DeclinedPaymentRequest from '../components/DeclinedPaymentRequest';\nAPI.configure(config);\nconst listPaymentRequest = gql`\n    query listPaymentRequest {\n        listPaymentRequests {\n            items {\n                bonusAmount\n                createdAt\n                customerId\n                id\n                orderId\n                status\n                updatedAt\n            }\n        }\n    }\n`;\nconst listProducts = gql`\n    query Products {\n        products(first: 100) {\n            edges {\n                node {\n                    id\n                    title\n                    tags\n                    description(truncateAt: 100)\n                    variants(first: 1) {\n                        edges {\n                            node {\n                                id\n                                price\n                            }\n                        }\n                    }\n                    images(first: 1) {\n                        edges {\n                            node {\n                                originalSrc\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n`;\nconst createDraftOrder = gql`\n    mutation CreateOrder($input: DraftOrderInput!) {\n        draftOrderCreate(input: $input) {\n            draftOrder {\n                id\n                customer {\n                    id\n                }\n                email\n                lineItems(first: 10) {\n                    edges {\n                        node {\n                            title\n                            quantity\n                            originalUnitPrice\n                            variant {\n                                id\n                                price\n                                title\n                                product {\n                                    tags\n                                    title\n                                    images(first: 5) {\n                                        edges {\n                                            node {\n                                                originalSrc\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n`;\nconst completeOrder = gql`\n    mutation CompleteOrder($id: ID!) {\n        draftOrderComplete(id: $id, paymentPending: true) {\n            draftOrder {\n                customer {\n                    id\n                }\n                email\n                name\n            }\n        }\n    }\n`;\nconst onCreatePaymentSubscription = gql`\n    subscription onCreatePaymentSubscription {\n        onCreatePaymentRequest {\n            bonusAmount\n            createdAt\n            customerId\n            orderId\n            updatedAt\n        }\n    }\n`;\nconst onUpdatePaymentSubscription = gql`\n    subscription onUpdatePaymentRequest {\n        onUpdatePaymentRequest {\n            id\n            status\n        }\n    }\n`;\nconst onDeletePaymentSubscription = gql`\n    subscription onDeletePaymentRequest {\n        onDeletePaymentRequest {\n            id\n            status\n        }\n    }\n`;\nconst paymentSubscription = gql`\n    subscription paymentRequest {\n        onCreatePaymentRequest {\n            bonusAmount\n            createdAt\n            customerId\n            id\n            orderId\n            status\n            updatedAt\n        }\n    }\n`;\n\nconst AcceptPayment = () => {\n  // const [paymentRequestItems, setPaymentRequestItems] = useState(\n  //     paymentRequests.listPaymentRequests.items\n  // )\n  const {\n    0: openPicker,\n    1: setOpenPicker\n  } = useState(false);\n  const {\n    0: rowId,\n    1: setRowId\n  } = useState([]);\n  const {\n    0: searchValue,\n    1: setSearchValue\n  } = useState(null);\n  const {\n    0: activeToast,\n    1: setActiveToast\n  } = useState(false);\n  const {\n    0: selected,\n    1: setSelected\n  } = useState(0);\n  const {\n    0: createUpdatePaymentSubscription,\n    1: setCreateUpdatePaymentSubscription\n  } = useState('');\n  const handleTabChange = useCallback(selectedTabIndex => setSelected(selectedTabIndex), []);\n  const handleSearchInput = useCallback(newValue => setSearchValue(newValue), []);\n  useEffect(() => {\n    const listener = API.graphql(graphqlOperation(paymentSubscription)).subscribe({\n      next: paymentResponse => {\n        setCreateUpdatePaymentSubscription(paymentResponse);\n      }\n    });\n    const onUpdatePayment = API.graphql(graphqlOperation(onUpdatePaymentSubscription)).subscribe({\n      next: onUpdatePaymentResponse => {\n        setCreateUpdatePaymentSubscription(onUpdatePaymentResponse);\n      }\n    });\n    return () => {\n      listener.unsubscribe();\n      onUpdatePayment.unsubscribe();\n    };\n  }, []);\n  const tabs = [{\n    id: 'pending-payments',\n    content: 'Pending Payment Requests',\n    accessibilityLabel: 'Pending Requests',\n    panelID: 'pending-payments-content'\n  }, {\n    id: 'accepted-payments',\n    content: 'Accepted Payment Requests',\n    accessibilityLabel: 'Accepted Request',\n    panelID: 'accepted-payments-content'\n  }, {\n    id: 'declined-payments',\n    content: 'Declined Payment Requests',\n    accessibilityLabel: 'Declined Requests',\n    panelID: 'declined-payments-content'\n  }];\n  const toastMarkup = activeToast ? __jsx(Toast, {\n    content: \"Order has been successfully created\",\n    onDismiss: () => setActiveToast(false)\n  }) : null;\n\n  const renderPaymentRequest = selected => {\n    switch (selected) {\n      case 0:\n        return __jsx(PendingPaymentRequest, {\n          createUpdatePaymentSubscription: createUpdatePaymentSubscription\n        });\n\n      case 1:\n        return __jsx(AcceptedPaymentRequest, null);\n\n      case 2:\n        return __jsx(DeclinedPaymentRequest, null);\n\n      default:\n        return;\n    }\n  };\n\n  return __jsx(Frame, null, __jsx(Page, {\n    title: \"Payment Request\"\n  }, __jsx(Card, null, __jsx(Tabs, {\n    tabs: tabs,\n    selected: selected,\n    onSelect: handleTabChange\n  }, __jsx(Card.Section, {\n    title: tabs[selected].content\n  }, renderPaymentRequest(selected)))), toastMarkup));\n}; // export async function getStaticProps() {\n//     let result\n//     try {\n//         result = await API.graphql(graphqlOperation(listPaymentRequest))\n//     } catch (error) {\n//         console.log(error)\n//     }\n//     if (result.errors) {\n//         console.warn('Failed to fetch payment requests.', result.errors)\n//         return { props: { paymentRequests: [] } }\n//     }\n//     if (result.data !== null) {\n//         return {\n//             props: { paymentRequests: result.data }\n//         }\n//     }\n// }\n\n\nexport default AcceptPayment;","map":null,"metadata":{},"sourceType":"module"}