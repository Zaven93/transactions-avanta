{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport axios from 'axios';\nimport { Auth, API, graphqlOperation } from 'aws-amplify';\nimport createApp from '@shopify/app-bridge';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport gql from 'graphql-tag';\nimport { print } from 'graphql';\nimport { Card, DataTable, Button, Page, Pagination, TextField, ChoiceList, Filters, Icon, Stack } from '@shopify/polaris';\nimport { SearchMajorMonotone, TransactionMajorMonotone, BalanceMajorMonotone, LogOutMinor } from '@shopify/polaris-icons';\nimport { toCurrency, formatDate, extractNumbersFromString } from '../utils/helper';\nimport config from '../aws-exports';\nimport Login from '../components/Login';\nimport BranchConsole from '../components/BranchConsole';\nAPI.configure(config);\nconst branchByAdminId = gql`\n    query branchByAdminId($adminId: ID!) {\n        branchByAdminId(adminId: $adminId) {\n            items {\n                adminId\n                branchName\n                id\n                branchProducts {\n                    items {\n                        branchId\n                        createdAt\n                        id\n                        productId\n                        tags\n                    }\n                }\n            }\n        }\n    }\n`;\n\nconst BranchData = ({\n  user\n}) => {\n  const {\n    0: searchValue,\n    1: setSearchValue\n  } = useState(null);\n  const {\n    0: transactionItems,\n    1: setTransactionItems\n  } = useState(transactions.listTransactions.items);\n  const {\n    0: nextPaginateToken,\n    1: setNextPaginateToken\n  } = useState(transactions.listTransactions.nextToken);\n  const {\n    0: previousPaginateTokens,\n    1: setPreviousPaginateTokens\n  } = useState([]);\n  const handleSearchInput = useCallback(newValue => setSearchValue(newValue), []);\n  const app = createApp({\n    apiKey: '3b01063bac3031d13101100ef3e44fd5',\n    shopOrigin: 'transactions-avanta.myshopify.com'\n  });\n  const redirect = Redirect.create(app);\n\n  const paginateNext = async () => {\n    setPreviousPaginateTokens([...previousPaginateTokens, nextPaginateToken]);\n\n    try {\n      const data = await API.graphql(graphqlOperation(listTransactions, {\n        limit: 5,\n        nextToken: nextPaginateToken\n      }));\n      console.log('Data from pagination', data);\n      setTransactionItems(data.data.listTransactions.items);\n      setNextPaginateToken(data.data.listTransactions.nextToken);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const paginatePrevious = async () => {\n    const previousToken = previousPaginateTokens[previousPaginateTokens.length === 1 ? 0 : previousPaginateTokens.length - 2];\n    setPreviousPaginateTokens([...previousPaginateTokens.slice(0, previousPaginateTokens.length - 1)]);\n\n    try {\n      if (previousPaginateTokens.length === 1) {\n        const data = await API.graphql(graphqlOperation(listTransactions, {\n          limit: 5\n        }));\n        setTransactionItems(data.data.listTransactions.items);\n        setNextPaginateToken(data.data.listTransactions.nextToken);\n      } else {\n        const data = await API.graphql(graphqlOperation(listTransactions, {\n          limit: 5,\n          nextToken: previousToken\n        }));\n        setTransactionItems(data.data.listTransactions.items);\n        setNextPaginateToken(data.data.listTransactions.nextToken);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  console.log('Branch data user', user);\n  return __jsx(\"div\", null, \"Branch Data\")\n  /* <>\r\n              <TextField\r\n                  label=\"Search Product\"\r\n                  value={searchValue}\r\n                  onChange={handleSearchInput}\r\n                  prefix={<Icon source={SearchMajorMonotone} />}\r\n                  placeholder=\"Search by Customer phone number\"\r\n              />\r\n              <Stack>\r\n                  <Stack.Item fill>\r\n                      <Button\r\n                          id=\"Accept-Payment\"\r\n                          onClick={() =>\r\n                              redirect.dispatch(\r\n                                  Redirect.Action.ADMIN_PATH,\r\n                                  '/apps/3b01063bac3031d13101100ef3e44fd5/accept-payment'\r\n                              )\r\n                          }>\r\n                          <Icon source={BalanceMajorMonotone} /> Accept Payment\r\n                      </Button>\r\n                  </Stack.Item>\r\n                  <Stack.Item>\r\n                      <Button\r\n                          id=\"Create-Transaction\"\r\n                          primary\r\n                          onClick={() =>\r\n                              redirect.dispatch(Redirect.Action.REMOTE, {\r\n                                  // url: `https://dev.d3ivgpkzuz6hkr.amplifyapp.com?adminId=${user.attributes.sub}`,\r\n                                  url: `http://localhost:3001/transactions/${user.attributes.sub}`,\r\n                                  newContext: true\r\n                              })\r\n                          }>\r\n                          <Icon source={TransactionMajorMonotone} /> Create transaction\r\n                      </Button>\r\n                  </Stack.Item>\r\n                  <Stack.Item>\r\n                      <Button\r\n                          primary\r\n                          id=\"Logout\"\r\n                          onClick={() => {\r\n                              Auth.signOut()\r\n                              updateUser(null)\r\n                          }}>\r\n                          <Icon source={LogOutMinor} /> Logout\r\n                      </Button>\r\n                  </Stack.Item>\r\n              </Stack>\r\n              {transactionItems && (\r\n                  <Card>\r\n                      <DataTable\r\n                          columnContentTypes={['text', 'text', 'text', 'text']}\r\n                          headings={[\r\n                              'Customer phone number',\r\n                              'TotalPrice',\r\n                              'TotalBonusAmount',\r\n                              'Minus from Bonus Amount',\r\n                              'CreatedAt'\r\n                          ]}\r\n                          rows={\r\n                              transactionItems &&\r\n                              transactionItems\r\n                                  .filter((transaction) => {\r\n                                      if (searchValue == null) {\r\n                                          return transaction\r\n                                      } else if (\r\n                                          transaction.customer[0].phone\r\n                                              .toLowerCase()\r\n                                              .includes(searchValue.toLowerCase())\r\n                                      ) {\r\n                                          return transaction\r\n                                      }\r\n                                  })\r\n                                  .sort(\r\n                                      (a, b) => new Date(b.createdAt) - new Date(a.createdAt)\r\n                                  )\r\n                                  .map((transaction) => [\r\n                                      <Button\r\n                                          primary\r\n                                          onClick={() =>\r\n                                              redirect.dispatch(Redirect.Action.ADMIN_PATH, {\r\n                                                  path: `/customers/${transaction.customer[0].id}`,\r\n                                                  newContext: true\r\n                                              })\r\n                                          }>\r\n                                          {transaction.customer[0].phone}\r\n                                      </Button>,\r\n                                      toCurrency(Number(transaction.totalPrice)),\r\n                                      toCurrency(Number(transaction.totalBonusAmount)),\r\n                                      transaction.note === null\r\n                                          ? ''\r\n                                          : toCurrency(\r\n                                                extractNumbersFromString(transaction.note)\r\n                                            ),\r\n                                      formatDate(transaction.createdAt)\r\n                                  ])\r\n                          }\r\n                      />\r\n                      <Pagination\r\n                          hasPrevious={previousPaginateTokens.length > 0}\r\n                          onPrevious={paginatePrevious}\r\n                          hasNext={nextPaginateToken}\r\n                          onNext={paginateNext}\r\n                      />\r\n                  </Card>\r\n              )}\r\n          </> */\n  ;\n};\n\nexport default BranchData;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/components/BranchData.js"],"names":["React","useState","useCallback","useEffect","axios","Auth","API","graphqlOperation","createApp","Redirect","gql","print","Card","DataTable","Button","Page","Pagination","TextField","ChoiceList","Filters","Icon","Stack","SearchMajorMonotone","TransactionMajorMonotone","BalanceMajorMonotone","LogOutMinor","toCurrency","formatDate","extractNumbersFromString","config","Login","BranchConsole","configure","branchByAdminId","BranchData","user","searchValue","setSearchValue","transactionItems","setTransactionItems","transactions","listTransactions","items","nextPaginateToken","setNextPaginateToken","nextToken","previousPaginateTokens","setPreviousPaginateTokens","handleSearchInput","newValue","app","apiKey","shopOrigin","redirect","create","paginateNext","data","graphql","limit","console","log","error","paginatePrevious","previousToken","length","slice"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { Auth, API, graphqlOperation } from 'aws-amplify'\r\nimport createApp from '@shopify/app-bridge'\r\nimport { Redirect } from '@shopify/app-bridge/actions'\r\nimport gql from 'graphql-tag'\r\nimport { print } from 'graphql'\r\nimport {\r\n    Card,\r\n    DataTable,\r\n    Button,\r\n    Page,\r\n    Pagination,\r\n    TextField,\r\n    ChoiceList,\r\n    Filters,\r\n    Icon,\r\n    Stack\r\n} from '@shopify/polaris'\r\nimport {\r\n    SearchMajorMonotone,\r\n    TransactionMajorMonotone,\r\n    BalanceMajorMonotone,\r\n    LogOutMinor\r\n} from '@shopify/polaris-icons'\r\nimport { toCurrency, formatDate, extractNumbersFromString } from '../utils/helper'\r\nimport config from '../aws-exports'\r\nimport Login from '../components/Login'\r\nimport BranchConsole from '../components/BranchConsole'\r\n\r\nAPI.configure(config)\r\n\r\nconst branchByAdminId = gql`\r\n    query branchByAdminId($adminId: ID!) {\r\n        branchByAdminId(adminId: $adminId) {\r\n            items {\r\n                adminId\r\n                branchName\r\n                id\r\n                branchProducts {\r\n                    items {\r\n                        branchId\r\n                        createdAt\r\n                        id\r\n                        productId\r\n                        tags\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst BranchData = ({ user }) => {\r\n    const [searchValue, setSearchValue] = useState(null)\r\n    const [transactionItems, setTransactionItems] = useState(transactions.listTransactions.items)\r\n    const [nextPaginateToken, setNextPaginateToken] = useState(\r\n        transactions.listTransactions.nextToken\r\n    )\r\n    const [previousPaginateTokens, setPreviousPaginateTokens] = useState([])\r\n    const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\r\n\r\n    const app = createApp({\r\n        apiKey: '3b01063bac3031d13101100ef3e44fd5',\r\n        shopOrigin: 'transactions-avanta.myshopify.com'\r\n    })\r\n\r\n    const redirect = Redirect.create(app)\r\n\r\n    const paginateNext = async () => {\r\n        setPreviousPaginateTokens([...previousPaginateTokens, nextPaginateToken])\r\n        try {\r\n            const data = await API.graphql(\r\n                graphqlOperation(listTransactions, { limit: 5, nextToken: nextPaginateToken })\r\n            )\r\n\r\n            console.log('Data from pagination', data)\r\n            setTransactionItems(data.data.listTransactions.items)\r\n            setNextPaginateToken(data.data.listTransactions.nextToken)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    const paginatePrevious = async () => {\r\n        const previousToken =\r\n            previousPaginateTokens[\r\n                previousPaginateTokens.length === 1 ? 0 : previousPaginateTokens.length - 2\r\n            ]\r\n        setPreviousPaginateTokens([\r\n            ...previousPaginateTokens.slice(0, previousPaginateTokens.length - 1)\r\n        ])\r\n        try {\r\n            if (previousPaginateTokens.length === 1) {\r\n                const data = await API.graphql(graphqlOperation(listTransactions, { limit: 5 }))\r\n                setTransactionItems(data.data.listTransactions.items)\r\n                setNextPaginateToken(data.data.listTransactions.nextToken)\r\n            } else {\r\n                const data = await API.graphql(\r\n                    graphqlOperation(listTransactions, { limit: 5, nextToken: previousToken })\r\n                )\r\n                setTransactionItems(data.data.listTransactions.items)\r\n                setNextPaginateToken(data.data.listTransactions.nextToken)\r\n            }\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    console.log('Branch data user', user)\r\n\r\n    return (\r\n        <div>Branch Data</div>\r\n        /* <>\r\n                    <TextField\r\n                        label=\"Search Product\"\r\n                        value={searchValue}\r\n                        onChange={handleSearchInput}\r\n                        prefix={<Icon source={SearchMajorMonotone} />}\r\n                        placeholder=\"Search by Customer phone number\"\r\n                    />\r\n                    <Stack>\r\n                        <Stack.Item fill>\r\n                            <Button\r\n                                id=\"Accept-Payment\"\r\n                                onClick={() =>\r\n                                    redirect.dispatch(\r\n                                        Redirect.Action.ADMIN_PATH,\r\n                                        '/apps/3b01063bac3031d13101100ef3e44fd5/accept-payment'\r\n                                    )\r\n                                }>\r\n                                <Icon source={BalanceMajorMonotone} /> Accept Payment\r\n                            </Button>\r\n                        </Stack.Item>\r\n                        <Stack.Item>\r\n                            <Button\r\n                                id=\"Create-Transaction\"\r\n                                primary\r\n                                onClick={() =>\r\n                                    redirect.dispatch(Redirect.Action.REMOTE, {\r\n                                        // url: `https://dev.d3ivgpkzuz6hkr.amplifyapp.com?adminId=${user.attributes.sub}`,\r\n                                        url: `http://localhost:3001/transactions/${user.attributes.sub}`,\r\n                                        newContext: true\r\n                                    })\r\n                                }>\r\n                                <Icon source={TransactionMajorMonotone} /> Create transaction\r\n                            </Button>\r\n                        </Stack.Item>\r\n                        <Stack.Item>\r\n                            <Button\r\n                                primary\r\n                                id=\"Logout\"\r\n                                onClick={() => {\r\n                                    Auth.signOut()\r\n                                    updateUser(null)\r\n                                }}>\r\n                                <Icon source={LogOutMinor} /> Logout\r\n                            </Button>\r\n                        </Stack.Item>\r\n                    </Stack>\r\n                    {transactionItems && (\r\n                        <Card>\r\n                            <DataTable\r\n                                columnContentTypes={['text', 'text', 'text', 'text']}\r\n                                headings={[\r\n                                    'Customer phone number',\r\n                                    'TotalPrice',\r\n                                    'TotalBonusAmount',\r\n                                    'Minus from Bonus Amount',\r\n                                    'CreatedAt'\r\n                                ]}\r\n                                rows={\r\n                                    transactionItems &&\r\n                                    transactionItems\r\n                                        .filter((transaction) => {\r\n                                            if (searchValue == null) {\r\n                                                return transaction\r\n                                            } else if (\r\n                                                transaction.customer[0].phone\r\n                                                    .toLowerCase()\r\n                                                    .includes(searchValue.toLowerCase())\r\n                                            ) {\r\n                                                return transaction\r\n                                            }\r\n                                        })\r\n                                        .sort(\r\n                                            (a, b) => new Date(b.createdAt) - new Date(a.createdAt)\r\n                                        )\r\n                                        .map((transaction) => [\r\n                                            <Button\r\n                                                primary\r\n                                                onClick={() =>\r\n                                                    redirect.dispatch(Redirect.Action.ADMIN_PATH, {\r\n                                                        path: `/customers/${transaction.customer[0].id}`,\r\n                                                        newContext: true\r\n                                                    })\r\n                                                }>\r\n                                                {transaction.customer[0].phone}\r\n                                            </Button>,\r\n                                            toCurrency(Number(transaction.totalPrice)),\r\n                                            toCurrency(Number(transaction.totalBonusAmount)),\r\n                                            transaction.note === null\r\n                                                ? ''\r\n                                                : toCurrency(\r\n                                                      extractNumbersFromString(transaction.note)\r\n                                                  ),\r\n                                            formatDate(transaction.createdAt)\r\n                                        ])\r\n                                }\r\n                            />\r\n                            <Pagination\r\n                                hasPrevious={previousPaginateTokens.length > 0}\r\n                                onPrevious={paginatePrevious}\r\n                                hasNext={nextPaginateToken}\r\n                                onNext={paginateNext}\r\n                            />\r\n                        </Card>\r\n                    )}\r\n                </> */\r\n    )\r\n}\r\n\r\nexport default BranchData\r\n"]},"metadata":{},"sourceType":"module"}