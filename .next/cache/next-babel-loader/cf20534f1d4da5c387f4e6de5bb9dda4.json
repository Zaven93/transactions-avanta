{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport createApp from '@shopify/app-bridge';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { ClientApplication } from '@shopify/app-bridge';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport gql from 'graphql-tag';\nimport { Page, Button, Icon } from '@shopify/polaris';\nimport { TransactionMajorMonotone } from '@shopify/polaris-icons';\nimport config from '../../aws-exports';\nimport BranchContext from '../../context/branchContext';\nAPI.configure(config);\nconst getBranchById = gql`\n    query getBranch($id: ID!) {\n        getBranch(id: $id) {\n            branchName\n            adminId\n            id\n            branchProducts {\n                items {\n                    branchId\n                    createdAt\n                    id\n                    productId\n                    tags\n                    updatedAt\n                }\n            }\n        }\n    }\n`;\n\nconst Branch = () => {\n  const {\n    0: branchInfo,\n    1: setBranchInfo\n  } = useState('');\n\n  const getBranch = async () => {\n    try {\n      const branch = await API.graphql(graphqlOperation(getBranchById, {\n        id: localStorage.getItem('branchId')\n      }));\n      setBranchInfo(branch.data.getBranch);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    console.log('Localstorage branch id', localStorage.getItem('branchId'));\n    console.log('Localstorage branch id', typeof localStorage.getItem('branchId'));\n    getBranch();\n  }, []);\n  return __jsx(Page, {\n    title: branchInfo && branchInfo.branchName\n  });\n};\n\nexport default Branch;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/pages/branch/[branchId].js"],"names":["React","useState","useEffect","useRouter","createApp","Redirect","ClientApplication","API","graphqlOperation","gql","Page","Button","Icon","TransactionMajorMonotone","config","BranchContext","configure","getBranchById","Branch","branchInfo","setBranchInfo","getBranch","branch","graphql","id","localStorage","getItem","data","error","console","log","branchName"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,SAASC,QAAT,QAAyB,6BAAzB;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,SAASC,GAAT,EAAcC,gBAAd,QAAsC,aAAtC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,IAAvB,QAAmC,kBAAnC;AACA,SAASC,wBAAT,QAAyC,wBAAzC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AAEAR,GAAG,CAACS,SAAJ,CAAcF,MAAd;AAEA,MAAMG,aAAa,GAAGR,GAAI;;;;;;;;;;;;;;;;;;CAA1B;;AAoBA,MAAMS,MAAM,GAAG,MAAM;AACjB,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAA8BnB,QAAQ,CAAC,EAAD,CAA5C;;AAEA,QAAMoB,SAAS,GAAG,YAAY;AAC1B,QAAI;AACA,YAAMC,MAAM,GAAG,MAAMf,GAAG,CAACgB,OAAJ,CACjBf,gBAAgB,CAACS,aAAD,EAAgB;AAAEO,QAAAA,EAAE,EAAEC,YAAY,CAACC,OAAb,CAAqB,UAArB;AAAN,OAAhB,CADC,CAArB;AAGAN,MAAAA,aAAa,CAACE,MAAM,CAACK,IAAP,CAAYN,SAAb,CAAb;AACH,KALD,CAKE,OAAOO,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,GATD;;AAWA1B,EAAAA,SAAS,CAAC,MAAM;AACZ2B,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCL,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAtC;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsC,OAAOL,YAAY,CAACC,OAAb,CAAqB,UAArB,CAA7C;AACAL,IAAAA,SAAS;AACZ,GAJQ,EAIN,EAJM,CAAT;AAMA,SAAO,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEF,UAAU,IAAIA,UAAU,CAACY;AAAtC,IAAP;AACH,CArBD;;AAuBA,eAAeb,MAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport createApp from '@shopify/app-bridge'\r\nimport { Redirect } from '@shopify/app-bridge/actions'\r\nimport { ClientApplication } from '@shopify/app-bridge'\r\nimport { API, graphqlOperation } from 'aws-amplify'\r\nimport gql from 'graphql-tag'\r\nimport { Page, Button, Icon } from '@shopify/polaris'\r\nimport { TransactionMajorMonotone } from '@shopify/polaris-icons'\r\nimport config from '../../aws-exports'\r\nimport BranchContext from '../../context/branchContext'\r\n\r\nAPI.configure(config)\r\n\r\nconst getBranchById = gql`\r\n    query getBranch($id: ID!) {\r\n        getBranch(id: $id) {\r\n            branchName\r\n            adminId\r\n            id\r\n            branchProducts {\r\n                items {\r\n                    branchId\r\n                    createdAt\r\n                    id\r\n                    productId\r\n                    tags\r\n                    updatedAt\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst Branch = () => {\r\n    const [branchInfo, setBranchInfo] = useState('')\r\n\r\n    const getBranch = async () => {\r\n        try {\r\n            const branch = await API.graphql(\r\n                graphqlOperation(getBranchById, { id: localStorage.getItem('branchId') })\r\n            )\r\n            setBranchInfo(branch.data.getBranch)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log('Localstorage branch id', localStorage.getItem('branchId'))\r\n        console.log('Localstorage branch id', typeof localStorage.getItem('branchId'))\r\n        getBranch()\r\n    }, [])\r\n\r\n    return <Page title={branchInfo && branchInfo.branchName}></Page>\r\n}\r\n\r\nexport default Branch\r\n"]},"metadata":{},"sourceType":"module"}