{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport AWS from \"aws-sdk\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport { Button, Form } from \"@shopify/polaris\";\nimport { Table, Popup, Icon } from \"semantic-ui-react\";\nimport { formatDate } from \"../utils/helper\";\nimport config from \"../aws-exports\";\nimport BranchProducts from \"./BranchProducts\";\nimport { listBranchs } from \"../graphql/queries\";\nimport { onCreateBranchSubscription, onDeleteBranchSubscription } from \"../graphql/subscriptions\";\nimport { removeBranch, deleteTransaction, deleteBranchProduct, deletePaymentRequest } from \"../graphql/mutation\";\nAPI.configure(config);\nAWS.config.update({\n  accessKeyId: \"AKIA5VX4IMFOFTVY5X57\",\n  secretAccessKey: \"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\",\n  region: \"us-east-1\"\n});\nvar cognito = new AWS.CognitoIdentityServiceProvider();\n\nvar BranchList = function BranchList(_ref) {\n  _s();\n\n  var setBranchId = _ref.setBranchId,\n      branchId = _ref.branchId;\n\n  var _useState = useState(false),\n      active = _useState[0],\n      setActive = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      branches = _useState2[0],\n      setBranches = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      branchName = _useState3[0],\n      setBranchName = _useState3[1];\n\n  var _useState4 = useState(\"\"),\n      productBranchId = _useState4[0],\n      setProductBranchId = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      newCreatedBranch = _useState5[0],\n      setNewCreatedBranch = _useState5[1];\n\n  var handleChange = function handleChange() {\n    setActive(!active);\n  };\n\n  var fetchBranches = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var getBranches;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return API.graphql(graphqlOperation(listBranchs));\n\n            case 3:\n              getBranches = _context.sent;\n              setBranches(getBranches.data);\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 7]]);\n    }));\n\n    return function fetchBranches() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var deleteBranch = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id) {\n      var branchToDelete, transactionsToDelete, productsToDelete, paymentRequestToDelete, deletedBranch;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              branchToDelete = branches.listBranchs.items.filter(function (item) {\n                return item.id === id;\n              })[0];\n              transactionsToDelete = branchToDelete.transactions.items ? branchToDelete.transactions.items.map(function (transaction) {\n                return transaction.id;\n              }) : \"\";\n              productsToDelete = branchToDelete.branchProducts.items ? branchToDelete.branchProducts.items.map(function (product) {\n                return product.id;\n              }) : \"\";\n              paymentRequestToDelete = branchToDelete.branchPaymentRequests.items ? branchToDelete.branchPaymentRequests.items.map(function (paymentRequest) {\n                return paymentRequest.id;\n              }) : \"\";\n              _context2.prev = 4;\n              _context2.next = 7;\n              return API.graphql(graphqlOperation(removeBranch, {\n                input: {\n                  id: id\n                }\n              }));\n\n            case 7:\n              deletedBranch = _context2.sent;\n              _context2.next = 10;\n              return Promise.all(transactionsToDelete.map(function (transactionId) {\n                API.graphql(graphqlOperation(deleteTransaction, {\n                  input: {\n                    id: transactionId\n                  }\n                }));\n              }))[\"catch\"](function (err) {\n                return console.log(err);\n              });\n\n            case 10:\n              _context2.next = 12;\n              return Promise.all(productsToDelete.map(function (productId) {\n                API.graphql(graphqlOperation(deleteBranchProduct, {\n                  input: {\n                    id: productId\n                  }\n                }));\n              }))[\"catch\"](function (err) {\n                return console.log(err);\n              });\n\n            case 12:\n              _context2.next = 14;\n              return Promise.all(paymentRequestToDelete.map(function (paymentId) {\n                API.graphql(graphqlOperation(deletePaymentRequest, {\n                  input: {\n                    id: paymentId\n                  }\n                }));\n              }));\n\n            case 14:\n              _context2.next = 19;\n              break;\n\n            case 16:\n              _context2.prev = 16;\n              _context2.t0 = _context2[\"catch\"](4);\n              console.log(_context2.t0);\n\n            case 19:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[4, 16]]);\n    }));\n\n    return function deleteBranch(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var deleteUserFromCognito = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(username) {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return cognito.adminDeleteUser({\n                UserPoolId: \"us-east-1_IfrnnzGFR\",\n                Username: username\n              }).promise();\n\n            case 3:\n              _context3.next = 8;\n              break;\n\n            case 5:\n              _context3.prev = 5;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.log(_context3.t0);\n\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[0, 5]]);\n    }));\n\n    return function deleteUserFromCognito(_x2) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    fetchBranches();\n    var createListener = API.graphql(graphqlOperation(onCreateBranchSubscription)).subscribe({\n      next: function next(createdBranch) {\n        setNewCreatedBranch(createdBranch);\n      }\n    });\n    var deleteListener = API.graphql(graphqlOperation(onDeleteBranchSubscription)).subscribe({\n      next: function next(deletedBranch) {\n        setNewCreatedBranch(deletedBranch);\n      }\n    });\n    return function () {\n      createListener.unsubscribe();\n      deleteListener.unsubscribe();\n    };\n  }, [newCreatedBranch]);\n  return __jsx(React.Fragment, null, __jsx(Table, {\n    selectable: true,\n    celled: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Branch Name\"), __jsx(Table.HeaderCell, {\n    textAlign: \"center\"\n  }, \"Created At\"), __jsx(Table.HeaderCell, {\n    textAlign: \"center\"\n  }, \"Actions\"))), __jsx(Table.Body, null, branches && branches.listBranchs.items.map(function (item) {\n    return __jsx(Table.Row, {\n      key: item.id\n    }, __jsx(Table.Cell, null, __jsx(Button, {\n      primary: true,\n      onClick: function onClick() {\n        setBranchId(item.id);\n      }\n    }, __jsx(Icon, {\n      name: \"code branch\"\n    }), \" \", item.branchName)), __jsx(Table.Cell, {\n      textAlign: \"center\"\n    }, formatDate(item.createdAt)), __jsx(Table.Cell, {\n      textAlign: \"center\",\n      className: \"branch-actions\"\n    }, __jsx(Popup, {\n      content: \"Edit branch\",\n      trigger: __jsx(Icon, {\n        onClick: function onClick() {\n          setProductBranchId(item.id);\n          setBranchName(item.branchName);\n          handleChange();\n        },\n        className: \"edit-branch\",\n        name: \"edit outline\"\n      })\n    }), __jsx(Popup, {\n      content: \"Delete Branch\",\n      trigger: __jsx(Icon, {\n        className: \"remove-branch\",\n        name: \"trash alternate\",\n        onClick: function onClick() {\n          deleteBranch(item.id);\n          deleteUserFromCognito(item.branchUsername);\n        }\n      })\n    })));\n  }))), __jsx(BranchProducts, {\n    branchName: branchName,\n    branchId: productBranchId,\n    active: active,\n    handleChange: handleChange\n  }));\n};\n\n_s(BranchList, \"oLUDjR7KPbpwaDVXrguFKhSOWks=\");\n\n_c = BranchList;\nexport default BranchList;\n\nvar _c;\n\n$RefreshReg$(_c, \"BranchList\");","map":{"version":3,"sources":["/var/www/transactions-avanta/components/BranchList.js"],"names":["React","useState","useEffect","AWS","API","graphqlOperation","Button","Form","Table","Popup","Icon","formatDate","config","BranchProducts","listBranchs","onCreateBranchSubscription","onDeleteBranchSubscription","removeBranch","deleteTransaction","deleteBranchProduct","deletePaymentRequest","configure","update","accessKeyId","secretAccessKey","region","cognito","CognitoIdentityServiceProvider","BranchList","setBranchId","branchId","active","setActive","branches","setBranches","branchName","setBranchName","productBranchId","setProductBranchId","newCreatedBranch","setNewCreatedBranch","handleChange","fetchBranches","graphql","getBranches","data","console","log","deleteBranch","id","branchToDelete","items","filter","item","transactionsToDelete","transactions","map","transaction","productsToDelete","branchProducts","product","paymentRequestToDelete","branchPaymentRequests","paymentRequest","input","deletedBranch","Promise","all","transactionId","err","productId","paymentId","deleteUserFromCognito","username","adminDeleteUser","UserPoolId","Username","promise","createListener","subscribe","next","createdBranch","deleteListener","unsubscribe","createdAt","branchUsername"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport AWS from \"aws-sdk\"\nimport { API, graphqlOperation } from \"aws-amplify\"\nimport { Button, Form } from \"@shopify/polaris\"\nimport { Table, Popup, Icon } from \"semantic-ui-react\"\nimport { formatDate } from \"../utils/helper\"\nimport config from \"../aws-exports\"\nimport BranchProducts from \"./BranchProducts\"\nimport { listBranchs } from \"../graphql/queries\"\nimport { onCreateBranchSubscription, onDeleteBranchSubscription } from \"../graphql/subscriptions\"\nimport {\n  removeBranch,\n  deleteTransaction,\n  deleteBranchProduct,\n  deletePaymentRequest,\n} from \"../graphql/mutation\"\n\nAPI.configure(config)\n\nAWS.config.update({\n  accessKeyId: \"AKIA5VX4IMFOFTVY5X57\",\n  secretAccessKey: \"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\",\n  region: \"us-east-1\",\n})\n\nconst cognito = new AWS.CognitoIdentityServiceProvider()\n\nconst BranchList = ({ setBranchId, branchId }) => {\n  const [active, setActive] = useState(false)\n  const [branches, setBranches] = useState(\"\")\n  const [branchName, setBranchName] = useState(\"\")\n  const [productBranchId, setProductBranchId] = useState(\"\")\n  const [newCreatedBranch, setNewCreatedBranch] = useState(\"\")\n\n  const handleChange = () => {\n    setActive(!active)\n  }\n\n  const fetchBranches = async () => {\n    try {\n      const getBranches = await API.graphql(graphqlOperation(listBranchs))\n      setBranches(getBranches.data)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const deleteBranch = async (id) => {\n    const branchToDelete = branches.listBranchs.items.filter((item) => item.id === id)[0]\n\n    const transactionsToDelete = branchToDelete.transactions.items\n      ? branchToDelete.transactions.items.map((transaction) => transaction.id)\n      : \"\"\n\n    const productsToDelete = branchToDelete.branchProducts.items\n      ? branchToDelete.branchProducts.items.map((product) => product.id)\n      : \"\"\n\n    const paymentRequestToDelete = branchToDelete.branchPaymentRequests.items\n      ? branchToDelete.branchPaymentRequests.items.map((paymentRequest) => paymentRequest.id)\n      : \"\"\n\n    try {\n      const deletedBranch = await API.graphql(graphqlOperation(removeBranch, { input: { id } }))\n\n      await Promise.all(\n        transactionsToDelete.map((transactionId) => {\n          API.graphql(graphqlOperation(deleteTransaction, { input: { id: transactionId } }))\n        })\n      ).catch((err) => console.log(err))\n\n      await Promise.all(\n        productsToDelete.map((productId) => {\n          API.graphql(graphqlOperation(deleteBranchProduct, { input: { id: productId } }))\n        })\n      ).catch((err) => console.log(err))\n\n      await Promise.all(\n        paymentRequestToDelete.map((paymentId) => {\n          API.graphql(graphqlOperation(deletePaymentRequest, { input: { id: paymentId } }))\n        })\n      )\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const deleteUserFromCognito = async (username) => {\n    try {\n      await cognito\n        .adminDeleteUser({\n          UserPoolId: \"us-east-1_IfrnnzGFR\",\n          Username: username,\n        })\n        .promise()\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    fetchBranches()\n\n    const createListener = API.graphql(graphqlOperation(onCreateBranchSubscription)).subscribe({\n      next: (createdBranch) => {\n        setNewCreatedBranch(createdBranch)\n      },\n    })\n\n    const deleteListener = API.graphql(graphqlOperation(onDeleteBranchSubscription)).subscribe({\n      next: (deletedBranch) => {\n        setNewCreatedBranch(deletedBranch)\n      },\n    })\n\n    return () => {\n      createListener.unsubscribe()\n      deleteListener.unsubscribe()\n    }\n  }, [newCreatedBranch])\n\n  return (\n    <>\n      <Table selectable celled>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Branch Name</Table.HeaderCell>\n            <Table.HeaderCell textAlign=\"center\">Created At</Table.HeaderCell>\n            <Table.HeaderCell textAlign=\"center\">Actions</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {branches &&\n            branches.listBranchs.items.map((item) => (\n              <Table.Row key={item.id}>\n                <Table.Cell>\n                  <Button\n                    primary\n                    onClick={() => {\n                      setBranchId(item.id)\n                    }}>\n                    <Icon name=\"code branch\" /> {item.branchName}\n                  </Button>\n                </Table.Cell>\n                <Table.Cell textAlign=\"center\">{formatDate(item.createdAt)}</Table.Cell>\n                <Table.Cell textAlign=\"center\" className=\"branch-actions\">\n                  <Popup\n                    content=\"Edit branch\"\n                    trigger={\n                      <Icon\n                        onClick={() => {\n                          setProductBranchId(item.id)\n                          setBranchName(item.branchName)\n                          handleChange()\n                        }}\n                        className=\"edit-branch\"\n                        name=\"edit outline\"\n                      />\n                    }\n                  />\n                  <Popup\n                    content=\"Delete Branch\"\n                    trigger={\n                      <Icon\n                        className=\"remove-branch\"\n                        name=\"trash alternate\"\n                        onClick={() => {\n                          deleteBranch(item.id)\n                          deleteUserFromCognito(item.branchUsername)\n                        }}\n                      />\n                    }\n                  />\n                </Table.Cell>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n      <BranchProducts\n        branchName={branchName}\n        branchId={productBranchId}\n        active={active}\n        handleChange={handleChange}\n      />\n    </>\n  )\n}\n\nexport default BranchList\n"]},"metadata":{},"sourceType":"module"}