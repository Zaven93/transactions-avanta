{"ast":null,"code":"import AWS from \"aws-sdk\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { getBranchById, listBranchs, branchByAdminId } from \"../../graphql/queries\";\nimport { createBranch, removeBranch, deleteTransaction, deleteBranchProduct, deletePaymentRequest } from \"../../graphql/mutation\";\nimport config from \"../../aws-exports\";\nAWS.config.update({\n  accessKeyId: \"AKIA5VX4IMFOFHT7M2O2\",\n  secretAccessKey: \"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\",\n  region: \"us-east-1\"\n});\nconst cognito = new AWS.CognitoIdentityServiceProvider();\nexport const getBranch = (key, {\n  branchId\n}) => API.graphql(graphqlOperation(getBranchById, {\n  id: branchId\n}));\nexport const getBranchByAdmin = (key, {\n  adminId\n}) => API.graphql(graphqlOperation(branchByAdminId, {\n  adminId\n}));\nexport const createBranchEntity = ({\n  userSub,\n  username,\n  branchName\n}) => API.graphql(graphqlOperation(createBranch, {\n  input: {\n    adminId: userSub,\n    branchUsername: username,\n    branchName: branchName,\n    id: uuidv4()\n  }\n}));\nexport const listBranchEntities = key => API.graphql(graphqlOperation(listBranchs));\nexport const deleteBranch = async ({\n  branch,\n  username,\n  id\n}) => {\n  console.log(\"Branch data that should be deleted\", branch); // const branchToDelete = branches.listBranchs.items.filter((item) => item.id === id)[0]\n  // console.log(\"Branch to delete Zaven\", branchToDelete)\n  // const transactionsToDelete = branchToDelete.transactions.items\n  //   ? branchToDelete.transactions.items.map((transaction) => transaction.id)\n  //   : \"\"\n  // const productsToDelete = branchToDelete.branchProducts.items\n  //   ? branchToDelete.branchProducts.items.map((product) => product.id)\n  //   : \"\"\n  // const paymentRequestToDelete = branchToDelete.branchPaymentRequests.items\n  //   ? branchToDelete.branchPaymentRequests.items.map((paymentRequest) => paymentRequest.id)\n  //   : \"\"\n  // console.log(\"Transactions to Delete\", transactionsToDelete)\n  // console.log(\"Products to delete\", productsToDelete)\n  // console.log(\"PaymentRequests to delete\", paymentRequestToDelete)\n  // console.log(\"Username to delete\", username)\n  // try {\n  //   const deletedBranch = await API.graphql(graphqlOperation(removeBranch, { input: { id } }))\n  //   await Promise.all(\n  //     transactionsToDelete.map((transactionId) => {\n  //       API.graphql(graphqlOperation(deleteTransaction, { input: { id: transactionId } }))\n  //     })\n  //   ).catch((err) => console.log(err))\n  //   await Promise.all(\n  //     productsToDelete.map((productId) => {\n  //       API.graphql(graphqlOperation(deleteBranchProduct, { input: { id: productId } }))\n  //     })\n  //   ).catch((err) => console.log(err))\n  //   await Promise.all(\n  //     paymentRequestToDelete.map((paymentId) => {\n  //       API.graphql(graphqlOperation(deletePaymentRequest, { input: { id: paymentId } }))\n  //     })\n  //   )\n  //   await cognito\n  //     .adminDeleteUser({\n  //       UserPoolId: \"us-east-1_xuc7kseKp\",\n  //       Username: username,\n  //     })\n  //     .promise()\n  // } catch (error) {\n  //   console.log(error)\n  // }\n};","map":{"version":3,"sources":["/var/www/transactions-avanta/core/services/branch.service.js"],"names":["AWS","API","graphqlOperation","v4","uuidv4","getBranchById","listBranchs","branchByAdminId","createBranch","removeBranch","deleteTransaction","deleteBranchProduct","deletePaymentRequest","config","update","accessKeyId","secretAccessKey","region","cognito","CognitoIdentityServiceProvider","getBranch","key","branchId","graphql","id","getBranchByAdmin","adminId","createBranchEntity","userSub","username","branchName","input","branchUsername","listBranchEntities","deleteBranch","branch","console","log"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,SAAhB;AACA,SAASC,GAAT,EAAcC,gBAAd,QAAsC,aAAtC;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AACA,SAASC,aAAT,EAAwBC,WAAxB,EAAqCC,eAArC,QAA4D,uBAA5D;AACA,SACEC,YADF,EAEEC,YAFF,EAGEC,iBAHF,EAIEC,mBAJF,EAKEC,oBALF,QAMO,wBANP;AAOA,OAAOC,MAAP,MAAmB,mBAAnB;AAEAb,GAAG,CAACa,MAAJ,CAAWC,MAAX,CAAkB;AAChBC,EAAAA,WAAW,EAAE,sBADG;AAEhBC,EAAAA,eAAe,EAAE,0CAFD;AAGhBC,EAAAA,MAAM,EAAE;AAHQ,CAAlB;AAMA,MAAMC,OAAO,GAAG,IAAIlB,GAAG,CAACmB,8BAAR,EAAhB;AAEA,OAAO,MAAMC,SAAS,GAAG,CAACC,GAAD,EAAM;AAAEC,EAAAA;AAAF,CAAN,KACvBrB,GAAG,CAACsB,OAAJ,CAAYrB,gBAAgB,CAACG,aAAD,EAAgB;AAAEmB,EAAAA,EAAE,EAAEF;AAAN,CAAhB,CAA5B,CADK;AAGP,OAAO,MAAMG,gBAAgB,GAAG,CAACJ,GAAD,EAAM;AAAEK,EAAAA;AAAF,CAAN,KAC9BzB,GAAG,CAACsB,OAAJ,CAAYrB,gBAAgB,CAACK,eAAD,EAAkB;AAAEmB,EAAAA;AAAF,CAAlB,CAA5B,CADK;AAGP,OAAO,MAAMC,kBAAkB,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,QAAX;AAAqBC,EAAAA;AAArB,CAAD,KAChC7B,GAAG,CAACsB,OAAJ,CACErB,gBAAgB,CAACM,YAAD,EAAe;AAC7BuB,EAAAA,KAAK,EAAE;AACLL,IAAAA,OAAO,EAAEE,OADJ;AAELI,IAAAA,cAAc,EAAEH,QAFX;AAGLC,IAAAA,UAAU,EAAEA,UAHP;AAILN,IAAAA,EAAE,EAAEpB,MAAM;AAJL;AADsB,CAAf,CADlB,CADK;AAYP,OAAO,MAAM6B,kBAAkB,GAAIZ,GAAD,IAASpB,GAAG,CAACsB,OAAJ,CAAYrB,gBAAgB,CAACI,WAAD,CAA5B,CAApC;AAEP,OAAO,MAAM4B,YAAY,GAAG,OAAO;AAAEC,EAAAA,MAAF;AAAUN,EAAAA,QAAV;AAAoBL,EAAAA;AAApB,CAAP,KAAoC;AAC9DY,EAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ,EAAkDF,MAAlD,EAD8D,CAE9D;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CApDM","sourcesContent":["import AWS from \"aws-sdk\"\nimport { API, graphqlOperation } from \"aws-amplify\"\nimport { v4 as uuidv4 } from \"uuid\"\nimport { getBranchById, listBranchs, branchByAdminId } from \"../../graphql/queries\"\nimport {\n  createBranch,\n  removeBranch,\n  deleteTransaction,\n  deleteBranchProduct,\n  deletePaymentRequest,\n} from \"../../graphql/mutation\"\nimport config from \"../../aws-exports\"\n\nAWS.config.update({\n  accessKeyId: \"AKIA5VX4IMFOFHT7M2O2\",\n  secretAccessKey: \"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\",\n  region: \"us-east-1\",\n})\n\nconst cognito = new AWS.CognitoIdentityServiceProvider()\n\nexport const getBranch = (key, { branchId }) =>\n  API.graphql(graphqlOperation(getBranchById, { id: branchId }))\n\nexport const getBranchByAdmin = (key, { adminId }) =>\n  API.graphql(graphqlOperation(branchByAdminId, { adminId }))\n\nexport const createBranchEntity = ({ userSub, username, branchName }) =>\n  API.graphql(\n    graphqlOperation(createBranch, {\n      input: {\n        adminId: userSub,\n        branchUsername: username,\n        branchName: branchName,\n        id: uuidv4(),\n      },\n    })\n  )\n\nexport const listBranchEntities = (key) => API.graphql(graphqlOperation(listBranchs))\n\nexport const deleteBranch = async ({ branch, username, id }) => {\n  console.log(\"Branch data that should be deleted\", branch)\n  // const branchToDelete = branches.listBranchs.items.filter((item) => item.id === id)[0]\n\n  // console.log(\"Branch to delete Zaven\", branchToDelete)\n\n  // const transactionsToDelete = branchToDelete.transactions.items\n  //   ? branchToDelete.transactions.items.map((transaction) => transaction.id)\n  //   : \"\"\n\n  // const productsToDelete = branchToDelete.branchProducts.items\n  //   ? branchToDelete.branchProducts.items.map((product) => product.id)\n  //   : \"\"\n\n  // const paymentRequestToDelete = branchToDelete.branchPaymentRequests.items\n  //   ? branchToDelete.branchPaymentRequests.items.map((paymentRequest) => paymentRequest.id)\n  //   : \"\"\n\n  // console.log(\"Transactions to Delete\", transactionsToDelete)\n  // console.log(\"Products to delete\", productsToDelete)\n  // console.log(\"PaymentRequests to delete\", paymentRequestToDelete)\n  // console.log(\"Username to delete\", username)\n  // try {\n  //   const deletedBranch = await API.graphql(graphqlOperation(removeBranch, { input: { id } }))\n\n  //   await Promise.all(\n  //     transactionsToDelete.map((transactionId) => {\n  //       API.graphql(graphqlOperation(deleteTransaction, { input: { id: transactionId } }))\n  //     })\n  //   ).catch((err) => console.log(err))\n\n  //   await Promise.all(\n  //     productsToDelete.map((productId) => {\n  //       API.graphql(graphqlOperation(deleteBranchProduct, { input: { id: productId } }))\n  //     })\n  //   ).catch((err) => console.log(err))\n\n  //   await Promise.all(\n  //     paymentRequestToDelete.map((paymentId) => {\n  //       API.graphql(graphqlOperation(deletePaymentRequest, { input: { id: paymentId } }))\n  //     })\n  //   )\n\n  //   await cognito\n  //     .adminDeleteUser({\n  //       UserPoolId: \"us-east-1_xuc7kseKp\",\n  //       Username: username,\n  //     })\n  //     .promise()\n  // } catch (error) {\n  //   console.log(error)\n  // }\n}\n"]},"metadata":{},"sourceType":"module"}