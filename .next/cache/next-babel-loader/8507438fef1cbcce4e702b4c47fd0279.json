{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { Auth, API, graphqlOperation } from \"aws-amplify\";\nimport gql from \"graphql-tag\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { Page, Button, Modal, Form, FormLayout, TextField, Badge, Stack } from \"@shopify/polaris\";\nimport { Table, Popup, Header, Icon } from \"semantic-ui-react\";\nimport { useConfirmSignUp, useSignUp, useCreateBranch, useListBranches } from \"../core/hooks\";\nimport ProductList from \"./ProductsList\";\nimport { formatDate } from \"../utils/helper\";\nimport BranchProducts from \"./BranchProducts\";\nimport BranchList from \"./BranchList\";\nimport AdminBranchInfo from \"./AdminBranchInfo\";\nimport { createBranch } from \"../graphql/mutation\";\nimport { listBranchs } from \"../graphql/queries\";\n\nvar BranchConsole = function BranchConsole(_ref) {\n  _s();\n\n  var updateUser = _ref.updateUser;\n\n  var _useState = useState(false),\n      active = _useState[0],\n      setActive = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      branchName = _useState2[0],\n      setBranchName = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      username = _useState3[0],\n      setUsername = _useState3[1];\n\n  var _useState4 = useState(\"\"),\n      email = _useState4[0],\n      setEmail = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      password = _useState5[0],\n      setPassword = _useState5[1];\n\n  var _useState6 = useState(\"\"),\n      code = _useState6[0],\n      setCode = _useState6[1];\n\n  var _useState7 = useState(\"signUp\"),\n      formType = _useState7[0],\n      setFormType = _useState7[1];\n\n  var _useState8 = useState(null),\n      userSub = _useState8[0],\n      setUserSub = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      branches = _useState9[0],\n      setBranches = _useState9[1];\n\n  var _useState10 = useState(null),\n      branchId = _useState10[0],\n      setBranchId = _useState10[1];\n\n  var _useState11 = useState({\n    branchNameError: \"\"\n  }),\n      error = _useState11[0],\n      setError = _useState11[1];\n\n  var _useSignUp = useSignUp(),\n      signUserUp = _useSignUp.signUserUp,\n      data = _useSignUp.data;\n\n  var _useConfirmSignUp = useConfirmSignUp(),\n      confirmSignUp = _useConfirmSignUp.confirmSignUp;\n\n  var _useCreateBranch = useCreateBranch(),\n      createBranch = _useCreateBranch.createBranch,\n      createdBranch = _useCreateBranch.data;\n\n  var _useListBranches = useListBranches(),\n      branchesData = _useListBranches.data,\n      listBranches = _useListBranches.refetch;\n\n  var onChangeBranchName = useCallback(function (newValue) {\n    setError(_objectSpread(_objectSpread({}, state), {}, {\n      branchName: \"\"\n    }));\n    setBranchName(newValue);\n  }, []);\n  var onChangeUsername = useCallback(function (newValue) {\n    setUsername(newValue);\n  }, []);\n  var onChangePassword = useCallback(function (newValue) {\n    setPassword(newValue);\n  }, []);\n  var onChangeEmail = useCallback(function (newValue) {\n    setEmail(newValue);\n  }, []);\n  var onChangeCode = useCallback(function (newValue) {\n    setCode(newValue);\n  }, []);\n\n  var handleChange = function handleChange() {\n    setActive(!active);\n  };\n\n  var signUp = function signUp(e) {\n    e.preventDefault();\n\n    if (!branchName) {\n      setError(_objectSpread(_objectSpread({}, error), {}, {\n        branchNameError: \"Branch name is required!\"\n      }));\n      return;\n    }\n\n    try {\n      signUserUp({\n        username: username,\n        password: password,\n        attributes: {\n          email: email\n        }\n      });\n      setFormType(\"confirm\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(function () {\n    setUserSub(data && data.userSub);\n  }, [data]);\n\n  var confirm = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n\n              try {\n                confirmSignUp({\n                  username: username,\n                  code: code\n                });\n                createBranch({\n                  userSub: userSub,\n                  username: username,\n                  branchName: branchName\n                });\n                setFormType(\"signUp\");\n                handleChange();\n              } catch (error) {\n                console.log(error);\n              }\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function confirm(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    listBranches();\n  }, []);\n  useEffect(function () {\n    setBranches(branchesData && branchesData.data);\n  }, [branchesData]);\n  return __jsx(React.Fragment, null, branchId && __jsx(AdminBranchInfo, {\n    setBranchId: setBranchId,\n    branchId: branchId\n  }), !branchId && __jsx(React.Fragment, null, __jsx(Stack, null, __jsx(Stack.Item, {\n    fill: true\n  }, __jsx(Button, {\n    onClick: handleChange,\n    primary: true\n  }, __jsx(Icon, {\n    name: \"code branch\"\n  }), \" Create branch\")), __jsx(Stack.Item, null, __jsx(Button, {\n    primary: true,\n    id: \"Logout\",\n    onClick: function onClick() {\n      Auth.signOut();\n      updateUser(null);\n    }\n  }, __jsx(Icon, {\n    name: \"sign out\"\n  }), \" Logout\"))), __jsx(BranchList, {\n    setBranchId: setBranchId\n  }), __jsx(Modal, {\n    open: active,\n    onClose: handleChange,\n    title: \"Fill in Branch info\"\n  }, __jsx(Modal.Section, null, formType === \"signUp\" && __jsx(Form, {\n    onSubmit: signUp\n  }, __jsx(FormLayout, null, __jsx(TextField, {\n    value: branchName,\n    onChange: onChangeBranchName,\n    label: \"Branch Name\"\n  }), error.branchNameError && __jsx(\"p\", null, error.branchNameError), __jsx(TextField, {\n    value: username,\n    onChange: onChangeUsername,\n    label: \"Branch admin username\"\n  }), __jsx(TextField, {\n    value: email,\n    onChange: onChangeEmail,\n    label: \"Branch admin email\"\n  }), __jsx(TextField, {\n    type: \"password\",\n    value: password,\n    onChange: onChangePassword,\n    label: \"Branch admin password\"\n  }), __jsx(Button, {\n    primary: true,\n    submit: true\n  }, \"Create Branch\"))), formType === \"confirm\" && __jsx(Form, {\n    onSubmit: confirm\n  }, __jsx(FormLayout, null, __jsx(TextField, {\n    value: username,\n    onChange: onChangeUsername,\n    label: \"Branch admin username\"\n  }), __jsx(TextField, {\n    value: code,\n    onChange: onChangeCode,\n    label: \"Confirmation code\"\n  }), __jsx(Button, {\n    primary: true,\n    submit: true\n  }, \"Confirm\")))))));\n};\n\n_s(BranchConsole, \"0INIjJVVFS519wLttwMCZcUKF2A=\", false, function () {\n  return [useSignUp, useConfirmSignUp, useCreateBranch, useListBranches];\n});\n\n_c = BranchConsole;\nexport default BranchConsole;\n\nvar _c;\n\n$RefreshReg$(_c, \"BranchConsole\");","map":{"version":3,"sources":["/var/www/transactions-avanta/components/BranchConsole.js"],"names":["React","useState","useEffect","useRef","useCallback","Auth","API","graphqlOperation","gql","v4","uuidv4","Page","Button","Modal","Form","FormLayout","TextField","Badge","Stack","Table","Popup","Header","Icon","useConfirmSignUp","useSignUp","useCreateBranch","useListBranches","ProductList","formatDate","BranchProducts","BranchList","AdminBranchInfo","createBranch","listBranchs","BranchConsole","updateUser","active","setActive","branchName","setBranchName","username","setUsername","email","setEmail","password","setPassword","code","setCode","formType","setFormType","userSub","setUserSub","branches","setBranches","branchId","setBranchId","branchNameError","error","setError","signUserUp","data","confirmSignUp","createdBranch","branchesData","listBranches","refetch","onChangeBranchName","newValue","state","onChangeUsername","onChangePassword","onChangeEmail","onChangeCode","handleChange","signUp","e","preventDefault","attributes","console","log","confirm","signOut"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from \"react\"\nimport { Auth, API, graphqlOperation } from \"aws-amplify\"\nimport gql from \"graphql-tag\"\nimport { v4 as uuidv4 } from \"uuid\"\nimport { Page, Button, Modal, Form, FormLayout, TextField, Badge, Stack } from \"@shopify/polaris\"\nimport { Table, Popup, Header, Icon } from \"semantic-ui-react\"\nimport { useConfirmSignUp, useSignUp, useCreateBranch, useListBranches } from \"../core/hooks\"\nimport ProductList from \"./ProductsList\"\nimport { formatDate } from \"../utils/helper\"\nimport BranchProducts from \"./BranchProducts\"\nimport BranchList from \"./BranchList\"\nimport AdminBranchInfo from \"./AdminBranchInfo\"\nimport { createBranch } from \"../graphql/mutation\"\nimport { listBranchs } from \"../graphql/queries\"\n\nconst BranchConsole = ({ updateUser }) => {\n  const [active, setActive] = useState(false)\n  const [branchName, setBranchName] = useState(\"\")\n  const [username, setUsername] = useState(\"\")\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [code, setCode] = useState(\"\")\n  const [formType, setFormType] = useState(\"signUp\")\n  const [userSub, setUserSub] = useState(null)\n  const [branches, setBranches] = useState(\"\")\n  const [branchId, setBranchId] = useState(null)\n  const [error, setError] = useState({\n    branchNameError: \"\",\n  })\n\n  const { signUserUp, data } = useSignUp()\n  const { confirmSignUp } = useConfirmSignUp()\n  const { createBranch, data: createdBranch } = useCreateBranch()\n  const { data: branchesData, refetch: listBranches } = useListBranches()\n\n  const onChangeBranchName = useCallback((newValue) => {\n    setError({ ...state, branchName: \"\" })\n    setBranchName(newValue)\n  }, [])\n\n  const onChangeUsername = useCallback((newValue) => {\n    setUsername(newValue)\n  }, [])\n\n  const onChangePassword = useCallback((newValue) => {\n    setPassword(newValue)\n  }, [])\n\n  const onChangeEmail = useCallback((newValue) => {\n    setEmail(newValue)\n  }, [])\n\n  const onChangeCode = useCallback((newValue) => {\n    setCode(newValue)\n  }, [])\n\n  const handleChange = () => {\n    setActive(!active)\n  }\n\n  const signUp = (e) => {\n    e.preventDefault()\n    if (!branchName) {\n      setError({\n        ...error,\n        branchNameError: \"Branch name is required!\",\n      })\n\n      return\n    }\n    try {\n      signUserUp({ username, password, attributes: { email } })\n      setFormType(\"confirm\")\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    setUserSub(data && data.userSub)\n  }, [data])\n\n  const confirm = async (e) => {\n    e.preventDefault()\n    try {\n      confirmSignUp({ username, code })\n      createBranch({ userSub, username, branchName })\n      setFormType(\"signUp\")\n      handleChange()\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    listBranches()\n  }, [])\n\n  useEffect(() => {\n    setBranches(branchesData && branchesData.data)\n  }, [branchesData])\n\n  return (\n    <>\n      {branchId && <AdminBranchInfo setBranchId={setBranchId} branchId={branchId} />}\n      {!branchId && (\n        <>\n          <Stack>\n            <Stack.Item fill>\n              <Button onClick={handleChange} primary>\n                <Icon name=\"code branch\" /> Create branch\n              </Button>\n            </Stack.Item>\n            <Stack.Item>\n              <Button\n                primary\n                id=\"Logout\"\n                onClick={() => {\n                  Auth.signOut()\n                  updateUser(null)\n                }}>\n                <Icon name=\"sign out\" /> Logout\n              </Button>\n            </Stack.Item>\n          </Stack>\n          <BranchList setBranchId={setBranchId} />\n          <Modal open={active} onClose={handleChange} title=\"Fill in Branch info\">\n            <Modal.Section>\n              {formType === \"signUp\" && (\n                <Form onSubmit={signUp}>\n                  <FormLayout>\n                    <TextField\n                      value={branchName}\n                      onChange={onChangeBranchName}\n                      label=\"Branch Name\"\n                    />\n                    {error.branchNameError && <p>{error.branchNameError}</p>}\n                    <TextField\n                      value={username}\n                      onChange={onChangeUsername}\n                      label=\"Branch admin username\"\n                    />\n                    <TextField value={email} onChange={onChangeEmail} label=\"Branch admin email\" />\n                    <TextField\n                      type=\"password\"\n                      value={password}\n                      onChange={onChangePassword}\n                      label=\"Branch admin password\"\n                    />\n                    <Button primary submit>\n                      Create Branch\n                    </Button>\n                  </FormLayout>\n                </Form>\n              )}\n              {formType === \"confirm\" && (\n                <Form onSubmit={confirm}>\n                  <FormLayout>\n                    <TextField\n                      value={username}\n                      onChange={onChangeUsername}\n                      label=\"Branch admin username\"\n                    />\n                    <TextField value={code} onChange={onChangeCode} label=\"Confirmation code\" />\n                    <Button primary submit>\n                      Confirm\n                    </Button>\n                  </FormLayout>\n                </Form>\n              )}\n            </Modal.Section>\n          </Modal>\n        </>\n      )}\n    </>\n  )\n}\n\nexport default BranchConsole\n"]},"metadata":{},"sourceType":"module"}