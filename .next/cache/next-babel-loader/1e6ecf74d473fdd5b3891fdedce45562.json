{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Auth, API, graphqlOperation } from 'aws-amplify';\nimport gql from 'graphql-tag';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Page, Button, Modal, Form, FormLayout, TextField, Badge } from '@shopify/polaris';\nimport { Table, Popup, Header, Icon } from 'semantic-ui-react';\nimport ProductList from './ProductsList';\nimport { formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nimport BranchProducts from './BranchProducts';\nimport BranchList from './BranchList';\nimport AdminBranchInfo from './AdminBranchInfo';\nAPI.configure(config);\nconst createBranch = gql`\n    mutation createBranch($input: CreateBranchInput!) {\n        createBranch(input: $input) {\n            id\n            adminId\n            branchName\n        }\n    }\n`;\nconst listBranchs = gql`\n    query listBranchs {\n        listBranchs {\n            items {\n                adminId\n                branchName\n                createdAt\n                id\n            }\n        }\n    }\n`;\n\nconst BranchConsole = ({\n  updateUser\n}) => {\n  const {\n    0: active,\n    1: setActive\n  } = useState(false);\n  const {\n    0: branchName,\n    1: setBranchName\n  } = useState('');\n  const {\n    0: username,\n    1: setUsername\n  } = useState('');\n  const {\n    0: email,\n    1: setEmail\n  } = useState('');\n  const {\n    0: password,\n    1: setPassword\n  } = useState('');\n  const {\n    0: code,\n    1: setCode\n  } = useState('');\n  const {\n    0: formType,\n    1: setFormType\n  } = useState('signUp');\n  const {\n    0: userSub,\n    1: setUserSub\n  } = useState(null);\n  const {\n    0: branches,\n    1: setBranches\n  } = useState('');\n  const {\n    0: branchId,\n    1: setBranchId\n  } = useState(null);\n  const onChangeBranchName = useCallback(newValue => {\n    setBranchName(newValue);\n  }, []);\n  const onChangeUsername = useCallback(newValue => {\n    setUsername(newValue);\n  }, []);\n  const onChangePassword = useCallback(newValue => {\n    setPassword(newValue);\n  }, []);\n  const onChangeEmail = useCallback(newValue => {\n    setEmail(newValue);\n  }, []);\n  const onChangeCode = useCallback(newValue => {\n    setCode(newValue);\n  }, []);\n\n  const handleChange = () => {\n    setActive(!active);\n  };\n\n  const signUp = async e => {\n    e.preventDefault();\n\n    try {\n      const user = await Auth.signUp({\n        username,\n        password,\n        attributes: {\n          email\n        }\n      });\n      setUserSub(user.userSub);\n      console.log('Signed Up User from Modal', user);\n      setFormType('confirm');\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const confirm = async e => {\n    e.preventDefault();\n\n    try {\n      const confirmedUser = await Auth.confirmSignUp(username, code);\n      console.log('Confirmed user', confirmedUser);\n      const branch = await API.graphql(graphqlOperation(createBranch, {\n        input: {\n          adminId: userSub,\n          branchUsername: username,\n          branchName: branchName,\n          id: uuidv4()\n        }\n      }));\n      console.log('New created branch', branch);\n      setFormType('signUp');\n      handleChange();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const fetchBranches = async () => {\n    try {\n      const getBranches = await API.graphql(graphqlOperation(listBranchs));\n      setBranches(getBranches.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    fetchBranches();\n  }, []);\n  console.log('Branch name', branchName);\n  console.log('Username', username);\n  console.log('Password', password);\n  console.log('Email', email);\n  console.log('Code', code);\n  console.log('Fetched branches', branches);\n  return __jsx(React.Fragment, null, branchId && __jsx(AdminBranchInfo, {\n    setBranchId: setBranchId,\n    branchId: branchId\n  }), !branchId && __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: handleChange,\n    primary: true\n  }, \"Create branch\"), __jsx(Button, {\n    primary: true,\n    id: \"Logout\",\n    onClick: () => {\n      Auth.signOut();\n      updateUser(null);\n    }\n  }, __jsx(Icon, {\n    name: \"sign out\"\n  }), \" Logout\"), __jsx(BranchList, {\n    setBranchId: setBranchId\n  }), __jsx(Modal, {\n    open: active,\n    onClose: handleChange,\n    title: \"Fill in Branch info\"\n  }, __jsx(Modal.Section, null, formType === 'signUp' && __jsx(Form, {\n    onSubmit: signUp\n  }, __jsx(FormLayout, null, __jsx(TextField, {\n    value: branchName,\n    onChange: onChangeBranchName,\n    label: \"Branch Name\"\n  }), __jsx(TextField, {\n    value: username,\n    onChange: onChangeUsername,\n    label: \"Branch admin username\"\n  }), __jsx(TextField, {\n    value: email,\n    onChange: onChangeEmail,\n    label: \"Branch admin email\"\n  }), __jsx(TextField, {\n    type: \"password\",\n    value: password,\n    onChange: onChangePassword,\n    label: \"Branch admin password\"\n  }), __jsx(Button, {\n    primary: true,\n    submit: true\n  }, \"Create Branch\"))), formType === 'confirm' && __jsx(Form, {\n    onSubmit: confirm\n  }, __jsx(FormLayout, null, __jsx(TextField, {\n    value: username,\n    onChange: onChangeUsername,\n    label: \"Branch admin username\"\n  }), __jsx(TextField, {\n    value: code,\n    onChange: onChangeCode,\n    label: \"Confirmation code\"\n  }), __jsx(Button, {\n    primary: true,\n    submit: true\n  }, \"Confirm\")))))));\n};\n\nexport default BranchConsole;","map":{"version":3,"sources":["/var/www/transactions-avanta/components/BranchConsole.js"],"names":["React","useState","useEffect","useRef","useCallback","Auth","API","graphqlOperation","gql","v4","uuidv4","Page","Button","Modal","Form","FormLayout","TextField","Badge","Table","Popup","Header","Icon","ProductList","formatDate","config","BranchProducts","BranchList","AdminBranchInfo","configure","createBranch","listBranchs","BranchConsole","updateUser","active","setActive","branchName","setBranchName","username","setUsername","email","setEmail","password","setPassword","code","setCode","formType","setFormType","userSub","setUserSub","branches","setBranches","branchId","setBranchId","onChangeBranchName","newValue","onChangeUsername","onChangePassword","onChangeEmail","onChangeCode","handleChange","signUp","e","preventDefault","user","attributes","console","log","error","confirm","confirmedUser","confirmSignUp","branch","graphql","input","adminId","branchUsername","id","fetchBranches","getBranches","data","signOut"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react'\nimport { Auth, API, graphqlOperation } from 'aws-amplify'\nimport gql from 'graphql-tag'\nimport { v4 as uuidv4 } from 'uuid'\nimport { Page, Button, Modal, Form, FormLayout, TextField, Badge } from '@shopify/polaris'\nimport { Table, Popup, Header, Icon } from 'semantic-ui-react'\nimport ProductList from './ProductsList'\nimport { formatDate } from '../utils/helper'\nimport config from '../aws-exports'\nimport BranchProducts from './BranchProducts'\nimport BranchList from './BranchList'\nimport AdminBranchInfo from './AdminBranchInfo'\n\nAPI.configure(config)\n\nconst createBranch = gql`\n    mutation createBranch($input: CreateBranchInput!) {\n        createBranch(input: $input) {\n            id\n            adminId\n            branchName\n        }\n    }\n`\n\nconst listBranchs = gql`\n    query listBranchs {\n        listBranchs {\n            items {\n                adminId\n                branchName\n                createdAt\n                id\n            }\n        }\n    }\n`\n\nconst BranchConsole = ({ updateUser }) => {\n    const [active, setActive] = useState(false)\n    const [branchName, setBranchName] = useState('')\n    const [username, setUsername] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [code, setCode] = useState('')\n    const [formType, setFormType] = useState('signUp')\n    const [userSub, setUserSub] = useState(null)\n    const [branches, setBranches] = useState('')\n    const [branchId, setBranchId] = useState(null)\n\n    const onChangeBranchName = useCallback((newValue) => {\n        setBranchName(newValue)\n    }, [])\n\n    const onChangeUsername = useCallback((newValue) => {\n        setUsername(newValue)\n    }, [])\n\n    const onChangePassword = useCallback((newValue) => {\n        setPassword(newValue)\n    }, [])\n\n    const onChangeEmail = useCallback((newValue) => {\n        setEmail(newValue)\n    }, [])\n\n    const onChangeCode = useCallback((newValue) => {\n        setCode(newValue)\n    }, [])\n\n    const handleChange = () => {\n        setActive(!active)\n    }\n\n    const signUp = async (e) => {\n        e.preventDefault()\n        try {\n            const user = await Auth.signUp({ username, password, attributes: { email } })\n            setUserSub(user.userSub)\n            console.log('Signed Up User from Modal', user)\n            setFormType('confirm')\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    const confirm = async (e) => {\n        e.preventDefault()\n        try {\n            const confirmedUser = await Auth.confirmSignUp(username, code)\n            console.log('Confirmed user', confirmedUser)\n            const branch = await API.graphql(\n                graphqlOperation(createBranch, {\n                    input: {\n                        adminId: userSub,\n                        branchUsername: username,\n                        branchName: branchName,\n                        id: uuidv4()\n                    }\n                })\n            )\n            console.log('New created branch', branch)\n            setFormType('signUp')\n            handleChange()\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    const fetchBranches = async () => {\n        try {\n            const getBranches = await API.graphql(graphqlOperation(listBranchs))\n            setBranches(getBranches.data)\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    useEffect(() => {\n        fetchBranches()\n    }, [])\n\n    console.log('Branch name', branchName)\n    console.log('Username', username)\n    console.log('Password', password)\n    console.log('Email', email)\n    console.log('Code', code)\n    console.log('Fetched branches', branches)\n\n    return (\n        <>\n            {branchId && <AdminBranchInfo setBranchId={setBranchId} branchId={branchId} />}\n            {!branchId && (\n                <>\n                    <Button onClick={handleChange} primary>\n                        Create branch\n                    </Button>\n                    <Button\n                        primary\n                        id=\"Logout\"\n                        onClick={() => {\n                            Auth.signOut()\n                            updateUser(null)\n                        }}>\n                        <Icon name=\"sign out\" /> Logout\n                    </Button>\n                    <BranchList setBranchId={setBranchId} />\n                    {/* <Table selectable celled>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Branch Name</Table.HeaderCell>\n                        <Table.HeaderCell>Created At</Table.HeaderCell>\n                        <Table.HeaderCell>Actions</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {branches &&\n                        branches.listBranchs.items.map((item) => (\n                            <Table.Row key={item.id}>\n                                <Table.Cell>\n                                    <Badge size=\"medium\" status=\"info\">\n                                        {item.branchName}\n                                    </Badge>\n                                </Table.Cell>\n                                <Table.Cell>{formatDate(item.createdAt)}</Table.Cell>\n                                <Table.Cell className=\"branch-actions\">\n                                    <Popup\n                                        content=\"Edit branch\"\n                                        trigger={\n                                            <Icon className=\"edit-branch\" name=\"edit outline\" />\n                                        }\n                                    />\n                                    <Popup\n                                        content=\"Delete Branch\"\n                                        trigger={\n                                            <Icon\n                                                className=\"remove-branch\"\n                                                name=\"trash alternate\"\n                                            />\n                                        }\n                                    />\n                                </Table.Cell>\n                            </Table.Row>\n                        ))}\n                </Table.Body>\n            </Table> */}\n                    <Modal open={active} onClose={handleChange} title=\"Fill in Branch info\">\n                        <Modal.Section>\n                            {formType === 'signUp' && (\n                                <Form onSubmit={signUp}>\n                                    <FormLayout>\n                                        <TextField\n                                            value={branchName}\n                                            onChange={onChangeBranchName}\n                                            label=\"Branch Name\"\n                                        />\n                                        <TextField\n                                            value={username}\n                                            onChange={onChangeUsername}\n                                            label=\"Branch admin username\"\n                                        />\n                                        <TextField\n                                            value={email}\n                                            onChange={onChangeEmail}\n                                            label=\"Branch admin email\"\n                                        />\n                                        <TextField\n                                            type=\"password\"\n                                            value={password}\n                                            onChange={onChangePassword}\n                                            label=\"Branch admin password\"\n                                        />\n                                        <Button primary submit>\n                                            Create Branch\n                                        </Button>\n                                    </FormLayout>\n                                </Form>\n                            )}\n                            {formType === 'confirm' && (\n                                <Form onSubmit={confirm}>\n                                    <FormLayout>\n                                        <TextField\n                                            value={username}\n                                            onChange={onChangeUsername}\n                                            label=\"Branch admin username\"\n                                        />\n                                        <TextField\n                                            value={code}\n                                            onChange={onChangeCode}\n                                            label=\"Confirmation code\"\n                                        />\n                                        <Button primary submit>\n                                            Confirm\n                                        </Button>\n                                    </FormLayout>\n                                </Form>\n                            )}\n                        </Modal.Section>\n                    </Modal>\n                </>\n            )}\n        </>\n    )\n}\n\nexport default BranchConsole\n"]},"metadata":{},"sourceType":"module"}