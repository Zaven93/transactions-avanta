{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n    query branchByAdminId($adminId: ID!) {\\n        branchByAdminId(adminId: $adminId) {\\n            items {\\n                adminId\\n                branchName\\n                id\\n                branchProducts {\\n                    items {\\n                        branchId\\n                        createdAt\\n                        id\\n                        productId\\n                        tags\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    query Products {\\n        products(first: 100) {\\n            edges {\\n                node {\\n                    id\\n                    title\\n                    tags\\n                    description(truncateAt: 100)\\n                    variants(first: 1) {\\n                        edges {\\n                            node {\\n                                id\\n                                price\\n                            }\\n                        }\\n                    }\\n                    images(first: 1) {\\n                        edges {\\n                            node {\\n                                originalSrc\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    subscription paymentRequest {\\n        onCreatePaymentRequest {\\n            bonusAmount\\n            createdAt\\n            customerId\\n            orderId\\n            updatedAt\\n        }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query listTransactions($limit: Int, $nextToken: String) {\\n        listTransactions(limit: $limit, nextToken: $nextToken) {\\n            nextToken\\n            items {\\n                id\\n                totalPrice\\n                totalBonusAmount\\n                note\\n                currency\\n                products {\\n                    id\\n                    title\\n                    bonusPercentage\\n                    priceAmount\\n                    priceCurrency\\n                    image\\n                }\\n                customer {\\n                    id\\n                    firstName\\n                    lastName\\n                    phone\\n                    email\\n                }\\n                createdAt\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport axios from 'axios';\nimport { Auth, API, graphqlOperation } from 'aws-amplify';\nimport createApp from '@shopify/app-bridge';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport gql from 'graphql-tag';\nimport { print } from 'graphql';\nimport { Card, DataTable, Button, Page, Pagination, TextField, ChoiceList, Filters, Icon, Stack } from '@shopify/polaris';\nimport { SearchMajorMonotone, TransactionMajorMonotone, BalanceMajorMonotone, LogOutMinor } from '@shopify/polaris-icons';\nimport { toCurrency, formatDate, extractNumbersFromString } from '../utils/helper';\nimport config from '../aws-exports';\nimport Login from '../components/Login';\nimport BranchConsole from '../components/BranchConsole';\nimport BranchData from '../components/BranchData';\nAPI.configure(config);\nvar listTransactions = gql(_templateObject());\nvar paymentSubscription = gql(_templateObject2());\nvar listProducts = gql(_templateObject3());\nvar branchByAdminId = gql(_templateObject4());\n\nvar Index = function Index(_ref) {\n  _s();\n\n  var transactions = _ref.transactions;\n\n  var _useState = useState(null),\n      searchValue = _useState[0],\n      setSearchValue = _useState[1];\n\n  var _useState2 = useState(null),\n      user = _useState2[0],\n      updateUser = _useState2[1];\n\n  var _useState3 = useState(transactions.listTransactions.items),\n      transactionItems = _useState3[0],\n      setTransactionItems = _useState3[1];\n\n  var _useState4 = useState(transactions.listTransactions.nextToken),\n      nextPaginateToken = _useState4[0],\n      setNextPaginateToken = _useState4[1];\n\n  var _useState5 = useState([]),\n      previousPaginateTokens = _useState5[0],\n      setPreviousPaginateTokens = _useState5[1];\n\n  var handleSearchInput = useCallback(function (newValue) {\n    return setSearchValue(newValue);\n  }, []);\n  var app = createApp({\n    apiKey: '3b01063bac3031d13101100ef3e44fd5',\n    shopOrigin: 'transactions-avanta.myshopify.com'\n  });\n  var redirect = Redirect.create(app);\n  useEffect(function () {\n    checkUser();\n  }, []);\n\n  var checkUser = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _user;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return Auth.currentAuthenticatedUser();\n\n            case 3:\n              _user = _context.sent;\n\n              if (_user) {\n                _context.next = 6;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 6:\n              updateUser(_user);\n              console.log('User: ', _user);\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 10]]);\n    }));\n\n    return function checkUser() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var paginateNext = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var data;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setPreviousPaginateTokens([].concat(_toConsumableArray(previousPaginateTokens), [nextPaginateToken]));\n              _context2.prev = 1;\n              _context2.next = 4;\n              return API.graphql(graphqlOperation(listTransactions, {\n                limit: 5,\n                nextToken: nextPaginateToken\n              }));\n\n            case 4:\n              data = _context2.sent;\n              console.log('Data from pagination', data);\n              setTransactionItems(data.data.listTransactions.items);\n              setNextPaginateToken(data.data.listTransactions.nextToken);\n              _context2.next = 13;\n              break;\n\n            case 10:\n              _context2.prev = 10;\n              _context2.t0 = _context2[\"catch\"](1);\n              console.log(_context2.t0);\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 10]]);\n    }));\n\n    return function paginateNext() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var paginatePrevious = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var previousToken, data, _data;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              previousToken = previousPaginateTokens[previousPaginateTokens.length === 1 ? 0 : previousPaginateTokens.length - 2];\n              setPreviousPaginateTokens(_toConsumableArray(previousPaginateTokens.slice(0, previousPaginateTokens.length - 1)));\n              _context3.prev = 2;\n\n              if (!(previousPaginateTokens.length === 1)) {\n                _context3.next = 11;\n                break;\n              }\n\n              _context3.next = 6;\n              return API.graphql(graphqlOperation(listTransactions, {\n                limit: 5\n              }));\n\n            case 6:\n              data = _context3.sent;\n              setTransactionItems(data.data.listTransactions.items);\n              setNextPaginateToken(data.data.listTransactions.nextToken);\n              _context3.next = 16;\n              break;\n\n            case 11:\n              _context3.next = 13;\n              return API.graphql(graphqlOperation(listTransactions, {\n                limit: 5,\n                nextToken: previousToken\n              }));\n\n            case 13:\n              _data = _context3.sent;\n              setTransactionItems(_data.data.listTransactions.items);\n              setNextPaginateToken(_data.data.listTransactions.nextToken);\n\n            case 16:\n              _context3.next = 21;\n              break;\n\n            case 18:\n              _context3.prev = 18;\n              _context3.t0 = _context3[\"catch\"](2);\n              console.log(_context3.t0);\n\n            case 21:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[2, 18]]);\n    }));\n\n    return function paginatePrevious() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(React.Fragment, null, user && user.username !== 'superadmin' && __jsx(BranchData, {\n    updateUser: updateUser,\n    user: user\n  }) // <>\n  //     <TextField\n  //         label=\"Search Product\"\n  //         value={searchValue}\n  //         onChange={handleSearchInput}\n  //         prefix={<Icon source={SearchMajorMonotone} />}\n  //         placeholder=\"Search by Customer phone number\"\n  //     />\n  //     <Stack>\n  //         <Stack.Item fill>\n  //             <Button\n  //                 id=\"Accept-Payment\"\n  //                 onClick={() =>\n  //                     redirect.dispatch(\n  //                         Redirect.Action.ADMIN_PATH,\n  //                         '/apps/3b01063bac3031d13101100ef3e44fd5/accept-payment'\n  //                     )\n  //                 }>\n  //                 <Icon source={BalanceMajorMonotone} /> Accept Payment\n  //             </Button>\n  //         </Stack.Item>\n  //         <Stack.Item>\n  //             <Button\n  //                 id=\"Create-Transaction\"\n  //                 primary\n  //                 onClick={() =>\n  //                     redirect.dispatch(Redirect.Action.REMOTE, {\n  //                         // url: `https://dev.d3ivgpkzuz6hkr.amplifyapp.com?adminId=${user.attributes.sub}`,\n  //                         url: `http://localhost:3001/transactions/${user.attributes.sub}`,\n  //                         newContext: true\n  //                     })\n  //                 }>\n  //                 <Icon source={TransactionMajorMonotone} /> Create transaction\n  //             </Button>\n  //         </Stack.Item>\n  //         <Stack.Item>\n  //             <Button\n  //                 primary\n  //                 id=\"Logout\"\n  //                 onClick={() => {\n  //                     Auth.signOut()\n  //                     updateUser(null)\n  //                 }}>\n  //                 <Icon source={LogOutMinor} /> Logout\n  //             </Button>\n  //         </Stack.Item>\n  //     </Stack>\n  //     {transactionItems && (\n  //         <Card>\n  //             <DataTable\n  //                 columnContentTypes={['text', 'text', 'text', 'text']}\n  //                 headings={[\n  //                     'Customer phone number',\n  //                     'TotalPrice',\n  //                     'TotalBonusAmount',\n  //                     'Minus from Bonus Amount',\n  //                     'CreatedAt'\n  //                 ]}\n  //                 rows={\n  //                     transactionItems &&\n  //                     transactionItems\n  //                         .filter((transaction) => {\n  //                             if (searchValue == null) {\n  //                                 return transaction\n  //                             } else if (\n  //                                 transaction.customer[0].phone\n  //                                     .toLowerCase()\n  //                                     .includes(searchValue.toLowerCase())\n  //                             ) {\n  //                                 return transaction\n  //                             }\n  //                         })\n  //                         .sort(\n  //                             (a, b) => new Date(b.createdAt) - new Date(a.createdAt)\n  //                         )\n  //                         .map((transaction) => [\n  //                             <Button\n  //                                 primary\n  //                                 onClick={() =>\n  //                                     redirect.dispatch(Redirect.Action.ADMIN_PATH, {\n  //                                         path: `/customers/${transaction.customer[0].id}`,\n  //                                         newContext: true\n  //                                     })\n  //                                 }>\n  //                                 {transaction.customer[0].phone}\n  //                             </Button>,\n  //                             toCurrency(Number(transaction.totalPrice)),\n  //                             toCurrency(Number(transaction.totalBonusAmount)),\n  //                             transaction.note === null\n  //                                 ? ''\n  //                                 : toCurrency(\n  //                                       extractNumbersFromString(transaction.note)\n  //                                   ),\n  //                             formatDate(transaction.createdAt)\n  //                         ])\n  //                 }\n  //             />\n  //             <Pagination\n  //                 hasPrevious={previousPaginateTokens.length > 0}\n  //                 onPrevious={paginatePrevious}\n  //                 hasNext={nextPaginateToken}\n  //                 onNext={paginateNext}\n  //             />\n  //         </Card>\n  //     )}\n  // </>\n  , !user && __jsx(Login, {\n    setUser: function setUser(fetchedUser) {\n      return updateUser(fetchedUser);\n    }\n  }), user && user.username === 'superadmin' && __jsx(BranchConsole, {\n    updateUser: updateUser\n  }));\n};\n\n_s(Index, \"Fto5EssYBV8a3i2bmc+ZcEH+/y4=\");\n\n_c = Index;\nexport var __N_SSG = true;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/pages/index.js"],"names":["React","useState","useCallback","useEffect","axios","Auth","API","graphqlOperation","createApp","Redirect","gql","print","Card","DataTable","Button","Page","Pagination","TextField","ChoiceList","Filters","Icon","Stack","SearchMajorMonotone","TransactionMajorMonotone","BalanceMajorMonotone","LogOutMinor","toCurrency","formatDate","extractNumbersFromString","config","Login","BranchConsole","BranchData","configure","listTransactions","paymentSubscription","listProducts","branchByAdminId","Index","transactions","searchValue","setSearchValue","user","updateUser","items","transactionItems","setTransactionItems","nextToken","nextPaginateToken","setNextPaginateToken","previousPaginateTokens","setPreviousPaginateTokens","handleSearchInput","newValue","app","apiKey","shopOrigin","redirect","create","checkUser","currentAuthenticatedUser","console","log","paginateNext","graphql","limit","data","paginatePrevious","previousToken","length","slice","username","fetchedUser"],"mappings":"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nB;AACAK,cAAAA,oBAAoB,CAACiB,KAAI,CAACA,IAAL,CAAUhC,gBAAV,CAA2Ba,SAA5B,CAApB;;AAlBa;AAAA;AAAA;;AAAA;AAAA;AAAA;AAqBjBc,cAAAA,OAAO,CAACC,GAAR;;AArBiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAhBK,gBAAgB;AAAA;AAAA;AAAA,KAAtB;;AAyBA,SACI,4BACKzB,IAAI,IAAIA,IAAI,CAAC6B,QAAL,KAAkB,YAA1B,IACG,MAAC,UAAD;AAAY,IAAA,UAAU,EAAE5B,UAAxB;AAAoC,IAAA,IAAI,EAAED;AAA1C,IADH,CAEG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5GR,IA8GK,CAACA,IAAD,IAAS,MAAC,KAAD;AAAO,IAAA,OAAO,EAAE,iBAAC8B,WAAD;AAAA,aAAiB7B,UAAU,CAAC6B,WAAD,CAA3B;AAAA;AAAhB,IA9Gd,EA+GK9B,IAAI,IAAIA,IAAI,CAAC6B,QAAL,KAAkB,YAA1B,IAA0C,MAAC,aAAD;AAAe,IAAA,UAAU,EAAE5B;AAA3B,IA/G/C,CADJ;AAmHH,CA7LD;;GAAML,K;;KAAAA,K;;AAgNN,eAAeA,KAAf","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { Auth, API, graphqlOperation } from 'aws-amplify'\r\nimport createApp from '@shopify/app-bridge'\r\nimport { Redirect } from '@shopify/app-bridge/actions'\r\nimport gql from 'graphql-tag'\r\nimport { print } from 'graphql'\r\nimport {\r\n    Card,\r\n    DataTable,\r\n    Button,\r\n    Page,\r\n    Pagination,\r\n    TextField,\r\n    ChoiceList,\r\n    Filters,\r\n    Icon,\r\n    Stack\r\n} from '@shopify/polaris'\r\nimport {\r\n    SearchMajorMonotone,\r\n    TransactionMajorMonotone,\r\n    BalanceMajorMonotone,\r\n    LogOutMinor\r\n} from '@shopify/polaris-icons'\r\nimport { toCurrency, formatDate, extractNumbersFromString } from '../utils/helper'\r\nimport config from '../aws-exports'\r\nimport Login from '../components/Login'\r\nimport BranchConsole from '../components/BranchConsole'\r\nimport BranchData from '../components/BranchData'\r\n\r\nAPI.configure(config)\r\n\r\nconst listTransactions = gql`\r\n    query listTransactions($limit: Int, $nextToken: String) {\r\n        listTransactions(limit: $limit, nextToken: $nextToken) {\r\n            nextToken\r\n            items {\r\n                id\r\n                totalPrice\r\n                totalBonusAmount\r\n                note\r\n                currency\r\n                products {\r\n                    id\r\n                    title\r\n                    bonusPercentage\r\n                    priceAmount\r\n                    priceCurrency\r\n                    image\r\n                }\r\n                customer {\r\n                    id\r\n                    firstName\r\n                    lastName\r\n                    phone\r\n                    email\r\n                }\r\n                createdAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst paymentSubscription = gql`\r\n    subscription paymentRequest {\r\n        onCreatePaymentRequest {\r\n            bonusAmount\r\n            createdAt\r\n            customerId\r\n            orderId\r\n            updatedAt\r\n        }\r\n    }\r\n`\r\n\r\nconst listProducts = gql`\r\n    query Products {\r\n        products(first: 100) {\r\n            edges {\r\n                node {\r\n                    id\r\n                    title\r\n                    tags\r\n                    description(truncateAt: 100)\r\n                    variants(first: 1) {\r\n                        edges {\r\n                            node {\r\n                                id\r\n                                price\r\n                            }\r\n                        }\r\n                    }\r\n                    images(first: 1) {\r\n                        edges {\r\n                            node {\r\n                                originalSrc\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\nconst branchByAdminId = gql`\r\n    query branchByAdminId($adminId: ID!) {\r\n        branchByAdminId(adminId: $adminId) {\r\n            items {\r\n                adminId\r\n                branchName\r\n                id\r\n                branchProducts {\r\n                    items {\r\n                        branchId\r\n                        createdAt\r\n                        id\r\n                        productId\r\n                        tags\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst Index = ({ transactions }) => {\r\n    const [searchValue, setSearchValue] = useState(null)\r\n    const [user, updateUser] = useState(null)\r\n    const [transactionItems, setTransactionItems] = useState(transactions.listTransactions.items)\r\n    const [nextPaginateToken, setNextPaginateToken] = useState(\r\n        transactions.listTransactions.nextToken\r\n    )\r\n    const [previousPaginateTokens, setPreviousPaginateTokens] = useState([])\r\n    const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\r\n    const app = createApp({\r\n        apiKey: '3b01063bac3031d13101100ef3e44fd5',\r\n        shopOrigin: 'transactions-avanta.myshopify.com'\r\n    })\r\n\r\n    const redirect = Redirect.create(app)\r\n\r\n    useEffect(() => {\r\n        checkUser()\r\n    }, [])\r\n\r\n    const checkUser = async () => {\r\n        try {\r\n            const user = await Auth.currentAuthenticatedUser()\r\n\r\n            if (!user) {\r\n                return\r\n            }\r\n            updateUser(user)\r\n            console.log('User: ', user)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    const paginateNext = async () => {\r\n        setPreviousPaginateTokens([...previousPaginateTokens, nextPaginateToken])\r\n        try {\r\n            const data = await API.graphql(\r\n                graphqlOperation(listTransactions, { limit: 5, nextToken: nextPaginateToken })\r\n            )\r\n\r\n            console.log('Data from pagination', data)\r\n            setTransactionItems(data.data.listTransactions.items)\r\n            setNextPaginateToken(data.data.listTransactions.nextToken)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    const paginatePrevious = async () => {\r\n        const previousToken =\r\n            previousPaginateTokens[\r\n                previousPaginateTokens.length === 1 ? 0 : previousPaginateTokens.length - 2\r\n            ]\r\n        setPreviousPaginateTokens([\r\n            ...previousPaginateTokens.slice(0, previousPaginateTokens.length - 1)\r\n        ])\r\n        try {\r\n            if (previousPaginateTokens.length === 1) {\r\n                const data = await API.graphql(graphqlOperation(listTransactions, { limit: 5 }))\r\n                setTransactionItems(data.data.listTransactions.items)\r\n                setNextPaginateToken(data.data.listTransactions.nextToken)\r\n            } else {\r\n                const data = await API.graphql(\r\n                    graphqlOperation(listTransactions, { limit: 5, nextToken: previousToken })\r\n                )\r\n                setTransactionItems(data.data.listTransactions.items)\r\n                setNextPaginateToken(data.data.listTransactions.nextToken)\r\n            }\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {user && user.username !== 'superadmin' && (\r\n                <BranchData updateUser={updateUser} user={user} />\r\n                // <>\r\n                //     <TextField\r\n                //         label=\"Search Product\"\r\n                //         value={searchValue}\r\n                //         onChange={handleSearchInput}\r\n                //         prefix={<Icon source={SearchMajorMonotone} />}\r\n                //         placeholder=\"Search by Customer phone number\"\r\n                //     />\r\n                //     <Stack>\r\n                //         <Stack.Item fill>\r\n                //             <Button\r\n                //                 id=\"Accept-Payment\"\r\n                //                 onClick={() =>\r\n                //                     redirect.dispatch(\r\n                //                         Redirect.Action.ADMIN_PATH,\r\n                //                         '/apps/3b01063bac3031d13101100ef3e44fd5/accept-payment'\r\n                //                     )\r\n                //                 }>\r\n                //                 <Icon source={BalanceMajorMonotone} /> Accept Payment\r\n                //             </Button>\r\n                //         </Stack.Item>\r\n                //         <Stack.Item>\r\n                //             <Button\r\n                //                 id=\"Create-Transaction\"\r\n                //                 primary\r\n                //                 onClick={() =>\r\n                //                     redirect.dispatch(Redirect.Action.REMOTE, {\r\n                //                         // url: `https://dev.d3ivgpkzuz6hkr.amplifyapp.com?adminId=${user.attributes.sub}`,\r\n                //                         url: `http://localhost:3001/transactions/${user.attributes.sub}`,\r\n                //                         newContext: true\r\n                //                     })\r\n                //                 }>\r\n                //                 <Icon source={TransactionMajorMonotone} /> Create transaction\r\n                //             </Button>\r\n                //         </Stack.Item>\r\n                //         <Stack.Item>\r\n                //             <Button\r\n                //                 primary\r\n                //                 id=\"Logout\"\r\n                //                 onClick={() => {\r\n                //                     Auth.signOut()\r\n                //                     updateUser(null)\r\n                //                 }}>\r\n                //                 <Icon source={LogOutMinor} /> Logout\r\n                //             </Button>\r\n                //         </Stack.Item>\r\n                //     </Stack>\r\n                //     {transactionItems && (\r\n                //         <Card>\r\n                //             <DataTable\r\n                //                 columnContentTypes={['text', 'text', 'text', 'text']}\r\n                //                 headings={[\r\n                //                     'Customer phone number',\r\n                //                     'TotalPrice',\r\n                //                     'TotalBonusAmount',\r\n                //                     'Minus from Bonus Amount',\r\n                //                     'CreatedAt'\r\n                //                 ]}\r\n                //                 rows={\r\n                //                     transactionItems &&\r\n                //                     transactionItems\r\n                //                         .filter((transaction) => {\r\n                //                             if (searchValue == null) {\r\n                //                                 return transaction\r\n                //                             } else if (\r\n                //                                 transaction.customer[0].phone\r\n                //                                     .toLowerCase()\r\n                //                                     .includes(searchValue.toLowerCase())\r\n                //                             ) {\r\n                //                                 return transaction\r\n                //                             }\r\n                //                         })\r\n                //                         .sort(\r\n                //                             (a, b) => new Date(b.createdAt) - new Date(a.createdAt)\r\n                //                         )\r\n                //                         .map((transaction) => [\r\n                //                             <Button\r\n                //                                 primary\r\n                //                                 onClick={() =>\r\n                //                                     redirect.dispatch(Redirect.Action.ADMIN_PATH, {\r\n                //                                         path: `/customers/${transaction.customer[0].id}`,\r\n                //                                         newContext: true\r\n                //                                     })\r\n                //                                 }>\r\n                //                                 {transaction.customer[0].phone}\r\n                //                             </Button>,\r\n                //                             toCurrency(Number(transaction.totalPrice)),\r\n                //                             toCurrency(Number(transaction.totalBonusAmount)),\r\n                //                             transaction.note === null\r\n                //                                 ? ''\r\n                //                                 : toCurrency(\r\n                //                                       extractNumbersFromString(transaction.note)\r\n                //                                   ),\r\n                //                             formatDate(transaction.createdAt)\r\n                //                         ])\r\n                //                 }\r\n                //             />\r\n                //             <Pagination\r\n                //                 hasPrevious={previousPaginateTokens.length > 0}\r\n                //                 onPrevious={paginatePrevious}\r\n                //                 hasNext={nextPaginateToken}\r\n                //                 onNext={paginateNext}\r\n                //             />\r\n                //         </Card>\r\n                //     )}\r\n                // </>\r\n            )}\r\n            {!user && <Login setUser={(fetchedUser) => updateUser(fetchedUser)} />}\r\n            {user && user.username === 'superadmin' && <BranchConsole updateUser={updateUser} />}\r\n        </>\r\n    )\r\n}\r\n\r\nexport async function getStaticProps() {\r\n    let result\r\n    try {\r\n        result = await API.graphql(graphqlOperation(listTransactions, { limit: 5 }))\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n\r\n    if (result.errors) {\r\n        console.warn('Failed to fetch transactions.', result.errors)\r\n        return { props: { transactions: [] } }\r\n    }\r\n    if (result.data !== null) {\r\n        return { props: { transactions: result.data } }\r\n    }\r\n}\r\n\r\nexport default Index\r\n"]},"metadata":{},"sourceType":"module"}