{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport createApp from '@shopify/app-bridge';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { TitleBar } from '@shopify/app-bridge-react';\nimport gql from 'graphql-tag';\nimport { useQuery, useLazyQuery } from '@apollo/react-hooks';\nimport { Card, DataTable, Button, Page, TextField, ChoiceList, Filters, Icon } from '@shopify/polaris';\nimport { SearchMajorMonotone } from '@shopify/polaris-icons';\nimport withApollo from '../lib/withApollo';\nimport { toCurrency } from '../utils/helper';\nconst listTransactions = gql`\n    query listTransactions($limit: Int, $nextToken: String) {\n        listTransactions(limit: $limit, nextToken: $nextToken) {\n            nextToken\n            items {\n                id\n                totalPrice\n                totalBonusAmount\n                currency\n                products {\n                    id\n                    title\n                    bonusPercentage\n                    priceAmount\n                    priceCurrency\n                    image\n                }\n                customer {\n                    id\n                    firstName\n                    lastName\n                    phone\n                    email\n                }\n                createdAt\n            }\n        }\n    }\n`;\n\nconst Index = () => {\n  // const { loading, data, error } = useQuery(listTransactions)\n  const [getTransactions, {\n    loading: lazyLoading,\n    data: lazyData\n  }] = useLazyQuery(listTransactions);\n  const {\n    0: searchValue,\n    1: setSearchValue\n  } = useState(null);\n  const {\n    0: nextPaginateToken,\n    1: setNextPaginateToken\n  } = useState(null);\n  const {\n    0: previousPaginateTokens,\n    1: setPreviousPaginateTokens\n  } = useState([]);\n  const {\n    0: fetchCount,\n    1: setFetchCount\n  } = useState(0);\n  const handleSearchInput = useCallback(newValue => setSearchValue(newValue), []);\n  const fetchTransactions = useCallback(() => {\n    getTransactions({\n      variables: {\n        limit: 7\n      }\n    });\n  }, []);\n  useEffect(() => {\n    fetchTransactions();\n  }, []);\n  console.log('Searching value', searchValue);\n  const app = createApp({\n    apiKey: '3b01063bac3031d13101100ef3e44fd5',\n    shopOrigin: 'transactions-avanta.myshopify.com'\n  });\n  const redirect = Redirect.create(app); // if (loading) {\n  //     return <div>Loading...</div>\n  // }\n\n  if (lazyLoading) {\n    return __jsx(\"div\", null, \"Lazy loading...\");\n  }\n\n  console.log('Lazy data', lazyData); // setNextPaginateToken(lazyData && lazyData.listTransactions.nextToken)\n\n  console.log('Next paginate token', nextPaginateToken); // if (error) {\n  //     console.log('Some error occured Zaven', error)\n  // }\n  // const formatDate = (rowDate) => {\n  //     const date = new Date(rowDate)\n  //     const year = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(date)\n  //     const month = new Intl.DateTimeFormat('en', { month: 'short' }).format(date)\n  //     const day = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(date)\n  //     return `${day}-${month}-${year}`\n  // }\n  // console.log('Data Zaven jan', data)\n  // console.log('Page count', Math.ceil(data.listTransactions.items.length / 7))\n\n  const rows = lazyData && lazyData.listTransactions.items.filter(transaction => {\n    if (searchValue == null) {\n      return transaction;\n    } else if (transaction.customer[0].phone.toLowerCase().includes(searchValue.toLowerCase())) {\n      return transaction;\n    }\n  }).map(transaction => [__jsx(Button, {\n    primary: true,\n    onClick: () => redirect.dispatch(Redirect.Action.ADMIN_PATH, {\n      path: `/customers/${transaction.customer[0].id}`,\n      newContext: true\n    })\n  }, transaction.customer[0].phone), toCurrency(Number(transaction.totalPrice)), toCurrency(Number(transaction.totalBonusAmount)), formatDate(transaction.createdAt)]); // console.log('Rows', rows)\n  // console.log('Here is transaction data Zvo', data)\n\n  console.log('Data from lazy query', lazyData);\n  console.log('Next paginate token', nextPaginateToken);\n  console.log('Previous paginate Tokens', previousPaginateTokens);\n  return __jsx(Page, {\n    title: \"Transactions\"\n  }, __jsx(TextField, {\n    label: \"Search Product\",\n    value: searchValue,\n    onChange: handleSearchInput,\n    prefix: __jsx(Icon, {\n      source: SearchMajorMonotone\n    }),\n    placeholder: \"Search by Customer phone number\"\n  }), __jsx(Button, {\n    onClick: async () => {\n      await getTransactions({\n        variables: {\n          nextToken: nextPaginateToken,\n          limit: 4\n        }\n      });\n      setNextPaginateToken(previousPaginateTokens.push(nextPaginateToken));\n    }\n  }, \"Paginate next\"), __jsx(Button, {\n    primary: true,\n    onClick: () => redirect.dispatch(Redirect.Action.REMOTE, {\n      url: 'https://dev.d3ivgpkzuz6hkr.amplifyapp.com',\n      newContext: true\n    })\n  }, \"Create transaction\"));\n};\n\nexport default withApollo(Index);","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/pages/index.js"],"names":["React","useState","useCallback","useEffect","createApp","Redirect","TitleBar","gql","useQuery","useLazyQuery","Card","DataTable","Button","Page","TextField","ChoiceList","Filters","Icon","SearchMajorMonotone","withApollo","toCurrency","listTransactions","Index","getTransactions","loading","lazyLoading","data","lazyData","searchValue","setSearchValue","nextPaginateToken","setNextPaginateToken","previousPaginateTokens","setPreviousPaginateTokens","fetchCount","setFetchCount","handleSearchInput","newValue","fetchTransactions","variables","limit","console","log","app","apiKey","shopOrigin","redirect","create","rows","items","filter","transaction","customer","phone","toLowerCase","includes","map","dispatch","Action","ADMIN_PATH","path","id","newContext","Number","totalPrice","totalBonusAmount","formatDate","createdAt","nextToken","push","REMOTE","url"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport createApp from '@shopify/app-bridge'\r\nimport { Redirect } from '@shopify/app-bridge/actions'\r\nimport { TitleBar } from '@shopify/app-bridge-react'\r\nimport gql from 'graphql-tag'\r\nimport { useQuery, useLazyQuery } from '@apollo/react-hooks'\r\nimport {\r\n    Card,\r\n    DataTable,\r\n    Button,\r\n    Page,\r\n    TextField,\r\n    ChoiceList,\r\n    Filters,\r\n    Icon\r\n} from '@shopify/polaris'\r\nimport { SearchMajorMonotone } from '@shopify/polaris-icons'\r\nimport withApollo from '../lib/withApollo'\r\nimport { toCurrency } from '../utils/helper'\r\n\r\nconst listTransactions = gql`\r\n    query listTransactions($limit: Int, $nextToken: String) {\r\n        listTransactions(limit: $limit, nextToken: $nextToken) {\r\n            nextToken\r\n            items {\r\n                id\r\n                totalPrice\r\n                totalBonusAmount\r\n                currency\r\n                products {\r\n                    id\r\n                    title\r\n                    bonusPercentage\r\n                    priceAmount\r\n                    priceCurrency\r\n                    image\r\n                }\r\n                customer {\r\n                    id\r\n                    firstName\r\n                    lastName\r\n                    phone\r\n                    email\r\n                }\r\n                createdAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst Index = () => {\r\n    // const { loading, data, error } = useQuery(listTransactions)\r\n    const [getTransactions, { loading: lazyLoading, data: lazyData }] = useLazyQuery(\r\n        listTransactions\r\n    )\r\n    const [searchValue, setSearchValue] = useState(null)\r\n    const [nextPaginateToken, setNextPaginateToken] = useState(null)\r\n    const [previousPaginateTokens, setPreviousPaginateTokens] = useState([])\r\n    const [fetchCount, setFetchCount] = useState(0)\r\n    const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\r\n\r\n    const fetchTransactions = useCallback(() => {\r\n        getTransactions({ variables: { limit: 7 } })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        fetchTransactions()\r\n    }, [])\r\n\r\n    console.log('Searching value', searchValue)\r\n\r\n    const app = createApp({\r\n        apiKey: '3b01063bac3031d13101100ef3e44fd5',\r\n        shopOrigin: 'transactions-avanta.myshopify.com'\r\n    })\r\n\r\n    const redirect = Redirect.create(app)\r\n    // if (loading) {\r\n    //     return <div>Loading...</div>\r\n    // }\r\n\r\n    if (lazyLoading) {\r\n        return <div>Lazy loading...</div>\r\n    }\r\n\r\n    console.log('Lazy data', lazyData)\r\n\r\n    // setNextPaginateToken(lazyData && lazyData.listTransactions.nextToken)\r\n\r\n    console.log('Next paginate token', nextPaginateToken)\r\n\r\n    // if (error) {\r\n    //     console.log('Some error occured Zaven', error)\r\n    // }\r\n\r\n    // const formatDate = (rowDate) => {\r\n    //     const date = new Date(rowDate)\r\n    //     const year = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(date)\r\n    //     const month = new Intl.DateTimeFormat('en', { month: 'short' }).format(date)\r\n    //     const day = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(date)\r\n\r\n    //     return `${day}-${month}-${year}`\r\n    // }\r\n\r\n    // console.log('Data Zaven jan', data)\r\n\r\n    // console.log('Page count', Math.ceil(data.listTransactions.items.length / 7))\r\n\r\n    const rows =\r\n        lazyData &&\r\n        lazyData.listTransactions.items\r\n            .filter((transaction) => {\r\n                if (searchValue == null) {\r\n                    return transaction\r\n                } else if (\r\n                    transaction.customer[0].phone.toLowerCase().includes(searchValue.toLowerCase())\r\n                ) {\r\n                    return transaction\r\n                }\r\n            })\r\n            .map((transaction) => [\r\n                <Button\r\n                    primary\r\n                    onClick={() =>\r\n                        redirect.dispatch(Redirect.Action.ADMIN_PATH, {\r\n                            path: `/customers/${transaction.customer[0].id}`,\r\n                            newContext: true\r\n                        })\r\n                    }>\r\n                    {transaction.customer[0].phone}\r\n                </Button>,\r\n                toCurrency(Number(transaction.totalPrice)),\r\n                toCurrency(Number(transaction.totalBonusAmount)),\r\n                formatDate(transaction.createdAt)\r\n            ])\r\n\r\n    // console.log('Rows', rows)\r\n    // console.log('Here is transaction data Zvo', data)\r\n\r\n    console.log('Data from lazy query', lazyData)\r\n    console.log('Next paginate token', nextPaginateToken)\r\n    console.log('Previous paginate Tokens', previousPaginateTokens)\r\n    return (\r\n        <Page title=\"Transactions\">\r\n            <TextField\r\n                label=\"Search Product\"\r\n                value={searchValue}\r\n                onChange={handleSearchInput}\r\n                prefix={<Icon source={SearchMajorMonotone} />}\r\n                placeholder=\"Search by Customer phone number\"\r\n            />\r\n            <Button\r\n                onClick={async () => {\r\n                    await getTransactions({ variables: { nextToken: nextPaginateToken, limit: 4 } })\r\n\r\n                    setNextPaginateToken(previousPaginateTokens.push(nextPaginateToken))\r\n                }}>\r\n                Paginate next\r\n            </Button>\r\n            {/* <Button onClick={() => getTransactions()}>Paginate previous</Button> */}\r\n            <Button\r\n                primary\r\n                onClick={() =>\r\n                    redirect.dispatch(Redirect.Action.REMOTE, {\r\n                        url: 'https://dev.d3ivgpkzuz6hkr.amplifyapp.com',\r\n                        newContext: true\r\n                    })\r\n                }>\r\n                Create transaction\r\n            </Button>\r\n            {/* <Card>\r\n                <DataTable\r\n                    columnContentTypes={['text', 'text', 'text', 'text']}\r\n                    headings={[\r\n                        'Customer phone number',\r\n                        'TotalPrice',\r\n                        'TotalBonusAmount',\r\n                        'CreatedAt'\r\n                    ]}\r\n                    rows={rows}\r\n                />\r\n            </Card> */}\r\n        </Page>\r\n    )\r\n}\r\n\r\nexport default withApollo(Index)\r\n"]},"metadata":{},"sourceType":"module"}