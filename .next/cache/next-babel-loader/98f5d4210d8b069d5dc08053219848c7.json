{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport AWS from \"aws-sdk\";\nimport { Auth, API, graphqlOperation } from \"aws-amplify\";\nimport { Page, Button, Modal, Badge, Stack } from \"@shopify/polaris\";\nimport { Table, Popup, Header, Icon } from \"semantic-ui-react\";\nimport { useForm } from \"react-hook-form\";\nimport { useConfirmSignUp, useSignUp, useCreateBranch, useListBranches, useCheckBranchName } from \"../core/hooks\";\nimport ProductList from \"./ProductsList\";\nimport { formatDate } from \"../utils/helper\";\nimport BranchProducts from \"./BranchProducts\";\nimport BranchList from \"./BranchList\";\nimport AdminBranchInfo from \"./AdminBranchInfo\";\nimport { createBranch } from \"../graphql/mutation\";\nimport { listBranchs } from \"../graphql/queries\";\nAWS.config.update({\n  accessKeyId: \"AKIA5VX4IMFOFHT7M2O2\",\n  secretAccessKey: \"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\",\n  region: \"us-east-1\"\n});\nvar cognito = new AWS.CognitoIdentityServiceProvider();\n\nvar BranchConsole = function BranchConsole(_ref) {\n  _s();\n\n  var updateUser = _ref.updateUser;\n\n  var _useState = useState(false),\n      active = _useState[0],\n      setActive = _useState[1];\n\n  var _useState2 = useState({\n    activeBranchName: false,\n    activeUsername: false,\n    activePassword: false,\n    activeEmail: false,\n    activeCode: false\n  }),\n      activeFields = _useState2[0],\n      setActiveFields = _useState2[1];\n\n  var _useState3 = useState(false),\n      activeBranchName = _useState3[0],\n      setActiveBranchName = _useState3[1];\n\n  var _useState4 = useState(false),\n      activeUsername = _useState4[0],\n      setActiveUsername = _useState4[1];\n\n  var _useState5 = useState(false),\n      activePassword = _useState5[0],\n      setActivePassword = _useState5[1];\n\n  var _useState6 = useState(false),\n      activeEmail = _useState6[0],\n      setActiveEmail = _useState6[1];\n\n  var _useState7 = useState(false),\n      activeCode = _useState7[0],\n      setActiveCode = _useState7[1];\n\n  var _useState8 = useState(\"\"),\n      branchName = _useState8[0],\n      setBranchName = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      username = _useState9[0],\n      setUsername = _useState9[1];\n\n  var _useState10 = useState(\"\"),\n      password = _useState10[0],\n      setPassword = _useState10[1];\n\n  var _useState11 = useState(false),\n      showPassword = _useState11[0],\n      setShowPassword = _useState11[1];\n\n  var _useState12 = useState(\"signUp\"),\n      formType = _useState12[0],\n      setFormType = _useState12[1];\n\n  var _useState13 = useState(null),\n      userSub = _useState13[0],\n      setUserSub = _useState13[1];\n\n  var _useState14 = useState(\"\"),\n      branches = _useState14[0],\n      setBranches = _useState14[1];\n\n  var _useState15 = useState(null),\n      branchId = _useState15[0],\n      setBranchId = _useState15[1];\n\n  var _useState16 = useState(),\n      confirmErrorMessage = _useState16[0],\n      setConfirmErrorMessage = _useState16[1];\n\n  var _useState17 = useState(\"\"),\n      signUpErrorMessage = _useState17[0],\n      setSignUpErrorMessage = _useState17[1];\n\n  var _useState18 = useState(\"\"),\n      checkBranchNameErrorMessage = _useState18[0],\n      setCheckBranchNameErrorMessage = _useState18[1];\n\n  var _useSignUp = useSignUp(),\n      signUserUp = _useSignUp.signUserUp,\n      data = _useSignUp.data,\n      signUpError = _useSignUp.error;\n\n  var _useConfirmSignUp = useConfirmSignUp(),\n      confirmSignUp = _useConfirmSignUp.confirmSignUp,\n      confirmSignUpData = _useConfirmSignUp.data,\n      confirmSignUpError = _useConfirmSignUp.error;\n\n  var _useCreateBranch = useCreateBranch(),\n      createBranch = _useCreateBranch.createBranch,\n      createdBranch = _useCreateBranch.data;\n\n  var _useListBranches = useListBranches(),\n      branchesData = _useListBranches.data,\n      listBranches = _useListBranches.refetch;\n\n  var _useCheckBranchName = useCheckBranchName(branchName),\n      branchByNameData = _useCheckBranchName.data,\n      getBranchByName = _useCheckBranchName.refetch;\n\n  var _useForm = useForm(),\n      handleSubmit = _useForm.handleSubmit,\n      errors = _useForm.errors,\n      register = _useForm.register,\n      reset = _useForm.reset;\n\n  var handleChange = function handleChange() {\n    setActive(!active);\n  };\n\n  var onSubmit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n      var username, password, email;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              username = data.username, password = data.password, email = data.email;\n              console.log(\"Submitted data\", data);\n              _context.prev = 2;\n              _context.next = 5;\n              return getBranchByName();\n\n            case 5:\n              setActiveFields(function (activeFields) {\n                for (var key in activeFields) {\n                  if (activeFields.hasOwnProperty(key)) {\n                    activeFields[key] = false;\n                  }\n                }\n\n                return activeFields;\n              });\n              setFormType(\"signUp\");\n              handleChange();\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](2);\n              console.log(_context.t0);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 10]]);\n    }));\n\n    return function onSubmit(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // const onConfirm = (data) => {\n  //   const { username, code } = data\n  //   try {\n  //     confirmSignUp({ username, code })\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  // }\n\n\n  useEffect(function () {// if (!confirmSignUpData) {\n    //   if (confirmSignUpError) {\n    //     setConfirmErrorMessage(\"Invalid confirmation code\")\n    //     return\n    //   }\n    //   return\n    // }\n    // createBranch({ userSub, username, branchName })\n    // setActiveFields((activeFields) => {\n    //   for (let key in activeFields) {\n    //     if (activeFields.hasOwnProperty(key)) {\n    //       activeFields[key] = false\n    //     }\n    //   }\n    //   return activeFields\n    // })\n    // setFormType(\"signUp\")\n    // handleChange()\n  }, []);\n  useEffect(function () {\n    if (!data && signUpError) {\n      setSignUpErrorMessage(\"Branch with such a username already exists\");\n      return;\n    }\n\n    if (branchByNameData && branchByNameData.data.branchByName.items.length > 0) {\n      setCheckBranchNameErrorMessage(\"Branch with such a name already exists\");\n      return;\n    } // if (data && !signUpError) {\n    //   setFormType(\"confirm\")\n    //   setSignUpErrorMessage(\"\")\n    //   return\n    // }\n\n\n    signUserUp({\n      username: username,\n      password: password,\n      email: email\n    });\n    createBranch({\n      userSub: userSub,\n      username: username,\n      branchName: branchName\n    });\n  }, [signUpError, data, branchByNameData]);\n  useEffect(function () {\n    setUserSub(data && data.userSub);\n  }, [data]);\n  useEffect(function () {\n    listBranches();\n  }, []);\n  useEffect(function () {\n    setBranches(branchesData && branchesData.data);\n  }, [branchesData]);\n  console.log(\"Branches data\", branches);\n  console.log(\"BranchByName Data\", branchByNameData);\n  console.log(\"Branch by name error\", checkBranchNameErrorMessage);\n  return __jsx(React.Fragment, null, branchId && __jsx(AdminBranchInfo, {\n    setBranchId: setBranchId,\n    branchId: branchId\n  }), !branchId && __jsx(React.Fragment, null, __jsx(Stack, null, __jsx(Stack.Item, {\n    fill: true\n  }, __jsx(Button, {\n    onClick: handleChange,\n    primary: true\n  }, __jsx(Icon, {\n    name: \"code branch\"\n  }), \" Create branch\")), __jsx(Stack.Item, null, __jsx(Button, {\n    primary: true,\n    id: \"Logout\",\n    onClick: function onClick() {\n      Auth.signOut();\n      updateUser(null);\n    }\n  }, __jsx(Icon, {\n    name: \"sign out\"\n  }), \" Logout\"))), __jsx(BranchList, {\n    setBranchId: setBranchId\n  }), __jsx(Modal, {\n    open: active,\n    onClose: function onClose() {\n      // if (formType === \"confirm\") {\n      //   cognito\n      //     .adminDeleteUser({\n      //       UserPoolId: \"us-east-1_xuc7kseKp\",\n      //       Username: username,\n      //     })\n      //     .promise()\n      // }\n      handleChange();\n      setActiveFields(function (activeFields) {\n        for (var key in activeFields) {\n          if (activeFields.hasOwnProperty(key)) {\n            activeFields[key] = false;\n          }\n        }\n\n        return activeFields;\n      });\n      setFormType(\"signUp\");\n      setSignUpErrorMessage(\"\");\n      setCheckBranchNameErrorMessage(\"\");\n      reset();\n    },\n    title: signUpErrorMessage ? __jsx(\"p\", {\n      className: \"error-notification\"\n    }, signUpErrorMessage) : \"Fill in Branch info\"\n  }, __jsx(Modal.Section, null, formType === \"signUp\" && __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(\"div\", {\n    className: \"form-controll\"\n  }, __jsx(\"input\", {\n    name: \"branchName\",\n    onChange: function onChange(e) {\n      return setBranchName(e.target.value);\n    },\n    ref: register({\n      required: \"Branch name is required!\"\n    }),\n    onBlur: function onBlur(e) {\n      if (e.target.value) {\n        return setActiveFields(_objectSpread(_objectSpread({}, activeFields), {}, {\n          activeBranchName: true\n        }));\n      }\n\n      return setActiveFields(_objectSpread(_objectSpread({}, activeFields), {}, {\n        activeBranchName: false\n      }));\n    }\n  }), __jsx(Icon, {\n    name: \"code branch\"\n  }), __jsx(\"label\", {\n    className: activeFields.activeBranchName ? \"active\" : \"\",\n    htmlFor: \"branchName\"\n  }, \"Branch Name\"), checkBranchNameErrorMessage && __jsx(\"p\", null, checkBranchNameErrorMessage), !checkBranchNameErrorMessage && errors.branchName && __jsx(\"p\", {\n    className: \"error-notification\"\n  }, errors.branchName.message)), __jsx(\"div\", {\n    className: \"form-controll\"\n  }, __jsx(\"input\", {\n    name: \"username\",\n    onChange: function onChange(e) {\n      return setUsername(e.target.value);\n    },\n    ref: register({\n      required: \"Username is required!\"\n    }),\n    onBlur: function onBlur(e) {\n      if (e.target.value) {\n        return setActiveFields(_objectSpread(_objectSpread({}, activeFields), {}, {\n          activeUsername: true\n        }));\n      }\n\n      return setActiveFields(_objectSpread(_objectSpread({}, activeFields), {}, {\n        activeUsername: false\n      }));\n    }\n  }), __jsx(Icon, {\n    name: \"user\"\n  }), __jsx(\"label\", {\n    className: activeFields.activeUsername ? \"active\" : \"\",\n    htmlFor: \"username\"\n  }, \"Username\"), errors.username && __jsx(\"p\", {\n    className: \"error-notification\"\n  }, errors.username.message)), __jsx(\"div\", {\n    className: \"form-controll\"\n  }, __jsx(\"input\", {\n    name: \"email\",\n    ref: register({\n      required: \"Email is required!\",\n      pattern: {\n        value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n        message: \"invalid email address\"\n      }\n    }),\n    onBlur: function onBlur(e) {\n      if (e.target.value) {\n        return setActiveFields(_objectSpread(_objectSpread({}, activeFields), {}, {\n          activeEmail: true\n        }));\n      }\n\n      return setActiveFields(_objectSpread(_objectSpread({}, activeFields), {}, {\n        activeEmail: false\n      }));\n    }\n  }), __jsx(Icon, {\n    name: \"mail\"\n  }), __jsx(\"label\", {\n    className: activeFields.activeEmail ? \"active\" : \"\",\n    htmlFor: \"email\"\n  }, \"Email\"), errors.email && __jsx(\"p\", {\n    className: \"error-notification\"\n  }, errors.email.message)), __jsx(\"div\", {\n    className: \"form-controll\"\n  }, __jsx(\"input\", {\n    name: \"password\",\n    type: showPassword ? \"text\" : \"password\",\n    ref: register({\n      required: \"Password is required!\",\n      minLength: {\n        value: 8,\n        message: \"Password must be at least 8 characters long\"\n      }\n    }),\n    onChange: function onChange(e) {\n      return setPassword(e.target.value);\n    },\n    onBlur: function onBlur(e) {\n      if (e.target.value) {\n        return setActiveFields(_objectSpread(_objectSpread({}, activeFields), {}, {\n          activePassword: true\n        }));\n      }\n\n      return setActiveFields(_objectSpread(_objectSpread({}, activeFields), {}, {\n        activePassword: false\n      }));\n    }\n  }), __jsx(Icon, {\n    name: \"lock\"\n  }), __jsx(\"label\", {\n    className: activeFields.activePassword ? \"active\" : \"\",\n    htmlFor: \"password\"\n  }, \"Password\"), __jsx(Icon, {\n    className: password ? \"show-eye\" : \"not-show-eye\",\n    onClick: function onClick() {\n      return setShowPassword(!showPassword);\n    },\n    name: showPassword ? \"eye slash\" : \"eye\",\n    style: {\n      color: showPassword ? \"#6774c8\" : \"\"\n    }\n  }), errors.password && __jsx(\"p\", {\n    className: \"error-notification\"\n  }, errors.password.message)), __jsx(Button, {\n    primary: true,\n    submit: true\n  }, __jsx(Icon, {\n    name: \"sign-in\"\n  }), \" Create Branch\"))))));\n};\n\n_s(BranchConsole, \"ko6di7MTSZgjVmwotB/CJrOLGkE=\", false, function () {\n  return [useSignUp, useConfirmSignUp, useCreateBranch, useListBranches, useCheckBranchName, useForm];\n});\n\n_c = BranchConsole;\nexport default BranchConsole;\n\nvar _c;\n\n$RefreshReg$(_c, \"BranchConsole\");","map":{"version":3,"sources":["/var/www/transactions-avanta/components/BranchConsole.js"],"names":["React","useState","useEffect","useRef","useCallback","AWS","Auth","API","graphqlOperation","Page","Button","Modal","Badge","Stack","Table","Popup","Header","Icon","useForm","useConfirmSignUp","useSignUp","useCreateBranch","useListBranches","useCheckBranchName","ProductList","formatDate","BranchProducts","BranchList","AdminBranchInfo","createBranch","listBranchs","config","update","accessKeyId","secretAccessKey","region","cognito","CognitoIdentityServiceProvider","BranchConsole","updateUser","active","setActive","activeBranchName","activeUsername","activePassword","activeEmail","activeCode","activeFields","setActiveFields","setActiveBranchName","setActiveUsername","setActivePassword","setActiveEmail","setActiveCode","branchName","setBranchName","username","setUsername","password","setPassword","showPassword","setShowPassword","formType","setFormType","userSub","setUserSub","branches","setBranches","branchId","setBranchId","confirmErrorMessage","setConfirmErrorMessage","signUpErrorMessage","setSignUpErrorMessage","checkBranchNameErrorMessage","setCheckBranchNameErrorMessage","signUserUp","data","signUpError","error","confirmSignUp","confirmSignUpData","confirmSignUpError","createdBranch","branchesData","listBranches","refetch","branchByNameData","getBranchByName","handleSubmit","errors","register","reset","handleChange","onSubmit","email","console","log","key","hasOwnProperty","branchByName","items","length","signOut","e","target","value","required","message","pattern","minLength","color"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from \"react\"\nimport AWS from \"aws-sdk\"\nimport { Auth, API, graphqlOperation } from \"aws-amplify\"\nimport { Page, Button, Modal, Badge, Stack } from \"@shopify/polaris\"\nimport { Table, Popup, Header, Icon } from \"semantic-ui-react\"\nimport { useForm } from \"react-hook-form\"\nimport {\n  useConfirmSignUp,\n  useSignUp,\n  useCreateBranch,\n  useListBranches,\n  useCheckBranchName,\n} from \"../core/hooks\"\nimport ProductList from \"./ProductsList\"\nimport { formatDate } from \"../utils/helper\"\nimport BranchProducts from \"./BranchProducts\"\nimport BranchList from \"./BranchList\"\nimport AdminBranchInfo from \"./AdminBranchInfo\"\nimport { createBranch } from \"../graphql/mutation\"\nimport { listBranchs } from \"../graphql/queries\"\n\nAWS.config.update({\n  accessKeyId: \"AKIA5VX4IMFOFHT7M2O2\",\n  secretAccessKey: \"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\",\n  region: \"us-east-1\",\n})\n\nconst cognito = new AWS.CognitoIdentityServiceProvider()\n\nconst BranchConsole = ({ updateUser }) => {\n  const [active, setActive] = useState(false)\n  const [activeFields, setActiveFields] = useState({\n    activeBranchName: false,\n    activeUsername: false,\n    activePassword: false,\n    activeEmail: false,\n    activeCode: false,\n  })\n  const [activeBranchName, setActiveBranchName] = useState(false)\n  const [activeUsername, setActiveUsername] = useState(false)\n  const [activePassword, setActivePassword] = useState(false)\n  const [activeEmail, setActiveEmail] = useState(false)\n  const [activeCode, setActiveCode] = useState(false)\n  const [branchName, setBranchName] = useState(\"\")\n  const [username, setUsername] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [showPassword, setShowPassword] = useState(false)\n  const [formType, setFormType] = useState(\"signUp\")\n  const [userSub, setUserSub] = useState(null)\n  const [branches, setBranches] = useState(\"\")\n  const [branchId, setBranchId] = useState(null)\n  const [confirmErrorMessage, setConfirmErrorMessage] = useState()\n  const [signUpErrorMessage, setSignUpErrorMessage] = useState(\"\")\n  const [checkBranchNameErrorMessage, setCheckBranchNameErrorMessage] = useState(\"\")\n\n  const { signUserUp, data, error: signUpError } = useSignUp()\n  const { confirmSignUp, data: confirmSignUpData, error: confirmSignUpError } = useConfirmSignUp()\n  const { createBranch, data: createdBranch } = useCreateBranch()\n  const { data: branchesData, refetch: listBranches } = useListBranches()\n  const { data: branchByNameData, refetch: getBranchByName } = useCheckBranchName(branchName)\n  const { handleSubmit, errors, register, reset } = useForm()\n\n  const handleChange = () => {\n    setActive(!active)\n  }\n\n  const onSubmit = async (data) => {\n    const { username, password, email } = data\n    console.log(\"Submitted data\", data)\n    try {\n      await getBranchByName()\n      setActiveFields((activeFields) => {\n        for (let key in activeFields) {\n          if (activeFields.hasOwnProperty(key)) {\n            activeFields[key] = false\n          }\n        }\n        return activeFields\n      })\n      setFormType(\"signUp\")\n      handleChange()\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  // const onConfirm = (data) => {\n  //   const { username, code } = data\n  //   try {\n  //     confirmSignUp({ username, code })\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  // }\n\n  useEffect(() => {\n    // if (!confirmSignUpData) {\n    //   if (confirmSignUpError) {\n    //     setConfirmErrorMessage(\"Invalid confirmation code\")\n    //     return\n    //   }\n    //   return\n    // }\n    // createBranch({ userSub, username, branchName })\n    // setActiveFields((activeFields) => {\n    //   for (let key in activeFields) {\n    //     if (activeFields.hasOwnProperty(key)) {\n    //       activeFields[key] = false\n    //     }\n    //   }\n    //   return activeFields\n    // })\n    // setFormType(\"signUp\")\n    // handleChange()\n  }, [])\n\n  useEffect(() => {\n    if (!data && signUpError) {\n      setSignUpErrorMessage(\"Branch with such a username already exists\")\n      return\n    }\n    if (branchByNameData && branchByNameData.data.branchByName.items.length > 0) {\n      setCheckBranchNameErrorMessage(\"Branch with such a name already exists\")\n      return\n    }\n    // if (data && !signUpError) {\n    //   setFormType(\"confirm\")\n    //   setSignUpErrorMessage(\"\")\n    //   return\n    // }\n    signUserUp({ username, password, email })\n    createBranch({ userSub, username, branchName })\n  }, [signUpError, data, branchByNameData])\n\n  useEffect(() => {\n    setUserSub(data && data.userSub)\n  }, [data])\n\n  useEffect(() => {\n    listBranches()\n  }, [])\n\n  useEffect(() => {\n    setBranches(branchesData && branchesData.data)\n  }, [branchesData])\n\n  console.log(\"Branches data\", branches)\n  console.log(\"BranchByName Data\", branchByNameData)\n  console.log(\"Branch by name error\", checkBranchNameErrorMessage)\n\n  return (\n    <>\n      {branchId && <AdminBranchInfo setBranchId={setBranchId} branchId={branchId} />}\n      {!branchId && (\n        <>\n          <Stack>\n            <Stack.Item fill>\n              <Button onClick={handleChange} primary>\n                <Icon name=\"code branch\" /> Create branch\n              </Button>\n            </Stack.Item>\n            <Stack.Item>\n              <Button\n                primary\n                id=\"Logout\"\n                onClick={() => {\n                  Auth.signOut()\n                  updateUser(null)\n                }}>\n                <Icon name=\"sign out\" /> Logout\n              </Button>\n            </Stack.Item>\n          </Stack>\n          <BranchList setBranchId={setBranchId} />\n          <Modal\n            open={active}\n            onClose={() => {\n              // if (formType === \"confirm\") {\n              //   cognito\n              //     .adminDeleteUser({\n              //       UserPoolId: \"us-east-1_xuc7kseKp\",\n              //       Username: username,\n              //     })\n              //     .promise()\n              // }\n              handleChange()\n              setActiveFields((activeFields) => {\n                for (let key in activeFields) {\n                  if (activeFields.hasOwnProperty(key)) {\n                    activeFields[key] = false\n                  }\n                }\n                return activeFields\n              })\n              setFormType(\"signUp\")\n              setSignUpErrorMessage(\"\")\n              setCheckBranchNameErrorMessage(\"\")\n              reset()\n            }}\n            title={\n              signUpErrorMessage ? (\n                <p className=\"error-notification\">{signUpErrorMessage}</p>\n              ) : (\n                \"Fill in Branch info\"\n              )\n            }>\n            <Modal.Section>\n              {formType === \"signUp\" && (\n                <form onSubmit={handleSubmit(onSubmit)}>\n                  <div className=\"form-controll\">\n                    <input\n                      name=\"branchName\"\n                      onChange={(e) => setBranchName(e.target.value)}\n                      ref={register({ required: \"Branch name is required!\" })}\n                      onBlur={(e) => {\n                        if (e.target.value) {\n                          return setActiveFields({ ...activeFields, activeBranchName: true })\n                        }\n                        return setActiveFields({ ...activeFields, activeBranchName: false })\n                      }}\n                    />\n                    <Icon name=\"code branch\" />\n                    <label\n                      className={activeFields.activeBranchName ? \"active\" : \"\"}\n                      htmlFor=\"branchName\">\n                      Branch Name\n                    </label>\n                    {checkBranchNameErrorMessage && <p>{checkBranchNameErrorMessage}</p>}\n                    {!checkBranchNameErrorMessage && errors.branchName && (\n                      <p className=\"error-notification\">{errors.branchName.message}</p>\n                    )}\n                  </div>\n                  <div className=\"form-controll\">\n                    <input\n                      name=\"username\"\n                      onChange={(e) => setUsername(e.target.value)}\n                      ref={register({ required: \"Username is required!\" })}\n                      onBlur={(e) => {\n                        if (e.target.value) {\n                          return setActiveFields({ ...activeFields, activeUsername: true })\n                        }\n                        return setActiveFields({ ...activeFields, activeUsername: false })\n                      }}\n                    />\n                    <Icon name=\"user\" />\n                    <label\n                      className={activeFields.activeUsername ? \"active\" : \"\"}\n                      htmlFor=\"username\">\n                      Username\n                    </label>\n                    {errors.username && (\n                      <p className=\"error-notification\">{errors.username.message}</p>\n                    )}\n                  </div>\n                  <div className=\"form-controll\">\n                    <input\n                      name=\"email\"\n                      ref={register({\n                        required: \"Email is required!\",\n                        pattern: {\n                          value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                          message: \"invalid email address\",\n                        },\n                      })}\n                      onBlur={(e) => {\n                        if (e.target.value) {\n                          return setActiveFields({ ...activeFields, activeEmail: true })\n                        }\n                        return setActiveFields({ ...activeFields, activeEmail: false })\n                      }}\n                    />\n                    <Icon name=\"mail\" />\n                    <label className={activeFields.activeEmail ? \"active\" : \"\"} htmlFor=\"email\">\n                      Email\n                    </label>\n                    {errors.email && <p className=\"error-notification\">{errors.email.message}</p>}\n                  </div>\n                  <div className=\"form-controll\">\n                    <input\n                      name=\"password\"\n                      type={showPassword ? \"text\" : \"password\"}\n                      ref={register({\n                        required: \"Password is required!\",\n                        minLength: {\n                          value: 8,\n                          message: \"Password must be at least 8 characters long\",\n                        },\n                      })}\n                      onChange={(e) => setPassword(e.target.value)}\n                      onBlur={(e) => {\n                        if (e.target.value) {\n                          return setActiveFields({ ...activeFields, activePassword: true })\n                        }\n                        return setActiveFields({ ...activeFields, activePassword: false })\n                      }}\n                    />\n                    <Icon name=\"lock\" />\n                    <label\n                      className={activeFields.activePassword ? \"active\" : \"\"}\n                      htmlFor=\"password\">\n                      Password\n                    </label>\n                    <Icon\n                      className={password ? \"show-eye\" : \"not-show-eye\"}\n                      onClick={() => setShowPassword(!showPassword)}\n                      name={showPassword ? \"eye slash\" : \"eye\"}\n                      style={{ color: showPassword ? \"#6774c8\" : \"\" }}\n                    />\n                    {errors.password && (\n                      <p className=\"error-notification\">{errors.password.message}</p>\n                    )}\n                  </div>\n                  <Button primary submit>\n                    <Icon name=\"sign-in\" /> Create Branch\n                  </Button>\n                </form>\n              )}\n              {/* {formType === \"confirm\" && (\n                <form onSubmit={handleSubmit(onConfirm)}>\n                  <div className=\"form-controll\">\n                    <input\n                      name=\"username\"\n                      value={username}\n                      onChange={(e) => setUsername(e.target.value)}\n                      ref={register({ required: \"Username is required!\" })}\n                      onBlur={(e) => {\n                        if (e.target.value) {\n                          return setActiveFields({ ...activeFields, activeUsername: true })\n                        }\n                        return setActiveFields({ ...activeFields, activeUsername: false })\n                      }}\n                    />\n                    <Icon name=\"user\" />\n                    <label\n                      className={activeFields.activeUsername ? \"active\" : \"\"}\n                      htmlFor=\"username\">\n                      Username\n                    </label>\n                    {errors.username && (\n                      <p className=\"error-notification\">{errors.username.message}</p>\n                    )}\n                  </div>\n                  <div className=\"form-controll\">\n                    <input\n                      name=\"code\"\n                      ref={register({ required: \"Confirm code is required!\" })}\n                      onChange={() => setConfirmErrorMessage(\"\")}\n                      onBlur={(e) => {\n                        if (e.target.value) {\n                          return setActiveFields({ ...activeFields, activeCode: true })\n                        }\n                        return setActiveFields({ ...activeFields, activeCode: false })\n                      }}\n                    />\n                    <Icon name=\"unlock alternate\" />\n                    <label className={activeFields.activeCode ? \"active\" : \"\"} htmlFor=\"code\">\n                      Confirm code\n                    </label>\n                    {!errors.code && confirmErrorMessage && (\n                      <p className=\"error-notification\">{confirmErrorMessage}</p>\n                    )}\n                    {errors.code && <p className=\"error-notification\">{errors.code.message}</p>}\n                  </div>\n                  <Button primary submit>\n                    <Icon name=\"sign-in\" /> Confirm\n                  </Button>\n                </form>\n              )} */}\n            </Modal.Section>\n          </Modal>\n        </>\n      )}\n    </>\n  )\n}\n\nexport default BranchConsole\n"]},"metadata":{},"sourceType":"module"}