{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject7() {\n  var data = _taggedTemplateLiteral([\"\\n  query branchByName($branchName: String!) {\\n    branchByName(branchName: $branchName) {\\n      items {\\n        adminId\\n        branchName\\n        branchUsername\\n        createdAt\\n        updatedAt\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n  query listBranchs {\\n    listBranchs {\\n      items {\\n        adminId\\n        branchName\\n        branchUsername\\n        createdAt\\n        id\\n        branchProducts {\\n          items {\\n            branchId\\n            createdAt\\n            id\\n            productId\\n            tags\\n            updatedAt\\n          }\\n        }\\n        branchPaymentRequests {\\n          items {\\n            branchId\\n            id\\n          }\\n        }\\n        transactions {\\n          items {\\n            branchId\\n            id\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n  query getBranch($id: ID!) {\\n    getBranch(id: $id) {\\n      transactions(sortDirection: DESC) {\\n        items {\\n          branchId\\n          createdAt\\n          currency\\n          note\\n          customer {\\n            email\\n            id\\n            firstName\\n            lastName\\n            phone\\n          }\\n          totalBonusAmount\\n          totalPrice\\n          updatedAt\\n          sortDate\\n        }\\n      }\\n      branchName\\n      adminId\\n      id\\n      branchProducts {\\n        items {\\n          branchId\\n          createdAt\\n          id\\n          productId\\n          tags\\n          updatedAt\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n  query listPaymentRequest($branchId: ID, $status: PaymentStatus, $limit: Int, $nextToken: String) {\\n    listPaymentRequests(\\n      limit: $limit\\n      nextToken: $nextToken\\n      filter: { branchId: { eq: $branchId }, status: { eq: $status } }\\n    ) {\\n      items {\\n        bonusAmount\\n        createdAt\\n        customerId\\n        id\\n        orderId\\n        status\\n        updatedAt\\n      }\\n      nextToken\\n    }\\n  }\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  query branchByAdminId($adminId: ID!) {\\n    branchByAdminId(adminId: $adminId) {\\n      items {\\n        adminId\\n        branchName\\n        id\\n        transactions {\\n          items {\\n            branchId\\n            createdAt\\n            currency\\n            id\\n            note\\n            customer {\\n              email\\n              firstName\\n              id\\n              lastName\\n              phone\\n            }\\n            products {\\n              bonusPercentage\\n              id\\n              image\\n              priceAmount\\n              priceCurrency\\n              title\\n            }\\n            sortDate\\n            totalBonusAmount\\n            totalPrice\\n            updatedAt\\n          }\\n        }\\n        branchProducts {\\n          items {\\n            branchId\\n            createdAt\\n            id\\n            productId\\n            tags\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  query Products {\\n    products(first: 100) {\\n      edges {\\n        node {\\n          id\\n          title\\n          tags\\n          description(truncateAt: 100)\\n          variants(first: 1) {\\n            edges {\\n              node {\\n                id\\n                price\\n              }\\n            }\\n          }\\n          images(first: 1) {\\n            edges {\\n              node {\\n                originalSrc\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query listTransactions($limit: Int, $nextToken: String) {\\n    listTransactions(limit: $limit, nextToken: $nextToken) {\\n      nextToken\\n      items {\\n        id\\n        totalPrice\\n        totalBonusAmount\\n        note\\n        currency\\n        products {\\n          id\\n          title\\n          bonusPercentage\\n          priceAmount\\n          priceCurrency\\n          image\\n        }\\n        customer {\\n          id\\n          firstName\\n          lastName\\n          phone\\n          email\\n        }\\n        createdAt\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from \"graphql-tag\";\nexport var listTransactions = gql(_templateObject());\nexport var listProducts = gql(_templateObject2());\nexport var branchByAdminId = gql(_templateObject3());\nexport var listPaymentRequest = gql(_templateObject4());\nexport var getBranchById = gql(_templateObject5());\nexport var listBranchs = gql(_templateObject6());\nexport var getBranchByName = gql(_templateObject7());","map":{"version":3,"sources":["/var/www/transactions-avanta/graphql/queries.js"],"names":["gql","listTransactions","listProducts","branchByAdminId","listPaymentRequest","getBranchById","listBranchs","getBranchByName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AAEA,OAAO,IAAMC,gBAAgB,GAAGD,GAAH,mBAAtB;AA+BP,OAAO,IAAME,YAAY,GAAGF,GAAH,oBAAlB;AA8BP,OAAO,IAAMG,eAAe,GAAGH,GAAH,oBAArB;AAgDP,OAAO,IAAMI,kBAAkB,GAAGJ,GAAH,oBAAxB;AAoBP,OAAO,IAAMK,aAAa,GAAGL,GAAH,oBAAnB;AAuCP,OAAO,IAAMM,WAAW,GAAGN,GAAH,oBAAjB;AAoCP,OAAO,IAAMO,eAAe,GAAGP,GAAH,oBAArB","sourcesContent":["import gql from \"graphql-tag\"\n\nexport const listTransactions = gql`\n  query listTransactions($limit: Int, $nextToken: String) {\n    listTransactions(limit: $limit, nextToken: $nextToken) {\n      nextToken\n      items {\n        id\n        totalPrice\n        totalBonusAmount\n        note\n        currency\n        products {\n          id\n          title\n          bonusPercentage\n          priceAmount\n          priceCurrency\n          image\n        }\n        customer {\n          id\n          firstName\n          lastName\n          phone\n          email\n        }\n        createdAt\n      }\n    }\n  }\n`\n\nexport const listProducts = gql`\n  query Products {\n    products(first: 100) {\n      edges {\n        node {\n          id\n          title\n          tags\n          description(truncateAt: 100)\n          variants(first: 1) {\n            edges {\n              node {\n                id\n                price\n              }\n            }\n          }\n          images(first: 1) {\n            edges {\n              node {\n                originalSrc\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const branchByAdminId = gql`\n  query branchByAdminId($adminId: ID!) {\n    branchByAdminId(adminId: $adminId) {\n      items {\n        adminId\n        branchName\n        id\n        transactions {\n          items {\n            branchId\n            createdAt\n            currency\n            id\n            note\n            customer {\n              email\n              firstName\n              id\n              lastName\n              phone\n            }\n            products {\n              bonusPercentage\n              id\n              image\n              priceAmount\n              priceCurrency\n              title\n            }\n            sortDate\n            totalBonusAmount\n            totalPrice\n            updatedAt\n          }\n        }\n        branchProducts {\n          items {\n            branchId\n            createdAt\n            id\n            productId\n            tags\n          }\n        }\n      }\n    }\n  }\n`\nexport const listPaymentRequest = gql`\n  query listPaymentRequest($branchId: ID, $status: PaymentStatus, $limit: Int, $nextToken: String) {\n    listPaymentRequests(\n      limit: $limit\n      nextToken: $nextToken\n      filter: { branchId: { eq: $branchId }, status: { eq: $status } }\n    ) {\n      items {\n        bonusAmount\n        createdAt\n        customerId\n        id\n        orderId\n        status\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`\nexport const getBranchById = gql`\n  query getBranch($id: ID!) {\n    getBranch(id: $id) {\n      transactions(sortDirection: DESC) {\n        items {\n          branchId\n          createdAt\n          currency\n          note\n          customer {\n            email\n            id\n            firstName\n            lastName\n            phone\n          }\n          totalBonusAmount\n          totalPrice\n          updatedAt\n          sortDate\n        }\n      }\n      branchName\n      adminId\n      id\n      branchProducts {\n        items {\n          branchId\n          createdAt\n          id\n          productId\n          tags\n          updatedAt\n        }\n      }\n    }\n  }\n`\n\nexport const listBranchs = gql`\n  query listBranchs {\n    listBranchs {\n      items {\n        adminId\n        branchName\n        branchUsername\n        createdAt\n        id\n        branchProducts {\n          items {\n            branchId\n            createdAt\n            id\n            productId\n            tags\n            updatedAt\n          }\n        }\n        branchPaymentRequests {\n          items {\n            branchId\n            id\n          }\n        }\n        transactions {\n          items {\n            branchId\n            id\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const getBranchByName = gql`\n  query branchByName($branchName: String!) {\n    branchByName(branchName: $branchName) {\n      items {\n        adminId\n        branchName\n        branchUsername\n        createdAt\n        updatedAt\n      }\n    }\n  }\n`\n"]},"metadata":{},"sourceType":"module"}