{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { Auth, API, graphqlOperation } from \"aws-amplify\";\nimport gql from \"graphql-tag\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { Page, Button, Modal, Form, FormLayout, TextField, Badge, Stack } from \"@shopify/polaris\";\nimport { Table, Popup, Header, Icon } from \"semantic-ui-react\";\nimport { useConfirmSignUp, useSignUp } from \"../core/hooks\";\nimport ProductList from \"./ProductsList\";\nimport { formatDate } from \"../utils/helper\";\nimport config from \"../aws-exports\";\nimport BranchProducts from \"./BranchProducts\";\nimport BranchList from \"./BranchList\";\nimport AdminBranchInfo from \"./AdminBranchInfo\";\nimport { createBranch } from \"../graphql/mutation\";\nimport { listBranchs } from \"../graphql/queries\";\nAPI.configure(config);\n\nvar BranchConsole = function BranchConsole(_ref) {\n  _s();\n\n  var updateUser = _ref.updateUser;\n\n  var _useState = useState(false),\n      active = _useState[0],\n      setActive = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      branchName = _useState2[0],\n      setBranchName = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      username = _useState3[0],\n      setUsername = _useState3[1];\n\n  var _useState4 = useState(\"\"),\n      email = _useState4[0],\n      setEmail = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      password = _useState5[0],\n      setPassword = _useState5[1];\n\n  var _useState6 = useState(\"\"),\n      code = _useState6[0],\n      setCode = _useState6[1];\n\n  var _useState7 = useState(\"signUp\"),\n      formType = _useState7[0],\n      setFormType = _useState7[1];\n\n  var _useState8 = useState(null),\n      userSub = _useState8[0],\n      setUserSub = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      branches = _useState9[0],\n      setBranches = _useState9[1];\n\n  var _useState10 = useState(null),\n      branchId = _useState10[0],\n      setBranchId = _useState10[1];\n\n  var _useSignUp = useSignUp(),\n      signUserUp = _useSignUp.signUserUp,\n      data = _useSignUp.data;\n\n  var _useConfirmSignUp = useConfirmSignUp(),\n      confirmSignUp = _useConfirmSignUp.confirmSignUp;\n\n  var onChangeBranchName = useCallback(function (newValue) {\n    setBranchName(newValue);\n  }, []);\n  var onChangeUsername = useCallback(function (newValue) {\n    setUsername(newValue);\n  }, []);\n  var onChangePassword = useCallback(function (newValue) {\n    setPassword(newValue);\n  }, []);\n  var onChangeEmail = useCallback(function (newValue) {\n    setEmail(newValue);\n  }, []);\n  var onChangeCode = useCallback(function (newValue) {\n    setCode(newValue);\n  }, []);\n\n  var handleChange = function handleChange() {\n    setActive(!active);\n  };\n\n  var signUp = function signUp(e) {\n    e.preventDefault();\n\n    try {\n      signUserUp({\n        username: username,\n        password: password,\n        attributes: {\n          email: email\n        }\n      }); // setUserSub(data && data.userSub)\n\n      setFormType(\"confirm\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(function () {\n    setUserSub(data && data.userSub);\n  }, [data]); // const signUp = async (e) => {\n  //   e.preventDefault()\n  //   try {\n  //     const user = await Auth.signUp({ username, password, attributes: { email } })\n  //     setUserSub(user.userSub)\n  //     setFormType(\"confirm\")\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  // }\n  // const confirm = async (e) => {\n  //   e.preventDefault()\n  //   try {\n  //     confirmSignUp({ username, code })\n  //     const confirmedUser = await Auth.confirmSignUp(username, code)\n  //     const branch = await API.graphql(\n  //       graphqlOperation(createBranch, {\n  //         input: {\n  //           adminId: userSub,\n  //           branchUsername: username,\n  //           branchName: branchName,\n  //           id: uuidv4(),\n  //         },\n  //       })\n  //     )\n  //     setFormType(\"signUp\")\n  //     handleChange()\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  // }\n\n  var confirm = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var confirmedUser, branch;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              _context.prev = 1;\n              _context.next = 4;\n              return Auth.confirmSignUp(username, code);\n\n            case 4:\n              confirmedUser = _context.sent;\n              _context.next = 7;\n              return API.graphql(graphqlOperation(createBranch, {\n                input: {\n                  adminId: userSub,\n                  branchUsername: username,\n                  branchName: branchName,\n                  id: uuidv4()\n                }\n              }));\n\n            case 7:\n              branch = _context.sent;\n              setFormType(\"signUp\");\n              handleChange();\n              _context.next = 15;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](1);\n              console.log(_context.t0);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 12]]);\n    }));\n\n    return function confirm(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var fetchBranches = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var getBranches;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return API.graphql(graphqlOperation(listBranchs));\n\n            case 3:\n              getBranches = _context2.sent;\n              setBranches(getBranches.data);\n              _context2.next = 10;\n              break;\n\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(_context2.t0);\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 7]]);\n    }));\n\n    return function fetchBranches() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    fetchBranches();\n  }, []);\n  return __jsx(React.Fragment, null, branchId && __jsx(AdminBranchInfo, {\n    setBranchId: setBranchId,\n    branchId: branchId\n  }), !branchId && __jsx(React.Fragment, null, __jsx(Stack, null, __jsx(Stack.Item, {\n    fill: true\n  }, __jsx(Button, {\n    onClick: handleChange,\n    primary: true\n  }, __jsx(Icon, {\n    name: \"code branch\"\n  }), \" Create branch\")), __jsx(Stack.Item, null, __jsx(Button, {\n    primary: true,\n    id: \"Logout\",\n    onClick: function onClick() {\n      Auth.signOut();\n      updateUser(null);\n    }\n  }, __jsx(Icon, {\n    name: \"sign out\"\n  }), \" Logout\"))), __jsx(BranchList, {\n    setBranchId: setBranchId\n  }), __jsx(Modal, {\n    open: active,\n    onClose: handleChange,\n    title: \"Fill in Branch info\"\n  }, __jsx(Modal.Section, null, formType === \"signUp\" && __jsx(Form, {\n    onSubmit: signUp\n  }, __jsx(FormLayout, null, __jsx(TextField, {\n    value: branchName,\n    onChange: onChangeBranchName,\n    label: \"Branch Name\"\n  }), __jsx(TextField, {\n    value: username,\n    onChange: onChangeUsername,\n    label: \"Branch admin username\"\n  }), __jsx(TextField, {\n    value: email,\n    onChange: onChangeEmail,\n    label: \"Branch admin email\"\n  }), __jsx(TextField, {\n    type: \"password\",\n    value: password,\n    onChange: onChangePassword,\n    label: \"Branch admin password\"\n  }), __jsx(Button, {\n    primary: true,\n    submit: true\n  }, \"Create Branch\"))), formType === \"confirm\" && __jsx(Form, {\n    onSubmit: confirm\n  }, __jsx(FormLayout, null, __jsx(TextField, {\n    value: username,\n    onChange: onChangeUsername,\n    label: \"Branch admin username\"\n  }), __jsx(TextField, {\n    value: code,\n    onChange: onChangeCode,\n    label: \"Confirmation code\"\n  }), __jsx(Button, {\n    primary: true,\n    submit: true\n  }, \"Confirm\")))))));\n};\n\n_s(BranchConsole, \"pFAJ5y0ddiv61IIRti5J6Tb2mQA=\", false, function () {\n  return [useSignUp, useConfirmSignUp];\n});\n\n_c = BranchConsole;\nexport default BranchConsole;\n\nvar _c;\n\n$RefreshReg$(_c, \"BranchConsole\");","map":{"version":3,"sources":["/var/www/transactions-avanta/components/BranchConsole.js"],"names":["React","useState","useEffect","useRef","useCallback","Auth","API","graphqlOperation","gql","v4","uuidv4","Page","Button","Modal","Form","FormLayout","TextField","Badge","Stack","Table","Popup","Header","Icon","useConfirmSignUp","useSignUp","ProductList","formatDate","config","BranchProducts","BranchList","AdminBranchInfo","createBranch","listBranchs","configure","BranchConsole","updateUser","active","setActive","branchName","setBranchName","username","setUsername","email","setEmail","password","setPassword","code","setCode","formType","setFormType","userSub","setUserSub","branches","setBranches","branchId","setBranchId","signUserUp","data","confirmSignUp","onChangeBranchName","newValue","onChangeUsername","onChangePassword","onChangeEmail","onChangeCode","handleChange","signUp","e","preventDefault","attributes","error","console","log","confirm","confirmedUser","graphql","input","adminId","branchUsername","id","branch","fetchBranches","getBranches","signOut"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from \"react\"\nimport { Auth, API, graphqlOperation } from \"aws-amplify\"\nimport gql from \"graphql-tag\"\nimport { v4 as uuidv4 } from \"uuid\"\nimport { Page, Button, Modal, Form, FormLayout, TextField, Badge, Stack } from \"@shopify/polaris\"\nimport { Table, Popup, Header, Icon } from \"semantic-ui-react\"\nimport { useConfirmSignUp, useSignUp } from \"../core/hooks\"\nimport ProductList from \"./ProductsList\"\nimport { formatDate } from \"../utils/helper\"\nimport config from \"../aws-exports\"\nimport BranchProducts from \"./BranchProducts\"\nimport BranchList from \"./BranchList\"\nimport AdminBranchInfo from \"./AdminBranchInfo\"\nimport { createBranch } from \"../graphql/mutation\"\nimport { listBranchs } from \"../graphql/queries\"\n\nAPI.configure(config)\n\nconst BranchConsole = ({ updateUser }) => {\n  const [active, setActive] = useState(false)\n  const [branchName, setBranchName] = useState(\"\")\n  const [username, setUsername] = useState(\"\")\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [code, setCode] = useState(\"\")\n  const [formType, setFormType] = useState(\"signUp\")\n  const [userSub, setUserSub] = useState(null)\n  const [branches, setBranches] = useState(\"\")\n  const [branchId, setBranchId] = useState(null)\n\n  const { signUserUp, data } = useSignUp()\n  const { confirmSignUp } = useConfirmSignUp()\n\n  const onChangeBranchName = useCallback((newValue) => {\n    setBranchName(newValue)\n  }, [])\n\n  const onChangeUsername = useCallback((newValue) => {\n    setUsername(newValue)\n  }, [])\n\n  const onChangePassword = useCallback((newValue) => {\n    setPassword(newValue)\n  }, [])\n\n  const onChangeEmail = useCallback((newValue) => {\n    setEmail(newValue)\n  }, [])\n\n  const onChangeCode = useCallback((newValue) => {\n    setCode(newValue)\n  }, [])\n\n  const handleChange = () => {\n    setActive(!active)\n  }\n\n  const signUp = (e) => {\n    e.preventDefault()\n    try {\n      signUserUp({ username, password, attributes: { email } })\n      // setUserSub(data && data.userSub)\n      setFormType(\"confirm\")\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    setUserSub(data && data.userSub)\n  }, [data])\n\n  // const signUp = async (e) => {\n  //   e.preventDefault()\n  //   try {\n  //     const user = await Auth.signUp({ username, password, attributes: { email } })\n  //     setUserSub(user.userSub)\n  //     setFormType(\"confirm\")\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  // }\n\n  // const confirm = async (e) => {\n  //   e.preventDefault()\n  //   try {\n  //     confirmSignUp({ username, code })\n  //     const confirmedUser = await Auth.confirmSignUp(username, code)\n  //     const branch = await API.graphql(\n  //       graphqlOperation(createBranch, {\n  //         input: {\n  //           adminId: userSub,\n  //           branchUsername: username,\n  //           branchName: branchName,\n  //           id: uuidv4(),\n  //         },\n  //       })\n  //     )\n  //     setFormType(\"signUp\")\n  //     handleChange()\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  // }\n\n  const confirm = async (e) => {\n    e.preventDefault()\n    try {\n      const confirmedUser = await Auth.confirmSignUp(username, code)\n      const branch = await API.graphql(\n        graphqlOperation(createBranch, {\n          input: {\n            adminId: userSub,\n            branchUsername: username,\n            branchName: branchName,\n            id: uuidv4(),\n          },\n        })\n      )\n      setFormType(\"signUp\")\n      handleChange()\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const fetchBranches = async () => {\n    try {\n      const getBranches = await API.graphql(graphqlOperation(listBranchs))\n      setBranches(getBranches.data)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    fetchBranches()\n  }, [])\n\n  return (\n    <>\n      {branchId && <AdminBranchInfo setBranchId={setBranchId} branchId={branchId} />}\n      {!branchId && (\n        <>\n          <Stack>\n            <Stack.Item fill>\n              <Button onClick={handleChange} primary>\n                <Icon name=\"code branch\" /> Create branch\n              </Button>\n            </Stack.Item>\n            <Stack.Item>\n              <Button\n                primary\n                id=\"Logout\"\n                onClick={() => {\n                  Auth.signOut()\n                  updateUser(null)\n                }}>\n                <Icon name=\"sign out\" /> Logout\n              </Button>\n            </Stack.Item>\n          </Stack>\n          <BranchList setBranchId={setBranchId} />\n          <Modal open={active} onClose={handleChange} title=\"Fill in Branch info\">\n            <Modal.Section>\n              {formType === \"signUp\" && (\n                <Form onSubmit={signUp}>\n                  <FormLayout>\n                    <TextField\n                      value={branchName}\n                      onChange={onChangeBranchName}\n                      label=\"Branch Name\"\n                    />\n                    <TextField\n                      value={username}\n                      onChange={onChangeUsername}\n                      label=\"Branch admin username\"\n                    />\n                    <TextField value={email} onChange={onChangeEmail} label=\"Branch admin email\" />\n                    <TextField\n                      type=\"password\"\n                      value={password}\n                      onChange={onChangePassword}\n                      label=\"Branch admin password\"\n                    />\n                    <Button primary submit>\n                      Create Branch\n                    </Button>\n                  </FormLayout>\n                </Form>\n              )}\n              {formType === \"confirm\" && (\n                <Form onSubmit={confirm}>\n                  <FormLayout>\n                    <TextField\n                      value={username}\n                      onChange={onChangeUsername}\n                      label=\"Branch admin username\"\n                    />\n                    <TextField value={code} onChange={onChangeCode} label=\"Confirmation code\" />\n                    <Button primary submit>\n                      Confirm\n                    </Button>\n                  </FormLayout>\n                </Form>\n              )}\n            </Modal.Section>\n          </Modal>\n        </>\n      )}\n    </>\n  )\n}\n\nexport default BranchConsole\n"]},"metadata":{},"sourceType":"module"}