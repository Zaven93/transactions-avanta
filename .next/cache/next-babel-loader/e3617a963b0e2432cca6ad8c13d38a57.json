{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport axios from 'axios';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport createApp from '@shopify/app-bridge';\nimport { Redirect, ResourcePicker } from '@shopify/app-bridge/actions';\nimport gql from 'graphql-tag';\nimport { print } from 'graphql';\nimport { Card, DataTable, Button, Page, Pagination, TextField, ChoiceList, Filters, Icon, Stack } from '@shopify/polaris';\nimport { SearchMajorMonotone, TransactionMajorMonotone, BalanceMajorMonotone } from '@shopify/polaris-icons';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nAPI.configure(config);\nconst listTransactions = gql`\n    query listTransactions($limit: Int, $nextToken: String) {\n        listTransactions(limit: $limit, nextToken: $nextToken) {\n            nextToken\n            items {\n                id\n                totalPrice\n                totalBonusAmount\n                currency\n                products {\n                    id\n                    title\n                    bonusPercentage\n                    priceAmount\n                    priceCurrency\n                    image\n                }\n                customer {\n                    id\n                    firstName\n                    lastName\n                    phone\n                    email\n                }\n                createdAt\n            }\n        }\n    }\n`;\nconst paymentSubscription = gql`\n    subscription paymentRequest {\n        onCreatePaymentRequest {\n            bonusAmount\n            createdAt\n            customerId\n            orderId\n            updatedAt\n        }\n    }\n`;\nconst listProducts = gql`\n    query Products {\n        products(first: 100) {\n            edges {\n                node {\n                    id\n                    title\n                    tags\n                    description(truncateAt: 100)\n                    variants(first: 1) {\n                        edges {\n                            node {\n                                id\n                                price\n                            }\n                        }\n                    }\n                    images(first: 1) {\n                        edges {\n                            node {\n                                originalSrc\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n`;\n\nconst Index = ({\n  transactions\n}) => {\n  const {\n    0: searchValue,\n    1: setSearchValue\n  } = useState(null);\n  const {\n    0: transactionItems,\n    1: setTransactionItems\n  } = useState(transactions.listTransactions.items);\n  const {\n    0: nextPaginateToken,\n    1: setNextPaginateToken\n  } = useState(transactions.listTransactions.nextToken);\n  const {\n    0: previousPaginateTokens,\n    1: setPreviousPaginateTokens\n  } = useState([]);\n  const handleSearchInput = useCallback(newValue => setSearchValue(newValue), []);\n  const app = createApp({\n    apiKey: '3b01063bac3031d13101100ef3e44fd5',\n    shopOrigin: 'transactions-avanta.myshopify.com'\n  });\n  const redirect = Redirect.create(app);\n\n  const paginateNext = async () => {\n    setPreviousPaginateTokens([...previousPaginateTokens, nextPaginateToken]);\n\n    try {\n      const data = await API.graphql(graphqlOperation(listTransactions, {\n        limit: 5,\n        nextToken: nextPaginateToken\n      }));\n      console.log('Data from pagination', data);\n      setTransactionItems(data.data.listTransactions.items);\n      setNextPaginateToken(data.data.listTransactions.nextToken);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const paginatePrevious = async () => {\n    const previousToken = previousPaginateTokens[previousPaginateTokens.length === 1 ? 0 : previousPaginateTokens.length - 2];\n    setPreviousPaginateTokens([...previousPaginateTokens.slice(0, previousPaginateTokens.length - 1)]);\n\n    try {\n      if (previousPaginateTokens.length === 1) {\n        const data = await API.graphql(graphqlOperation(listTransactions, {\n          limit: 5\n        }));\n        setTransactionItems(data.data.listTransactions.items);\n        setNextPaginateToken(data.data.listTransactions.nextToken);\n      } else {\n        const data = await API.graphql(graphqlOperation(listTransactions, {\n          limit: 5,\n          nextToken: previousToken\n        }));\n        setTransactionItems(data.data.listTransactions.items);\n        setNextPaginateToken(data.data.listTransactions.nextToken);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    const listener = API.graphql(graphqlOperation(paymentSubscription)).subscribe({\n      next: paymentRequest => console.log('Subscribed transaction', paymentRequest)\n    });\n    return () => listener.unsubscribe();\n  }, []);\n\n  const createOrder = async () => {\n    try {\n      const products = await axios({\n        url: 'https://transactions-avanta.myshopify.com/admin/api/2020-07/graphql.json',\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Shopify-Access-Token': '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'\n        },\n        data: {\n          query: print(listProducts)\n        }\n      });\n      console.log('products from axios', products.data); // const orderRes = await axios({\n      //     url: 'https://transactions-avanta.myshopify.com/admin/api/2020-07/graphql.json',\n      //     method: 'post',\n      //     headers: {\n      //         'Content-Type': 'application/json',\n      //         'X-Shopify-Access-Token': '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'\n      //     },\n      //     data: {\n      //         query: print(createDraftOrder),\n      //         variables: {\n      //             input: {\n      //                 customerId: `gid://shopify/Customer/${state.customerId}`,\n      //                 taxExempt: true,\n      //                 note: `${toCurrency(\n      //                     state.bonusAmount\n      //                 )} of bonus were spent on these products `,\n      //                 lineItems: state.products.map((product) => ({\n      //                     quantity: 1,\n      //                     originalUnitPrice: Number(\n      //                         product.node.variants.edges[0].node.price\n      //                     ),\n      //                     variantId: product.node.variants.edges[0].node.id\n      //                 }))\n      //             }\n      //         }\n      //     }\n      // })\n      // const order = orderRes.data\n      // console.log('Order from createOrder function', order)\n      // const sendCompleteOrder = await axios({\n      //     url: 'https://transactions-avanta.myshopify.com/admin/api/2020-07/graphql.json',\n      //     method: 'post',\n      //     headers: {\n      //         'Content-Type': 'application/json',\n      //         'X-Shopify-Access-Token': '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'\n      //     },\n      //     data: {\n      //         query: print(completeOrder),\n      //         variables: {\n      //             id: order.data.draftOrderCreate.draftOrder.id\n      //         }\n      //     }\n      // })\n      // console.log('Order created Zav', sendCompleteOrder.data)\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return __jsx(Page, {\n    title: \"Transactions\"\n  }, __jsx(Button, {\n    onClick: createOrder\n  }, \"Get Posts\"), __jsx(TextField, {\n    label: \"Search Product\",\n    value: searchValue,\n    onChange: handleSearchInput,\n    prefix: __jsx(Icon, {\n      source: SearchMajorMonotone\n    }),\n    placeholder: \"Search by Customer phone number\"\n  }), __jsx(Stack, null, __jsx(Stack.Item, {\n    fill: true\n  }, __jsx(Button, {\n    id: \"Accept-Payment\",\n    onClick: () => redirect.dispatch(Redirect.Action.ADMIN_PATH, '/apps/3b01063bac3031d13101100ef3e44fd5/accept-payment')\n  }, __jsx(Icon, {\n    source: BalanceMajorMonotone\n  }), \" Accept Payment\")), __jsx(Stack.Item, null, __jsx(Button, {\n    id: \"Create-Transaction\",\n    primary: true,\n    onClick: () => redirect.dispatch(Redirect.Action.REMOTE, {\n      url: 'https://dev.d3ivgpkzuz6hkr.amplifyapp.com',\n      newContext: true\n    })\n  }, __jsx(Icon, {\n    source: TransactionMajorMonotone\n  }), \" Create transaction\"))), transactionItems && __jsx(Card, null, __jsx(DataTable, {\n    columnContentTypes: ['text', 'text', 'text', 'text'],\n    headings: ['Customer phone number', 'TotalPrice', 'TotalBonusAmount', 'CreatedAt'],\n    rows: transactionItems && transactionItems.filter(transaction => {\n      if (searchValue == null) {\n        return transaction;\n      } else if (transaction.customer[0].phone.toLowerCase().includes(searchValue.toLowerCase())) {\n        return transaction;\n      }\n    }).map(transaction => [__jsx(Button, {\n      primary: true,\n      onClick: () => redirect.dispatch(Redirect.Action.ADMIN_PATH, {\n        path: `/customers/${transaction.customer[0].id}`,\n        newContext: true\n      })\n    }, transaction.customer[0].phone), toCurrency(Number(transaction.totalPrice)), toCurrency(Number(transaction.totalBonusAmount)), formatDate(transaction.createdAt)])\n  }), __jsx(Pagination, {\n    hasPrevious: previousPaginateTokens.length > 0,\n    onPrevious: paginatePrevious,\n    hasNext: nextPaginateToken,\n    onNext: paginateNext\n  })));\n};\n\nexport async function getStaticProps() {\n  let result;\n\n  try {\n    result = await API.graphql(graphqlOperation(listTransactions, {\n      limit: 5\n    }));\n  } catch (error) {\n    console.log(error);\n  }\n\n  if (result.errors) {\n    console.warn('Failed to fetch transactions.', result.errors);\n    return {\n      props: {\n        transactions: []\n      }\n    };\n  }\n\n  if (result.data !== null) {\n    return {\n      props: {\n        transactions: result.data\n      }\n    };\n  }\n}\nexport default Index;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/pages/index.js"],"names":["React","useState","useCallback","useEffect","axios","API","graphqlOperation","createApp","Redirect","ResourcePicker","gql","print","Card","DataTable","Button","Page","Pagination","TextField","ChoiceList","Filters","Icon","Stack","SearchMajorMonotone","TransactionMajorMonotone","BalanceMajorMonotone","toCurrency","formatDate","config","configure","listTransactions","paymentSubscription","listProducts","Index","transactions","searchValue","setSearchValue","transactionItems","setTransactionItems","items","nextPaginateToken","setNextPaginateToken","nextToken","previousPaginateTokens","setPreviousPaginateTokens","handleSearchInput","newValue","app","apiKey","shopOrigin","redirect","create","paginateNext","data","graphql","limit","console","log","error","paginatePrevious","previousToken","length","slice","listener","subscribe","next","paymentRequest","unsubscribe","createOrder","products","url","method","headers","query","dispatch","Action","ADMIN_PATH","REMOTE","newContext","filter","transaction","customer","phone","toLowerCase","includes","map","path","id","Number","totalPrice","totalBonusAmount","createdAt","getStaticProps","result","errors","warn","props"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { API, graphqlOperation } from 'aws-amplify'\r\nimport createApp from '@shopify/app-bridge'\r\nimport { Redirect, ResourcePicker } from '@shopify/app-bridge/actions'\r\nimport gql from 'graphql-tag'\r\nimport { print } from 'graphql'\r\nimport {\r\n    Card,\r\n    DataTable,\r\n    Button,\r\n    Page,\r\n    Pagination,\r\n    TextField,\r\n    ChoiceList,\r\n    Filters,\r\n    Icon,\r\n    Stack\r\n} from '@shopify/polaris'\r\nimport {\r\n    SearchMajorMonotone,\r\n    TransactionMajorMonotone,\r\n    BalanceMajorMonotone\r\n} from '@shopify/polaris-icons'\r\nimport { toCurrency, formatDate } from '../utils/helper'\r\nimport config from '../aws-exports'\r\n\r\nAPI.configure(config)\r\n\r\nconst listTransactions = gql`\r\n    query listTransactions($limit: Int, $nextToken: String) {\r\n        listTransactions(limit: $limit, nextToken: $nextToken) {\r\n            nextToken\r\n            items {\r\n                id\r\n                totalPrice\r\n                totalBonusAmount\r\n                currency\r\n                products {\r\n                    id\r\n                    title\r\n                    bonusPercentage\r\n                    priceAmount\r\n                    priceCurrency\r\n                    image\r\n                }\r\n                customer {\r\n                    id\r\n                    firstName\r\n                    lastName\r\n                    phone\r\n                    email\r\n                }\r\n                createdAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst paymentSubscription = gql`\r\n    subscription paymentRequest {\r\n        onCreatePaymentRequest {\r\n            bonusAmount\r\n            createdAt\r\n            customerId\r\n            orderId\r\n            updatedAt\r\n        }\r\n    }\r\n`\r\n\r\nconst listProducts = gql`\r\n    query Products {\r\n        products(first: 100) {\r\n            edges {\r\n                node {\r\n                    id\r\n                    title\r\n                    tags\r\n                    description(truncateAt: 100)\r\n                    variants(first: 1) {\r\n                        edges {\r\n                            node {\r\n                                id\r\n                                price\r\n                            }\r\n                        }\r\n                    }\r\n                    images(first: 1) {\r\n                        edges {\r\n                            node {\r\n                                originalSrc\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst Index = ({ transactions }) => {\r\n    const [searchValue, setSearchValue] = useState(null)\r\n    const [transactionItems, setTransactionItems] = useState(transactions.listTransactions.items)\r\n    const [nextPaginateToken, setNextPaginateToken] = useState(\r\n        transactions.listTransactions.nextToken\r\n    )\r\n    const [previousPaginateTokens, setPreviousPaginateTokens] = useState([])\r\n    const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\r\n\r\n    const app = createApp({\r\n        apiKey: '3b01063bac3031d13101100ef3e44fd5',\r\n        shopOrigin: 'transactions-avanta.myshopify.com'\r\n    })\r\n\r\n    const redirect = Redirect.create(app)\r\n\r\n    const paginateNext = async () => {\r\n        setPreviousPaginateTokens([...previousPaginateTokens, nextPaginateToken])\r\n        try {\r\n            const data = await API.graphql(\r\n                graphqlOperation(listTransactions, { limit: 5, nextToken: nextPaginateToken })\r\n            )\r\n\r\n            console.log('Data from pagination', data)\r\n            setTransactionItems(data.data.listTransactions.items)\r\n            setNextPaginateToken(data.data.listTransactions.nextToken)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    const paginatePrevious = async () => {\r\n        const previousToken =\r\n            previousPaginateTokens[\r\n                previousPaginateTokens.length === 1 ? 0 : previousPaginateTokens.length - 2\r\n            ]\r\n        setPreviousPaginateTokens([\r\n            ...previousPaginateTokens.slice(0, previousPaginateTokens.length - 1)\r\n        ])\r\n        try {\r\n            if (previousPaginateTokens.length === 1) {\r\n                const data = await API.graphql(graphqlOperation(listTransactions, { limit: 5 }))\r\n                setTransactionItems(data.data.listTransactions.items)\r\n                setNextPaginateToken(data.data.listTransactions.nextToken)\r\n            } else {\r\n                const data = await API.graphql(\r\n                    graphqlOperation(listTransactions, { limit: 5, nextToken: previousToken })\r\n                )\r\n                setTransactionItems(data.data.listTransactions.items)\r\n                setNextPaginateToken(data.data.listTransactions.nextToken)\r\n            }\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const listener = API.graphql(graphqlOperation(paymentSubscription)).subscribe({\r\n            next: (paymentRequest) => console.log('Subscribed transaction', paymentRequest)\r\n        })\r\n\r\n        return () => listener.unsubscribe()\r\n    }, [])\r\n\r\n    const createOrder = async () => {\r\n        try {\r\n            const products = await axios({\r\n                url: 'https://transactions-avanta.myshopify.com/admin/api/2020-07/graphql.json',\r\n                method: 'post',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'X-Shopify-Access-Token': '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'\r\n                },\r\n                data: {\r\n                    query: print(listProducts)\r\n                }\r\n            })\r\n\r\n            console.log('products from axios', products.data)\r\n            // const orderRes = await axios({\r\n            //     url: 'https://transactions-avanta.myshopify.com/admin/api/2020-07/graphql.json',\r\n            //     method: 'post',\r\n            //     headers: {\r\n            //         'Content-Type': 'application/json',\r\n            //         'X-Shopify-Access-Token': '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'\r\n            //     },\r\n            //     data: {\r\n            //         query: print(createDraftOrder),\r\n            //         variables: {\r\n            //             input: {\r\n            //                 customerId: `gid://shopify/Customer/${state.customerId}`,\r\n            //                 taxExempt: true,\r\n            //                 note: `${toCurrency(\r\n            //                     state.bonusAmount\r\n            //                 )} of bonus were spent on these products `,\r\n            //                 lineItems: state.products.map((product) => ({\r\n            //                     quantity: 1,\r\n            //                     originalUnitPrice: Number(\r\n            //                         product.node.variants.edges[0].node.price\r\n            //                     ),\r\n            //                     variantId: product.node.variants.edges[0].node.id\r\n            //                 }))\r\n            //             }\r\n            //         }\r\n            //     }\r\n            // })\r\n\r\n            // const order = orderRes.data\r\n\r\n            // console.log('Order from createOrder function', order)\r\n\r\n            // const sendCompleteOrder = await axios({\r\n            //     url: 'https://transactions-avanta.myshopify.com/admin/api/2020-07/graphql.json',\r\n            //     method: 'post',\r\n            //     headers: {\r\n            //         'Content-Type': 'application/json',\r\n            //         'X-Shopify-Access-Token': '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'\r\n            //     },\r\n            //     data: {\r\n            //         query: print(completeOrder),\r\n            //         variables: {\r\n            //             id: order.data.draftOrderCreate.draftOrder.id\r\n            //         }\r\n            //     }\r\n            // })\r\n\r\n            // console.log('Order created Zav', sendCompleteOrder.data)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Page title=\"Transactions\">\r\n            <Button onClick={createOrder}>Get Posts</Button>\r\n            <TextField\r\n                label=\"Search Product\"\r\n                value={searchValue}\r\n                onChange={handleSearchInput}\r\n                prefix={<Icon source={SearchMajorMonotone} />}\r\n                placeholder=\"Search by Customer phone number\"\r\n            />\r\n            <Stack>\r\n                <Stack.Item fill>\r\n                    <Button\r\n                        id=\"Accept-Payment\"\r\n                        onClick={() =>\r\n                            redirect.dispatch(\r\n                                Redirect.Action.ADMIN_PATH,\r\n                                '/apps/3b01063bac3031d13101100ef3e44fd5/accept-payment'\r\n                            )\r\n                        }>\r\n                        <Icon source={BalanceMajorMonotone} /> Accept Payment\r\n                    </Button>\r\n                </Stack.Item>\r\n                <Stack.Item>\r\n                    <Button\r\n                        id=\"Create-Transaction\"\r\n                        primary\r\n                        onClick={() =>\r\n                            redirect.dispatch(Redirect.Action.REMOTE, {\r\n                                url: 'https://dev.d3ivgpkzuz6hkr.amplifyapp.com',\r\n                                newContext: true\r\n                            })\r\n                        }>\r\n                        <Icon source={TransactionMajorMonotone} /> Create transaction\r\n                    </Button>\r\n                </Stack.Item>\r\n            </Stack>\r\n            {transactionItems && (\r\n                <Card>\r\n                    <DataTable\r\n                        columnContentTypes={['text', 'text', 'text', 'text']}\r\n                        headings={[\r\n                            'Customer phone number',\r\n                            'TotalPrice',\r\n                            'TotalBonusAmount',\r\n                            'CreatedAt'\r\n                        ]}\r\n                        rows={\r\n                            transactionItems &&\r\n                            transactionItems\r\n                                .filter((transaction) => {\r\n                                    if (searchValue == null) {\r\n                                        return transaction\r\n                                    } else if (\r\n                                        transaction.customer[0].phone\r\n                                            .toLowerCase()\r\n                                            .includes(searchValue.toLowerCase())\r\n                                    ) {\r\n                                        return transaction\r\n                                    }\r\n                                })\r\n                                .map((transaction) => [\r\n                                    <Button\r\n                                        primary\r\n                                        onClick={() =>\r\n                                            redirect.dispatch(Redirect.Action.ADMIN_PATH, {\r\n                                                path: `/customers/${transaction.customer[0].id}`,\r\n                                                newContext: true\r\n                                            })\r\n                                        }>\r\n                                        {transaction.customer[0].phone}\r\n                                    </Button>,\r\n                                    toCurrency(Number(transaction.totalPrice)),\r\n                                    toCurrency(Number(transaction.totalBonusAmount)),\r\n                                    formatDate(transaction.createdAt)\r\n                                ])\r\n                        }\r\n                    />\r\n                    <Pagination\r\n                        hasPrevious={previousPaginateTokens.length > 0}\r\n                        onPrevious={paginatePrevious}\r\n                        hasNext={nextPaginateToken}\r\n                        onNext={paginateNext}\r\n                    />\r\n                </Card>\r\n            )}\r\n        </Page>\r\n    )\r\n}\r\n\r\nexport async function getStaticProps() {\r\n    let result\r\n    try {\r\n        result = await API.graphql(graphqlOperation(listTransactions, { limit: 5 }))\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n\r\n    if (result.errors) {\r\n        console.warn('Failed to fetch transactions.', result.errors)\r\n        return { props: { transactions: [] } }\r\n    }\r\n    if (result.data !== null) {\r\n        return { props: { transactions: result.data } }\r\n    }\r\n}\r\n\r\nexport default Index\r\n"]},"metadata":{},"sourceType":"module"}