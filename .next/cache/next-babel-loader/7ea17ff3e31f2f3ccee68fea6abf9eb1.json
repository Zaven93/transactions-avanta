{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useQuery, useMutation } from \"react-query\";\nimport { BranchService } from \"../services\";\n\nvar useBranchByAdmin = function useBranchByAdmin() {\n  _s();\n\n  var _useMutation = useMutation(BranchService.getBranchByAdmin),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      getBranch = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      status = _useMutation2$.status,\n      error = _useMutation2$.error,\n      data = _useMutation2$.data;\n\n  return {\n    getBranch: getBranch,\n    status: status,\n    error: error,\n    data: data\n  };\n}; // const useBranchByAdmin = (adminId) => {\n//   const branchByAdmin = useQuery([\"branch-by-admin\", { adminId }], BranchService.getBranchByAdmin, {\n//     enabled: false,\n//   })\n//   return branchByAdmin\n// }\n\n\n_s(useBranchByAdmin, \"fnUoSgrHov3pPf298Xt913hakBQ=\", false, function () {\n  return [useMutation];\n});\n\nexport default useBranchByAdmin;","map":{"version":3,"sources":["/var/www/transactions-avanta/core/hooks/useBranchByAdmin.js"],"names":["React","useQuery","useMutation","BranchService","useBranchByAdmin","getBranchByAdmin","getBranch","status","error","data"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,aAAtC;AACA,SAASC,aAAT,QAA8B,aAA9B;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAAA;;AAAA,qBACgBF,WAAW,CAACC,aAAa,CAACE,gBAAf,CAD3B;AAAA;AAAA,MACtBC,SADsB;AAAA;AAAA,MACTC,MADS,kBACTA,MADS;AAAA,MACDC,KADC,kBACDA,KADC;AAAA,MACMC,IADN,kBACMA,IADN;;AAG7B,SAAO;AACLH,IAAAA,SAAS,EAATA,SADK;AAELC,IAAAA,MAAM,EAANA,MAFK;AAGLC,IAAAA,KAAK,EAALA,KAHK;AAILC,IAAAA,IAAI,EAAJA;AAJK,GAAP;AAMD,CATD,C,CAWA;AACA;AACA;AACA;AAEA;AACA;;;GAjBML,gB;UACyCF,W;;;AAkB/C,eAAeE,gBAAf","sourcesContent":["import React from \"react\"\nimport { useQuery, useMutation } from \"react-query\"\nimport { BranchService } from \"../services\"\n\nconst useBranchByAdmin = () => {\n  const [getBranch, { status, error, data }] = useMutation(BranchService.getBranchByAdmin)\n\n  return {\n    getBranch,\n    status,\n    error,\n    data,\n  }\n}\n\n// const useBranchByAdmin = (adminId) => {\n//   const branchByAdmin = useQuery([\"branch-by-admin\", { adminId }], BranchService.getBranchByAdmin, {\n//     enabled: false,\n//   })\n\n//   return branchByAdmin\n// }\n\nexport default useBranchByAdmin\n"]},"metadata":{},"sourceType":"module"}