{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query getBranch($id: ID!) {\\n        getBranch(id: $id) {\\n            transactions(sortDirection: DESC) {\\n                items {\\n                    branchId\\n                    createdAt\\n                    currency\\n                    note\\n                    customer {\\n                        email\\n                        id\\n                        firstName\\n                        lastName\\n                        phone\\n                    }\\n                    totalBonusAmount\\n                    totalPrice\\n                    updatedAt\\n                    sortDate\\n                }\\n            }\\n            branchName\\n            adminId\\n            id\\n            branchProducts {\\n                items {\\n                    branchId\\n                    createdAt\\n                    id\\n                    productId\\n                    tags\\n                    updatedAt\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport createApp from '@shopify/app-bridge';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { ClientApplication } from '@shopify/app-bridge';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport gql from 'graphql-tag';\nimport { Page, Button, Icon, Card, DataTable } from '@shopify/polaris';\nimport { TransactionMajorMonotone } from '@shopify/polaris-icons';\nimport config from '../../aws-exports';\nimport BranchContext from '../../context/branchContext';\nimport { Divider } from 'semantic-ui-react';\nAPI.configure(config);\nvar getBranchById = gql(_templateObject());\n\nvar Branch = function Branch() {\n  _s();\n\n  var _useState = useState(''),\n      branchInfo = _useState[0],\n      setBranchInfo = _useState[1];\n\n  var getBranch = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var branch;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return API.graphql(graphqlOperation(getBranchById, {\n                id: localStorage.getItem('branchId')\n              }));\n\n            case 3:\n              branch = _context.sent;\n              setBranchInfo(branch.data.getBranch);\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 7]]);\n    }));\n\n    return function getBranch() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    console.log('Localstorage branch id', localStorage.getItem('branchId'));\n    console.log('Localstorage branch id', typeof localStorage.getItem('branchId'));\n    getBranch();\n  }, []);\n  console.log('Branch info', branchInfo);\n  return __jsx(React.Fragment, null, __jsx(Page, {\n    title: branchInfo && branchInfo.branchName\n  }), branchInfo && __jsx(Card, null, __jsx(DataTable, {\n    columnContentTypes: ['text', 'text', 'text', 'text'],\n    headings: ['Customer phone number', 'TotalPrice', 'TotalBonusAmount', 'Minus from Bonus Amount', 'CreatedAt'],\n    rows: branchInfo && branchInfo.transactions.items.filter(function (transaction) {\n      if (searchValue == null) {\n        return transaction;\n      } else if (transaction.customer[0].phone.toLowerCase().includes(searchValue.toLowerCase())) {\n        return transaction;\n      }\n    }).sort(function (a, b) {\n      return new Date(b.createdAt) - new Date(a.createdAt);\n    }).map(function (transaction) {\n      return [__jsx(Button, {\n        primary: true,\n        onClick: function onClick() {\n          return redirect.dispatch(Redirect.Action.ADMIN_PATH, {\n            path: \"/customers/\".concat(transaction.customer[0].id),\n            newContext: true\n          });\n        }\n      }, transaction.customer[0].phone), toCurrency(Number(transaction.totalPrice)), toCurrency(Number(transaction.totalBonusAmount)), transaction.note === null ? '' : toCurrency(extractNumbersFromString(transaction.note)), formatDate(transaction.createdAt)];\n    })\n  })));\n};\n\n_s(Branch, \"An4Klkc6vQP5DSnsiIGDdq0UUZ0=\");\n\n_c = Branch;\nexport default Branch;\n\nvar _c;\n\n$RefreshReg$(_c, \"Branch\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/pages/branch/[branchId].js"],"names":["React","useState","useEffect","useRouter","createApp","Redirect","ClientApplication","API","graphqlOperation","gql","Page","Button","Icon","Card","DataTable","TransactionMajorMonotone","config","BranchContext","Divider","configure","getBranchById","Branch","branchInfo","setBranchInfo","getBranch","graphql","id","localStorage","getItem","branch","data","console","log","branchName","transactions","items","filter","transaction","searchValue","customer","phone","toLowerCase","includes","sort","a","b","Date","createdAt","map","redirect","dispatch","Action","ADMIN_PATH","path","newContext","toCurrency","Number","totalPrice","totalBonusAmount","note","extractNumbersFromString","formatDate"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport createApp from '@shopify/app-bridge'\r\nimport { Redirect } from '@shopify/app-bridge/actions'\r\nimport { ClientApplication } from '@shopify/app-bridge'\r\nimport { API, graphqlOperation } from 'aws-amplify'\r\nimport gql from 'graphql-tag'\r\nimport { Page, Button, Icon, Card, DataTable } from '@shopify/polaris'\r\nimport { TransactionMajorMonotone } from '@shopify/polaris-icons'\r\nimport config from '../../aws-exports'\r\nimport BranchContext from '../../context/branchContext'\r\nimport { Divider } from 'semantic-ui-react'\r\n\r\nAPI.configure(config)\r\n\r\nconst getBranchById = gql`\r\n    query getBranch($id: ID!) {\r\n        getBranch(id: $id) {\r\n            transactions(sortDirection: DESC) {\r\n                items {\r\n                    branchId\r\n                    createdAt\r\n                    currency\r\n                    note\r\n                    customer {\r\n                        email\r\n                        id\r\n                        firstName\r\n                        lastName\r\n                        phone\r\n                    }\r\n                    totalBonusAmount\r\n                    totalPrice\r\n                    updatedAt\r\n                    sortDate\r\n                }\r\n            }\r\n            branchName\r\n            adminId\r\n            id\r\n            branchProducts {\r\n                items {\r\n                    branchId\r\n                    createdAt\r\n                    id\r\n                    productId\r\n                    tags\r\n                    updatedAt\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst Branch = () => {\r\n    const [branchInfo, setBranchInfo] = useState('')\r\n\r\n    const getBranch = async () => {\r\n        try {\r\n            const branch = await API.graphql(\r\n                graphqlOperation(getBranchById, { id: localStorage.getItem('branchId') })\r\n            )\r\n            setBranchInfo(branch.data.getBranch)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log('Localstorage branch id', localStorage.getItem('branchId'))\r\n        console.log('Localstorage branch id', typeof localStorage.getItem('branchId'))\r\n        getBranch()\r\n    }, [])\r\n\r\n    console.log('Branch info', branchInfo)\r\n\r\n    return (\r\n        <>\r\n            <Page title={branchInfo && branchInfo.branchName}></Page>\r\n            {branchInfo && (\r\n                <Card>\r\n                    <DataTable\r\n                        columnContentTypes={['text', 'text', 'text', 'text']}\r\n                        headings={[\r\n                            'Customer phone number',\r\n                            'TotalPrice',\r\n                            'TotalBonusAmount',\r\n                            'Minus from Bonus Amount',\r\n                            'CreatedAt'\r\n                        ]}\r\n                        rows={\r\n                            branchInfo &&\r\n                            branchInfo.transactions.items\r\n                                .filter((transaction) => {\r\n                                    if (searchValue == null) {\r\n                                        return transaction\r\n                                    } else if (\r\n                                        transaction.customer[0].phone\r\n                                            .toLowerCase()\r\n                                            .includes(searchValue.toLowerCase())\r\n                                    ) {\r\n                                        return transaction\r\n                                    }\r\n                                })\r\n                                .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))\r\n                                .map((transaction) => [\r\n                                    <Button\r\n                                        primary\r\n                                        onClick={() =>\r\n                                            redirect.dispatch(Redirect.Action.ADMIN_PATH, {\r\n                                                path: `/customers/${transaction.customer[0].id}`,\r\n                                                newContext: true\r\n                                            })\r\n                                        }>\r\n                                        {transaction.customer[0].phone}\r\n                                    </Button>,\r\n                                    toCurrency(Number(transaction.totalPrice)),\r\n                                    toCurrency(Number(transaction.totalBonusAmount)),\r\n                                    transaction.note === null\r\n                                        ? ''\r\n                                        : toCurrency(extractNumbersFromString(transaction.note)),\r\n                                    formatDate(transaction.createdAt)\r\n                                ])\r\n                        }\r\n                    />\r\n                    {/* <Pagination\r\n                    hasPrevious={previousPaginateTokens.length > 0}\r\n                    onPrevious={paginatePrevious}\r\n                    hasNext={nextPaginateToken}\r\n                    onNext={paginateNext}\r\n                /> */}\r\n                </Card>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Branch\r\n"]},"metadata":{},"sourceType":"module"}