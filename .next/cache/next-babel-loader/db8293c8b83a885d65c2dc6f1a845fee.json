{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query Products {\\n        products(first: 100) {\\n            edges {\\n                node {\\n                    id\\n                    title\\n                    tags\\n                    description(truncateAt: 100)\\n                    variants(first: 1) {\\n                        edges {\\n                            node {\\n                                id\\n                                price\\n                            }\\n                        }\\n                    }\\n                    images(first: 1) {\\n                        edges {\\n                            node {\\n                                originalSrc\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { Modal, Thumbnail, Checkbox } from '@shopify/polaris';\nimport { Table, Header } from 'semantic-ui-react';\nvar listProducts = gql(_templateObject());\n\nvar ProductsList = function ProductsList(_ref) {\n  _s();\n\n  var active = _ref.active,\n      handleChange = _ref.handleChange;\n\n  var _useQuery = useQuery(listProducts),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  var _useState = useState({\n    customerId: '',\n    bonusAmount: '',\n    products: []\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  if (loading) {\n    return __jsx(\"div\", null, \"Loading products...\");\n  }\n\n  if (error) {\n    return __jsx(\"div\", null, \"Some error occured\");\n  }\n\n  return __jsx(\"div\", {\n    style: {\n      height: '500px'\n    }\n  }, __jsx(Modal, {\n    open: active,\n    onClose: handleChange,\n    title: \"Choose products\",\n    primaryAction: {\n      content: 'Proceed',\n      onAction: function onAction() {// createOrder()\n        // handleChange()\n        // setActiveToast(true)\n      }\n    }\n  }, __jsx(Modal.Section, null, __jsx(Table, {\n    celled: true,\n    striped: true,\n    selectable: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Products\"), __jsx(Table.HeaderCell, null, \"Description\"), __jsx(Table.HeaderCell, {\n    textAlign: \"center\"\n  }, \"Price\"))), __jsx(Table.Body, null, data && data.products.edges.filter(function (product) {\n    if (searchValue == null) {\n      return product;\n    } else if (product.node.title.toLowerCase().includes(searchValue.toLowerCase())) {\n      return product;\n    }\n  }).map(function (product) {\n    return __jsx(Table.Row, {\n      key: product.node.id,\n      onClick: function onClick() {\n        if (rowId.includes(product.node.id)) {\n          setRowId(rowId.filter(function (id) {\n            return id !== product.node.id;\n          }));\n          setState({\n            products: state.products.filter(function (filteredProduct) {\n              return filteredProduct.node.id !== product.node.id;\n            })\n          });\n        } else {\n          setRowId([].concat(_toConsumableArray(rowId), [product.node.id]));\n          setState({\n            products: [].concat(_toConsumableArray(state.products), [product])\n          });\n        }\n      }\n    }, __jsx(Table.Cell, null, __jsx(Header, {\n      as: \"h4\",\n      image: true,\n      className: \"product-header\"\n    }, __jsx(Checkbox, {\n      checked: rowId.includes(product.node.id) && true\n    }), __jsx(Thumbnail, {\n      source: product.node.images.edges[0] && product.node.images.edges[0].node.originalSrc,\n      size: \"small\",\n      alt: \"\"\n    }), __jsx(Header.Content, null, product.node.title))), __jsx(Table.Cell, null, __jsx(TextStyle, {\n      variation: \"subdued\"\n    }, product.node.description)), __jsx(Table.Cell, {\n      textAlign: \"center\"\n    }, __jsx(TextStyle, {\n      variation: \"subdued\"\n    }, product.node.variants.edges[0] && toCurrency(product.node.variants.edges[0].node.price))));\n  })), __jsx(Table.Footer, {\n    fullWidth: true\n  }, __jsx(Table.Row, null))))));\n};\n\n_s(ProductsList, \"WCSdtLNYSD5QdfGBCQkuUJvCJ4k=\", false, function () {\n  return [useQuery];\n});\n\n_c = ProductsList;\nexport default ProductsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductsList\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/components/ProductsList.js"],"names":["React","useState","gql","useQuery","Modal","Thumbnail","Checkbox","Table","Header","listProducts","ProductsList","active","handleChange","loading","error","data","customerId","bonusAmount","products","state","setState","height","content","onAction","edges","filter","product","searchValue","node","title","toLowerCase","includes","map","id","rowId","setRowId","filteredProduct","images","originalSrc","description","variants","toCurrency","price"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport gql from 'graphql-tag'\r\nimport { useQuery } from '@apollo/client'\r\nimport { Modal, Thumbnail, Checkbox } from '@shopify/polaris'\r\nimport { Table, Header } from 'semantic-ui-react'\r\n\r\nconst listProducts = gql`\r\n    query Products {\r\n        products(first: 100) {\r\n            edges {\r\n                node {\r\n                    id\r\n                    title\r\n                    tags\r\n                    description(truncateAt: 100)\r\n                    variants(first: 1) {\r\n                        edges {\r\n                            node {\r\n                                id\r\n                                price\r\n                            }\r\n                        }\r\n                    }\r\n                    images(first: 1) {\r\n                        edges {\r\n                            node {\r\n                                originalSrc\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst ProductsList = ({ active, handleChange }) => {\r\n    const { loading, error, data } = useQuery(listProducts)\r\n    const [state, setState] = useState({\r\n        customerId: '',\r\n        bonusAmount: '',\r\n        products: []\r\n    })\r\n\r\n    if (loading) {\r\n        return <div>Loading products...</div>\r\n    }\r\n\r\n    if (error) {\r\n        return <div>Some error occured</div>\r\n    }\r\n\r\n    return (\r\n        <div style={{ height: '500px' }}>\r\n            <Modal\r\n                open={active}\r\n                onClose={handleChange}\r\n                title=\"Choose products\"\r\n                primaryAction={{\r\n                    content: 'Proceed',\r\n                    onAction: () => {\r\n                        // createOrder()\r\n                        // handleChange()\r\n                        // setActiveToast(true)\r\n                    }\r\n                }}>\r\n                <Modal.Section>\r\n                    <Table celled striped selectable>\r\n                        <Table.Header>\r\n                            <Table.Row>\r\n                                <Table.HeaderCell>Products</Table.HeaderCell>\r\n                                <Table.HeaderCell>Description</Table.HeaderCell>\r\n                                <Table.HeaderCell textAlign=\"center\">Price</Table.HeaderCell>\r\n                            </Table.Row>\r\n                        </Table.Header>\r\n                        <Table.Body>\r\n                            {data &&\r\n                                data.products.edges\r\n                                    .filter((product) => {\r\n                                        if (searchValue == null) {\r\n                                            return product\r\n                                        } else if (\r\n                                            product.node.title\r\n                                                .toLowerCase()\r\n                                                .includes(searchValue.toLowerCase())\r\n                                        ) {\r\n                                            return product\r\n                                        }\r\n                                    })\r\n                                    .map((product) => (\r\n                                        <Table.Row\r\n                                            key={product.node.id}\r\n                                            onClick={() => {\r\n                                                if (rowId.includes(product.node.id)) {\r\n                                                    setRowId(\r\n                                                        rowId.filter((id) => id !== product.node.id)\r\n                                                    )\r\n                                                    setState({\r\n                                                        products: state.products.filter(\r\n                                                            (filteredProduct) =>\r\n                                                                filteredProduct.node.id !==\r\n                                                                product.node.id\r\n                                                        )\r\n                                                    })\r\n                                                } else {\r\n                                                    setRowId([...rowId, product.node.id])\r\n                                                    setState({\r\n                                                        products: [...state.products, product]\r\n                                                    })\r\n                                                }\r\n                                            }}>\r\n                                            <Table.Cell>\r\n                                                <Header as=\"h4\" image className=\"product-header\">\r\n                                                    <Checkbox\r\n                                                        checked={\r\n                                                            rowId.includes(product.node.id) && true\r\n                                                        }\r\n                                                    />\r\n                                                    <Thumbnail\r\n                                                        source={\r\n                                                            product.node.images.edges[0] &&\r\n                                                            product.node.images.edges[0].node\r\n                                                                .originalSrc\r\n                                                        }\r\n                                                        size=\"small\"\r\n                                                        alt=\"\"\r\n                                                    />\r\n                                                    <Header.Content>\r\n                                                        {product.node.title}\r\n                                                    </Header.Content>\r\n                                                </Header>\r\n                                            </Table.Cell>\r\n                                            <Table.Cell>\r\n                                                <TextStyle variation=\"subdued\">\r\n                                                    {product.node.description}\r\n                                                </TextStyle>\r\n                                            </Table.Cell>\r\n                                            <Table.Cell textAlign=\"center\">\r\n                                                <TextStyle variation=\"subdued\">\r\n                                                    {product.node.variants.edges[0] &&\r\n                                                        toCurrency(\r\n                                                            product.node.variants.edges[0].node\r\n                                                                .price\r\n                                                        )}\r\n                                                </TextStyle>\r\n                                            </Table.Cell>\r\n                                        </Table.Row>\r\n                                    ))}\r\n                        </Table.Body>\r\n                        <Table.Footer fullWidth>\r\n                            <Table.Row></Table.Row>\r\n                        </Table.Footer>\r\n                    </Table>\r\n                </Modal.Section>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProductsList\r\n"]},"metadata":{},"sourceType":"module"}