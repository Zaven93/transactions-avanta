{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport axios from 'axios';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { Modal, Thumbnail, Checkbox, TextStyle, TextField } from '@shopify/polaris';\nimport { Table, Header, Icon } from 'semantic-ui-react';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nimport { getBranchById } from '../graphql/queries';\nAPI.configure(config);\n\nconst BranchRow = ({\n  product,\n  state,\n  setState,\n  branchId,\n  branchInfo,\n  rowId,\n  setRowId\n}) => {\n  const {\n    0: fetchedProduct,\n    1: setFetchedProduct\n  } = useState({\n    description: product.node.description,\n    id: product.node.id,\n    image: product.node.images.edges[0] ? product.node.images.edges[0].node.originalSrc : '',\n    tags: product.node.tags,\n    title: product.node.title,\n    variants: {\n      id: product.node.variants.edges[0].node.id,\n      price: product.node.variants.edges[0].node.price\n    }\n  }); // const [branchInfo, setBranchInfo] = useState('')\n  // const [rowId, setRowId] = useState('')\n\n  const {\n    0: searchValue,\n    1: setSearchValue\n  } = useState(null);\n  const {\n    0: bonus,\n    1: setBonus\n  } = useState('');\n  const {\n    0: checked,\n    1: setChecked\n  } = useState(false);\n  const handleSearchInput = useCallback(newValue => setSearchValue(newValue), []);\n  const handleBonus = useCallback(value => {\n    setBonus(value);\n    fetchedProduct.tags = [value];\n    setFetchedProduct(fetchedProduct);\n  }, []);\n\n  const compareProduct = () => {\n    const comparedProduct = branchInfo.branchProducts.items.filter(branchProduct => branchProduct.productId === fetchedProduct.id);\n    console.log('Here is your compared product', comparedProduct);\n\n    if (!comparedProduct || comparedProduct === undefined) {\n      return;\n    }\n\n    setBonus(comparedProduct[0] ? comparedProduct[0].tags[0] : '');\n    return;\n  }; // const getBranch = async () => {\n  //     try {\n  //         const branch = await API.graphql(graphqlOperation(getBranchById, { id: branchId }))\n  //         setBranchInfo(branch.data.getBranch)\n  //         setRowId(\n  //             branch.data.getBranch.branchProducts.items\n  //                 .map((item) => item.productId)\n  //                 .filter((productId) => productId === fetchedProduct.id)[0]\n  //         )\n  //         setState({\n  //             products: [\n  //                 ...state.products,\n  //                 ...branch.data.getBranch.branchProducts.items.filter(\n  //                     (product) => product.productId === fetchedProduct.id\n  //                 )[0]\n  //             ]\n  //         })\n  //         compareProduct(branch.data.getBranch.branchProducts)\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // }\n\n\n  useEffect(() => {\n    console.log('Row id from useEffect', branchInfo.branchProducts.items.map(item => item.productId).filter(productId => productId === fetchedProduct.id)[0]); // setRowId([...rowId, branchInfo.branchProducts.items\n    //         .map((item) => item.productId)\n    //         .filter((productId) => productId === fetchedProduct.id)[0]])\n\n    compareProduct();\n  }, [product, branchInfo]);\n  console.log('Fetched product', fetchedProduct);\n  console.log('State from BranchRow', state);\n  console.log('Row id from BranchRow', rowId);\n  return __jsx(Table.Row, {\n    key: fetchedProduct.id\n  }, __jsx(Table.Cell, null, __jsx(Header, {\n    as: \"h4\",\n    image: true,\n    className: \"product-header\"\n  }, __jsx(Checkbox, {\n    checked: rowId.includes(fetchedProduct.id) && true,\n    onChange: () => {\n      if (rowId.includes(fetchedProduct.id)) {\n        setRowId(rowId.filter(id => id !== fetchedProduct.id));\n        setState({\n          products: state.products.filter(filteredProduct => filteredProduct.id !== fetchedProduct.id)\n        });\n      } else {\n        setRowId([...rowId, fetchedProduct.id]);\n        setState(_objectSpread(_objectSpread({}, state), {}, {\n          products: [...state.products, fetchedProduct]\n        }));\n      }\n    }\n  }), __jsx(Thumbnail, {\n    source: fetchedProduct.image,\n    size: \"small\",\n    alt: \"\"\n  }), __jsx(Header.Content, null, fetchedProduct.title))), __jsx(Table.Cell, {\n    textAlign: \"center\"\n  }, __jsx(TextStyle, {\n    variation: \"subdued\"\n  }, fetchedProduct.variants && toCurrency(fetchedProduct.variants.price))), __jsx(Table.Cell, null, __jsx(TextField, {\n    id: \"percentage-input\",\n    placeholder: \"Bonus Percentage\",\n    value: bonus,\n    onChange: handleBonus,\n    prefix: __jsx(Icon, {\n      name: \"percent\"\n    }),\n    disabled: !rowId.includes(fetchedProduct.id)\n  })));\n};\n\nexport default BranchRow;","map":null,"metadata":{},"sourceType":"module"}