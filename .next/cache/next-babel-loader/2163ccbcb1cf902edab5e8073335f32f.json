{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useRouter } from \"next/router\";\nimport { Auth, API, graphqlOperation } from \"aws-amplify\";\nimport createApp from \"@shopify/app-bridge\";\nimport { Redirect } from \"@shopify/app-bridge/actions\";\nimport gql from \"graphql-tag\";\nimport { Card, DataTable, Button, Page, Pagination, TextField, ChoiceList, Filters, Icon, Stack } from \"@shopify/polaris\";\nimport { SearchMajorMonotone, TransactionMajorMonotone, BalanceMajorMonotone, LogOutMinor } from \"@shopify/polaris-icons\";\nimport { toCurrency, formatDate, extractNumbersFromString } from \"../utils/helper\";\nimport config from \"../aws-exports\";\nimport Login from \"../components/Login\";\nimport BranchConsole from \"../components/BranchConsole\";\nimport PaymentRequest from \"../components/PaymentRequest\";\nAPI.configure(config);\nconst branchByAdminId = gql`\n  query branchByAdminId($adminId: ID!) {\n    branchByAdminId(adminId: $adminId) {\n      items {\n        adminId\n        branchName\n        id\n        transactions {\n          items {\n            branchId\n            createdAt\n            currency\n            id\n            note\n            customer {\n              email\n              firstName\n              id\n              lastName\n              phone\n            }\n            products {\n              bonusPercentage\n              id\n              image\n              priceAmount\n              priceCurrency\n              title\n            }\n            sortDate\n            totalBonusAmount\n            totalPrice\n            updatedAt\n          }\n        }\n        branchProducts {\n          items {\n            branchId\n            createdAt\n            id\n            productId\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\nconst onCreateTransaction = gql`\n  subscription onCreateTransaction {\n    onCreateTransaction {\n      id\n    }\n  }\n`;\n\nconst BranchData = ({\n  user,\n  updateUser\n}) => {\n  const {\n    0: branchInfo,\n    1: setBranchInfo\n  } = useState(\"\");\n  const {\n    0: searchValue,\n    1: setSearchValue\n  } = useState(null);\n  const {\n    0: newCreatedTransaction,\n    1: setNewCreatedTransaction\n  } = useState(\"\");\n  const {\n    0: showPaymentRequest,\n    1: setShowPaymentRequest\n  } = useState(false); // const [transactionItems, setTransactionItems] = useState(transactions.listTransactions.items)\n  // const [nextPaginateToken, setNextPaginateToken] = useState(\n  //     transactions.listTransactions.nextToken\n  // )\n  // const [previousPaginateTokens, setPreviousPaginateTokens] = useState([])\n\n  const handleSearchInput = useCallback(newValue => setSearchValue(newValue), []);\n  const router = useRouter();\n  const app = createApp({\n    apiKey: \"3b01063bac3031d13101100ef3e44fd5\",\n    shopOrigin: \"transactions-avanta.myshopify.com\"\n  });\n  const redirect = Redirect.create(app); // const paginateNext = async () => {\n  //     setPreviousPaginateTokens([...previousPaginateTokens, nextPaginateToken])\n  //     try {\n  //         const data = await API.graphql(\n  //             graphqlOperation(listTransactions, { limit: 5, nextToken: nextPaginateToken })\n  //         )\n  //         console.log('Data from pagination', data)\n  //         setTransactionItems(data.data.listTransactions.items)\n  //         setNextPaginateToken(data.data.listTransactions.nextToken)\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // }\n  // const paginatePrevious = async () => {\n  //     const previousToken =\n  //         previousPaginateTokens[\n  //             previousPaginateTokens.length === 1 ? 0 : previousPaginateTokens.length - 2\n  //         ]\n  //     setPreviousPaginateTokens([\n  //         ...previousPaginateTokens.slice(0, previousPaginateTokens.length - 1)\n  //     ])\n  //     try {\n  //         if (previousPaginateTokens.length === 1) {\n  //             const data = await API.graphql(graphqlOperation(listTransactions, { limit: 5 }))\n  //             setTransactionItems(data.data.listTransactions.items)\n  //             setNextPaginateToken(data.data.listTransactions.nextToken)\n  //         } else {\n  //             const data = await API.graphql(\n  //                 graphqlOperation(listTransactions, { limit: 5, nextToken: previousToken })\n  //             )\n  //             setTransactionItems(data.data.listTransactions.items)\n  //             setNextPaginateToken(data.data.listTransactions.nextToken)\n  //         }\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // }\n\n  const getBranch = async () => {\n    try {\n      const fetchBranch = await API.graphql(graphqlOperation(branchByAdminId, {\n        adminId: user.attributes.sub\n      }));\n      setBranchInfo(fetchBranch.data.branchByAdminId.items[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getBranch();\n    API.graphql(graphqlOperation(onCreateTransaction)).subscribe({\n      next: createdTransaction => setNewCreatedTransaction(createdTransaction)\n    });\n  }, [newCreatedTransaction]);\n  console.log(\"Branch data user\", user);\n  console.log(\"Branch info\", branchInfo);\n  return __jsx(React.Fragment, null, showPaymentRequest ? __jsx(PaymentRequest, {\n    setShowPaymentRequest: setShowPaymentRequest,\n    branchId: branchInfo ? branchInfo.id : \"\"\n  }) : __jsx(Page, {\n    title: branchInfo && branchInfo.branchName\n  }, __jsx(TextField, {\n    label: \"Search Product\",\n    value: searchValue,\n    onChange: handleSearchInput,\n    prefix: __jsx(Icon, {\n      source: SearchMajorMonotone\n    }),\n    placeholder: \"Search by Customer phone number\"\n  }), __jsx(Stack, null, __jsx(Stack.Item, {\n    fill: true\n  }, __jsx(Button, {\n    id: \"Accept-Payment\",\n    onClick: () => // redirect.dispatch(\n    //     Redirect.Action.ADMIN_PATH,\n    //     '/apps/3b01063bac3031d13101100ef3e44fd5/accept-payment'\n    // )\n    setShowPaymentRequest(true)\n  }, __jsx(Icon, {\n    source: BalanceMajorMonotone\n  }), \" Accept Payment\")), __jsx(Stack.Item, null, __jsx(Button, {\n    id: \"Create-Transaction\",\n    primary: true,\n    onClick: () => redirect.dispatch(Redirect.Action.REMOTE, {\n      // url: `https://dev.d3ivgpkzuz6hkr.amplifyapp.com?adminId=${user.attributes.sub}`,\n      url: `http://localhost:3001/transactions/${user.attributes.sub}`,\n      newContext: true\n    })\n  }, __jsx(Icon, {\n    source: TransactionMajorMonotone\n  }), \" Create transaction\")), __jsx(Stack.Item, null, __jsx(Button, {\n    primary: true,\n    id: \"Logout\",\n    onClick: () => {\n      Auth.signOut();\n      updateUser(null);\n    }\n  }, __jsx(Icon, {\n    source: LogOutMinor\n  }), \" Logout\"))), branchInfo && __jsx(Card, null, __jsx(DataTable, {\n    columnContentTypes: [\"text\", \"text\", \"text\", \"text\"],\n    headings: [\"Customer phone number\", \"TotalPrice\", \"TotalBonusAmount\", \"Minus from Bonus Amount\", \"CreatedAt\"],\n    rows: branchInfo && branchInfo.transactions.items.filter(transaction => {\n      if (searchValue == null) {\n        return transaction;\n      } else if (transaction.customer[0].phone.toLowerCase().includes(searchValue.toLowerCase())) {\n        return transaction;\n      }\n    }).sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt)).map(transaction => [__jsx(Button, {\n      primary: true,\n      onClick: () => redirect.dispatch(Redirect.Action.ADMIN_PATH, {\n        path: `/customers/${transaction.customer[0].id}`,\n        newContext: true\n      })\n    }, transaction.customer[0].phone), toCurrency(Number(transaction.totalPrice)), toCurrency(Number(transaction.totalBonusAmount)), transaction.note === null ? \"\" : toCurrency(extractNumbersFromString(transaction.note)), formatDate(transaction.createdAt)])\n  }))));\n};\n\nexport default BranchData;","map":{"version":3,"sources":["/var/www/transactions-avanta/components/BranchData.js"],"names":["React","useState","useCallback","useEffect","axios","useRouter","Auth","API","graphqlOperation","createApp","Redirect","gql","Card","DataTable","Button","Page","Pagination","TextField","ChoiceList","Filters","Icon","Stack","SearchMajorMonotone","TransactionMajorMonotone","BalanceMajorMonotone","LogOutMinor","toCurrency","formatDate","extractNumbersFromString","config","Login","BranchConsole","PaymentRequest","configure","branchByAdminId","onCreateTransaction","BranchData","user","updateUser","branchInfo","setBranchInfo","searchValue","setSearchValue","newCreatedTransaction","setNewCreatedTransaction","showPaymentRequest","setShowPaymentRequest","handleSearchInput","newValue","router","app","apiKey","shopOrigin","redirect","create","getBranch","fetchBranch","graphql","adminId","attributes","sub","data","items","error","console","log","subscribe","next","createdTransaction","id","branchName","dispatch","Action","REMOTE","url","newContext","signOut","transactions","filter","transaction","customer","phone","toLowerCase","includes","sort","a","b","Date","createdAt","map","ADMIN_PATH","path","Number","totalPrice","totalBonusAmount","note"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\"\nimport axios from \"axios\"\nimport { useRouter } from \"next/router\"\nimport { Auth, API, graphqlOperation } from \"aws-amplify\"\nimport createApp from \"@shopify/app-bridge\"\nimport { Redirect } from \"@shopify/app-bridge/actions\"\nimport gql from \"graphql-tag\"\nimport {\n  Card,\n  DataTable,\n  Button,\n  Page,\n  Pagination,\n  TextField,\n  ChoiceList,\n  Filters,\n  Icon,\n  Stack,\n} from \"@shopify/polaris\"\nimport {\n  SearchMajorMonotone,\n  TransactionMajorMonotone,\n  BalanceMajorMonotone,\n  LogOutMinor,\n} from \"@shopify/polaris-icons\"\nimport { toCurrency, formatDate, extractNumbersFromString } from \"../utils/helper\"\nimport config from \"../aws-exports\"\nimport Login from \"../components/Login\"\nimport BranchConsole from \"../components/BranchConsole\"\nimport PaymentRequest from \"../components/PaymentRequest\"\n\nAPI.configure(config)\n\nconst branchByAdminId = gql`\n  query branchByAdminId($adminId: ID!) {\n    branchByAdminId(adminId: $adminId) {\n      items {\n        adminId\n        branchName\n        id\n        transactions {\n          items {\n            branchId\n            createdAt\n            currency\n            id\n            note\n            customer {\n              email\n              firstName\n              id\n              lastName\n              phone\n            }\n            products {\n              bonusPercentage\n              id\n              image\n              priceAmount\n              priceCurrency\n              title\n            }\n            sortDate\n            totalBonusAmount\n            totalPrice\n            updatedAt\n          }\n        }\n        branchProducts {\n          items {\n            branchId\n            createdAt\n            id\n            productId\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n\nconst onCreateTransaction = gql`\n  subscription onCreateTransaction {\n    onCreateTransaction {\n      id\n    }\n  }\n`\n\nconst BranchData = ({ user, updateUser }) => {\n  const [branchInfo, setBranchInfo] = useState(\"\")\n  const [searchValue, setSearchValue] = useState(null)\n  const [newCreatedTransaction, setNewCreatedTransaction] = useState(\"\")\n  const [showPaymentRequest, setShowPaymentRequest] = useState(false)\n  // const [transactionItems, setTransactionItems] = useState(transactions.listTransactions.items)\n  // const [nextPaginateToken, setNextPaginateToken] = useState(\n  //     transactions.listTransactions.nextToken\n  // )\n  // const [previousPaginateTokens, setPreviousPaginateTokens] = useState([])\n  const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\n\n  const router = useRouter()\n\n  const app = createApp({\n    apiKey: \"3b01063bac3031d13101100ef3e44fd5\",\n    shopOrigin: \"transactions-avanta.myshopify.com\",\n  })\n\n  const redirect = Redirect.create(app)\n\n  // const paginateNext = async () => {\n  //     setPreviousPaginateTokens([...previousPaginateTokens, nextPaginateToken])\n  //     try {\n  //         const data = await API.graphql(\n  //             graphqlOperation(listTransactions, { limit: 5, nextToken: nextPaginateToken })\n  //         )\n\n  //         console.log('Data from pagination', data)\n  //         setTransactionItems(data.data.listTransactions.items)\n  //         setNextPaginateToken(data.data.listTransactions.nextToken)\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // }\n\n  // const paginatePrevious = async () => {\n  //     const previousToken =\n  //         previousPaginateTokens[\n  //             previousPaginateTokens.length === 1 ? 0 : previousPaginateTokens.length - 2\n  //         ]\n  //     setPreviousPaginateTokens([\n  //         ...previousPaginateTokens.slice(0, previousPaginateTokens.length - 1)\n  //     ])\n  //     try {\n  //         if (previousPaginateTokens.length === 1) {\n  //             const data = await API.graphql(graphqlOperation(listTransactions, { limit: 5 }))\n  //             setTransactionItems(data.data.listTransactions.items)\n  //             setNextPaginateToken(data.data.listTransactions.nextToken)\n  //         } else {\n  //             const data = await API.graphql(\n  //                 graphqlOperation(listTransactions, { limit: 5, nextToken: previousToken })\n  //             )\n  //             setTransactionItems(data.data.listTransactions.items)\n  //             setNextPaginateToken(data.data.listTransactions.nextToken)\n  //         }\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // }\n\n  const getBranch = async () => {\n    try {\n      const fetchBranch = await API.graphql(\n        graphqlOperation(branchByAdminId, { adminId: user.attributes.sub })\n      )\n      setBranchInfo(fetchBranch.data.branchByAdminId.items[0])\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    getBranch()\n    API.graphql(graphqlOperation(onCreateTransaction)).subscribe({\n      next: (createdTransaction) => setNewCreatedTransaction(createdTransaction),\n    })\n  }, [newCreatedTransaction])\n\n  console.log(\"Branch data user\", user)\n  console.log(\"Branch info\", branchInfo)\n\n  return (\n    <>\n      {showPaymentRequest ? (\n        <PaymentRequest\n          setShowPaymentRequest={setShowPaymentRequest}\n          branchId={branchInfo ? branchInfo.id : \"\"}\n        />\n      ) : (\n        <Page title={branchInfo && branchInfo.branchName}>\n          <TextField\n            label=\"Search Product\"\n            value={searchValue}\n            onChange={handleSearchInput}\n            prefix={<Icon source={SearchMajorMonotone} />}\n            placeholder=\"Search by Customer phone number\"\n          />\n          <Stack>\n            <Stack.Item fill>\n              <Button\n                id=\"Accept-Payment\"\n                onClick={() =>\n                  // redirect.dispatch(\n                  //     Redirect.Action.ADMIN_PATH,\n                  //     '/apps/3b01063bac3031d13101100ef3e44fd5/accept-payment'\n                  // )\n                  setShowPaymentRequest(true)\n                }>\n                <Icon source={BalanceMajorMonotone} /> Accept Payment\n              </Button>\n            </Stack.Item>\n            <Stack.Item>\n              <Button\n                id=\"Create-Transaction\"\n                primary\n                onClick={() =>\n                  redirect.dispatch(Redirect.Action.REMOTE, {\n                    // url: `https://dev.d3ivgpkzuz6hkr.amplifyapp.com?adminId=${user.attributes.sub}`,\n                    url: `http://localhost:3001/transactions/${user.attributes.sub}`,\n                    newContext: true,\n                  })\n                }>\n                <Icon source={TransactionMajorMonotone} /> Create transaction\n              </Button>\n            </Stack.Item>\n            <Stack.Item>\n              <Button\n                primary\n                id=\"Logout\"\n                onClick={() => {\n                  Auth.signOut()\n                  updateUser(null)\n                }}>\n                <Icon source={LogOutMinor} /> Logout\n              </Button>\n            </Stack.Item>\n          </Stack>\n          {branchInfo && (\n            <Card>\n              <DataTable\n                columnContentTypes={[\"text\", \"text\", \"text\", \"text\"]}\n                headings={[\n                  \"Customer phone number\",\n                  \"TotalPrice\",\n                  \"TotalBonusAmount\",\n                  \"Minus from Bonus Amount\",\n                  \"CreatedAt\",\n                ]}\n                rows={\n                  branchInfo &&\n                  branchInfo.transactions.items\n                    .filter((transaction) => {\n                      if (searchValue == null) {\n                        return transaction\n                      } else if (\n                        transaction.customer[0].phone\n                          .toLowerCase()\n                          .includes(searchValue.toLowerCase())\n                      ) {\n                        return transaction\n                      }\n                    })\n                    .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))\n                    .map((transaction) => [\n                      <Button\n                        primary\n                        onClick={() =>\n                          redirect.dispatch(Redirect.Action.ADMIN_PATH, {\n                            path: `/customers/${transaction.customer[0].id}`,\n                            newContext: true,\n                          })\n                        }>\n                        {transaction.customer[0].phone}\n                      </Button>,\n                      toCurrency(Number(transaction.totalPrice)),\n                      toCurrency(Number(transaction.totalBonusAmount)),\n                      transaction.note === null\n                        ? \"\"\n                        : toCurrency(extractNumbersFromString(transaction.note)),\n                      formatDate(transaction.createdAt),\n                    ])\n                }\n              />\n              {/* <Pagination\n                        hasPrevious={previousPaginateTokens.length > 0}\n                        onPrevious={paginatePrevious}\n                        hasNext={nextPaginateToken}\n                        onNext={paginateNext}\n                    /> */}\n            </Card>\n          )}\n        </Page>\n      )}\n    </>\n  )\n}\n\nexport default BranchData\n"]},"metadata":{},"sourceType":"module"}