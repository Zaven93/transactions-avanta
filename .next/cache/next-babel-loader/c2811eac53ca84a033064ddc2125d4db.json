{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query branchByAdminId($adminId: ID!) {\\n        branchByAdminId(adminId: $adminId) {\\n            items {\\n                adminId\\n                branchName\\n                id\\n                branchProducts {\\n                    items {\\n                        branchId\\n                        createdAt\\n                        id\\n                        productId\\n                        tags\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport axios from 'axios';\nimport { Auth, API, graphqlOperation } from 'aws-amplify';\nimport createApp from '@shopify/app-bridge';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport gql from 'graphql-tag';\nimport { print } from 'graphql';\nimport { Card, DataTable, Button, Page, Pagination, TextField, ChoiceList, Filters, Icon, Stack } from '@shopify/polaris';\nimport { SearchMajorMonotone, TransactionMajorMonotone, BalanceMajorMonotone, LogOutMinor } from '@shopify/polaris-icons';\nimport { toCurrency, formatDate, extractNumbersFromString } from '../utils/helper';\nimport config from '../aws-exports';\nimport Login from '../components/Login';\nimport BranchConsole from '../components/BranchConsole';\nAPI.configure(config);\nvar branchByAdminId = gql(_templateObject());\n\nvar BranchData = function BranchData(_ref) {\n  _s();\n\n  var user = _ref.user,\n      updateUser = _ref.updateUser;\n\n  var _useState = useState(''),\n      branchInfo = _useState[0],\n      setBranchInfo = _useState[1];\n\n  var _useState2 = useState(null),\n      searchValue = _useState2[0],\n      setSearchValue = _useState2[1]; // const [transactionItems, setTransactionItems] = useState(transactions.listTransactions.items)\n  // const [nextPaginateToken, setNextPaginateToken] = useState(\n  //     transactions.listTransactions.nextToken\n  // )\n  // const [previousPaginateTokens, setPreviousPaginateTokens] = useState([])\n\n\n  var handleSearchInput = useCallback(function (newValue) {\n    return setSearchValue(newValue);\n  }, []);\n  var app = createApp({\n    apiKey: '3b01063bac3031d13101100ef3e44fd5',\n    shopOrigin: 'transactions-avanta.myshopify.com'\n  });\n  var redirect = Redirect.create(app); // const paginateNext = async () => {\n  //     setPreviousPaginateTokens([...previousPaginateTokens, nextPaginateToken])\n  //     try {\n  //         const data = await API.graphql(\n  //             graphqlOperation(listTransactions, { limit: 5, nextToken: nextPaginateToken })\n  //         )\n  //         console.log('Data from pagination', data)\n  //         setTransactionItems(data.data.listTransactions.items)\n  //         setNextPaginateToken(data.data.listTransactions.nextToken)\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // }\n  // const paginatePrevious = async () => {\n  //     const previousToken =\n  //         previousPaginateTokens[\n  //             previousPaginateTokens.length === 1 ? 0 : previousPaginateTokens.length - 2\n  //         ]\n  //     setPreviousPaginateTokens([\n  //         ...previousPaginateTokens.slice(0, previousPaginateTokens.length - 1)\n  //     ])\n  //     try {\n  //         if (previousPaginateTokens.length === 1) {\n  //             const data = await API.graphql(graphqlOperation(listTransactions, { limit: 5 }))\n  //             setTransactionItems(data.data.listTransactions.items)\n  //             setNextPaginateToken(data.data.listTransactions.nextToken)\n  //         } else {\n  //             const data = await API.graphql(\n  //                 graphqlOperation(listTransactions, { limit: 5, nextToken: previousToken })\n  //             )\n  //             setTransactionItems(data.data.listTransactions.items)\n  //             setNextPaginateToken(data.data.listTransactions.nextToken)\n  //         }\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // }\n\n  var getBranch = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var fetchBranch;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return API.graphql(graphqlOperation(branchByAdminId, {\n                adminId: user.attributes.sub\n              }));\n\n            case 3:\n              fetchBranch = _context.sent;\n              setBranchInfo(fetchBranch.data.branchByAdminId.items[0]);\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 7]]);\n    }));\n\n    return function getBranch() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    getBranch();\n  }, []);\n  console.log('Branch data user', user);\n  console.log('Branch info', branchInfo);\n  return __jsx(Page, {\n    title: \"Zaven\"\n  }, __jsx(TextField, {\n    label: \"Search Product\",\n    value: searchValue,\n    onChange: handleSearchInput,\n    prefix: __jsx(Icon, {\n      source: SearchMajorMonotone\n    }),\n    placeholder: \"Search by Customer phone number\"\n  }), __jsx(Stack, null, __jsx(Stack.Item, {\n    fill: true\n  }, __jsx(Button, {\n    id: \"Accept-Payment\",\n    onClick: function onClick() {\n      return redirect.dispatch(Redirect.Action.ADMIN_PATH, '/apps/3b01063bac3031d13101100ef3e44fd5/accept-payment');\n    }\n  }, __jsx(Icon, {\n    source: BalanceMajorMonotone\n  }), \" Accept Payment\")), __jsx(Stack.Item, null, __jsx(Button, {\n    id: \"Create-Transaction\",\n    primary: true,\n    onClick: function onClick() {\n      return redirect.dispatch(Redirect.Action.REMOTE, {\n        // url: `https://dev.d3ivgpkzuz6hkr.amplifyapp.com?adminId=${user.attributes.sub}`,\n        url: \"http://localhost:3001/transactions/\".concat(branchInfo.id),\n        newContext: true\n      });\n    }\n  }, __jsx(Icon, {\n    source: TransactionMajorMonotone\n  }), \" Create transaction\")), __jsx(Stack.Item, null, __jsx(Button, {\n    primary: true,\n    id: \"Logout\",\n    onClick: function onClick() {\n      Auth.signOut();\n      updateUser(null);\n    }\n  }, __jsx(Icon, {\n    source: LogOutMinor\n  }), \" Logout\"))));\n};\n\n_s(BranchData, \"HaD5FowQoYHGURrcw6HD6WgYYvA=\");\n\n_c = BranchData;\nexport default BranchData;\n\nvar _c;\n\n$RefreshReg$(_c, \"BranchData\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/components/BranchData.js"],"names":["React","useState","useCallback","useEffect","axios","Auth","API","graphqlOperation","createApp","Redirect","gql","print","Card","DataTable","Button","Page","Pagination","TextField","ChoiceList","Filters","Icon","Stack","SearchMajorMonotone","TransactionMajorMonotone","BalanceMajorMonotone","LogOutMinor","toCurrency","formatDate","extractNumbersFromString","config","Login","BranchConsole","configure","branchByAdminId","BranchData","user","updateUser","branchInfo","setBranchInfo","searchValue","setSearchValue","handleSearchInput","newValue","app","apiKey","shopOrigin","redirect","create","getBranch","graphql","adminId","attributes","sub","fetchBranch","data","items","console","log","dispatch","Action","ADMIN_PATH","REMOTE","url","id","newContext","signOut"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { Auth, API, graphqlOperation } from 'aws-amplify'\r\nimport createApp from '@shopify/app-bridge'\r\nimport { Redirect } from '@shopify/app-bridge/actions'\r\nimport gql from 'graphql-tag'\r\nimport { print } from 'graphql'\r\nimport {\r\n    Card,\r\n    DataTable,\r\n    Button,\r\n    Page,\r\n    Pagination,\r\n    TextField,\r\n    ChoiceList,\r\n    Filters,\r\n    Icon,\r\n    Stack\r\n} from '@shopify/polaris'\r\nimport {\r\n    SearchMajorMonotone,\r\n    TransactionMajorMonotone,\r\n    BalanceMajorMonotone,\r\n    LogOutMinor\r\n} from '@shopify/polaris-icons'\r\nimport { toCurrency, formatDate, extractNumbersFromString } from '../utils/helper'\r\nimport config from '../aws-exports'\r\nimport Login from '../components/Login'\r\nimport BranchConsole from '../components/BranchConsole'\r\n\r\nAPI.configure(config)\r\n\r\nconst branchByAdminId = gql`\r\n    query branchByAdminId($adminId: ID!) {\r\n        branchByAdminId(adminId: $adminId) {\r\n            items {\r\n                adminId\r\n                branchName\r\n                id\r\n                branchProducts {\r\n                    items {\r\n                        branchId\r\n                        createdAt\r\n                        id\r\n                        productId\r\n                        tags\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst BranchData = ({ user, updateUser }) => {\r\n    const [branchInfo, setBranchInfo] = useState('')\r\n    const [searchValue, setSearchValue] = useState(null)\r\n    // const [transactionItems, setTransactionItems] = useState(transactions.listTransactions.items)\r\n    // const [nextPaginateToken, setNextPaginateToken] = useState(\r\n    //     transactions.listTransactions.nextToken\r\n    // )\r\n    // const [previousPaginateTokens, setPreviousPaginateTokens] = useState([])\r\n    const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\r\n\r\n    const app = createApp({\r\n        apiKey: '3b01063bac3031d13101100ef3e44fd5',\r\n        shopOrigin: 'transactions-avanta.myshopify.com'\r\n    })\r\n\r\n    const redirect = Redirect.create(app)\r\n\r\n    // const paginateNext = async () => {\r\n    //     setPreviousPaginateTokens([...previousPaginateTokens, nextPaginateToken])\r\n    //     try {\r\n    //         const data = await API.graphql(\r\n    //             graphqlOperation(listTransactions, { limit: 5, nextToken: nextPaginateToken })\r\n    //         )\r\n\r\n    //         console.log('Data from pagination', data)\r\n    //         setTransactionItems(data.data.listTransactions.items)\r\n    //         setNextPaginateToken(data.data.listTransactions.nextToken)\r\n    //     } catch (error) {\r\n    //         console.log(error)\r\n    //     }\r\n    // }\r\n\r\n    // const paginatePrevious = async () => {\r\n    //     const previousToken =\r\n    //         previousPaginateTokens[\r\n    //             previousPaginateTokens.length === 1 ? 0 : previousPaginateTokens.length - 2\r\n    //         ]\r\n    //     setPreviousPaginateTokens([\r\n    //         ...previousPaginateTokens.slice(0, previousPaginateTokens.length - 1)\r\n    //     ])\r\n    //     try {\r\n    //         if (previousPaginateTokens.length === 1) {\r\n    //             const data = await API.graphql(graphqlOperation(listTransactions, { limit: 5 }))\r\n    //             setTransactionItems(data.data.listTransactions.items)\r\n    //             setNextPaginateToken(data.data.listTransactions.nextToken)\r\n    //         } else {\r\n    //             const data = await API.graphql(\r\n    //                 graphqlOperation(listTransactions, { limit: 5, nextToken: previousToken })\r\n    //             )\r\n    //             setTransactionItems(data.data.listTransactions.items)\r\n    //             setNextPaginateToken(data.data.listTransactions.nextToken)\r\n    //         }\r\n    //     } catch (error) {\r\n    //         console.log(error)\r\n    //     }\r\n    // }\r\n\r\n    const getBranch = async () => {\r\n        try {\r\n            const fetchBranch = await API.graphql(\r\n                graphqlOperation(branchByAdminId, { adminId: user.attributes.sub })\r\n            )\r\n            setBranchInfo(fetchBranch.data.branchByAdminId.items[0])\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getBranch()\r\n    }, [])\r\n\r\n    console.log('Branch data user', user)\r\n    console.log('Branch info', branchInfo)\r\n\r\n    return (\r\n        <Page title=\"Zaven\">\r\n            <TextField\r\n                label=\"Search Product\"\r\n                value={searchValue}\r\n                onChange={handleSearchInput}\r\n                prefix={<Icon source={SearchMajorMonotone} />}\r\n                placeholder=\"Search by Customer phone number\"\r\n            />\r\n            <Stack>\r\n                <Stack.Item fill>\r\n                    <Button\r\n                        id=\"Accept-Payment\"\r\n                        onClick={() =>\r\n                            redirect.dispatch(\r\n                                Redirect.Action.ADMIN_PATH,\r\n                                '/apps/3b01063bac3031d13101100ef3e44fd5/accept-payment'\r\n                            )\r\n                        }>\r\n                        <Icon source={BalanceMajorMonotone} /> Accept Payment\r\n                    </Button>\r\n                </Stack.Item>\r\n                <Stack.Item>\r\n                    <Button\r\n                        id=\"Create-Transaction\"\r\n                        primary\r\n                        onClick={() =>\r\n                            redirect.dispatch(Redirect.Action.REMOTE, {\r\n                                // url: `https://dev.d3ivgpkzuz6hkr.amplifyapp.com?adminId=${user.attributes.sub}`,\r\n                                url: `http://localhost:3001/transactions/${branchInfo.id}`,\r\n                                newContext: true\r\n                            })\r\n                        }>\r\n                        <Icon source={TransactionMajorMonotone} /> Create transaction\r\n                    </Button>\r\n                </Stack.Item>\r\n                <Stack.Item>\r\n                    <Button\r\n                        primary\r\n                        id=\"Logout\"\r\n                        onClick={() => {\r\n                            Auth.signOut()\r\n                            updateUser(null)\r\n                        }}>\r\n                        <Icon source={LogOutMinor} /> Logout\r\n                    </Button>\r\n                </Stack.Item>\r\n            </Stack>\r\n            {/* {transactionItems && (\r\n                <Card>\r\n                    <DataTable\r\n                        columnContentTypes={['text', 'text', 'text', 'text']}\r\n                        headings={[\r\n                            'Customer phone number',\r\n                            'TotalPrice',\r\n                            'TotalBonusAmount',\r\n                            'Minus from Bonus Amount',\r\n                            'CreatedAt'\r\n                        ]}\r\n                        rows={\r\n                            transactionItems &&\r\n                            transactionItems\r\n                                .filter((transaction) => {\r\n                                    if (searchValue == null) {\r\n                                        return transaction\r\n                                    } else if (\r\n                                        transaction.customer[0].phone\r\n                                            .toLowerCase()\r\n                                            .includes(searchValue.toLowerCase())\r\n                                    ) {\r\n                                        return transaction\r\n                                    }\r\n                                })\r\n                                .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))\r\n                                .map((transaction) => [\r\n                                    <Button\r\n                                        primary\r\n                                        onClick={() =>\r\n                                            redirect.dispatch(Redirect.Action.ADMIN_PATH, {\r\n                                                path: `/customers/${transaction.customer[0].id}`,\r\n                                                newContext: true\r\n                                            })\r\n                                        }>\r\n                                        {transaction.customer[0].phone}\r\n                                    </Button>,\r\n                                    toCurrency(Number(transaction.totalPrice)),\r\n                                    toCurrency(Number(transaction.totalBonusAmount)),\r\n                                    transaction.note === null\r\n                                        ? ''\r\n                                        : toCurrency(extractNumbersFromString(transaction.note)),\r\n                                    formatDate(transaction.createdAt)\r\n                                ])\r\n                        }\r\n                    />\r\n                    <Pagination\r\n                        hasPrevious={previousPaginateTokens.length > 0}\r\n                        onPrevious={paginatePrevious}\r\n                        hasNext={nextPaginateToken}\r\n                        onNext={paginateNext}\r\n                    />\r\n                </Card>\r\n            )} */}\r\n        </Page>\r\n    )\r\n}\r\n\r\nexport default BranchData\r\n"]},"metadata":{},"sourceType":"module"}