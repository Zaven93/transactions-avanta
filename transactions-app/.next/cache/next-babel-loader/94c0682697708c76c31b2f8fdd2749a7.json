{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport axios from 'axios';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport createApp from '@shopify/app-bridge';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport gql from 'graphql-tag';\nimport { print } from 'graphql';\nimport { Card, DataTable, Button, Page, Pagination, TextField, ChoiceList, Filters, Icon, Stack } from '@shopify/polaris';\nimport { SearchMajorMonotone, TransactionMajorMonotone, BalanceMajorMonotone } from '@shopify/polaris-icons';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nAPI.configure(config);\nconst listTransactions = gql`\n    query listTransactions($limit: Int, $nextToken: String) {\n        listTransactions(limit: $limit, nextToken: $nextToken) {\n            nextToken\n            items {\n                id\n                totalPrice\n                totalBonusAmount\n                currency\n                products {\n                    id\n                    title\n                    bonusPercentage\n                    priceAmount\n                    priceCurrency\n                    image\n                }\n                customer {\n                    id\n                    firstName\n                    lastName\n                    phone\n                    email\n                }\n                createdAt\n            }\n        }\n    }\n`;\n\nconst Index = ({\n  transactions\n}) => {\n  const {\n    0: searchValue,\n    1: setSearchValue\n  } = useState(null);\n  const {\n    0: transactionItems,\n    1: setTransactionItems\n  } = useState(transactions.listTransactions.items);\n  const {\n    0: nextPaginateToken,\n    1: setNextPaginateToken\n  } = useState(transactions.listTransactions.nextToken);\n  const {\n    0: previousPaginateTokens,\n    1: setPreviousPaginateTokens\n  } = useState([]);\n  const {\n    0: fetchCount,\n    1: setFetchCount\n  } = useState(0);\n  const handleSearchInput = useCallback(newValue => setSearchValue(newValue), []);\n  console.log('Transactions from amplify', transactions); // const fetchTransactions = useCallback(async () => {\n  //     try {\n  //         const data = await axios({\n  //             url:\n  //                 'https://kytejmxrrrgahiikcodklhf6rq.appsync-api.us-east-1.amazonaws.com/graphql',\n  //             method: 'post',\n  //             headers: {\n  //                 'x-api-key': 'da2-iwznaxe3h5bxznagzuctrhqekm'\n  //             },\n  //             data: {\n  //                 query: print(listTransactions),\n  //                 variables: {\n  //                     limit: 5\n  //                 }\n  //             }\n  //         })\n  //         setTransactionItems(data.data.data.listTransactions.items)\n  //         setNextPaginateToken(data.data.data.listTransactions.nextToken)\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // }, [])\n  // useEffect(() => {\n  //     fetchTransactions()\n  // }, [fetchTransactions])\n\n  const app = createApp({\n    apiKey: '3b01063bac3031d13101100ef3e44fd5',\n    shopOrigin: 'transactions-avanta.myshopify.com'\n  });\n  const redirect = Redirect.create(app);\n\n  const paginateNext = async () => {\n    setPreviousPaginateTokens([...previousPaginateTokens, nextPaginateToken]);\n\n    try {\n      // const data = await axios({\n      //     url:\n      //         'https://kytejmxrrrgahiikcodklhf6rq.appsync-api.us-east-1.amazonaws.com/graphql',\n      //     method: 'post',\n      //     headers: {\n      //         'x-api-key': 'da2-iwznaxe3h5bxznagzuctrhqekm'\n      //     },\n      //     data: {\n      //         query: print(listTransactions),\n      //         variables: {\n      //             limit: 5,\n      //             nextToken: nextPaginateToken\n      //         }\n      //     }\n      // })\n      const data = await API.graphql(graphqlOperation(listTransactions, {\n        limit: 5,\n        nextToken: nextPaginateToken\n      }));\n      setTransactionItems(data.data.data.listTransactions.items);\n      setNextPaginateToken(data.data.data.listTransactions.nextToken);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const paginatePrevious = async () => {\n    const previousToken = previousPaginateTokens[previousPaginateTokens.length === 1 ? 0 : previousPaginateTokens.length - 2];\n    setPreviousPaginateTokens([...previousPaginateTokens.slice(0, previousPaginateTokens.length - 1)]);\n\n    try {\n      if (previousPaginateTokens.length === 1) {\n        // const data = await axios({\n        //     url:\n        //         'https://kytejmxrrrgahiikcodklhf6rq.appsync-api.us-east-1.amazonaws.com/graphql',\n        //     method: 'post',\n        //     headers: {\n        //         'x-api-key': 'da2-iwznaxe3h5bxznagzuctrhqekm'\n        //     },\n        //     data: {\n        //         query: print(listTransactions),\n        //         variables: {\n        //             limit: 5\n        //         }\n        //     }\n        // })\n        const data = await API.graphql(graphqlOperation(listTransactions, {\n          limit: 5\n        }));\n        setTransactionItems(data.data.data.listTransactions.items);\n        setNextPaginateToken(data.data.data.listTransactions.nextToken);\n      } else {\n        // const data = await axios({\n        //     url:\n        //         'https://kytejmxrrrgahiikcodklhf6rq.appsync-api.us-east-1.amazonaws.com/graphql',\n        //     method: 'post',\n        //     headers: {\n        //         'x-api-key': 'da2-iwznaxe3h5bxznagzuctrhqekm'\n        //     },\n        //     data: {\n        //         query: print(listTransactions),\n        //         variables: {\n        //             limit: 5,\n        //             nextToken: previousToken\n        //         }\n        //     }\n        // })\n        const data = await API.graphql(graphqlOperation(listTransactions, {\n          limit: 5,\n          nextToken: previousToken\n        }));\n        setTransactionItems(data.data.data.listTransactions.items);\n        setNextPaginateToken(data.data.data.listTransactions.nextToken);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return __jsx(Page, {\n    title: \"Transactions\"\n  }, __jsx(TextField, {\n    label: \"Search Product\",\n    value: searchValue,\n    onChange: handleSearchInput,\n    prefix: __jsx(Icon, {\n      source: SearchMajorMonotone\n    }),\n    placeholder: \"Search by Customer phone number\"\n  }), __jsx(Stack, null, __jsx(Stack.Item, {\n    fill: true\n  }, __jsx(Button, {\n    id: \"Accept-Payment\",\n    onClick: () => redirect.dispatch(Redirect.Action.ADMIN_PATH, '/apps/3b01063bac3031d13101100ef3e44fd5/accept-payment')\n  }, __jsx(Icon, {\n    source: BalanceMajorMonotone\n  }), \" Accept Payment\")), __jsx(Stack.Item, null, __jsx(Button, {\n    id: \"Create-Transaction\",\n    primary: true,\n    onClick: () => redirect.dispatch(Redirect.Action.REMOTE, {\n      url: 'https://dev.d3ivgpkzuz6hkr.amplifyapp.com',\n      newContext: true\n    })\n  }, __jsx(Icon, {\n    source: TransactionMajorMonotone\n  }), \" Create transaction\"))), transactionItems && __jsx(Card, null, __jsx(DataTable, {\n    columnContentTypes: ['text', 'text', 'text', 'text'],\n    headings: ['Customer phone number', 'TotalPrice', 'TotalBonusAmount', 'CreatedAt'],\n    rows: transactionItems && transactionItems.filter(transaction => {\n      if (searchValue == null) {\n        return transaction;\n      } else if (transaction.customer[0].phone.toLowerCase().includes(searchValue.toLowerCase())) {\n        return transaction;\n      }\n    }).map(transaction => [__jsx(Button, {\n      primary: true,\n      onClick: () => redirect.dispatch(Redirect.Action.ADMIN_PATH, {\n        path: `/customers/${transaction.customer[0].id}`,\n        newContext: true\n      })\n    }, transaction.customer[0].phone), toCurrency(Number(transaction.totalPrice)), toCurrency(Number(transaction.totalBonusAmount)), formatDate(transaction.createdAt)])\n  }), __jsx(Pagination, {\n    hasPrevious: previousPaginateTokens.length > 0,\n    onPrevious: paginatePrevious,\n    hasNext: nextPaginateToken,\n    onNext: paginateNext\n  })));\n};\n\nexport async function getStaticProps() {\n  let result;\n\n  try {\n    result = await API.graphql(graphqlOperation(listTransactions, {\n      limit: 5\n    }));\n  } catch (error) {\n    console.log(error);\n  }\n\n  if (result.errors) {\n    console.warn('Failed to fetch transactions.', result.errors);\n    return {\n      props: {\n        transactions: []\n      }\n    };\n  }\n\n  if (result.data !== null) {\n    return {\n      props: {\n        transactions: result.data\n      }\n    };\n  }\n}\nexport default Index;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/pages/index.js"],"names":["React","useState","useCallback","useEffect","axios","API","graphqlOperation","createApp","Redirect","gql","print","Card","DataTable","Button","Page","Pagination","TextField","ChoiceList","Filters","Icon","Stack","SearchMajorMonotone","TransactionMajorMonotone","BalanceMajorMonotone","toCurrency","formatDate","config","configure","listTransactions","Index","transactions","searchValue","setSearchValue","transactionItems","setTransactionItems","items","nextPaginateToken","setNextPaginateToken","nextToken","previousPaginateTokens","setPreviousPaginateTokens","fetchCount","setFetchCount","handleSearchInput","newValue","console","log","app","apiKey","shopOrigin","redirect","create","paginateNext","data","graphql","limit","error","paginatePrevious","previousToken","length","slice","dispatch","Action","ADMIN_PATH","REMOTE","url","newContext","filter","transaction","customer","phone","toLowerCase","includes","map","path","id","Number","totalPrice","totalBonusAmount","createdAt","getStaticProps","result","errors","warn","props"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { API, graphqlOperation } from 'aws-amplify'\r\nimport createApp from '@shopify/app-bridge'\r\nimport { Redirect } from '@shopify/app-bridge/actions'\r\nimport gql from 'graphql-tag'\r\nimport { print } from 'graphql'\r\nimport {\r\n    Card,\r\n    DataTable,\r\n    Button,\r\n    Page,\r\n    Pagination,\r\n    TextField,\r\n    ChoiceList,\r\n    Filters,\r\n    Icon,\r\n    Stack\r\n} from '@shopify/polaris'\r\nimport {\r\n    SearchMajorMonotone,\r\n    TransactionMajorMonotone,\r\n    BalanceMajorMonotone\r\n} from '@shopify/polaris-icons'\r\nimport { toCurrency, formatDate } from '../utils/helper'\r\nimport config from '../aws-exports'\r\n\r\nAPI.configure(config)\r\n\r\nconst listTransactions = gql`\r\n    query listTransactions($limit: Int, $nextToken: String) {\r\n        listTransactions(limit: $limit, nextToken: $nextToken) {\r\n            nextToken\r\n            items {\r\n                id\r\n                totalPrice\r\n                totalBonusAmount\r\n                currency\r\n                products {\r\n                    id\r\n                    title\r\n                    bonusPercentage\r\n                    priceAmount\r\n                    priceCurrency\r\n                    image\r\n                }\r\n                customer {\r\n                    id\r\n                    firstName\r\n                    lastName\r\n                    phone\r\n                    email\r\n                }\r\n                createdAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst Index = ({ transactions }) => {\r\n    const [searchValue, setSearchValue] = useState(null)\r\n    const [transactionItems, setTransactionItems] = useState(transactions.listTransactions.items)\r\n    const [nextPaginateToken, setNextPaginateToken] = useState(\r\n        transactions.listTransactions.nextToken\r\n    )\r\n    const [previousPaginateTokens, setPreviousPaginateTokens] = useState([])\r\n    const [fetchCount, setFetchCount] = useState(0)\r\n    const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\r\n\r\n    console.log('Transactions from amplify', transactions)\r\n\r\n    // const fetchTransactions = useCallback(async () => {\r\n    //     try {\r\n    //         const data = await axios({\r\n    //             url:\r\n    //                 'https://kytejmxrrrgahiikcodklhf6rq.appsync-api.us-east-1.amazonaws.com/graphql',\r\n    //             method: 'post',\r\n    //             headers: {\r\n    //                 'x-api-key': 'da2-iwznaxe3h5bxznagzuctrhqekm'\r\n    //             },\r\n    //             data: {\r\n    //                 query: print(listTransactions),\r\n    //                 variables: {\r\n    //                     limit: 5\r\n    //                 }\r\n    //             }\r\n    //         })\r\n    //         setTransactionItems(data.data.data.listTransactions.items)\r\n    //         setNextPaginateToken(data.data.data.listTransactions.nextToken)\r\n    //     } catch (error) {\r\n    //         console.log(error)\r\n    //     }\r\n    // }, [])\r\n\r\n    // useEffect(() => {\r\n    //     fetchTransactions()\r\n    // }, [fetchTransactions])\r\n\r\n    const app = createApp({\r\n        apiKey: '3b01063bac3031d13101100ef3e44fd5',\r\n        shopOrigin: 'transactions-avanta.myshopify.com'\r\n    })\r\n\r\n    const redirect = Redirect.create(app)\r\n\r\n    const paginateNext = async () => {\r\n        setPreviousPaginateTokens([...previousPaginateTokens, nextPaginateToken])\r\n        try {\r\n            // const data = await axios({\r\n            //     url:\r\n            //         'https://kytejmxrrrgahiikcodklhf6rq.appsync-api.us-east-1.amazonaws.com/graphql',\r\n            //     method: 'post',\r\n            //     headers: {\r\n            //         'x-api-key': 'da2-iwznaxe3h5bxznagzuctrhqekm'\r\n            //     },\r\n            //     data: {\r\n            //         query: print(listTransactions),\r\n            //         variables: {\r\n            //             limit: 5,\r\n            //             nextToken: nextPaginateToken\r\n            //         }\r\n            //     }\r\n            // })\r\n            const data = await API.graphql(\r\n                graphqlOperation(listTransactions, { limit: 5, nextToken: nextPaginateToken })\r\n            )\r\n            setTransactionItems(data.data.data.listTransactions.items)\r\n            setNextPaginateToken(data.data.data.listTransactions.nextToken)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    const paginatePrevious = async () => {\r\n        const previousToken =\r\n            previousPaginateTokens[\r\n                previousPaginateTokens.length === 1 ? 0 : previousPaginateTokens.length - 2\r\n            ]\r\n        setPreviousPaginateTokens([\r\n            ...previousPaginateTokens.slice(0, previousPaginateTokens.length - 1)\r\n        ])\r\n        try {\r\n            if (previousPaginateTokens.length === 1) {\r\n                // const data = await axios({\r\n                //     url:\r\n                //         'https://kytejmxrrrgahiikcodklhf6rq.appsync-api.us-east-1.amazonaws.com/graphql',\r\n                //     method: 'post',\r\n                //     headers: {\r\n                //         'x-api-key': 'da2-iwznaxe3h5bxznagzuctrhqekm'\r\n                //     },\r\n                //     data: {\r\n                //         query: print(listTransactions),\r\n                //         variables: {\r\n                //             limit: 5\r\n                //         }\r\n                //     }\r\n                // })\r\n\r\n                const data = await API.graphql(graphqlOperation(listTransactions, { limit: 5 }))\r\n                setTransactionItems(data.data.data.listTransactions.items)\r\n                setNextPaginateToken(data.data.data.listTransactions.nextToken)\r\n            } else {\r\n                // const data = await axios({\r\n                //     url:\r\n                //         'https://kytejmxrrrgahiikcodklhf6rq.appsync-api.us-east-1.amazonaws.com/graphql',\r\n                //     method: 'post',\r\n                //     headers: {\r\n                //         'x-api-key': 'da2-iwznaxe3h5bxznagzuctrhqekm'\r\n                //     },\r\n                //     data: {\r\n                //         query: print(listTransactions),\r\n                //         variables: {\r\n                //             limit: 5,\r\n                //             nextToken: previousToken\r\n                //         }\r\n                //     }\r\n                // })\r\n\r\n                const data = await API.graphql(\r\n                    graphqlOperation(listTransactions, { limit: 5, nextToken: previousToken })\r\n                )\r\n                setTransactionItems(data.data.data.listTransactions.items)\r\n                setNextPaginateToken(data.data.data.listTransactions.nextToken)\r\n            }\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Page title=\"Transactions\">\r\n            <TextField\r\n                label=\"Search Product\"\r\n                value={searchValue}\r\n                onChange={handleSearchInput}\r\n                prefix={<Icon source={SearchMajorMonotone} />}\r\n                placeholder=\"Search by Customer phone number\"\r\n            />\r\n            <Stack>\r\n                <Stack.Item fill>\r\n                    <Button\r\n                        id=\"Accept-Payment\"\r\n                        onClick={() =>\r\n                            redirect.dispatch(\r\n                                Redirect.Action.ADMIN_PATH,\r\n                                '/apps/3b01063bac3031d13101100ef3e44fd5/accept-payment'\r\n                            )\r\n                        }>\r\n                        <Icon source={BalanceMajorMonotone} /> Accept Payment\r\n                    </Button>\r\n                </Stack.Item>\r\n                <Stack.Item>\r\n                    <Button\r\n                        id=\"Create-Transaction\"\r\n                        primary\r\n                        onClick={() =>\r\n                            redirect.dispatch(Redirect.Action.REMOTE, {\r\n                                url: 'https://dev.d3ivgpkzuz6hkr.amplifyapp.com',\r\n                                newContext: true\r\n                            })\r\n                        }>\r\n                        <Icon source={TransactionMajorMonotone} /> Create transaction\r\n                    </Button>\r\n                </Stack.Item>\r\n            </Stack>\r\n            {transactionItems && (\r\n                <Card>\r\n                    <DataTable\r\n                        columnContentTypes={['text', 'text', 'text', 'text']}\r\n                        headings={[\r\n                            'Customer phone number',\r\n                            'TotalPrice',\r\n                            'TotalBonusAmount',\r\n                            'CreatedAt'\r\n                        ]}\r\n                        rows={\r\n                            transactionItems &&\r\n                            transactionItems\r\n                                .filter((transaction) => {\r\n                                    if (searchValue == null) {\r\n                                        return transaction\r\n                                    } else if (\r\n                                        transaction.customer[0].phone\r\n                                            .toLowerCase()\r\n                                            .includes(searchValue.toLowerCase())\r\n                                    ) {\r\n                                        return transaction\r\n                                    }\r\n                                })\r\n                                .map((transaction) => [\r\n                                    <Button\r\n                                        primary\r\n                                        onClick={() =>\r\n                                            redirect.dispatch(Redirect.Action.ADMIN_PATH, {\r\n                                                path: `/customers/${transaction.customer[0].id}`,\r\n                                                newContext: true\r\n                                            })\r\n                                        }>\r\n                                        {transaction.customer[0].phone}\r\n                                    </Button>,\r\n                                    toCurrency(Number(transaction.totalPrice)),\r\n                                    toCurrency(Number(transaction.totalBonusAmount)),\r\n                                    formatDate(transaction.createdAt)\r\n                                ])\r\n                        }\r\n                    />\r\n                    <Pagination\r\n                        hasPrevious={previousPaginateTokens.length > 0}\r\n                        onPrevious={paginatePrevious}\r\n                        hasNext={nextPaginateToken}\r\n                        onNext={paginateNext}\r\n                    />\r\n                </Card>\r\n            )}\r\n        </Page>\r\n    )\r\n}\r\n\r\nexport async function getStaticProps() {\r\n    let result\r\n    try {\r\n        result = await API.graphql(graphqlOperation(listTransactions, { limit: 5 }))\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n\r\n    if (result.errors) {\r\n        console.warn('Failed to fetch transactions.', result.errors)\r\n        return { props: { transactions: [] } }\r\n    }\r\n    if (result.data !== null) {\r\n        return { props: { transactions: result.data } }\r\n    }\r\n}\r\n\r\nexport default Index\r\n"]},"metadata":{},"sourceType":"module"}