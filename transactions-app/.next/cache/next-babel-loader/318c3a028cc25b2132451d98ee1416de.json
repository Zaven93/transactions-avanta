{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Table, Icon, Popup, Header } from 'semantic-ui-react';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport gql from 'graphql-tag';\nimport { Badge, Button } from '@shopify/polaris';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport config from 'aws-amplify';\nAPI.configure(config);\nconst listPaymentRequest = gql`\n    query listPaymentRequest($limit: Int, $nextToken: String) {\n        listPaymentRequests(\n            limit: $limit\n            nextToken: $nextToken\n            filter: { status: { eq: DECLINED } }\n        ) {\n            items {\n                bonusAmount\n                createdAt\n                customerId\n                id\n                orderId\n                status\n                updatedAt\n            }\n            nextToken\n        }\n    }\n`;\n\nconst DeclinedPaymentRequest = () => {\n  const {\n    0: nextPaginateToken,\n    1: setNextPaginateToken\n  } = useState('');\n  const {\n    0: paymentRequestItems,\n    1: setPaymentRequestItems\n  } = useState([]);\n  const fetchAcceptedPayments = useCallback(async () => {\n    try {\n      const res = await API.graphql(graphqlOperation(listPaymentRequest, {\n        limit: 20\n      }));\n      setNextPaginateToken(res.data.listPaymentRequests.nextToken);\n      setPaymentRequestItems(res.data.listPaymentRequests.items);\n      console.log('Accepted payments', res.data);\n    } catch (error) {\n      console.log(error);\n    }\n  }, []);\n  useEffect(() => {\n    fetchAcceptedPayments();\n  }, [fetchAcceptedPayments]);\n\n  const loadMore = async () => {\n    try {\n      const res = await API.graphql(graphqlOperation(listPaymentRequest, {\n        limit: 20,\n        nextToken: nextPaginateToken\n      }));\n      setNextPaginateToken(res.data.listPaymentRequests.nextToken);\n      setPaymentRequestItems([...paymentRequestItems, ...res.data.listPaymentRequests.items]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Table, {\n    celled: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Customer Id\"), __jsx(Table.HeaderCell, null, \"Bonus Amount\"), __jsx(Table.HeaderCell, null, \"Created At\"), __jsx(Table.HeaderCell, null, \"Updated At\"), __jsx(Table.HeaderCell, null, \"Status\"))), __jsx(Table.Body, null, paymentRequestItems && paymentRequestItems.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt)).map(item => __jsx(Table.Row, {\n    key: item.id\n  }, __jsx(Table.Cell, null, __jsx(Badge, {\n    size: \"small\"\n  }, item.customerId)), __jsx(Table.Cell, null, toCurrency(item.bonusAmount)), __jsx(Table.Cell, null, formatDate(item.createdAt)), __jsx(Table.Cell, null, formatDate(item.updatedAt)), __jsx(Table.Cell, null, __jsx(Badge, {\n    size: \"small\",\n    progress: \"incomplete\",\n    status: \"critical\"\n  }, item.status)))))), __jsx(Button, {\n    disabled: !nextPaginateToken,\n    primary: true,\n    onClick: loadMore\n  }, \"Load more\"));\n};\n\nexport default DeclinedPaymentRequest;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/components/DeclinedPaymentRequest.js"],"names":["React","useState","useEffect","useCallback","Table","Icon","Popup","Header","API","graphqlOperation","gql","Badge","Button","toCurrency","formatDate","config","configure","listPaymentRequest","DeclinedPaymentRequest","nextPaginateToken","setNextPaginateToken","paymentRequestItems","setPaymentRequestItems","fetchAcceptedPayments","res","graphql","limit","data","listPaymentRequests","nextToken","items","console","log","error","loadMore","sort","a","b","Date","updatedAt","map","item","id","customerId","bonusAmount","createdAt","status"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\r\nimport { Table, Icon, Popup, Header } from 'semantic-ui-react'\r\nimport { API, graphqlOperation } from 'aws-amplify'\r\nimport gql from 'graphql-tag'\r\nimport { Badge, Button } from '@shopify/polaris'\r\nimport { toCurrency, formatDate } from '../utils/helper'\r\nimport config from 'aws-amplify'\r\n\r\nAPI.configure(config)\r\n\r\nconst listPaymentRequest = gql`\r\n    query listPaymentRequest($limit: Int, $nextToken: String) {\r\n        listPaymentRequests(\r\n            limit: $limit\r\n            nextToken: $nextToken\r\n            filter: { status: { eq: DECLINED } }\r\n        ) {\r\n            items {\r\n                bonusAmount\r\n                createdAt\r\n                customerId\r\n                id\r\n                orderId\r\n                status\r\n                updatedAt\r\n            }\r\n            nextToken\r\n        }\r\n    }\r\n`\r\n\r\nconst DeclinedPaymentRequest = () => {\r\n    const [nextPaginateToken, setNextPaginateToken] = useState('')\r\n    const [paymentRequestItems, setPaymentRequestItems] = useState([])\r\n\r\n    const fetchAcceptedPayments = useCallback(async () => {\r\n        try {\r\n            const res = await API.graphql(graphqlOperation(listPaymentRequest, { limit: 20 }))\r\n            setNextPaginateToken(res.data.listPaymentRequests.nextToken)\r\n            setPaymentRequestItems(res.data.listPaymentRequests.items)\r\n            console.log('Accepted payments', res.data)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        fetchAcceptedPayments()\r\n    }, [fetchAcceptedPayments])\r\n\r\n    const loadMore = async () => {\r\n        try {\r\n            const res = await API.graphql(\r\n                graphqlOperation(listPaymentRequest, { limit: 20, nextToken: nextPaginateToken })\r\n            )\r\n            setNextPaginateToken(res.data.listPaymentRequests.nextToken)\r\n            setPaymentRequestItems([...paymentRequestItems, ...res.data.listPaymentRequests.items])\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Table celled>\r\n                <Table.Header>\r\n                    <Table.Row>\r\n                        <Table.HeaderCell>Customer Id</Table.HeaderCell>\r\n                        <Table.HeaderCell>Bonus Amount</Table.HeaderCell>\r\n                        <Table.HeaderCell>Created At</Table.HeaderCell>\r\n                        <Table.HeaderCell>Updated At</Table.HeaderCell>\r\n                        <Table.HeaderCell>Status</Table.HeaderCell>\r\n                    </Table.Row>\r\n                </Table.Header>\r\n                <Table.Body>\r\n                    {paymentRequestItems &&\r\n                        paymentRequestItems\r\n                            .sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt))\r\n                            .map((item) => (\r\n                                <Table.Row key={item.id}>\r\n                                    <Table.Cell>\r\n                                        <Badge size=\"small\">{item.customerId}</Badge>\r\n                                    </Table.Cell>\r\n                                    <Table.Cell>{toCurrency(item.bonusAmount)}</Table.Cell>\r\n                                    <Table.Cell>{formatDate(item.createdAt)}</Table.Cell>\r\n                                    <Table.Cell>{formatDate(item.updatedAt)}</Table.Cell>\r\n                                    <Table.Cell>\r\n                                        <Badge size=\"small\" progress=\"incomplete\" status=\"critical\">\r\n                                            {item.status}\r\n                                        </Badge>\r\n                                    </Table.Cell>\r\n                                </Table.Row>\r\n                            ))}\r\n                </Table.Body>\r\n            </Table>\r\n            <Button disabled={!nextPaginateToken} primary onClick={loadMore}>\r\n                Load more\r\n            </Button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DeclinedPaymentRequest\r\n"]},"metadata":{},"sourceType":"module"}