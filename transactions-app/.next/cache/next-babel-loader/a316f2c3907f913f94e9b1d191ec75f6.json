{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    query listBranchs {\\n        listBranchs {\\n            items {\\n                adminId\\n                branchName\\n                createdAt\\n                id\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation createBranch($input: CreateBranchInput!) {\\n        createBranch(input: $input) {\\n            id\\n            adminId\\n            branchName\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Auth, API, graphqlOperation } from 'aws-amplify';\nimport gql from 'graphql-tag';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Page, Button, Modal, Form, FormLayout, TextField, Badge } from '@shopify/polaris';\nimport { Table, Popup, Header, Icon } from 'semantic-ui-react';\nimport ProductList from './ProductsList';\nimport { formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nimport BranchProducts from './BranchProducts';\nimport BranchList from './BranchList';\nimport AdminBranchInfo from './AdminBranchInfo';\nAPI.configure(config);\nvar createBranch = gql(_templateObject());\nvar listBranchs = gql(_templateObject2());\n\nvar BranchConsole = function BranchConsole(_ref) {\n  _s();\n\n  var updateUser = _ref.updateUser;\n\n  var _useState = useState(false),\n      active = _useState[0],\n      setActive = _useState[1];\n\n  var _useState2 = useState(''),\n      branchName = _useState2[0],\n      setBranchName = _useState2[1];\n\n  var _useState3 = useState(''),\n      username = _useState3[0],\n      setUsername = _useState3[1];\n\n  var _useState4 = useState(''),\n      email = _useState4[0],\n      setEmail = _useState4[1];\n\n  var _useState5 = useState(''),\n      password = _useState5[0],\n      setPassword = _useState5[1];\n\n  var _useState6 = useState(''),\n      code = _useState6[0],\n      setCode = _useState6[1];\n\n  var _useState7 = useState('signUp'),\n      formType = _useState7[0],\n      setFormType = _useState7[1];\n\n  var _useState8 = useState(null),\n      userSub = _useState8[0],\n      setUserSub = _useState8[1];\n\n  var _useState9 = useState(''),\n      branches = _useState9[0],\n      setBranches = _useState9[1];\n\n  var _useState10 = useState(null),\n      branchId = _useState10[0],\n      setBranchId = _useState10[1];\n\n  var onChangeBranchName = useCallback(function (newValue) {\n    setBranchName(newValue);\n  }, []);\n  var onChangeUsername = useCallback(function (newValue) {\n    setUsername(newValue);\n  }, []);\n  var onChangePassword = useCallback(function (newValue) {\n    setPassword(newValue);\n  }, []);\n  var onChangeEmail = useCallback(function (newValue) {\n    setEmail(newValue);\n  }, []);\n  var onChangeCode = useCallback(function (newValue) {\n    setCode(newValue);\n  }, []);\n\n  var handleChange = function handleChange() {\n    setActive(!active);\n  };\n\n  var signUp = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var user;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              _context.prev = 1;\n              _context.next = 4;\n              return Auth.signUp({\n                username: username,\n                password: password,\n                attributes: {\n                  email: email\n                }\n              });\n\n            case 4:\n              user = _context.sent;\n              setUserSub(user.userSub);\n              console.log('Signed Up User from Modal', user);\n              setFormType('confirm');\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](1);\n              console.log(_context.t0);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 10]]);\n    }));\n\n    return function signUp(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var confirm = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(e) {\n      var confirmedUser, branch;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              e.preventDefault();\n              _context2.prev = 1;\n              _context2.next = 4;\n              return Auth.confirmSignUp(username, code);\n\n            case 4:\n              confirmedUser = _context2.sent;\n              console.log('Confirmed user', confirmedUser);\n              _context2.next = 8;\n              return API.graphql(graphqlOperation(createBranch, {\n                input: {\n                  adminId: userSub,\n                  branchUsername: username,\n                  branchName: branchName,\n                  id: uuidv4()\n                }\n              }));\n\n            case 8:\n              branch = _context2.sent;\n              console.log('New created branch', branch);\n              setFormType('signUp');\n              handleChange();\n              _context2.next = 17;\n              break;\n\n            case 14:\n              _context2.prev = 14;\n              _context2.t0 = _context2[\"catch\"](1);\n              console.log(_context2.t0);\n\n            case 17:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 14]]);\n    }));\n\n    return function confirm(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var fetchBranches = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var getBranches;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return API.graphql(graphqlOperation(listBranchs));\n\n            case 3:\n              getBranches = _context3.sent;\n              setBranches(getBranches.data);\n              _context3.next = 10;\n              break;\n\n            case 7:\n              _context3.prev = 7;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.log(_context3.t0);\n\n            case 10:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[0, 7]]);\n    }));\n\n    return function fetchBranches() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    fetchBranches();\n  }, []);\n  console.log('Branch name', branchName);\n  console.log('Username', username);\n  console.log('Password', password);\n  console.log('Email', email);\n  console.log('Code', code);\n  console.log('Fetched branches', branches);\n  return __jsx(React.Fragment, null, branchId && __jsx(AdminBranchInfo, {\n    setBranchId: setBranchId,\n    branchId: branchId\n  }), !branchId && __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: handleChange,\n    primary: true\n  }, __jsx(Icon, {\n    name: \"code branch\"\n  }), \" Create branch\"), __jsx(Button, {\n    primary: true,\n    id: \"Logout\",\n    onClick: function onClick() {\n      Auth.signOut();\n      updateUser(null);\n    }\n  }, __jsx(Icon, {\n    name: \"sign out\"\n  }), \" Logout\"), __jsx(BranchList, {\n    setBranchId: setBranchId\n  }), __jsx(Modal, {\n    open: active,\n    onClose: handleChange,\n    title: \"Fill in Branch info\"\n  }, __jsx(Modal.Section, null, formType === 'signUp' && __jsx(Form, {\n    onSubmit: signUp\n  }, __jsx(FormLayout, null, __jsx(TextField, {\n    value: branchName,\n    onChange: onChangeBranchName,\n    label: \"Branch Name\"\n  }), __jsx(TextField, {\n    value: username,\n    onChange: onChangeUsername,\n    label: \"Branch admin username\"\n  }), __jsx(TextField, {\n    value: email,\n    onChange: onChangeEmail,\n    label: \"Branch admin email\"\n  }), __jsx(TextField, {\n    type: \"password\",\n    value: password,\n    onChange: onChangePassword,\n    label: \"Branch admin password\"\n  }), __jsx(Button, {\n    primary: true,\n    submit: true\n  }, \"Create Branch\"))), formType === 'confirm' && __jsx(Form, {\n    onSubmit: confirm\n  }, __jsx(FormLayout, null, __jsx(TextField, {\n    value: username,\n    onChange: onChangeUsername,\n    label: \"Branch admin username\"\n  }), __jsx(TextField, {\n    value: code,\n    onChange: onChangeCode,\n    label: \"Confirmation code\"\n  }), __jsx(Button, {\n    primary: true,\n    submit: true\n  }, \"Confirm\")))))));\n};\n\n_s(BranchConsole, \"J1zbcK0E5wFu5pZ57AnBBVbSX2g=\");\n\n_c = BranchConsole;\nexport default BranchConsole;\n\nvar _c;\n\n$RefreshReg$(_c, \"BranchConsole\");","map":{"version":3,"sources":["/var/www/transactions-avanta/components/BranchConsole.js"],"names":["React","useState","useEffect","useRef","useCallback","Auth","API","graphqlOperation","gql","v4","uuidv4","Page","Button","Modal","Form","FormLayout","TextField","Badge","Table","Popup","Header","Icon","ProductList","formatDate","config","BranchProducts","BranchList","AdminBranchInfo","configure","createBranch","listBranchs","BranchConsole","updateUser","active","setActive","branchName","setBranchName","username","setUsername","email","setEmail","password","setPassword","code","setCode","formType","setFormType","userSub","setUserSub","branches","setBranches","branchId","setBranchId","onChangeBranchName","newValue","onChangeUsername","onChangePassword","onChangeEmail","onChangeCode","handleChange","signUp","e","preventDefault","attributes","user","console","log","confirm","confirmSignUp","confirmedUser","graphql","input","adminId","branchUsername","id","branch","fetchBranches","getBranches","data","signOut"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react'\nimport { Auth, API, graphqlOperation } from 'aws-amplify'\nimport gql from 'graphql-tag'\nimport { v4 as uuidv4 } from 'uuid'\nimport { Page, Button, Modal, Form, FormLayout, TextField, Badge } from '@shopify/polaris'\nimport { Table, Popup, Header, Icon } from 'semantic-ui-react'\nimport ProductList from './ProductsList'\nimport { formatDate } from '../utils/helper'\nimport config from '../aws-exports'\nimport BranchProducts from './BranchProducts'\nimport BranchList from './BranchList'\nimport AdminBranchInfo from './AdminBranchInfo'\n\nAPI.configure(config)\n\nconst createBranch = gql`\n    mutation createBranch($input: CreateBranchInput!) {\n        createBranch(input: $input) {\n            id\n            adminId\n            branchName\n        }\n    }\n`\n\nconst listBranchs = gql`\n    query listBranchs {\n        listBranchs {\n            items {\n                adminId\n                branchName\n                createdAt\n                id\n            }\n        }\n    }\n`\n\nconst BranchConsole = ({ updateUser }) => {\n    const [active, setActive] = useState(false)\n    const [branchName, setBranchName] = useState('')\n    const [username, setUsername] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [code, setCode] = useState('')\n    const [formType, setFormType] = useState('signUp')\n    const [userSub, setUserSub] = useState(null)\n    const [branches, setBranches] = useState('')\n    const [branchId, setBranchId] = useState(null)\n\n    const onChangeBranchName = useCallback((newValue) => {\n        setBranchName(newValue)\n    }, [])\n\n    const onChangeUsername = useCallback((newValue) => {\n        setUsername(newValue)\n    }, [])\n\n    const onChangePassword = useCallback((newValue) => {\n        setPassword(newValue)\n    }, [])\n\n    const onChangeEmail = useCallback((newValue) => {\n        setEmail(newValue)\n    }, [])\n\n    const onChangeCode = useCallback((newValue) => {\n        setCode(newValue)\n    }, [])\n\n    const handleChange = () => {\n        setActive(!active)\n    }\n\n    const signUp = async (e) => {\n        e.preventDefault()\n        try {\n            const user = await Auth.signUp({ username, password, attributes: { email } })\n            setUserSub(user.userSub)\n            console.log('Signed Up User from Modal', user)\n            setFormType('confirm')\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    const confirm = async (e) => {\n        e.preventDefault()\n        try {\n            const confirmedUser = await Auth.confirmSignUp(username, code)\n            console.log('Confirmed user', confirmedUser)\n            const branch = await API.graphql(\n                graphqlOperation(createBranch, {\n                    input: {\n                        adminId: userSub,\n                        branchUsername: username,\n                        branchName: branchName,\n                        id: uuidv4()\n                    }\n                })\n            )\n            console.log('New created branch', branch)\n            setFormType('signUp')\n            handleChange()\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    const fetchBranches = async () => {\n        try {\n            const getBranches = await API.graphql(graphqlOperation(listBranchs))\n            setBranches(getBranches.data)\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    useEffect(() => {\n        fetchBranches()\n    }, [])\n\n    console.log('Branch name', branchName)\n    console.log('Username', username)\n    console.log('Password', password)\n    console.log('Email', email)\n    console.log('Code', code)\n    console.log('Fetched branches', branches)\n\n    return (\n        <>\n            {branchId && <AdminBranchInfo setBranchId={setBranchId} branchId={branchId} />}\n            {!branchId && (\n                <>\n                    <Button onClick={handleChange} primary>\n                        <Icon name=\"code branch\" /> Create branch\n                    </Button>\n                    <Button\n                        primary\n                        id=\"Logout\"\n                        onClick={() => {\n                            Auth.signOut()\n                            updateUser(null)\n                        }}>\n                        <Icon name=\"sign out\" /> Logout\n                    </Button>\n                    <BranchList setBranchId={setBranchId} />\n                    {/* <Table selectable celled>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Branch Name</Table.HeaderCell>\n                        <Table.HeaderCell>Created At</Table.HeaderCell>\n                        <Table.HeaderCell>Actions</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {branches &&\n                        branches.listBranchs.items.map((item) => (\n                            <Table.Row key={item.id}>\n                                <Table.Cell>\n                                    <Badge size=\"medium\" status=\"info\">\n                                        {item.branchName}\n                                    </Badge>\n                                </Table.Cell>\n                                <Table.Cell>{formatDate(item.createdAt)}</Table.Cell>\n                                <Table.Cell className=\"branch-actions\">\n                                    <Popup\n                                        content=\"Edit branch\"\n                                        trigger={\n                                            <Icon className=\"edit-branch\" name=\"edit outline\" />\n                                        }\n                                    />\n                                    <Popup\n                                        content=\"Delete Branch\"\n                                        trigger={\n                                            <Icon\n                                                className=\"remove-branch\"\n                                                name=\"trash alternate\"\n                                            />\n                                        }\n                                    />\n                                </Table.Cell>\n                            </Table.Row>\n                        ))}\n                </Table.Body>\n            </Table> */}\n                    <Modal open={active} onClose={handleChange} title=\"Fill in Branch info\">\n                        <Modal.Section>\n                            {formType === 'signUp' && (\n                                <Form onSubmit={signUp}>\n                                    <FormLayout>\n                                        <TextField\n                                            value={branchName}\n                                            onChange={onChangeBranchName}\n                                            label=\"Branch Name\"\n                                        />\n                                        <TextField\n                                            value={username}\n                                            onChange={onChangeUsername}\n                                            label=\"Branch admin username\"\n                                        />\n                                        <TextField\n                                            value={email}\n                                            onChange={onChangeEmail}\n                                            label=\"Branch admin email\"\n                                        />\n                                        <TextField\n                                            type=\"password\"\n                                            value={password}\n                                            onChange={onChangePassword}\n                                            label=\"Branch admin password\"\n                                        />\n                                        <Button primary submit>\n                                            Create Branch\n                                        </Button>\n                                    </FormLayout>\n                                </Form>\n                            )}\n                            {formType === 'confirm' && (\n                                <Form onSubmit={confirm}>\n                                    <FormLayout>\n                                        <TextField\n                                            value={username}\n                                            onChange={onChangeUsername}\n                                            label=\"Branch admin username\"\n                                        />\n                                        <TextField\n                                            value={code}\n                                            onChange={onChangeCode}\n                                            label=\"Confirmation code\"\n                                        />\n                                        <Button primary submit>\n                                            Confirm\n                                        </Button>\n                                    </FormLayout>\n                                </Form>\n                            )}\n                        </Modal.Section>\n                    </Modal>\n                </>\n            )}\n        </>\n    )\n}\n\nexport default BranchConsole\n"]},"metadata":{},"sourceType":"module"}