{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useRouter } from 'next/router';\nimport { Auth, API, graphqlOperation } from 'aws-amplify';\nimport createApp from '@shopify/app-bridge';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport gql from 'graphql-tag';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Page, Button, Modal, Form, FormLayout, TextField, Badge } from '@shopify/polaris';\nimport { Table, Popup, Header, Icon } from 'semantic-ui-react';\nimport ProductList from './ProductsList';\nimport { formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nimport BranchProducts from './BranchProducts';\nimport BranchContext from '../context/branchContext';\nAPI.configure(config);\nconst listBranchs = gql`\n    query listBranchs {\n        listBranchs {\n            items {\n                adminId\n                branchName\n                createdAt\n                id\n            }\n        }\n    }\n`;\n\nconst BranchList = () => {\n  const {\n    0: active,\n    1: setActive\n  } = useState(false);\n  const {\n    0: branches,\n    1: setBranches\n  } = useState('');\n  const {\n    0: branchId,\n    1: setBranchId\n  } = useState('');\n  const app = createApp({\n    apiKey: '3b01063bac3031d13101100ef3e44fd5',\n    shopOrigin: 'transactions-avanta.myshopify.com'\n  });\n  const redirect = Redirect.create(app);\n\n  const handleChange = () => {\n    setActive(!active);\n  };\n\n  const fetchBranches = async () => {\n    try {\n      const getBranches = await API.graphql(graphqlOperation(listBranchs));\n      setBranches(getBranches.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const router = useRouter();\n  useEffect(() => {\n    fetchBranches();\n  }, []);\n  console.log('Branch id', branchId);\n  return __jsx(React.Fragment, null, __jsx(Table, {\n    selectable: true,\n    celled: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Branch Name\"), __jsx(Table.HeaderCell, {\n    textAlign: \"center\"\n  }, \"Created At\"), __jsx(Table.HeaderCell, {\n    textAlign: \"center\"\n  }, \"Actions\"))), __jsx(Table.Body, null, branches && branches.listBranchs.items.map(item => __jsx(Table.Row, {\n    key: item.id\n  }, __jsx(Table.Cell, null, __jsx(Button, {\n    primary: true,\n    onClick: () => {\n      // redirect.dispatch(\n      //     Redirect.Action.ADMIN_PATH,\n      //     `/apps/3b01063bac3031d13101100ef3e44fd5/branch?branchId=${item.id}`\n      // )\n      router.push(`/branch/${item.id}`);\n    }\n  }, __jsx(Icon, {\n    name: \"code branch\"\n  }), \" \", item.branchName)), __jsx(Table.Cell, {\n    textAlign: \"center\"\n  }, formatDate(item.createdAt)), __jsx(Table.Cell, {\n    textAlign: \"center\",\n    className: \"branch-actions\"\n  }, __jsx(Popup, {\n    content: \"Edit branch\",\n    trigger: __jsx(Icon, {\n      onClick: () => {\n        setBranchId(item.id);\n        handleChange();\n      },\n      className: \"edit-branch\",\n      name: \"edit outline\"\n    })\n  }), __jsx(Popup, {\n    content: \"Delete Branch\",\n    trigger: __jsx(Icon, {\n      className: \"remove-branch\",\n      name: \"trash alternate\"\n    })\n  })))))), __jsx(BranchProducts, {\n    branchId: branchId,\n    active: active,\n    handleChange: handleChange\n  }));\n};\n\nexport default BranchList;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/components/BranchList.js"],"names":["React","useState","useEffect","useCallback","useRouter","Auth","API","graphqlOperation","createApp","Redirect","gql","v4","uuidv4","Page","Button","Modal","Form","FormLayout","TextField","Badge","Table","Popup","Header","Icon","ProductList","formatDate","config","BranchProducts","BranchContext","configure","listBranchs","BranchList","active","setActive","branches","setBranches","branchId","setBranchId","app","apiKey","shopOrigin","redirect","create","handleChange","fetchBranches","getBranches","graphql","data","error","console","log","router","items","map","item","id","push","branchName","createdAt"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { Auth, API, graphqlOperation } from 'aws-amplify'\r\nimport createApp from '@shopify/app-bridge'\r\nimport { Redirect } from '@shopify/app-bridge/actions'\r\nimport gql from 'graphql-tag'\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport { Page, Button, Modal, Form, FormLayout, TextField, Badge } from '@shopify/polaris'\r\nimport { Table, Popup, Header, Icon } from 'semantic-ui-react'\r\nimport ProductList from './ProductsList'\r\nimport { formatDate } from '../utils/helper'\r\nimport config from '../aws-exports'\r\nimport BranchProducts from './BranchProducts'\r\nimport BranchContext from '../context/branchContext'\r\n\r\nAPI.configure(config)\r\n\r\nconst listBranchs = gql`\r\n    query listBranchs {\r\n        listBranchs {\r\n            items {\r\n                adminId\r\n                branchName\r\n                createdAt\r\n                id\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst BranchList = () => {\r\n    const [active, setActive] = useState(false)\r\n    const [branches, setBranches] = useState('')\r\n    const [branchId, setBranchId] = useState('')\r\n\r\n    const app = createApp({\r\n        apiKey: '3b01063bac3031d13101100ef3e44fd5',\r\n        shopOrigin: 'transactions-avanta.myshopify.com'\r\n    })\r\n\r\n    const redirect = Redirect.create(app)\r\n\r\n    const handleChange = () => {\r\n        setActive(!active)\r\n    }\r\n\r\n    const fetchBranches = async () => {\r\n        try {\r\n            const getBranches = await API.graphql(graphqlOperation(listBranchs))\r\n            setBranches(getBranches.data)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    const router = useRouter()\r\n\r\n    useEffect(() => {\r\n        fetchBranches()\r\n    }, [])\r\n\r\n    console.log('Branch id', branchId)\r\n\r\n    return (\r\n        <>\r\n            <Table selectable celled>\r\n                <Table.Header>\r\n                    <Table.Row>\r\n                        <Table.HeaderCell>Branch Name</Table.HeaderCell>\r\n                        <Table.HeaderCell textAlign=\"center\">Created At</Table.HeaderCell>\r\n                        <Table.HeaderCell textAlign=\"center\">Actions</Table.HeaderCell>\r\n                    </Table.Row>\r\n                </Table.Header>\r\n                <Table.Body>\r\n                    {branches &&\r\n                        branches.listBranchs.items.map((item) => (\r\n                            <Table.Row key={item.id}>\r\n                                <Table.Cell>\r\n                                    {/* <Badge size=\"medium\" status=\"info\">\r\n                                        {item.branchName}\r\n                                    </Badge> */}\r\n                                    <Button\r\n                                        primary\r\n                                        onClick={() => {\r\n                                            // redirect.dispatch(\r\n                                            //     Redirect.Action.ADMIN_PATH,\r\n                                            //     `/apps/3b01063bac3031d13101100ef3e44fd5/branch?branchId=${item.id}`\r\n                                            // )\r\n                                            router.push(`/branch/${item.id}`)\r\n                                        }}>\r\n                                        <Icon name=\"code branch\" /> {item.branchName}\r\n                                    </Button>\r\n                                </Table.Cell>\r\n                                <Table.Cell textAlign=\"center\">\r\n                                    {formatDate(item.createdAt)}\r\n                                </Table.Cell>\r\n                                <Table.Cell textAlign=\"center\" className=\"branch-actions\">\r\n                                    <Popup\r\n                                        content=\"Edit branch\"\r\n                                        trigger={\r\n                                            <Icon\r\n                                                onClick={() => {\r\n                                                    setBranchId(item.id)\r\n                                                    handleChange()\r\n                                                }}\r\n                                                className=\"edit-branch\"\r\n                                                name=\"edit outline\"\r\n                                            />\r\n                                        }\r\n                                    />\r\n                                    <Popup\r\n                                        content=\"Delete Branch\"\r\n                                        trigger={\r\n                                            <Icon\r\n                                                className=\"remove-branch\"\r\n                                                name=\"trash alternate\"\r\n                                            />\r\n                                        }\r\n                                    />\r\n                                </Table.Cell>\r\n                            </Table.Row>\r\n                        ))}\r\n                </Table.Body>\r\n            </Table>\r\n            <BranchProducts branchId={branchId} active={active} handleChange={handleChange} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BranchList\r\n"]},"metadata":{},"sourceType":"module"}