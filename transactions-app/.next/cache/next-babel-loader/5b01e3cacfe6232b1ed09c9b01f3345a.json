{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Auth, API, graphqlOperation } from 'aws-amplify';\nimport gql from 'graphql-tag';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Page, Button, Icon, Modal, Form, FormLayout, TextField, Badge } from '@shopify/polaris';\nimport { Table, Popup, Header } from 'semantic-ui-react';\nimport ProductList from './ProductsList';\nimport { formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nAPI.configure(config);\nconst createBranch = gql`\n    mutation createBranch($input: CreateBranchInput!) {\n        createBranch(input: $input) {\n            id\n            adminId\n            branchName\n        }\n    }\n`;\nconst listBranchs = gql`\n    query listBranchs {\n        listBranchs {\n            items {\n                adminId\n                branchName\n                createdAt\n                id\n            }\n        }\n    }\n`;\n\nconst BranchConsole = () => {\n  const {\n    0: active,\n    1: setActive\n  } = useState(false);\n  const {\n    0: branchName,\n    1: setBranchName\n  } = useState('');\n  const {\n    0: username,\n    1: setUsername\n  } = useState('');\n  const {\n    0: email,\n    1: setEmail\n  } = useState('');\n  const {\n    0: password,\n    1: setPassword\n  } = useState('');\n  const {\n    0: code,\n    1: setCode\n  } = useState('');\n  const {\n    0: formType,\n    1: setFormType\n  } = useState('signUp');\n  const {\n    0: userSub,\n    1: setUserSub\n  } = useState(null);\n  const {\n    0: branches,\n    1: setBranches\n  } = useState('');\n  const onChangeBranchName = useCallback(newValue => {\n    setBranchName(newValue);\n  }, []);\n  const onChangeUsername = useCallback(newValue => {\n    setUsername(newValue);\n  }, []);\n  const onChangePassword = useCallback(newValue => {\n    setPassword(newValue);\n  }, []);\n  const onChangeEmail = useCallback(newValue => {\n    setEmail(newValue);\n  }, []);\n  const onChangeCode = useCallback(newValue => {\n    setCode(newValue);\n  }, []);\n\n  const handleChange = () => {\n    setActive(!active);\n  };\n\n  const signUp = async e => {\n    e.preventDefault();\n\n    try {\n      const user = await Auth.signUp({\n        username,\n        password,\n        attributes: {\n          email\n        }\n      });\n      setUserSub(user.userSub);\n      console.log('User from Modal', user);\n      setFormType('confirm');\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const confirm = async e => {\n    e.preventDefault();\n\n    try {\n      const confirmedUser = await Auth.confirmSignUp(username, code);\n      console.log('Confirmed user', confirmedUser);\n      const branch = await API.graphql(graphqlOperation(createBranch, {\n        input: {\n          adminId: userSub,\n          branchName: branchName,\n          id: uuidv4()\n        }\n      }));\n      console.log('New created branch', branch);\n      setFormType('signUp');\n      handleChange();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const fetchBranches = async () => {\n    try {\n      const getBranches = await API.graphql(graphqlOperation(listBranchs));\n      setBranches(getBranches.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    fetchBranches();\n  }, []);\n  console.log('Branch name', branchName);\n  console.log('Username', username);\n  console.log('Password', password);\n  console.log('Email', email);\n  console.log('Code', code);\n  console.log('Fetched branches', branches);\n  return __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: handleChange,\n    primary: true\n  }, \"Create branch\"), __jsx(Table, {\n    selectable: true,\n    celled: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Branch Name\"), __jsx(Table.HeaderCell, null, \"Created At\"), __jsx(Table.HeaderCell, null, \"Actions\"))), __jsx(Table.Body, null, branches && branches.listBranchs.items.map(item => __jsx(Table.Row, {\n    key: item.id\n  }, __jsx(Table.Cell, null, __jsx(Badge, {\n    size: \"large\"\n  }, item.branchName)), __jsx(Table.Cell, null, formatDate(item.createdAt)), __jsx(Table.Cell, {\n    className: \"actions-cell\"\n  }, __jsx(Popup, {\n    content: \"Approve payment\",\n    trigger: __jsx(Icon, {\n      className: \"accept\",\n      name: \"check\"\n    })\n  }), __jsx(Popup, {\n    content: \"Decline payment\",\n    trigger: __jsx(Icon, {\n      className: \"decline\",\n      name: \"remove\"\n    })\n  })))))), __jsx(Modal, {\n    open: active,\n    onClose: handleChange,\n    title: \"Fill in Branch info\" //  primaryAction={{\n    //      content: 'Proceed',\n    //     //  onAction: () => {\n    //     //  }\n    //  }}\n\n  }, __jsx(Modal.Section, null, formType === 'signUp' && __jsx(Form, null, __jsx(FormLayout, null, __jsx(TextField, {\n    value: branchName,\n    onChange: onChangeBranchName,\n    label: \"Branch Name\"\n  }), __jsx(TextField, {\n    value: username,\n    onChange: onChangeUsername,\n    label: \"Branch admin username\"\n  }), __jsx(TextField, {\n    value: email,\n    onChange: onChangeEmail,\n    label: \"Branch admin email\"\n  }), __jsx(TextField, {\n    type: \"password\",\n    value: password,\n    onChange: onChangePassword,\n    label: \"Branch admin password\"\n  }), __jsx(Button, {\n    onClick: signUp,\n    primary: true,\n    submit: true\n  }, \"Create Branch\"))), formType === 'confirm' && __jsx(Form, null, __jsx(FormLayout, null, __jsx(TextField, {\n    value: username,\n    onChange: onChangeUsername,\n    label: \"Branch admin username\"\n  }), __jsx(TextField, {\n    value: code,\n    onChange: onChangeCode,\n    label: \"Confirmation code\"\n  }), __jsx(Button, {\n    onClick: confirm,\n    primary: true,\n    submit: true\n  }, \"Confirm\"))))));\n};\n\nexport default BranchConsole;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/components/BranchConsole.js"],"names":["React","useState","useEffect","useRef","useCallback","Auth","API","graphqlOperation","gql","v4","uuidv4","Page","Button","Icon","Modal","Form","FormLayout","TextField","Badge","Table","Popup","Header","ProductList","formatDate","config","configure","createBranch","listBranchs","BranchConsole","active","setActive","branchName","setBranchName","username","setUsername","email","setEmail","password","setPassword","code","setCode","formType","setFormType","userSub","setUserSub","branches","setBranches","onChangeBranchName","newValue","onChangeUsername","onChangePassword","onChangeEmail","onChangeCode","handleChange","signUp","e","preventDefault","user","attributes","console","log","error","confirm","confirmedUser","confirmSignUp","branch","graphql","input","adminId","id","fetchBranches","getBranches","data","items","map","item","createdAt"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,EAA6CC,WAA7C,QAAgE,OAAhE;AACA,SAASC,IAAT,EAAeC,GAAf,EAAoBC,gBAApB,QAA4C,aAA5C;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,IAAvB,EAA6BC,KAA7B,EAAoCC,IAApC,EAA0CC,UAA1C,EAAsDC,SAAtD,EAAiEC,KAAjE,QAA8E,kBAA9E;AACA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,MAAvB,QAAqC,mBAArC;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AAEAlB,GAAG,CAACmB,SAAJ,CAAcD,MAAd;AAEA,MAAME,YAAY,GAAGlB,GAAI;;;;;;;;CAAzB;AAUA,MAAMmB,WAAW,GAAGnB,GAAI;;;;;;;;;;;CAAxB;;AAaA,MAAMoB,aAAa,GAAG,MAAM;AACxB,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsB7B,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM;AAAA,OAAC8B,UAAD;AAAA,OAAaC;AAAb,MAA8B/B,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM;AAAA,OAACgC,QAAD;AAAA,OAAWC;AAAX,MAA0BjC,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM;AAAA,OAACkC,KAAD;AAAA,OAAQC;AAAR,MAAoBnC,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAA,OAACoC,QAAD;AAAA,OAAWC;AAAX,MAA0BrC,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM;AAAA,OAACsC,IAAD;AAAA,OAAOC;AAAP,MAAkBvC,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM;AAAA,OAACwC,QAAD;AAAA,OAAWC;AAAX,MAA0BzC,QAAQ,CAAC,QAAD,CAAxC;AACA,QAAM;AAAA,OAAC0C,OAAD;AAAA,OAAUC;AAAV,MAAwB3C,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM;AAAA,OAAC4C,QAAD;AAAA,OAAWC;AAAX,MAA0B7C,QAAQ,CAAC,EAAD,CAAxC;AAEA,QAAM8C,kBAAkB,GAAG3C,WAAW,CAAE4C,QAAD,IAAc;AACjDhB,IAAAA,aAAa,CAACgB,QAAD,CAAb;AACH,GAFqC,EAEnC,EAFmC,CAAtC;AAIA,QAAMC,gBAAgB,GAAG7C,WAAW,CAAE4C,QAAD,IAAc;AAC/Cd,IAAAA,WAAW,CAACc,QAAD,CAAX;AACH,GAFmC,EAEjC,EAFiC,CAApC;AAIA,QAAME,gBAAgB,GAAG9C,WAAW,CAAE4C,QAAD,IAAc;AAC/CV,IAAAA,WAAW,CAACU,QAAD,CAAX;AACH,GAFmC,EAEjC,EAFiC,CAApC;AAIA,QAAMG,aAAa,GAAG/C,WAAW,CAAE4C,QAAD,IAAc;AAC5CZ,IAAAA,QAAQ,CAACY,QAAD,CAAR;AACH,GAFgC,EAE9B,EAF8B,CAAjC;AAIA,QAAMI,YAAY,GAAGhD,WAAW,CAAE4C,QAAD,IAAc;AAC3CR,IAAAA,OAAO,CAACQ,QAAD,CAAP;AACH,GAF+B,EAE7B,EAF6B,CAAhC;;AAIA,QAAMK,YAAY,GAAG,MAAM;AACvBvB,IAAAA,SAAS,CAAC,CAACD,MAAF,CAAT;AACH,GAFD;;AAIA,QAAMyB,MAAM,GAAG,MAAOC,CAAP,IAAa;AACxBA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAI;AACA,YAAMC,IAAI,GAAG,MAAMpD,IAAI,CAACiD,MAAL,CAAY;AAAErB,QAAAA,QAAF;AAAYI,QAAAA,QAAZ;AAAsBqB,QAAAA,UAAU,EAAE;AAAEvB,UAAAA;AAAF;AAAlC,OAAZ,CAAnB;AACAS,MAAAA,UAAU,CAACa,IAAI,CAACd,OAAN,CAAV;AACAgB,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BH,IAA/B;AACAf,MAAAA,WAAW,CAAC,SAAD,CAAX;AACH,KALD,CAKE,OAAOmB,KAAP,EAAc;AACZF,MAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACH;AACJ,GAVD;;AAYA,QAAMC,OAAO,GAAG,MAAOP,CAAP,IAAa;AACzBA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAI;AACA,YAAMO,aAAa,GAAG,MAAM1D,IAAI,CAAC2D,aAAL,CAAmB/B,QAAnB,EAA6BM,IAA7B,CAA5B;AACAoB,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BG,aAA9B;AACA,YAAME,MAAM,GAAG,MAAM3D,GAAG,CAAC4D,OAAJ,CACjB3D,gBAAgB,CAACmB,YAAD,EAAe;AAC3ByC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,OAAO,EAAEzB,OAAX;AAAoBZ,UAAAA,UAAU,EAAEA,UAAhC;AAA4CsC,UAAAA,EAAE,EAAE3D,MAAM;AAAtD;AADoB,OAAf,CADC,CAArB;AAKAiD,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCK,MAAlC;AACAvB,MAAAA,WAAW,CAAC,QAAD,CAAX;AACAW,MAAAA,YAAY;AACf,KAXD,CAWE,OAAOQ,KAAP,EAAc;AACZF,MAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACH;AACJ,GAhBD;;AAkBA,QAAMS,aAAa,GAAG,YAAY;AAC9B,QAAI;AACA,YAAMC,WAAW,GAAG,MAAMjE,GAAG,CAAC4D,OAAJ,CAAY3D,gBAAgB,CAACoB,WAAD,CAA5B,CAA1B;AACAmB,MAAAA,WAAW,CAACyB,WAAW,CAACC,IAAb,CAAX;AACH,KAHD,CAGE,OAAOX,KAAP,EAAc;AACZF,MAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACH;AACJ,GAPD;;AASA3D,EAAAA,SAAS,CAAC,MAAM;AACZoE,IAAAA,aAAa;AAChB,GAFQ,EAEN,EAFM,CAAT;AAIAX,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B7B,UAA3B;AACA4B,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwB3B,QAAxB;AACA0B,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBvB,QAAxB;AACAsB,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBzB,KAArB;AACAwB,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBrB,IAApB;AACAoB,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCf,QAAhC;AAEA,SACI,4BACI,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAEQ,YAAjB;AAA+B,IAAA,OAAO;AAAtC,qBADJ,EAII,MAAC,KAAD;AAAO,IAAA,UAAU,MAAjB;AAAkB,IAAA,MAAM;AAAxB,KACI,MAAC,KAAD,CAAO,MAAP,QACI,MAAC,KAAD,CAAO,GAAP,QACI,MAAC,KAAD,CAAO,UAAP,sBADJ,EAEI,MAAC,KAAD,CAAO,UAAP,qBAFJ,EAGI,MAAC,KAAD,CAAO,UAAP,kBAHJ,CADJ,CADJ,EAQI,MAAC,KAAD,CAAO,IAAP,QACKR,QAAQ,IACLA,QAAQ,CAAClB,WAAT,CAAqB8C,KAArB,CAA2BC,GAA3B,CAAgCC,IAAD,IAC3B,MAAC,KAAD,CAAO,GAAP;AAAW,IAAA,GAAG,EAAEA,IAAI,CAACN;AAArB,KACI,MAAC,KAAD,CAAO,IAAP,QACI,MAAC,KAAD;AAAO,IAAA,IAAI,EAAC;AAAZ,KAAqBM,IAAI,CAAC5C,UAA1B,CADJ,CADJ,EAII,MAAC,KAAD,CAAO,IAAP,QAAaR,UAAU,CAACoD,IAAI,CAACC,SAAN,CAAvB,CAJJ,EAKI,MAAC,KAAD,CAAO,IAAP;AAAY,IAAA,SAAS,EAAC;AAAtB,KACI,MAAC,KAAD;AACI,IAAA,OAAO,EAAC,iBADZ;AAEI,IAAA,OAAO,EAAE,MAAC,IAAD;AAAM,MAAA,SAAS,EAAC,QAAhB;AAAyB,MAAA,IAAI,EAAC;AAA9B;AAFb,IADJ,EAKI,MAAC,KAAD;AACI,IAAA,OAAO,EAAC,iBADZ;AAEI,IAAA,OAAO,EAAE,MAAC,IAAD;AAAM,MAAA,SAAS,EAAC,SAAhB;AAA0B,MAAA,IAAI,EAAC;AAA/B;AAFb,IALJ,CALJ,CADJ,CAFR,CARJ,CAJJ,EAkCI,MAAC,KAAD;AACI,IAAA,IAAI,EAAE/C,MADV;AAEI,IAAA,OAAO,EAAEwB,YAFb;AAGI,IAAA,KAAK,EAAC,qBAHV,CAII;AACA;AACA;AAEA;AACA;;AATJ,KAWI,MAAC,KAAD,CAAO,OAAP,QACKZ,QAAQ,KAAK,QAAb,IACG,MAAC,IAAD,QACI,MAAC,UAAD,QACI,MAAC,SAAD;AACI,IAAA,KAAK,EAAEV,UADX;AAEI,IAAA,QAAQ,EAAEgB,kBAFd;AAGI,IAAA,KAAK,EAAC;AAHV,IADJ,EAMI,MAAC,SAAD;AACI,IAAA,KAAK,EAAEd,QADX;AAEI,IAAA,QAAQ,EAAEgB,gBAFd;AAGI,IAAA,KAAK,EAAC;AAHV,IANJ,EAWI,MAAC,SAAD;AACI,IAAA,KAAK,EAAEd,KADX;AAEI,IAAA,QAAQ,EAAEgB,aAFd;AAGI,IAAA,KAAK,EAAC;AAHV,IAXJ,EAgBI,MAAC,SAAD;AACI,IAAA,IAAI,EAAC,UADT;AAEI,IAAA,KAAK,EAAEd,QAFX;AAGI,IAAA,QAAQ,EAAEa,gBAHd;AAII,IAAA,KAAK,EAAC;AAJV,IAhBJ,EAsBI,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAEI,MAAjB;AAAyB,IAAA,OAAO,MAAhC;AAAiC,IAAA,MAAM;AAAvC,qBAtBJ,CADJ,CAFR,EA+BKb,QAAQ,KAAK,SAAb,IACG,MAAC,IAAD,QACI,MAAC,UAAD,QACI,MAAC,SAAD;AACI,IAAA,KAAK,EAAER,QADX;AAEI,IAAA,QAAQ,EAAEgB,gBAFd;AAGI,IAAA,KAAK,EAAC;AAHV,IADJ,EAMI,MAAC,SAAD;AACI,IAAA,KAAK,EAAEV,IADX;AAEI,IAAA,QAAQ,EAAEa,YAFd;AAGI,IAAA,KAAK,EAAC;AAHV,IANJ,EAWI,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAEU,OAAjB;AAA0B,IAAA,OAAO,MAAjC;AAAkC,IAAA,MAAM;AAAxC,eAXJ,CADJ,CAhCR,CAXJ,CAlCJ,CADJ;AAoGH,CAzLD;;AA2LA,eAAelC,aAAf","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react'\r\nimport { Auth, API, graphqlOperation } from 'aws-amplify'\r\nimport gql from 'graphql-tag'\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport { Page, Button, Icon, Modal, Form, FormLayout, TextField, Badge } from '@shopify/polaris'\r\nimport { Table, Popup, Header } from 'semantic-ui-react'\r\nimport ProductList from './ProductsList'\r\nimport { formatDate } from '../utils/helper'\r\nimport config from '../aws-exports'\r\n\r\nAPI.configure(config)\r\n\r\nconst createBranch = gql`\r\n    mutation createBranch($input: CreateBranchInput!) {\r\n        createBranch(input: $input) {\r\n            id\r\n            adminId\r\n            branchName\r\n        }\r\n    }\r\n`\r\n\r\nconst listBranchs = gql`\r\n    query listBranchs {\r\n        listBranchs {\r\n            items {\r\n                adminId\r\n                branchName\r\n                createdAt\r\n                id\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst BranchConsole = () => {\r\n    const [active, setActive] = useState(false)\r\n    const [branchName, setBranchName] = useState('')\r\n    const [username, setUsername] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [code, setCode] = useState('')\r\n    const [formType, setFormType] = useState('signUp')\r\n    const [userSub, setUserSub] = useState(null)\r\n    const [branches, setBranches] = useState('')\r\n\r\n    const onChangeBranchName = useCallback((newValue) => {\r\n        setBranchName(newValue)\r\n    }, [])\r\n\r\n    const onChangeUsername = useCallback((newValue) => {\r\n        setUsername(newValue)\r\n    }, [])\r\n\r\n    const onChangePassword = useCallback((newValue) => {\r\n        setPassword(newValue)\r\n    }, [])\r\n\r\n    const onChangeEmail = useCallback((newValue) => {\r\n        setEmail(newValue)\r\n    }, [])\r\n\r\n    const onChangeCode = useCallback((newValue) => {\r\n        setCode(newValue)\r\n    }, [])\r\n\r\n    const handleChange = () => {\r\n        setActive(!active)\r\n    }\r\n\r\n    const signUp = async (e) => {\r\n        e.preventDefault()\r\n        try {\r\n            const user = await Auth.signUp({ username, password, attributes: { email } })\r\n            setUserSub(user.userSub)\r\n            console.log('User from Modal', user)\r\n            setFormType('confirm')\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    const confirm = async (e) => {\r\n        e.preventDefault()\r\n        try {\r\n            const confirmedUser = await Auth.confirmSignUp(username, code)\r\n            console.log('Confirmed user', confirmedUser)\r\n            const branch = await API.graphql(\r\n                graphqlOperation(createBranch, {\r\n                    input: { adminId: userSub, branchName: branchName, id: uuidv4() }\r\n                })\r\n            )\r\n            console.log('New created branch', branch)\r\n            setFormType('signUp')\r\n            handleChange()\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    const fetchBranches = async () => {\r\n        try {\r\n            const getBranches = await API.graphql(graphqlOperation(listBranchs))\r\n            setBranches(getBranches.data)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchBranches()\r\n    }, [])\r\n\r\n    console.log('Branch name', branchName)\r\n    console.log('Username', username)\r\n    console.log('Password', password)\r\n    console.log('Email', email)\r\n    console.log('Code', code)\r\n    console.log('Fetched branches', branches)\r\n\r\n    return (\r\n        <>\r\n            <Button onClick={handleChange} primary>\r\n                Create branch\r\n            </Button>\r\n            <Table selectable celled>\r\n                <Table.Header>\r\n                    <Table.Row>\r\n                        <Table.HeaderCell>Branch Name</Table.HeaderCell>\r\n                        <Table.HeaderCell>Created At</Table.HeaderCell>\r\n                        <Table.HeaderCell>Actions</Table.HeaderCell>\r\n                    </Table.Row>\r\n                </Table.Header>\r\n                <Table.Body>\r\n                    {branches &&\r\n                        branches.listBranchs.items.map((item) => (\r\n                            <Table.Row key={item.id}>\r\n                                <Table.Cell>\r\n                                    <Badge size=\"large\">{item.branchName}</Badge>\r\n                                </Table.Cell>\r\n                                <Table.Cell>{formatDate(item.createdAt)}</Table.Cell>\r\n                                <Table.Cell className=\"actions-cell\">\r\n                                    <Popup\r\n                                        content=\"Approve payment\"\r\n                                        trigger={<Icon className=\"accept\" name=\"check\" />}\r\n                                    />\r\n                                    <Popup\r\n                                        content=\"Decline payment\"\r\n                                        trigger={<Icon className=\"decline\" name=\"remove\" />}\r\n                                    />\r\n                                </Table.Cell>\r\n                            </Table.Row>\r\n                        ))}\r\n                </Table.Body>\r\n            </Table>\r\n            <Modal\r\n                open={active}\r\n                onClose={handleChange}\r\n                title=\"Fill in Branch info\"\r\n                //  primaryAction={{\r\n                //      content: 'Proceed',\r\n                //     //  onAction: () => {\r\n\r\n                //     //  }\r\n                //  }}\r\n            >\r\n                <Modal.Section>\r\n                    {formType === 'signUp' && (\r\n                        <Form>\r\n                            <FormLayout>\r\n                                <TextField\r\n                                    value={branchName}\r\n                                    onChange={onChangeBranchName}\r\n                                    label=\"Branch Name\"\r\n                                />\r\n                                <TextField\r\n                                    value={username}\r\n                                    onChange={onChangeUsername}\r\n                                    label=\"Branch admin username\"\r\n                                />\r\n                                <TextField\r\n                                    value={email}\r\n                                    onChange={onChangeEmail}\r\n                                    label=\"Branch admin email\"\r\n                                />\r\n                                <TextField\r\n                                    type=\"password\"\r\n                                    value={password}\r\n                                    onChange={onChangePassword}\r\n                                    label=\"Branch admin password\"\r\n                                />\r\n                                <Button onClick={signUp} primary submit>\r\n                                    Create Branch\r\n                                </Button>\r\n                            </FormLayout>\r\n                        </Form>\r\n                    )}\r\n                    {formType === 'confirm' && (\r\n                        <Form>\r\n                            <FormLayout>\r\n                                <TextField\r\n                                    value={username}\r\n                                    onChange={onChangeUsername}\r\n                                    label=\"Branch admin username\"\r\n                                />\r\n                                <TextField\r\n                                    value={code}\r\n                                    onChange={onChangeCode}\r\n                                    label=\"Confirmation code\"\r\n                                />\r\n                                <Button onClick={confirm} primary submit>\r\n                                    Confirm\r\n                                </Button>\r\n                            </FormLayout>\r\n                        </Form>\r\n                    )}\r\n                </Modal.Section>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BranchConsole\r\n"]},"metadata":{},"sourceType":"module"}