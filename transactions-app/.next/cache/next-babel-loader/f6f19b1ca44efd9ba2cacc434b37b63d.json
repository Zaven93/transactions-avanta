{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query getBranch($id: ID) {\\n        getBranch(id: $id) {\\n            branchName\\n            adminId\\n            id\\n            branchProducts {\\n                items {\\n                    branchId\\n                    createdAt\\n                    id\\n                    productId\\n                    tags\\n                    updatedAt\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { ClientApplication } from '@shopify/app-bridge';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport gql from 'graphql-tag';\nimport config from '../../aws-exports';\nAPI.configure(config);\nvar getBranchById = gql(_templateObject());\n\nvar Branch = function Branch(props) {\n  _s();\n\n  var router = useRouter();\n\n  var _useState = useState(router.asPath.split('/')[2].split('?')[0]),\n      branchId = _useState[0],\n      setBranchId = _useState[1];\n\n  console.log('Router from branch', router.asPath.split('/')[2].split('?')[0]);\n  console.log('Type of branch Id', typeof router.asPath.split('/')[2].split('?')[0]);\n  console.log('Props', props); // const fetchBranch = async () => {\n  //     console.log('Branch id', branchId)\n  //     try {\n  //         const branch = await API.graphql(graphqlOperation(getBranchById, { id: branchId }))\n  //         console.log('Fetched branch', branch)\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // }\n  // useEffect(() => {\n  //     if (typeof branchId == '[branchId]') {\n  //         return\n  //     }\n  //     fetchBranch()\n  // }, [branchId])\n\n  return __jsx(\"div\", null, \"Branch\");\n};\n\n_s(Branch, \"ibhZtdX4QFfjs+9N6bAHT6AsQrk=\", false, function () {\n  return [useRouter];\n});\n\n_c = Branch;\nexport default Branch;\n\nvar _c;\n\n$RefreshReg$(_c, \"Branch\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/pages/branch/[branchId].js"],"names":["React","useState","useEffect","useRouter","ClientApplication","API","graphqlOperation","gql","config","configure","getBranchById","Branch","props","router","asPath","split","branchId","setBranchId","console","log"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,SAASC,GAAT,EAAcC,gBAAd,QAAsC,aAAtC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEAH,GAAG,CAACI,SAAJ,CAAcD,MAAd;AAEA,IAAME,aAAa,GAAGH,GAAH,mBAAnB;;AAoBA,IAAMI,MAAM,GAAG,SAATA,MAAS,CAACC,KAAD,EAAW;AAAA;;AACtB,MAAMC,MAAM,GAAGV,SAAS,EAAxB;;AADsB,kBAEUF,QAAQ,CAACY,MAAM,CAACC,MAAP,CAAcC,KAAd,CAAoB,GAApB,EAAyB,CAAzB,EAA4BA,KAA5B,CAAkC,GAAlC,EAAuC,CAAvC,CAAD,CAFlB;AAAA,MAEfC,QAFe;AAAA,MAELC,WAFK;;AAGtBC,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCN,MAAM,CAACC,MAAP,CAAcC,KAAd,CAAoB,GAApB,EAAyB,CAAzB,EAA4BA,KAA5B,CAAkC,GAAlC,EAAuC,CAAvC,CAAlC;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiC,OAAON,MAAM,CAACC,MAAP,CAAcC,KAAd,CAAoB,GAApB,EAAyB,CAAzB,EAA4BA,KAA5B,CAAkC,GAAlC,EAAuC,CAAvC,CAAxC;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBP,KAArB,EALsB,CAOtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAO,4BAAP;AACH,CAvBD;;GAAMD,M;UACaR,S;;;KADbQ,M;AAyBN,eAAeA,MAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { ClientApplication } from '@shopify/app-bridge'\r\nimport { API, graphqlOperation } from 'aws-amplify'\r\nimport gql from 'graphql-tag'\r\nimport config from '../../aws-exports'\r\n\r\nAPI.configure(config)\r\n\r\nconst getBranchById = gql`\r\n    query getBranch($id: ID) {\r\n        getBranch(id: $id) {\r\n            branchName\r\n            adminId\r\n            id\r\n            branchProducts {\r\n                items {\r\n                    branchId\r\n                    createdAt\r\n                    id\r\n                    productId\r\n                    tags\r\n                    updatedAt\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst Branch = (props) => {\r\n    const router = useRouter()\r\n    const [branchId, setBranchId] = useState(router.asPath.split('/')[2].split('?')[0])\r\n    console.log('Router from branch', router.asPath.split('/')[2].split('?')[0])\r\n    console.log('Type of branch Id', typeof router.asPath.split('/')[2].split('?')[0])\r\n    console.log('Props', props)\r\n\r\n    // const fetchBranch = async () => {\r\n    //     console.log('Branch id', branchId)\r\n    //     try {\r\n    //         const branch = await API.graphql(graphqlOperation(getBranchById, { id: branchId }))\r\n    //         console.log('Fetched branch', branch)\r\n    //     } catch (error) {\r\n    //         console.log(error)\r\n    //     }\r\n    // }\r\n    // useEffect(() => {\r\n    //     if (typeof branchId == '[branchId]') {\r\n    //         return\r\n    //     }\r\n    //     fetchBranch()\r\n    // }, [branchId])\r\n    return <div>Branch</div>\r\n}\r\n\r\nexport default Branch\r\n"]},"metadata":{},"sourceType":"module"}