{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport axios from 'axios';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport createApp from '@shopify/app-bridge';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport gql from 'graphql-tag';\nimport { print } from 'graphql';\nimport { Card, DataTable, Button, Page, Pagination, TextField, ChoiceList, Filters, Icon, Stack } from '@shopify/polaris';\nimport { SearchMajorMonotone, TransactionMajorMonotone, BalanceMajorMonotone } from '@shopify/polaris-icons';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nAPI.configure(config);\nconst listTransactions = gql`\n    query listTransactions($limit: Int, $nextToken: String) {\n        listTransactions(limit: $limit, nextToken: $nextToken) {\n            nextToken\n            items {\n                id\n                totalPrice\n                totalBonusAmount\n                currency\n                products {\n                    id\n                    title\n                    bonusPercentage\n                    priceAmount\n                    priceCurrency\n                    image\n                }\n                customer {\n                    id\n                    firstName\n                    lastName\n                    phone\n                    email\n                }\n                createdAt\n            }\n        }\n    }\n`;\n\nconst Index = ({\n  transactions\n}) => {\n  const {\n    0: searchValue,\n    1: setSearchValue\n  } = useState(null);\n  const {\n    0: transactionItems,\n    1: setTransactionItems\n  } = useState(null);\n  const {\n    0: nextPaginateToken,\n    1: setNextPaginateToken\n  } = useState(null);\n  const {\n    0: previousPaginateTokens,\n    1: setPreviousPaginateTokens\n  } = useState([]);\n  const {\n    0: fetchCount,\n    1: setFetchCount\n  } = useState(0);\n  const handleSearchInput = useCallback(newValue => setSearchValue(newValue), []);\n  const {\n    0: amplifyTransactions,\n    1: setAmplifyTransactions\n  } = useState();\n  console.log('Transactions from amplify', transactions);\n  setAmplifyTransactions(transactions);\n  console.log('amplify from state', setAmplifyTransactions);\n  const fetchTransactions = useCallback(async () => {\n    try {\n      const data = await axios({\n        url: 'https://kytejmxrrrgahiikcodklhf6rq.appsync-api.us-east-1.amazonaws.com/graphql',\n        method: 'post',\n        headers: {\n          'x-api-key': 'da2-iwznaxe3h5bxznagzuctrhqekm'\n        },\n        data: {\n          query: print(listTransactions),\n          variables: {\n            limit: 5\n          }\n        }\n      });\n      setTransactionItems(data.data.data.listTransactions.items);\n      setNextPaginateToken(data.data.data.listTransactions.nextToken);\n    } catch (error) {\n      console.log(error);\n    }\n  }, []);\n  useEffect(() => {\n    fetchTransactions();\n  }, [fetchTransactions]);\n  const app = createApp({\n    apiKey: '3b01063bac3031d13101100ef3e44fd5',\n    shopOrigin: 'transactions-avanta.myshopify.com'\n  });\n  const redirect = Redirect.create(app); // const formatDate = (rowDate) => {\n  //     const date = new Date(rowDate)\n  //     const year = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(date)\n  //     const month = new Intl.DateTimeFormat('en', { month: 'short' }).format(date)\n  //     const day = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(date)\n  //     return `${day}-${month}-${year}`\n  // }\n\n  const paginateNext = async () => {\n    setPreviousPaginateTokens([...previousPaginateTokens, nextPaginateToken]);\n\n    try {\n      const data = await axios({\n        url: 'https://kytejmxrrrgahiikcodklhf6rq.appsync-api.us-east-1.amazonaws.com/graphql',\n        method: 'post',\n        headers: {\n          'x-api-key': 'da2-iwznaxe3h5bxznagzuctrhqekm'\n        },\n        data: {\n          query: print(listTransactions),\n          variables: {\n            limit: 5,\n            nextToken: nextPaginateToken\n          }\n        }\n      });\n      setTransactionItems(data.data.data.listTransactions.items);\n      setNextPaginateToken(data.data.data.listTransactions.nextToken);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const paginatePrevious = async () => {\n    const previousToken = previousPaginateTokens[previousPaginateTokens.length === 1 ? 0 : previousPaginateTokens.length - 2];\n    console.log('previous token Zvoshka', previousToken);\n    setPreviousPaginateTokens([...previousPaginateTokens.slice(0, previousPaginateTokens.length - 1)]);\n\n    try {\n      if (previousPaginateTokens.length === 1) {\n        const data = await axios({\n          url: 'https://kytejmxrrrgahiikcodklhf6rq.appsync-api.us-east-1.amazonaws.com/graphql',\n          method: 'post',\n          headers: {\n            'x-api-key': 'da2-iwznaxe3h5bxznagzuctrhqekm'\n          },\n          data: {\n            query: print(listTransactions),\n            variables: {\n              limit: 5\n            }\n          }\n        });\n        setTransactionItems(data.data.data.listTransactions.items);\n        setNextPaginateToken(data.data.data.listTransactions.nextToken);\n      } else {\n        const data = await axios({\n          url: 'https://kytejmxrrrgahiikcodklhf6rq.appsync-api.us-east-1.amazonaws.com/graphql',\n          method: 'post',\n          headers: {\n            'x-api-key': 'da2-iwznaxe3h5bxznagzuctrhqekm'\n          },\n          data: {\n            query: print(listTransactions),\n            variables: {\n              limit: 5,\n              nextToken: previousToken\n            }\n          }\n        });\n        setTransactionItems(data.data.data.listTransactions.items);\n        setNextPaginateToken(data.data.data.listTransactions.nextToken);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return __jsx(Page, {\n    title: \"Transactions\"\n  }, __jsx(TextField, {\n    label: \"Search Product\",\n    value: searchValue,\n    onChange: handleSearchInput,\n    prefix: __jsx(Icon, {\n      source: SearchMajorMonotone\n    }),\n    placeholder: \"Search by Customer phone number\"\n  }), __jsx(Stack, null, __jsx(Stack.Item, {\n    fill: true\n  }, __jsx(Button, {\n    id: \"Accept-Payment\",\n    onClick: () => redirect.dispatch(Redirect.Action.ADMIN_PATH, '/apps/3b01063bac3031d13101100ef3e44fd5/accept-payment')\n  }, __jsx(Icon, {\n    source: BalanceMajorMonotone\n  }), \" Accept Payment\")), __jsx(Stack.Item, null, __jsx(Button, {\n    id: \"Create-Transaction\",\n    primary: true,\n    onClick: () => redirect.dispatch(Redirect.Action.REMOTE, {\n      url: 'https://dev.d3ivgpkzuz6hkr.amplifyapp.com',\n      newContext: true\n    })\n  }, __jsx(Icon, {\n    source: TransactionMajorMonotone\n  }), \" Create transaction\"))), transactionItems && __jsx(Card, null, __jsx(DataTable, {\n    columnContentTypes: ['text', 'text', 'text', 'text'],\n    headings: ['Customer phone number', 'TotalPrice', 'TotalBonusAmount', 'CreatedAt'],\n    rows: transactionItems && transactionItems.filter(transaction => {\n      if (searchValue == null) {\n        return transaction;\n      } else if (transaction.customer[0].phone.toLowerCase().includes(searchValue.toLowerCase())) {\n        return transaction;\n      }\n    }).map(transaction => [__jsx(Button, {\n      primary: true,\n      onClick: () => redirect.dispatch(Redirect.Action.ADMIN_PATH, {\n        path: `/customers/${transaction.customer[0].id}`,\n        newContext: true\n      })\n    }, transaction.customer[0].phone), toCurrency(Number(transaction.totalPrice)), toCurrency(Number(transaction.totalBonusAmount)), formatDate(transaction.createdAt)])\n  }), __jsx(Pagination, {\n    hasPrevious: previousPaginateTokens.length > 0,\n    onPrevious: paginatePrevious,\n    hasNext: nextPaginateToken,\n    onNext: paginateNext\n  })));\n};\n\nexport async function getStaticProps() {\n  let result;\n\n  try {\n    result = await API.graphql(graphqlOperation(listTransactions, {\n      limit: 5\n    }));\n  } catch (error) {\n    console.log(error);\n  }\n\n  if (result.errors) {\n    console.warn('Failed to fetch todolist. ', result.errors);\n    return {\n      props: {\n        transactions: []\n      }\n    };\n  }\n\n  if (result.data !== null) {\n    return {\n      props: {\n        transactions: result.data\n      }\n    };\n  }\n}\nexport default Index;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/pages/index.js"],"names":["React","useState","useCallback","useEffect","axios","API","graphqlOperation","createApp","Redirect","gql","print","Card","DataTable","Button","Page","Pagination","TextField","ChoiceList","Filters","Icon","Stack","SearchMajorMonotone","TransactionMajorMonotone","BalanceMajorMonotone","toCurrency","formatDate","config","configure","listTransactions","Index","transactions","searchValue","setSearchValue","transactionItems","setTransactionItems","nextPaginateToken","setNextPaginateToken","previousPaginateTokens","setPreviousPaginateTokens","fetchCount","setFetchCount","handleSearchInput","newValue","amplifyTransactions","setAmplifyTransactions","console","log","fetchTransactions","data","url","method","headers","query","variables","limit","items","nextToken","error","app","apiKey","shopOrigin","redirect","create","paginateNext","paginatePrevious","previousToken","length","slice","dispatch","Action","ADMIN_PATH","REMOTE","newContext","filter","transaction","customer","phone","toLowerCase","includes","map","path","id","Number","totalPrice","totalBonusAmount","createdAt","getStaticProps","result","graphql","errors","warn","props"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,EAAuCC,SAAvC,QAAwD,OAAxD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,gBAAd,QAAsC,aAAtC;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,SAASC,QAAT,QAAyB,6BAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA,SACIC,IADJ,EAEIC,SAFJ,EAGIC,MAHJ,EAIIC,IAJJ,EAKIC,UALJ,EAMIC,SANJ,EAOIC,UAPJ,EAQIC,OARJ,EASIC,IATJ,EAUIC,KAVJ,QAWO,kBAXP;AAYA,SACIC,mBADJ,EAEIC,wBAFJ,EAGIC,oBAHJ,QAIO,wBAJP;AAKA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,iBAAvC;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AAEArB,GAAG,CAACsB,SAAJ,CAAcD,MAAd;AAEA,MAAME,gBAAgB,GAAGnB,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAA7B;;AA8BA,MAAMoB,KAAK,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAsB;AAChC,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgC/B,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM;AAAA,OAACgC,gBAAD;AAAA,OAAmBC;AAAnB,MAA0CjC,QAAQ,CAAC,IAAD,CAAxD;AACA,QAAM;AAAA,OAACkC,iBAAD;AAAA,OAAoBC;AAApB,MAA4CnC,QAAQ,CAAC,IAAD,CAA1D;AACA,QAAM;AAAA,OAACoC,sBAAD;AAAA,OAAyBC;AAAzB,MAAsDrC,QAAQ,CAAC,EAAD,CAApE;AACA,QAAM;AAAA,OAACsC,UAAD;AAAA,OAAaC;AAAb,MAA8BvC,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAMwC,iBAAiB,GAAGvC,WAAW,CAAEwC,QAAD,IAAcV,cAAc,CAACU,QAAD,CAA7B,EAAyC,EAAzC,CAArC;AACA,QAAM;AAAA,OAACC,mBAAD;AAAA,OAAsBC;AAAtB,MAAgD3C,QAAQ,EAA9D;AAEA4C,EAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyChB,YAAzC;AAEAc,EAAAA,sBAAsB,CAACd,YAAD,CAAtB;AAEAe,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCF,sBAAlC;AAEA,QAAMG,iBAAiB,GAAG7C,WAAW,CAAC,YAAY;AAC9C,QAAI;AACA,YAAM8C,IAAI,GAAG,MAAM5C,KAAK,CAAC;AACrB6C,QAAAA,GAAG,EACC,gFAFiB;AAGrBC,QAAAA,MAAM,EAAE,MAHa;AAIrBC,QAAAA,OAAO,EAAE;AACL,uBAAa;AADR,SAJY;AAOrBH,QAAAA,IAAI,EAAE;AACFI,UAAAA,KAAK,EAAE1C,KAAK,CAACkB,gBAAD,CADV;AAEFyB,UAAAA,SAAS,EAAE;AACPC,YAAAA,KAAK,EAAE;AADA;AAFT;AAPe,OAAD,CAAxB;AAcApB,MAAAA,mBAAmB,CAACc,IAAI,CAACA,IAAL,CAAUA,IAAV,CAAepB,gBAAf,CAAgC2B,KAAjC,CAAnB;AACAnB,MAAAA,oBAAoB,CAACY,IAAI,CAACA,IAAL,CAAUA,IAAV,CAAepB,gBAAf,CAAgC4B,SAAjC,CAApB;AACH,KAjBD,CAiBE,OAAOC,KAAP,EAAc;AACZZ,MAAAA,OAAO,CAACC,GAAR,CAAYW,KAAZ;AACH;AACJ,GArBoC,EAqBlC,EArBkC,CAArC;AAuBAtD,EAAAA,SAAS,CAAC,MAAM;AACZ4C,IAAAA,iBAAiB;AACpB,GAFQ,EAEN,CAACA,iBAAD,CAFM,CAAT;AAIA,QAAMW,GAAG,GAAGnD,SAAS,CAAC;AAClBoD,IAAAA,MAAM,EAAE,kCADU;AAElBC,IAAAA,UAAU,EAAE;AAFM,GAAD,CAArB;AAKA,QAAMC,QAAQ,GAAGrD,QAAQ,CAACsD,MAAT,CAAgBJ,GAAhB,CAAjB,CA/CgC,CAiDhC;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA,QAAMK,YAAY,GAAG,YAAY;AAC7BzB,IAAAA,yBAAyB,CAAC,CAAC,GAAGD,sBAAJ,EAA4BF,iBAA5B,CAAD,CAAzB;;AACA,QAAI;AACA,YAAMa,IAAI,GAAG,MAAM5C,KAAK,CAAC;AACrB6C,QAAAA,GAAG,EACC,gFAFiB;AAGrBC,QAAAA,MAAM,EAAE,MAHa;AAIrBC,QAAAA,OAAO,EAAE;AACL,uBAAa;AADR,SAJY;AAOrBH,QAAAA,IAAI,EAAE;AACFI,UAAAA,KAAK,EAAE1C,KAAK,CAACkB,gBAAD,CADV;AAEFyB,UAAAA,SAAS,EAAE;AACPC,YAAAA,KAAK,EAAE,CADA;AAEPE,YAAAA,SAAS,EAAErB;AAFJ;AAFT;AAPe,OAAD,CAAxB;AAeAD,MAAAA,mBAAmB,CAACc,IAAI,CAACA,IAAL,CAAUA,IAAV,CAAepB,gBAAf,CAAgC2B,KAAjC,CAAnB;AACAnB,MAAAA,oBAAoB,CAACY,IAAI,CAACA,IAAL,CAAUA,IAAV,CAAepB,gBAAf,CAAgC4B,SAAjC,CAApB;AACH,KAlBD,CAkBE,OAAOC,KAAP,EAAc;AACZZ,MAAAA,OAAO,CAACC,GAAR,CAAYW,KAAZ;AACH;AACJ,GAvBD;;AAyBA,QAAMO,gBAAgB,GAAG,YAAY;AACjC,UAAMC,aAAa,GACf5B,sBAAsB,CAClBA,sBAAsB,CAAC6B,MAAvB,KAAkC,CAAlC,GAAsC,CAAtC,GAA0C7B,sBAAsB,CAAC6B,MAAvB,GAAgC,CADxD,CAD1B;AAKArB,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCmB,aAAtC;AAEA3B,IAAAA,yBAAyB,CAAC,CACtB,GAAGD,sBAAsB,CAAC8B,KAAvB,CAA6B,CAA7B,EAAgC9B,sBAAsB,CAAC6B,MAAvB,GAAgC,CAAhE,CADmB,CAAD,CAAzB;;AAGA,QAAI;AACA,UAAI7B,sBAAsB,CAAC6B,MAAvB,KAAkC,CAAtC,EAAyC;AACrC,cAAMlB,IAAI,GAAG,MAAM5C,KAAK,CAAC;AACrB6C,UAAAA,GAAG,EACC,gFAFiB;AAGrBC,UAAAA,MAAM,EAAE,MAHa;AAIrBC,UAAAA,OAAO,EAAE;AACL,yBAAa;AADR,WAJY;AAOrBH,UAAAA,IAAI,EAAE;AACFI,YAAAA,KAAK,EAAE1C,KAAK,CAACkB,gBAAD,CADV;AAEFyB,YAAAA,SAAS,EAAE;AACPC,cAAAA,KAAK,EAAE;AADA;AAFT;AAPe,SAAD,CAAxB;AAcApB,QAAAA,mBAAmB,CAACc,IAAI,CAACA,IAAL,CAAUA,IAAV,CAAepB,gBAAf,CAAgC2B,KAAjC,CAAnB;AACAnB,QAAAA,oBAAoB,CAACY,IAAI,CAACA,IAAL,CAAUA,IAAV,CAAepB,gBAAf,CAAgC4B,SAAjC,CAApB;AACH,OAjBD,MAiBO;AACH,cAAMR,IAAI,GAAG,MAAM5C,KAAK,CAAC;AACrB6C,UAAAA,GAAG,EACC,gFAFiB;AAGrBC,UAAAA,MAAM,EAAE,MAHa;AAIrBC,UAAAA,OAAO,EAAE;AACL,yBAAa;AADR,WAJY;AAOrBH,UAAAA,IAAI,EAAE;AACFI,YAAAA,KAAK,EAAE1C,KAAK,CAACkB,gBAAD,CADV;AAEFyB,YAAAA,SAAS,EAAE;AACPC,cAAAA,KAAK,EAAE,CADA;AAEPE,cAAAA,SAAS,EAAES;AAFJ;AAFT;AAPe,SAAD,CAAxB;AAeA/B,QAAAA,mBAAmB,CAACc,IAAI,CAACA,IAAL,CAAUA,IAAV,CAAepB,gBAAf,CAAgC2B,KAAjC,CAAnB;AACAnB,QAAAA,oBAAoB,CAACY,IAAI,CAACA,IAAL,CAAUA,IAAV,CAAepB,gBAAf,CAAgC4B,SAAjC,CAApB;AACH;AACJ,KArCD,CAqCE,OAAOC,KAAP,EAAc;AACZZ,MAAAA,OAAO,CAACC,GAAR,CAAYW,KAAZ;AACH;AACJ,GAnDD;;AAqDA,SACI,MAAC,IAAD;AAAM,IAAA,KAAK,EAAC;AAAZ,KACI,MAAC,SAAD;AACI,IAAA,KAAK,EAAC,gBADV;AAEI,IAAA,KAAK,EAAE1B,WAFX;AAGI,IAAA,QAAQ,EAAEU,iBAHd;AAII,IAAA,MAAM,EAAE,MAAC,IAAD;AAAM,MAAA,MAAM,EAAEpB;AAAd,MAJZ;AAKI,IAAA,WAAW,EAAC;AALhB,IADJ,EAQI,MAAC,KAAD,QACI,MAAC,KAAD,CAAO,IAAP;AAAY,IAAA,IAAI;AAAhB,KACI,MAAC,MAAD;AACI,IAAA,EAAE,EAAC,gBADP;AAEI,IAAA,OAAO,EAAE,MACLwC,QAAQ,CAACO,QAAT,CACI5D,QAAQ,CAAC6D,MAAT,CAAgBC,UADpB,EAEI,uDAFJ;AAHR,KAQI,MAAC,IAAD;AAAM,IAAA,MAAM,EAAE/C;AAAd,IARJ,oBADJ,CADJ,EAaI,MAAC,KAAD,CAAO,IAAP,QACI,MAAC,MAAD;AACI,IAAA,EAAE,EAAC,oBADP;AAEI,IAAA,OAAO,MAFX;AAGI,IAAA,OAAO,EAAE,MACLsC,QAAQ,CAACO,QAAT,CAAkB5D,QAAQ,CAAC6D,MAAT,CAAgBE,MAAlC,EAA0C;AACtCtB,MAAAA,GAAG,EAAE,2CADiC;AAEtCuB,MAAAA,UAAU,EAAE;AAF0B,KAA1C;AAJR,KASI,MAAC,IAAD;AAAM,IAAA,MAAM,EAAElD;AAAd,IATJ,wBADJ,CAbJ,CARJ,EAmCKW,gBAAgB,IACb,MAAC,IAAD,QACI,MAAC,SAAD;AACI,IAAA,kBAAkB,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,EAAyB,MAAzB,CADxB;AAEI,IAAA,QAAQ,EAAE,CACN,uBADM,EAEN,YAFM,EAGN,kBAHM,EAIN,WAJM,CAFd;AAQI,IAAA,IAAI,EACAA,gBAAgB,IAChBA,gBAAgB,CACXwC,MADL,CACaC,WAAD,IAAiB;AACrB,UAAI3C,WAAW,IAAI,IAAnB,EAAyB;AACrB,eAAO2C,WAAP;AACH,OAFD,MAEO,IACHA,WAAW,CAACC,QAAZ,CAAqB,CAArB,EAAwBC,KAAxB,CACKC,WADL,GAEKC,QAFL,CAEc/C,WAAW,CAAC8C,WAAZ,EAFd,CADG,EAIL;AACE,eAAOH,WAAP;AACH;AACJ,KAXL,EAYKK,GAZL,CAYUL,WAAD,IAAiB,CAClB,MAAC,MAAD;AACI,MAAA,OAAO,MADX;AAEI,MAAA,OAAO,EAAE,MACLb,QAAQ,CAACO,QAAT,CAAkB5D,QAAQ,CAAC6D,MAAT,CAAgBC,UAAlC,EAA8C;AAC1CU,QAAAA,IAAI,EAAG,cAAaN,WAAW,CAACC,QAAZ,CAAqB,CAArB,EAAwBM,EAAG,EADL;AAE1CT,QAAAA,UAAU,EAAE;AAF8B,OAA9C;AAHR,OAQKE,WAAW,CAACC,QAAZ,CAAqB,CAArB,EAAwBC,KAR7B,CADkB,EAWlBpD,UAAU,CAAC0D,MAAM,CAACR,WAAW,CAACS,UAAb,CAAP,CAXQ,EAYlB3D,UAAU,CAAC0D,MAAM,CAACR,WAAW,CAACU,gBAAb,CAAP,CAZQ,EAalB3D,UAAU,CAACiD,WAAW,CAACW,SAAb,CAbQ,CAZ1B;AAVR,IADJ,EAwCI,MAAC,UAAD;AACI,IAAA,WAAW,EAAEhD,sBAAsB,CAAC6B,MAAvB,GAAgC,CADjD;AAEI,IAAA,UAAU,EAAEF,gBAFhB;AAGI,IAAA,OAAO,EAAE7B,iBAHb;AAII,IAAA,MAAM,EAAE4B;AAJZ,IAxCJ,CApCR,CADJ;AAuFH,CA/ND;;AAiOA,OAAO,eAAeuB,cAAf,GAAgC;AACnC,MAAIC,MAAJ;;AACA,MAAI;AACAA,IAAAA,MAAM,GAAG,MAAMlF,GAAG,CAACmF,OAAJ,CAAYlF,gBAAgB,CAACsB,gBAAD,EAAmB;AAAE0B,MAAAA,KAAK,EAAE;AAAT,KAAnB,CAA5B,CAAf;AACH,GAFD,CAEE,OAAOG,KAAP,EAAc;AACZZ,IAAAA,OAAO,CAACC,GAAR,CAAYW,KAAZ;AACH;;AAED,MAAI8B,MAAM,CAACE,MAAX,EAAmB;AACf5C,IAAAA,OAAO,CAAC6C,IAAR,CAAa,4BAAb,EAA2CH,MAAM,CAACE,MAAlD;AACA,WAAO;AAAEE,MAAAA,KAAK,EAAE;AAAE7D,QAAAA,YAAY,EAAE;AAAhB;AAAT,KAAP;AACH;;AACD,MAAIyD,MAAM,CAACvC,IAAP,KAAgB,IAApB,EAA0B;AACtB,WAAO;AAAE2C,MAAAA,KAAK,EAAE;AAAE7D,QAAAA,YAAY,EAAEyD,MAAM,CAACvC;AAAvB;AAAT,KAAP;AACH;AACJ;AAED,eAAenB,KAAf","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { API, graphqlOperation } from 'aws-amplify'\r\nimport createApp from '@shopify/app-bridge'\r\nimport { Redirect } from '@shopify/app-bridge/actions'\r\nimport gql from 'graphql-tag'\r\nimport { print } from 'graphql'\r\nimport {\r\n    Card,\r\n    DataTable,\r\n    Button,\r\n    Page,\r\n    Pagination,\r\n    TextField,\r\n    ChoiceList,\r\n    Filters,\r\n    Icon,\r\n    Stack\r\n} from '@shopify/polaris'\r\nimport {\r\n    SearchMajorMonotone,\r\n    TransactionMajorMonotone,\r\n    BalanceMajorMonotone\r\n} from '@shopify/polaris-icons'\r\nimport { toCurrency, formatDate } from '../utils/helper'\r\nimport config from '../aws-exports'\r\n\r\nAPI.configure(config)\r\n\r\nconst listTransactions = gql`\r\n    query listTransactions($limit: Int, $nextToken: String) {\r\n        listTransactions(limit: $limit, nextToken: $nextToken) {\r\n            nextToken\r\n            items {\r\n                id\r\n                totalPrice\r\n                totalBonusAmount\r\n                currency\r\n                products {\r\n                    id\r\n                    title\r\n                    bonusPercentage\r\n                    priceAmount\r\n                    priceCurrency\r\n                    image\r\n                }\r\n                customer {\r\n                    id\r\n                    firstName\r\n                    lastName\r\n                    phone\r\n                    email\r\n                }\r\n                createdAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst Index = ({ transactions }) => {\r\n    const [searchValue, setSearchValue] = useState(null)\r\n    const [transactionItems, setTransactionItems] = useState(null)\r\n    const [nextPaginateToken, setNextPaginateToken] = useState(null)\r\n    const [previousPaginateTokens, setPreviousPaginateTokens] = useState([])\r\n    const [fetchCount, setFetchCount] = useState(0)\r\n    const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\r\n    const [amplifyTransactions, setAmplifyTransactions] = useState()\r\n\r\n    console.log('Transactions from amplify', transactions)\r\n\r\n    setAmplifyTransactions(transactions)\r\n\r\n    console.log('amplify from state', setAmplifyTransactions)\r\n\r\n    const fetchTransactions = useCallback(async () => {\r\n        try {\r\n            const data = await axios({\r\n                url:\r\n                    'https://kytejmxrrrgahiikcodklhf6rq.appsync-api.us-east-1.amazonaws.com/graphql',\r\n                method: 'post',\r\n                headers: {\r\n                    'x-api-key': 'da2-iwznaxe3h5bxznagzuctrhqekm'\r\n                },\r\n                data: {\r\n                    query: print(listTransactions),\r\n                    variables: {\r\n                        limit: 5\r\n                    }\r\n                }\r\n            })\r\n            setTransactionItems(data.data.data.listTransactions.items)\r\n            setNextPaginateToken(data.data.data.listTransactions.nextToken)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        fetchTransactions()\r\n    }, [fetchTransactions])\r\n\r\n    const app = createApp({\r\n        apiKey: '3b01063bac3031d13101100ef3e44fd5',\r\n        shopOrigin: 'transactions-avanta.myshopify.com'\r\n    })\r\n\r\n    const redirect = Redirect.create(app)\r\n\r\n    // const formatDate = (rowDate) => {\r\n    //     const date = new Date(rowDate)\r\n    //     const year = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(date)\r\n    //     const month = new Intl.DateTimeFormat('en', { month: 'short' }).format(date)\r\n    //     const day = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(date)\r\n\r\n    //     return `${day}-${month}-${year}`\r\n    // }\r\n\r\n    const paginateNext = async () => {\r\n        setPreviousPaginateTokens([...previousPaginateTokens, nextPaginateToken])\r\n        try {\r\n            const data = await axios({\r\n                url:\r\n                    'https://kytejmxrrrgahiikcodklhf6rq.appsync-api.us-east-1.amazonaws.com/graphql',\r\n                method: 'post',\r\n                headers: {\r\n                    'x-api-key': 'da2-iwznaxe3h5bxznagzuctrhqekm'\r\n                },\r\n                data: {\r\n                    query: print(listTransactions),\r\n                    variables: {\r\n                        limit: 5,\r\n                        nextToken: nextPaginateToken\r\n                    }\r\n                }\r\n            })\r\n            setTransactionItems(data.data.data.listTransactions.items)\r\n            setNextPaginateToken(data.data.data.listTransactions.nextToken)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    const paginatePrevious = async () => {\r\n        const previousToken =\r\n            previousPaginateTokens[\r\n                previousPaginateTokens.length === 1 ? 0 : previousPaginateTokens.length - 2\r\n            ]\r\n\r\n        console.log('previous token Zvoshka', previousToken)\r\n\r\n        setPreviousPaginateTokens([\r\n            ...previousPaginateTokens.slice(0, previousPaginateTokens.length - 1)\r\n        ])\r\n        try {\r\n            if (previousPaginateTokens.length === 1) {\r\n                const data = await axios({\r\n                    url:\r\n                        'https://kytejmxrrrgahiikcodklhf6rq.appsync-api.us-east-1.amazonaws.com/graphql',\r\n                    method: 'post',\r\n                    headers: {\r\n                        'x-api-key': 'da2-iwznaxe3h5bxznagzuctrhqekm'\r\n                    },\r\n                    data: {\r\n                        query: print(listTransactions),\r\n                        variables: {\r\n                            limit: 5\r\n                        }\r\n                    }\r\n                })\r\n                setTransactionItems(data.data.data.listTransactions.items)\r\n                setNextPaginateToken(data.data.data.listTransactions.nextToken)\r\n            } else {\r\n                const data = await axios({\r\n                    url:\r\n                        'https://kytejmxrrrgahiikcodklhf6rq.appsync-api.us-east-1.amazonaws.com/graphql',\r\n                    method: 'post',\r\n                    headers: {\r\n                        'x-api-key': 'da2-iwznaxe3h5bxznagzuctrhqekm'\r\n                    },\r\n                    data: {\r\n                        query: print(listTransactions),\r\n                        variables: {\r\n                            limit: 5,\r\n                            nextToken: previousToken\r\n                        }\r\n                    }\r\n                })\r\n                setTransactionItems(data.data.data.listTransactions.items)\r\n                setNextPaginateToken(data.data.data.listTransactions.nextToken)\r\n            }\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Page title=\"Transactions\">\r\n            <TextField\r\n                label=\"Search Product\"\r\n                value={searchValue}\r\n                onChange={handleSearchInput}\r\n                prefix={<Icon source={SearchMajorMonotone} />}\r\n                placeholder=\"Search by Customer phone number\"\r\n            />\r\n            <Stack>\r\n                <Stack.Item fill>\r\n                    <Button\r\n                        id=\"Accept-Payment\"\r\n                        onClick={() =>\r\n                            redirect.dispatch(\r\n                                Redirect.Action.ADMIN_PATH,\r\n                                '/apps/3b01063bac3031d13101100ef3e44fd5/accept-payment'\r\n                            )\r\n                        }>\r\n                        <Icon source={BalanceMajorMonotone} /> Accept Payment\r\n                    </Button>\r\n                </Stack.Item>\r\n                <Stack.Item>\r\n                    <Button\r\n                        id=\"Create-Transaction\"\r\n                        primary\r\n                        onClick={() =>\r\n                            redirect.dispatch(Redirect.Action.REMOTE, {\r\n                                url: 'https://dev.d3ivgpkzuz6hkr.amplifyapp.com',\r\n                                newContext: true\r\n                            })\r\n                        }>\r\n                        <Icon source={TransactionMajorMonotone} /> Create transaction\r\n                    </Button>\r\n                </Stack.Item>\r\n            </Stack>\r\n            {transactionItems && (\r\n                <Card>\r\n                    <DataTable\r\n                        columnContentTypes={['text', 'text', 'text', 'text']}\r\n                        headings={[\r\n                            'Customer phone number',\r\n                            'TotalPrice',\r\n                            'TotalBonusAmount',\r\n                            'CreatedAt'\r\n                        ]}\r\n                        rows={\r\n                            transactionItems &&\r\n                            transactionItems\r\n                                .filter((transaction) => {\r\n                                    if (searchValue == null) {\r\n                                        return transaction\r\n                                    } else if (\r\n                                        transaction.customer[0].phone\r\n                                            .toLowerCase()\r\n                                            .includes(searchValue.toLowerCase())\r\n                                    ) {\r\n                                        return transaction\r\n                                    }\r\n                                })\r\n                                .map((transaction) => [\r\n                                    <Button\r\n                                        primary\r\n                                        onClick={() =>\r\n                                            redirect.dispatch(Redirect.Action.ADMIN_PATH, {\r\n                                                path: `/customers/${transaction.customer[0].id}`,\r\n                                                newContext: true\r\n                                            })\r\n                                        }>\r\n                                        {transaction.customer[0].phone}\r\n                                    </Button>,\r\n                                    toCurrency(Number(transaction.totalPrice)),\r\n                                    toCurrency(Number(transaction.totalBonusAmount)),\r\n                                    formatDate(transaction.createdAt)\r\n                                ])\r\n                        }\r\n                    />\r\n                    <Pagination\r\n                        hasPrevious={previousPaginateTokens.length > 0}\r\n                        onPrevious={paginatePrevious}\r\n                        hasNext={nextPaginateToken}\r\n                        onNext={paginateNext}\r\n                    />\r\n                </Card>\r\n            )}\r\n        </Page>\r\n    )\r\n}\r\n\r\nexport async function getStaticProps() {\r\n    let result\r\n    try {\r\n        result = await API.graphql(graphqlOperation(listTransactions, { limit: 5 }))\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n\r\n    if (result.errors) {\r\n        console.warn('Failed to fetch todolist. ', result.errors)\r\n        return { props: { transactions: [] } }\r\n    }\r\n    if (result.data !== null) {\r\n        return { props: { transactions: result.data } }\r\n    }\r\n}\r\n\r\nexport default Index\r\n"]},"metadata":{},"sourceType":"module"}