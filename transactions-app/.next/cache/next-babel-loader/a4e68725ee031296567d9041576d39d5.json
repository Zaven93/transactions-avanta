{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport axios from 'axios';\nimport gql from 'graphql-tag';\nimport { print } from 'graphql';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { ResourcePicker } from '@shopify/app-bridge/actions';\nimport { Page, Badge, Avatar, TextStyle, Card, TextContainer, Modal } from '@shopify/polaris';\nimport { CustomersMajorMonotone } from '@shopify/polaris-icons';\nimport { Table, TableCell, Icon, Popup } from 'semantic-ui-react';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nAPI.configure(config);\nconst listPaymentRequest = gql`\n    query listPaymentRequest {\n        listPaymentRequests {\n            items {\n                bonusAmount\n                createdAt\n                customerId\n                id\n                orderId\n                status\n                updatedAt\n            }\n        }\n    }\n`;\nconst listProducts = gql`\n    query Products {\n        products(first: 100) {\n            edges {\n                node {\n                    id\n                    title\n                    tags\n                    variants(first: 1) {\n                        edges {\n                            node {\n                                price\n                            }\n                        }\n                    }\n                    images(first: 1) {\n                        edges {\n                            node {\n                                originalSrc\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n`;\n\nconst AcceptPayment = ({\n  paymentRequests,\n  products\n}) => {\n  const {\n    0: paymentRequestItems,\n    1: setPaymentRequestItems\n  } = useState(paymentRequests.listPaymentRequests.items);\n  const {\n    0: productItems,\n    1: setProductItems\n  } = useState(products);\n  const {\n    0: openPicker,\n    1: setOpenPicker\n  } = useState(false);\n  const {\n    0: active,\n    1: setActive\n  } = useState(true);\n  const resourceName = {\n    singular: 'customer',\n    plural: 'customers'\n  };\n  const handleChange = useCallback(() => setActive(!active), [active]);\n  console.log('Payment requests from getStaticProps', paymentRequests);\n  console.log('products data', products);\n  console.log('Payment request items', paymentRequestItems);\n  return __jsx(Page, {\n    title: \"Payment Request\"\n  }, __jsx(Table, {\n    selectable: true,\n    celled: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Customer Id\"), __jsx(Table.HeaderCell, null, \"Order Id\"), __jsx(Table.HeaderCell, null, \"Bonus Amount\"), __jsx(Table.HeaderCell, null, \"Created At\"), __jsx(Table.HeaderCell, null, \"Updated At\"), __jsx(Table.HeaderCell, null, \"Status\"), __jsx(Table.HeaderCell, null, \"Action\"))), __jsx(Table.Body, null, paymentRequestItems && paymentRequestItems.map(item => __jsx(Table.Row, {\n    key: item.id\n  }, __jsx(Table.Cell, null, __jsx(Badge, {\n    size: \"small\"\n  }, item.customerId)), __jsx(Table.Cell, null, __jsx(Badge, {\n    size: \"small\"\n  }, item.orderId)), __jsx(Table.Cell, null, toCurrency(item.bonusAmount)), __jsx(Table.Cell, null, formatDate(item.createdAt)), __jsx(Table.Cell, null, formatDate(item.updatedAt)), __jsx(Table.Cell, null, __jsx(Badge, {\n    size: \"small\",\n    status: item.status === 'PENDING' ? 'attention' : item.status === 'APPROVED' ? 'success' : 'critical'\n  }, item.status)), __jsx(Table.Cell, {\n    className: \"actions-cell\"\n  }, __jsx(Popup, {\n    content: \"Approve payment\",\n    trigger: __jsx(Icon, {\n      className: \"accept\",\n      name: \"check\",\n      onClick: handleChange\n    })\n  }), __jsx(Popup, {\n    content: \"Decline payment\",\n    trigger: __jsx(Icon, {\n      className: \"decline\" // color={hoveredItemId === item.id ? 'red' : ''}\n      // className={\n      //     hoveredItemId === item.id ? 'decline-hovered' : ''\n      // }\n      ,\n      name: \"remove\" // onMouseEnter={() => setHoveredItemId(item.id)}\n      // onMouseLeave={() => setHoveredItemId(null)}\n\n    })\n  })))))), __jsx(\"div\", {\n    style: {\n      height: '500px'\n    }\n  }, __jsx(Modal, {\n    open: active,\n    onClose: handleChange,\n    title: \"Choose products\",\n    primaryAction: {\n      content: 'Proceed',\n      onAction: handleChange\n    }\n  }, __jsx(Modal.Section, null, __jsx(TextContainer, null, __jsx(\"p\", null, \"Use Instagram posts to share your products with millions of people. Let shoppers buy from your store without leaving Instagram.\"))))), __jsx(ResourcePicker, {\n    resourceType: \"Product\",\n    open: true\n  }));\n};\n\nexport async function getStaticProps() {\n  let result;\n  let products;\n\n  try {\n    result = await API.graphql(graphqlOperation(listPaymentRequest));\n    products = await axios({\n      url: 'https://transactions-avanta.myshopify.com/admin/api/2020-07/graphql.json',\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Shopify-Access-Token': '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'\n      },\n      data: {\n        query: print(listProducts)\n      }\n    });\n  } catch (error) {\n    console.log(error);\n  }\n\n  if (result.errors || products.errors) {\n    console.warn('Failed to fetch payment requests.', result.errors);\n    return {\n      props: {\n        paymentRequests: [],\n        products: []\n      }\n    };\n  }\n\n  if (result.data !== null && products.data !== null) {\n    return {\n      props: {\n        paymentRequests: result.data,\n        products: products.data.data.products.edges\n      }\n    };\n  }\n}\nexport default AcceptPayment;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/pages/accept-payment.js"],"names":["React","useState","useCallback","useEffect","axios","gql","print","API","graphqlOperation","ResourcePicker","Page","Badge","Avatar","TextStyle","Card","TextContainer","Modal","CustomersMajorMonotone","Table","TableCell","Icon","Popup","toCurrency","formatDate","config","configure","listPaymentRequest","listProducts","AcceptPayment","paymentRequests","products","paymentRequestItems","setPaymentRequestItems","listPaymentRequests","items","productItems","setProductItems","openPicker","setOpenPicker","active","setActive","resourceName","singular","plural","handleChange","console","log","map","item","id","customerId","orderId","bonusAmount","createdAt","updatedAt","status","height","content","onAction","getStaticProps","result","graphql","url","method","headers","data","query","error","errors","warn","props","edges"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport gql from 'graphql-tag'\r\nimport { print } from 'graphql'\r\nimport { API, graphqlOperation } from 'aws-amplify'\r\nimport { ResourcePicker } from '@shopify/app-bridge/actions'\r\nimport { Page, Badge, Avatar, TextStyle, Card, TextContainer, Modal } from '@shopify/polaris'\r\nimport { CustomersMajorMonotone } from '@shopify/polaris-icons'\r\nimport { Table, TableCell, Icon, Popup } from 'semantic-ui-react'\r\nimport { toCurrency, formatDate } from '../utils/helper'\r\nimport config from '../aws-exports'\r\n\r\nAPI.configure(config)\r\n\r\nconst listPaymentRequest = gql`\r\n    query listPaymentRequest {\r\n        listPaymentRequests {\r\n            items {\r\n                bonusAmount\r\n                createdAt\r\n                customerId\r\n                id\r\n                orderId\r\n                status\r\n                updatedAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst listProducts = gql`\r\n    query Products {\r\n        products(first: 100) {\r\n            edges {\r\n                node {\r\n                    id\r\n                    title\r\n                    tags\r\n                    variants(first: 1) {\r\n                        edges {\r\n                            node {\r\n                                price\r\n                            }\r\n                        }\r\n                    }\r\n                    images(first: 1) {\r\n                        edges {\r\n                            node {\r\n                                originalSrc\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst AcceptPayment = ({ paymentRequests, products }) => {\r\n    const [paymentRequestItems, setPaymentRequestItems] = useState(\r\n        paymentRequests.listPaymentRequests.items\r\n    )\r\n    const [productItems, setProductItems] = useState(products)\r\n    const [openPicker, setOpenPicker] = useState(false)\r\n    const [active, setActive] = useState(true)\r\n\r\n    const resourceName = {\r\n        singular: 'customer',\r\n        plural: 'customers'\r\n    }\r\n\r\n    const handleChange = useCallback(() => setActive(!active), [active])\r\n\r\n    console.log('Payment requests from getStaticProps', paymentRequests)\r\n    console.log('products data', products)\r\n    console.log('Payment request items', paymentRequestItems)\r\n    return (\r\n        <Page title=\"Payment Request\">\r\n            <Table selectable celled>\r\n                <Table.Header>\r\n                    <Table.Row>\r\n                        <Table.HeaderCell>Customer Id</Table.HeaderCell>\r\n                        <Table.HeaderCell>Order Id</Table.HeaderCell>\r\n                        <Table.HeaderCell>Bonus Amount</Table.HeaderCell>\r\n                        <Table.HeaderCell>Created At</Table.HeaderCell>\r\n                        <Table.HeaderCell>Updated At</Table.HeaderCell>\r\n                        <Table.HeaderCell>Status</Table.HeaderCell>\r\n                        <Table.HeaderCell>Action</Table.HeaderCell>\r\n                    </Table.Row>\r\n                </Table.Header>\r\n                <Table.Body>\r\n                    {paymentRequestItems &&\r\n                        paymentRequestItems.map((item) => (\r\n                            <Table.Row key={item.id}>\r\n                                <Table.Cell>\r\n                                    <Badge size=\"small\">{item.customerId}</Badge>\r\n                                </Table.Cell>\r\n                                <Table.Cell>\r\n                                    <Badge size=\"small\">{item.orderId}</Badge>\r\n                                </Table.Cell>\r\n                                <Table.Cell>{toCurrency(item.bonusAmount)}</Table.Cell>\r\n                                <Table.Cell>{formatDate(item.createdAt)}</Table.Cell>\r\n                                <Table.Cell>{formatDate(item.updatedAt)}</Table.Cell>\r\n                                <Table.Cell>\r\n                                    <Badge\r\n                                        size=\"small\"\r\n                                        status={\r\n                                            item.status === 'PENDING'\r\n                                                ? 'attention'\r\n                                                : item.status === 'APPROVED'\r\n                                                ? 'success'\r\n                                                : 'critical'\r\n                                        }>\r\n                                        {item.status}\r\n                                    </Badge>\r\n                                </Table.Cell>\r\n                                <Table.Cell className=\"actions-cell\">\r\n                                    <Popup\r\n                                        content=\"Approve payment\"\r\n                                        trigger={\r\n                                            <Icon\r\n                                                className=\"accept\"\r\n                                                name=\"check\"\r\n                                                onClick={handleChange}\r\n                                            />\r\n                                        }\r\n                                    />\r\n                                    <Popup\r\n                                        content=\"Decline payment\"\r\n                                        trigger={\r\n                                            <Icon\r\n                                                className=\"decline\"\r\n                                                // color={hoveredItemId === item.id ? 'red' : ''}\r\n                                                // className={\r\n                                                //     hoveredItemId === item.id ? 'decline-hovered' : ''\r\n                                                // }\r\n                                                name=\"remove\"\r\n                                                // onMouseEnter={() => setHoveredItemId(item.id)}\r\n                                                // onMouseLeave={() => setHoveredItemId(null)}\r\n                                            />\r\n                                        }\r\n                                    />\r\n                                </Table.Cell>\r\n                            </Table.Row>\r\n                        ))}\r\n                </Table.Body>\r\n            </Table>\r\n            <div style={{ height: '500px' }}>\r\n                <Modal\r\n                    open={active}\r\n                    onClose={handleChange}\r\n                    title=\"Choose products\"\r\n                    primaryAction={{\r\n                        content: 'Proceed',\r\n                        onAction: handleChange\r\n                    }}>\r\n                    <Modal.Section>\r\n                        <TextContainer>\r\n                            <p>\r\n                                Use Instagram posts to share your products with millions of people.\r\n                                Let shoppers buy from your store without leaving Instagram.\r\n                            </p>\r\n                        </TextContainer>\r\n                    </Modal.Section>\r\n                </Modal>\r\n            </div>\r\n            <ResourcePicker resourceType=\"Product\" open />\r\n        </Page>\r\n    )\r\n}\r\n\r\nexport async function getStaticProps() {\r\n    let result\r\n    let products\r\n    try {\r\n        result = await API.graphql(graphqlOperation(listPaymentRequest))\r\n        products = await axios({\r\n            url: 'https://transactions-avanta.myshopify.com/admin/api/2020-07/graphql.json',\r\n            method: 'post',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'X-Shopify-Access-Token': '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'\r\n            },\r\n            data: {\r\n                query: print(listProducts)\r\n            }\r\n        })\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n\r\n    if (result.errors || products.errors) {\r\n        console.warn('Failed to fetch payment requests.', result.errors)\r\n        return { props: { paymentRequests: [], products: [] } }\r\n    }\r\n    if (result.data !== null && products.data !== null) {\r\n        return {\r\n            props: { paymentRequests: result.data, products: products.data.data.products.edges }\r\n        }\r\n    }\r\n}\r\n\r\nexport default AcceptPayment\r\n"]},"metadata":{},"sourceType":"module"}