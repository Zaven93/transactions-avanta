{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport axios from 'axios';\nimport { Auth, API, graphqlOperation } from 'aws-amplify';\nimport createApp from '@shopify/app-bridge';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport gql from 'graphql-tag';\nimport { print } from 'graphql';\nimport { Card, DataTable, Button, Page, Pagination, TextField, ChoiceList, Filters, Icon, Stack } from '@shopify/polaris';\nimport { SearchMajorMonotone, TransactionMajorMonotone, BalanceMajorMonotone, LogOutMinor } from '@shopify/polaris-icons';\nimport { toCurrency, formatDate, extractNumbersFromString } from '../utils/helper';\nimport config from '../aws-exports';\nimport Login from '../components/Login';\nimport BranchConsole from '../components/BranchConsole';\nAPI.configure(config);\nconst branchByAdminId = gql`\n    query branchByAdminId($adminId: ID!) {\n        branchByAdminId(adminId: $adminId) {\n            items {\n                adminId\n                branchName\n                id\n                branchProducts {\n                    items {\n                        branchId\n                        createdAt\n                        id\n                        productId\n                        tags\n                    }\n                }\n            }\n        }\n    }\n`;\n\nconst BranchData = ({\n  user\n}) => {\n  const {\n    0: branchInfo,\n    1: setBranchInfo\n  } = useState(''); // const [searchValue, setSearchValue] = useState(null)\n  // const [transactionItems, setTransactionItems] = useState(transactions.listTransactions.items)\n  // const [nextPaginateToken, setNextPaginateToken] = useState(\n  //     transactions.listTransactions.nextToken\n  // )\n  // const [previousPaginateTokens, setPreviousPaginateTokens] = useState([])\n  // const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\n  // const app = createApp({\n  //     apiKey: '3b01063bac3031d13101100ef3e44fd5',\n  //     shopOrigin: 'transactions-avanta.myshopify.com'\n  // })\n  // const redirect = Redirect.create(app)\n  // const paginateNext = async () => {\n  //     setPreviousPaginateTokens([...previousPaginateTokens, nextPaginateToken])\n  //     try {\n  //         const data = await API.graphql(\n  //             graphqlOperation(listTransactions, { limit: 5, nextToken: nextPaginateToken })\n  //         )\n  //         console.log('Data from pagination', data)\n  //         setTransactionItems(data.data.listTransactions.items)\n  //         setNextPaginateToken(data.data.listTransactions.nextToken)\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // }\n  // const paginatePrevious = async () => {\n  //     const previousToken =\n  //         previousPaginateTokens[\n  //             previousPaginateTokens.length === 1 ? 0 : previousPaginateTokens.length - 2\n  //         ]\n  //     setPreviousPaginateTokens([\n  //         ...previousPaginateTokens.slice(0, previousPaginateTokens.length - 1)\n  //     ])\n  //     try {\n  //         if (previousPaginateTokens.length === 1) {\n  //             const data = await API.graphql(graphqlOperation(listTransactions, { limit: 5 }))\n  //             setTransactionItems(data.data.listTransactions.items)\n  //             setNextPaginateToken(data.data.listTransactions.nextToken)\n  //         } else {\n  //             const data = await API.graphql(\n  //                 graphqlOperation(listTransactions, { limit: 5, nextToken: previousToken })\n  //             )\n  //             setTransactionItems(data.data.listTransactions.items)\n  //             setNextPaginateToken(data.data.listTransactions.nextToken)\n  //         }\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // }\n\n  const getBranch = async () => {\n    try {\n      const fetchBranch = await API.graphql(graphqlOperation(branchByAdminId, {\n        adminId: user.attributes.sub\n      }));\n      setBranchInfo(fetchBranch.data.branchByAdminId.item[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getBranch();\n  }, []);\n  console.log('Branch data user', user);\n  console.log('Branch info', branchInfo);\n  return __jsx(Page, {\n    title: branchInfo && branchInfo.branchName\n  }, __jsx(TextField, {\n    label: \"Search Product\",\n    value: searchValue,\n    onChange: handleSearchInput,\n    prefix: __jsx(Icon, {\n      source: SearchMajorMonotone\n    }),\n    placeholder: \"Search by Customer phone number\"\n  }), __jsx(Stack, null, __jsx(Stack.Item, {\n    fill: true\n  }, __jsx(Button, {\n    id: \"Accept-Payment\",\n    onClick: () => redirect.dispatch(Redirect.Action.ADMIN_PATH, '/apps/3b01063bac3031d13101100ef3e44fd5/accept-payment')\n  }, __jsx(Icon, {\n    source: BalanceMajorMonotone\n  }), \" Accept Payment\")), __jsx(Stack.Item, null, __jsx(Button, {\n    id: \"Create-Transaction\",\n    primary: true,\n    onClick: () => redirect.dispatch(Redirect.Action.REMOTE, {\n      // url: `https://dev.d3ivgpkzuz6hkr.amplifyapp.com?adminId=${user.attributes.sub}`,\n      url: `http://localhost:3001/transactions/${user.attributes.sub}`,\n      newContext: true\n    })\n  }, __jsx(Icon, {\n    source: TransactionMajorMonotone\n  }), \" Create transaction\")), __jsx(Stack.Item, null, __jsx(Button, {\n    primary: true,\n    id: \"Logout\",\n    onClick: () => {\n      Auth.signOut();\n      updateUser(null);\n    }\n  }, __jsx(Icon, {\n    source: LogOutMinor\n  }), \" Logout\"))), transactionItems && __jsx(Card, null, __jsx(DataTable, {\n    columnContentTypes: ['text', 'text', 'text', 'text'],\n    headings: ['Customer phone number', 'TotalPrice', 'TotalBonusAmount', 'Minus from Bonus Amount', 'CreatedAt'],\n    rows: transactionItems && transactionItems.filter(transaction => {\n      if (searchValue == null) {\n        return transaction;\n      } else if (transaction.customer[0].phone.toLowerCase().includes(searchValue.toLowerCase())) {\n        return transaction;\n      }\n    }).sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt)).map(transaction => [__jsx(Button, {\n      primary: true,\n      onClick: () => redirect.dispatch(Redirect.Action.ADMIN_PATH, {\n        path: `/customers/${transaction.customer[0].id}`,\n        newContext: true\n      })\n    }, transaction.customer[0].phone), toCurrency(Number(transaction.totalPrice)), toCurrency(Number(transaction.totalBonusAmount)), transaction.note === null ? '' : toCurrency(extractNumbersFromString(transaction.note)), formatDate(transaction.createdAt)])\n  }), __jsx(Pagination, {\n    hasPrevious: previousPaginateTokens.length > 0,\n    onPrevious: paginatePrevious,\n    hasNext: nextPaginateToken,\n    onNext: paginateNext\n  })));\n};\n\nexport default BranchData;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/components/BranchData.js"],"names":["React","useState","useCallback","useEffect","axios","Auth","API","graphqlOperation","createApp","Redirect","gql","print","Card","DataTable","Button","Page","Pagination","TextField","ChoiceList","Filters","Icon","Stack","SearchMajorMonotone","TransactionMajorMonotone","BalanceMajorMonotone","LogOutMinor","toCurrency","formatDate","extractNumbersFromString","config","Login","BranchConsole","configure","branchByAdminId","BranchData","user","branchInfo","setBranchInfo","getBranch","fetchBranch","graphql","adminId","attributes","sub","data","item","error","console","log","branchName","searchValue","handleSearchInput","redirect","dispatch","Action","ADMIN_PATH","REMOTE","url","newContext","signOut","updateUser","transactionItems","filter","transaction","customer","phone","toLowerCase","includes","sort","a","b","Date","createdAt","map","path","id","Number","totalPrice","totalBonusAmount","note","previousPaginateTokens","length","paginatePrevious","nextPaginateToken","paginateNext"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { Auth, API, graphqlOperation } from 'aws-amplify'\r\nimport createApp from '@shopify/app-bridge'\r\nimport { Redirect } from '@shopify/app-bridge/actions'\r\nimport gql from 'graphql-tag'\r\nimport { print } from 'graphql'\r\nimport {\r\n    Card,\r\n    DataTable,\r\n    Button,\r\n    Page,\r\n    Pagination,\r\n    TextField,\r\n    ChoiceList,\r\n    Filters,\r\n    Icon,\r\n    Stack\r\n} from '@shopify/polaris'\r\nimport {\r\n    SearchMajorMonotone,\r\n    TransactionMajorMonotone,\r\n    BalanceMajorMonotone,\r\n    LogOutMinor\r\n} from '@shopify/polaris-icons'\r\nimport { toCurrency, formatDate, extractNumbersFromString } from '../utils/helper'\r\nimport config from '../aws-exports'\r\nimport Login from '../components/Login'\r\nimport BranchConsole from '../components/BranchConsole'\r\n\r\nAPI.configure(config)\r\n\r\nconst branchByAdminId = gql`\r\n    query branchByAdminId($adminId: ID!) {\r\n        branchByAdminId(adminId: $adminId) {\r\n            items {\r\n                adminId\r\n                branchName\r\n                id\r\n                branchProducts {\r\n                    items {\r\n                        branchId\r\n                        createdAt\r\n                        id\r\n                        productId\r\n                        tags\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst BranchData = ({ user }) => {\r\n    const [branchInfo, setBranchInfo] = useState('')\r\n    // const [searchValue, setSearchValue] = useState(null)\r\n    // const [transactionItems, setTransactionItems] = useState(transactions.listTransactions.items)\r\n    // const [nextPaginateToken, setNextPaginateToken] = useState(\r\n    //     transactions.listTransactions.nextToken\r\n    // )\r\n    // const [previousPaginateTokens, setPreviousPaginateTokens] = useState([])\r\n    // const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\r\n\r\n    // const app = createApp({\r\n    //     apiKey: '3b01063bac3031d13101100ef3e44fd5',\r\n    //     shopOrigin: 'transactions-avanta.myshopify.com'\r\n    // })\r\n\r\n    // const redirect = Redirect.create(app)\r\n\r\n    // const paginateNext = async () => {\r\n    //     setPreviousPaginateTokens([...previousPaginateTokens, nextPaginateToken])\r\n    //     try {\r\n    //         const data = await API.graphql(\r\n    //             graphqlOperation(listTransactions, { limit: 5, nextToken: nextPaginateToken })\r\n    //         )\r\n\r\n    //         console.log('Data from pagination', data)\r\n    //         setTransactionItems(data.data.listTransactions.items)\r\n    //         setNextPaginateToken(data.data.listTransactions.nextToken)\r\n    //     } catch (error) {\r\n    //         console.log(error)\r\n    //     }\r\n    // }\r\n\r\n    // const paginatePrevious = async () => {\r\n    //     const previousToken =\r\n    //         previousPaginateTokens[\r\n    //             previousPaginateTokens.length === 1 ? 0 : previousPaginateTokens.length - 2\r\n    //         ]\r\n    //     setPreviousPaginateTokens([\r\n    //         ...previousPaginateTokens.slice(0, previousPaginateTokens.length - 1)\r\n    //     ])\r\n    //     try {\r\n    //         if (previousPaginateTokens.length === 1) {\r\n    //             const data = await API.graphql(graphqlOperation(listTransactions, { limit: 5 }))\r\n    //             setTransactionItems(data.data.listTransactions.items)\r\n    //             setNextPaginateToken(data.data.listTransactions.nextToken)\r\n    //         } else {\r\n    //             const data = await API.graphql(\r\n    //                 graphqlOperation(listTransactions, { limit: 5, nextToken: previousToken })\r\n    //             )\r\n    //             setTransactionItems(data.data.listTransactions.items)\r\n    //             setNextPaginateToken(data.data.listTransactions.nextToken)\r\n    //         }\r\n    //     } catch (error) {\r\n    //         console.log(error)\r\n    //     }\r\n    // }\r\n\r\n    const getBranch = async () => {\r\n        try {\r\n            const fetchBranch = await API.graphql(\r\n                graphqlOperation(branchByAdminId, { adminId: user.attributes.sub })\r\n            )\r\n            setBranchInfo(fetchBranch.data.branchByAdminId.item[0])\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getBranch()\r\n    }, [])\r\n\r\n    console.log('Branch data user', user)\r\n    console.log('Branch info', branchInfo)\r\n\r\n    return (\r\n        <Page title={branchInfo && branchInfo.branchName}>\r\n            <TextField\r\n                label=\"Search Product\"\r\n                value={searchValue}\r\n                onChange={handleSearchInput}\r\n                prefix={<Icon source={SearchMajorMonotone} />}\r\n                placeholder=\"Search by Customer phone number\"\r\n            />\r\n            <Stack>\r\n                <Stack.Item fill>\r\n                    <Button\r\n                        id=\"Accept-Payment\"\r\n                        onClick={() =>\r\n                            redirect.dispatch(\r\n                                Redirect.Action.ADMIN_PATH,\r\n                                '/apps/3b01063bac3031d13101100ef3e44fd5/accept-payment'\r\n                            )\r\n                        }>\r\n                        <Icon source={BalanceMajorMonotone} /> Accept Payment\r\n                    </Button>\r\n                </Stack.Item>\r\n                <Stack.Item>\r\n                    <Button\r\n                        id=\"Create-Transaction\"\r\n                        primary\r\n                        onClick={() =>\r\n                            redirect.dispatch(Redirect.Action.REMOTE, {\r\n                                // url: `https://dev.d3ivgpkzuz6hkr.amplifyapp.com?adminId=${user.attributes.sub}`,\r\n                                url: `http://localhost:3001/transactions/${user.attributes.sub}`,\r\n                                newContext: true\r\n                            })\r\n                        }>\r\n                        <Icon source={TransactionMajorMonotone} /> Create transaction\r\n                    </Button>\r\n                </Stack.Item>\r\n                <Stack.Item>\r\n                    <Button\r\n                        primary\r\n                        id=\"Logout\"\r\n                        onClick={() => {\r\n                            Auth.signOut()\r\n                            updateUser(null)\r\n                        }}>\r\n                        <Icon source={LogOutMinor} /> Logout\r\n                    </Button>\r\n                </Stack.Item>\r\n            </Stack>\r\n            {transactionItems && (\r\n                <Card>\r\n                    <DataTable\r\n                        columnContentTypes={['text', 'text', 'text', 'text']}\r\n                        headings={[\r\n                            'Customer phone number',\r\n                            'TotalPrice',\r\n                            'TotalBonusAmount',\r\n                            'Minus from Bonus Amount',\r\n                            'CreatedAt'\r\n                        ]}\r\n                        rows={\r\n                            transactionItems &&\r\n                            transactionItems\r\n                                .filter((transaction) => {\r\n                                    if (searchValue == null) {\r\n                                        return transaction\r\n                                    } else if (\r\n                                        transaction.customer[0].phone\r\n                                            .toLowerCase()\r\n                                            .includes(searchValue.toLowerCase())\r\n                                    ) {\r\n                                        return transaction\r\n                                    }\r\n                                })\r\n                                .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))\r\n                                .map((transaction) => [\r\n                                    <Button\r\n                                        primary\r\n                                        onClick={() =>\r\n                                            redirect.dispatch(Redirect.Action.ADMIN_PATH, {\r\n                                                path: `/customers/${transaction.customer[0].id}`,\r\n                                                newContext: true\r\n                                            })\r\n                                        }>\r\n                                        {transaction.customer[0].phone}\r\n                                    </Button>,\r\n                                    toCurrency(Number(transaction.totalPrice)),\r\n                                    toCurrency(Number(transaction.totalBonusAmount)),\r\n                                    transaction.note === null\r\n                                        ? ''\r\n                                        : toCurrency(extractNumbersFromString(transaction.note)),\r\n                                    formatDate(transaction.createdAt)\r\n                                ])\r\n                        }\r\n                    />\r\n                    <Pagination\r\n                        hasPrevious={previousPaginateTokens.length > 0}\r\n                        onPrevious={paginatePrevious}\r\n                        hasNext={nextPaginateToken}\r\n                        onNext={paginateNext}\r\n                    />\r\n                </Card>\r\n            )}\r\n        </Page>\r\n    )\r\n}\r\n\r\nexport default BranchData\r\n"]},"metadata":{},"sourceType":"module"}