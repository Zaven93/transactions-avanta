{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject9() {\n  var data = _taggedTemplateLiteral([\"\\n    subscription onDeleteBranchProduct {\\n        onDeleteBranchProduct {\\n            id\\n        }\\n    }\\n\"]);\n\n  _templateObject9 = function _templateObject9() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject8() {\n  var data = _taggedTemplateLiteral([\"\\n    subscription onUpdateBranchProduct {\\n        onUpdateBranchProduct {\\n            id\\n        }\\n    }\\n\"]);\n\n  _templateObject8 = function _templateObject8() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject7() {\n  var data = _taggedTemplateLiteral([\"\\n    subscription onCreateBranchProduct {\\n        onCreateBranchProduct {\\n            id\\n        }\\n    }\\n\"]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation deleteBranchProduct($input: DeleteBranchProductInput!) {\\n        deleteBranchProduct(input: $input) {\\n            id\\n        }\\n    }\\n\"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation updateBranchProduct($input: UpdateBranchProductInput!) {\\n        updateBranchProduct(input: $input) {\\n            id\\n            tags\\n            branchId\\n            productId\\n        }\\n    }\\n\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n    query getBranch($id: ID!) {\\n        getBranch(id: $id) {\\n            transactions(sortDirection: DESC) {\\n                items {\\n                    branchId\\n                    createdAt\\n                    currency\\n                    note\\n                    customer {\\n                        email\\n                        id\\n                        firstName\\n                        lastName\\n                        phone\\n                    }\\n                    totalBonusAmount\\n                    totalPrice\\n                    updatedAt\\n                    sortDate\\n                }\\n            }\\n            branchName\\n            adminId\\n            id\\n            branchProducts {\\n                items {\\n                    branchId\\n                    createdAt\\n                    id\\n                    productId\\n                    tags\\n                    updatedAt\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation productUpdate($input: ProductInput!) {\\n        productUpdate(input: $input) {\\n            product {\\n                id\\n                metafields(first: 100) {\\n                    edges {\\n                        node {\\n                            namespace\\n                            key\\n                            value\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation createBranchProduct($input: CreateBranchProductInput!) {\\n        createBranchProduct(input: $input) {\\n            id\\n            branchId\\n            productId\\n            tags\\n        }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query Products {\\n        products(first: 100) {\\n            edges {\\n                node {\\n                    id\\n                    title\\n                    tags\\n                    description(truncateAt: 100)\\n                    variants(first: 1) {\\n                        edges {\\n                            node {\\n                                id\\n                                price\\n                            }\\n                        }\\n                    }\\n                    images(first: 1) {\\n                        edges {\\n                            node {\\n                                originalSrc\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { Modal, Thumbnail, Checkbox, TextStyle } from '@shopify/polaris';\nimport { Table, Header } from 'semantic-ui-react';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nimport BranchRow from './BranchRow';\nimport { subscribe } from 'graphql';\nAPI.configure(config);\nvar listProducts = gql(_templateObject());\nvar createBranchProduct = gql(_templateObject2());\nvar productUpdate = gql(_templateObject3());\nvar getBranchById = gql(_templateObject4());\nvar updateBranchProduct = gql(_templateObject5());\nvar deleteBranchProduct = gql(_templateObject6());\nvar onCreateBranchProduct = gql(_templateObject7());\nvar onUpdateBranchProduct = gql(_templateObject8());\nvar onDeleteBranchProduct = gql(_templateObject9());\n\nvar ProductsList = function ProductsList(_ref) {\n  var active = _ref.active,\n      handleChange = _ref.handleChange,\n      branchId = _ref.branchId,\n      branchName = _ref.branchName;\n\n  var _useQuery = useQuery(listProducts),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  var _useState = useState(''),\n      branchProductSubscription = _useState[0],\n      setBranchProductSubscription = _useState[1];\n\n  var _useState2 = useState([]),\n      rowId = _useState2[0],\n      setRowId = _useState2[1];\n\n  var _useState3 = useState({\n    products: []\n  }),\n      state = _useState3[0],\n      setState = _useState3[1];\n\n  var _useState4 = useState(null),\n      searchValue = _useState4[0],\n      setSearchValue = _useState4[1];\n\n  var _useState5 = useState(''),\n      branchInfo = _useState5[0],\n      setBranchInfo = _useState5[1];\n\n  var handleSearchInput = useCallback(function (newValue) {\n    return setSearchValue(newValue);\n  }, []);\n\n  var getBranch = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var branch;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return API.graphql(graphqlOperation(getBranchById, {\n                id: branchId\n              }));\n\n            case 3:\n              branch = _context.sent;\n              setBranchInfo(branch.data.getBranch);\n              setRowId([].concat(_toConsumableArray(rowId), _toConsumableArray(branch.data.getBranch.branchProducts.items.map(function (item) {\n                return item.productId;\n              }))));\n              setState({\n                products: [].concat(_toConsumableArray(state.products), _toConsumableArray(branch.data.getBranch.branchProducts.items.map(function (product) {\n                  return {\n                    id: product.productId\n                  };\n                })))\n              });\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 9]]);\n    }));\n\n    return function getBranch() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    getBranch();\n    var createListener = API.graphql(graphqlOperation(onCreateBranchProduct)).subscribe({\n      next: function next(createdBranchProduct) {\n        return setBranchProductSubscription(createdBranchProduct);\n      }\n    });\n    var updateListener = API.graphql(graphqlOperation(onUpdateBranchProduct)).subscribe({\n      next: function next(updatedBranchProduct) {\n        return setBranchProductSubscription(updatedBranchProduct);\n      }\n    });\n    var deleteListener = API.graphql(graphqlOperation(onDeleteBranchProduct)).subscribe({\n      next: function next(deletedBranchProduct) {\n        return setBranchProductSubscription(deletedBranchProduct);\n      }\n    });\n    return function () {\n      createListener.unsubscribe();\n      updateListener.unsubscribe();\n      deleteListener.unsubscribe();\n    };\n  }, [branchId, branchProductSubscription]);\n\n  if (loading) {\n    return __jsx(\"div\", null, \"Loading products...\");\n  }\n\n  if (error) {\n    return __jsx(\"div\", null, \"Some error occured\");\n  }\n\n  console.log('Branch info from BranchProducts', branchInfo);\n  console.log('Products from state in BranchProducts', state.products);\n\n  var deleteProductsFromBranch = function deleteProductsFromBranch() {\n    var productsToDeleteFromBranch = branchInfo.branchProducts.items.filter(function (branchProduct) {\n      return !state.products.map(function (product) {\n        return product.id;\n      }).includes(branchProduct.productId);\n    });\n    console.log('Products that are not included in products array', productsToDeleteFromBranch);\n    Promise.all(productsToDeleteFromBranch.map(function (deleteProduct) {\n      API.graphql(graphqlOperation(deleteBranchProduct, {\n        input: {\n          id: deleteProduct.id\n        }\n      }));\n    }))[\"catch\"](function (err) {\n      return console.log(err);\n    });\n    return;\n  };\n\n  var addProductsToBranch = function addProductsToBranch() {\n    Promise.all(state.products.map(function (product) {\n      var updatedProduct = branchInfo.branchProducts.items.filter(function (branchProduct) {\n        return branchProduct.productId === product.id;\n      })[0];\n\n      if (updatedProduct) {\n        console.log('Yes it containes products that should be updated', updatedProduct);\n        API.graphql(graphqlOperation(updateBranchProduct, {\n          input: {\n            id: updatedProduct.id,\n            tags: product.tags\n          }\n        }));\n      } else {\n        console.log(\"No it doesn't contain the product that should be updated\");\n        API.graphql(graphqlOperation(createBranchProduct, {\n          input: {\n            id: uuidv4(),\n            branchId: branchId,\n            productId: product.id,\n            tags: product.tags\n          }\n        }));\n      }\n    }))[\"catch\"](function (err) {\n      return console.log(err);\n    });\n    return;\n  }; // const updateProducts = async () => {\n  //     try {\n  //         await axios({\n  //             url: 'http://localhost:3000/updateProduct',\n  //             method: 'POST',\n  //             data: {\n  //                 products: state.products\n  //             }\n  //         })\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // }\n\n\n  console.log('State data from product list', state);\n  console.log('BranchInfo from modalZaven jan', branchInfo);\n  return __jsx(Modal, {\n    open: active,\n    onClose: function onClose() {\n      return handleChange();\n    },\n    title: \"Choose products\",\n    primaryAction: {\n      content: 'Save changes',\n      onAction: function onAction() {\n        addProductsToBranch();\n        deleteProductsFromBranch(); // updateProducts()\n\n        handleChange();\n      }\n    }\n  }, __jsx(Modal.Section, null, __jsx(Table, {\n    celled: true,\n    striped: true,\n    selectable: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Products\"), __jsx(Table.HeaderCell, {\n    textAlign: \"center\"\n  }, \"Price\"), __jsx(Table.HeaderCell, null, \"Bonus Percentage\"))), __jsx(Table.Body, null, data && branchInfo && data.products.edges // .filter((product) => {\n  //     if (searchValue == null) {\n  //         return product\n  //     } else if (\n  //         product.node.title\n  //             .toLowerCase()\n  //             .includes(searchValue.toLowerCase())\n  //     ) {\n  //         return product\n  //     }\n  // })\n  .map(function (product) {\n    return __jsx(BranchRow, {\n      rowId: rowId,\n      setRowId: setRowId,\n      branchInfo: branchInfo,\n      branchId: branchId,\n      product: product,\n      state: state,\n      setState: setState\n    }) // <Table.Row\n    //     key={product.node.id}\n    //     >\n    //     <Table.Cell>\n    //         <Header as=\"h4\" image className=\"product-header\">\n    //             <Checkbox\n    //                 checked={\n    //                     rowId.includes(product.node.id) && true\n    //                 }\n    //                 onClick={() => {\n    //                     if (rowId.includes(product.node.id)) {\n    //                         setRowId(\n    //                             rowId.filter((id) => id !== product.node.id)\n    //                         )\n    //                         setState({\n    //                             products: state.products.filter(\n    //                                 (filteredProduct) =>\n    //                                     filteredProduct.node.id !==\n    //                                     product.node.id\n    //                             )\n    //                         })\n    //                     } else {\n    //                         setRowId([...rowId, product.node.id])\n    //                         setState({\n    //                             ...state,\n    //                             products: [...state.products, product]\n    //                         })\n    //                     }\n    //                 }}\n    //             />\n    //             <Thumbnail\n    //                 source={\n    //                     product.node.images.edges[0] &&\n    //                     product.node.images.edges[0].node\n    //                         .originalSrc\n    //                 }\n    //                 size=\"small\"\n    //                 alt=\"\"\n    //             />\n    //             <Header.Content>\n    //                 {product.node.title}\n    //             </Header.Content>\n    //         </Header>\n    //     </Table.Cell>\n    //     <Table.Cell>\n    //         <TextStyle variation=\"subdued\">\n    //             {product.node.description}\n    //         </TextStyle>\n    //     </Table.Cell>\n    //     <Table.Cell textAlign=\"center\">\n    //         <TextStyle variation=\"subdued\">\n    //             {product.node.variants.edges[0] &&\n    //                 toCurrency(\n    //                     product.node.variants.edges[0].node.price\n    //                 )}\n    //         </TextStyle>\n    //     </Table.Cell>\n    // </Table.Row>\n    ;\n  })), __jsx(Table.Footer, {\n    fullWidth: true\n  }, __jsx(Table.Row, null)))));\n};\n\nexport default ProductsList;","map":null,"metadata":{},"sourceType":"module"}