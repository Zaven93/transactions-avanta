{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query listTransactions($limit: Int, $nextToken: String) {\\n        listTransactions(limit: $limit, nextToken: $nextToken) {\\n            nextToken\\n            items {\\n                id\\n                totalPrice\\n                totalBonusAmount\\n                currency\\n                products {\\n                    id\\n                    title\\n                    bonusPercentage\\n                    priceAmount\\n                    priceCurrency\\n                    image\\n                }\\n                customer {\\n                    id\\n                    firstName\\n                    lastName\\n                    phone\\n                    email\\n                }\\n                createdAt\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport createApp from '@shopify/app-bridge';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { TitleBar } from '@shopify/app-bridge-react';\nimport gql from 'graphql-tag';\nimport { useQuery, useLazyQuery } from '@apollo/react-hooks';\nimport { Card, DataTable, Button, Page, TextField, ChoiceList, Filters, Icon } from '@shopify/polaris';\nimport { SearchMajorMonotone } from '@shopify/polaris-icons';\nimport withApollo from '../lib/withApollo';\nimport { toCurrency } from '../utils/helper';\nvar listTransactions = gql(_templateObject());\n\nvar Index = function Index() {\n  _s();\n\n  // const { loading, data, error } = useQuery(listTransactions)\n  var _useLazyQuery = useLazyQuery(listTransactions),\n      _useLazyQuery2 = _slicedToArray(_useLazyQuery, 2),\n      getTransactions = _useLazyQuery2[0],\n      _useLazyQuery2$ = _useLazyQuery2[1],\n      lazyLoading = _useLazyQuery2$.loading,\n      lazyData = _useLazyQuery2$.data;\n\n  var _useState = useState(null),\n      searchValue = _useState[0],\n      setSearchValue = _useState[1];\n\n  var _useState2 = useState(null),\n      nextPaginateToken = _useState2[0],\n      setNextPaginateToken = _useState2[1];\n\n  var _useState3 = useState([]),\n      previousPaginateTokens = _useState3[0],\n      setPreviousPaginateTokens = _useState3[1];\n\n  var handleSearchInput = useCallback(function (newValue) {\n    return setSearchValue(newValue);\n  }, []);\n  useEffect(function () {\n    getTransactions({\n      variables: {\n        limit: 7\n      }\n    });\n  }, []);\n  console.log('Searching value', searchValue);\n  var app = createApp({\n    apiKey: '3b01063bac3031d13101100ef3e44fd5',\n    shopOrigin: 'transactions-avanta.myshopify.com'\n  });\n  var redirect = Redirect.create(app); // if (loading) {\n  //     return <div>Loading...</div>\n  // }\n\n  if (lazyLoading) {\n    return __jsx(\"div\", null, \"Lazy loading...\");\n  }\n\n  if (lazyData) {\n    setNextPaginateToken(lazyData.listTransactions.nextToken);\n  }\n\n  console.log('Lazy data', lazyData); // if (error) {\n  //     console.log('Some error occured Zaven', error)\n  // }\n  // const formatDate = (rowDate) => {\n  //     const date = new Date(rowDate)\n  //     const year = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(date)\n  //     const month = new Intl.DateTimeFormat('en', { month: 'short' }).format(date)\n  //     const day = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(date)\n  //     return `${day}-${month}-${year}`\n  // }\n  // console.log('Data Zaven jan', data)\n  // console.log('Page count', Math.ceil(data.listTransactions.items.length / 7))\n  // const rows = data.listTransactions.items\n  //     .filter((transaction) => {\n  //         if (searchValue == null) {\n  //             return transaction\n  //         } else if (\n  //             transaction.customer[0].phone.toLowerCase().includes(searchValue.toLowerCase())\n  //         ) {\n  //             return transaction\n  //         }\n  //     })\n  //     .map((transaction) => [\n  //         <Button\n  //             primary\n  //             onClick={() =>\n  //                 redirect.dispatch(Redirect.Action.ADMIN_PATH, {\n  //                     path: `/customers/${transaction.customer[0].id}`,\n  //                     newContext: true\n  //                 })\n  //             }>\n  //             {transaction.customer[0].phone}\n  //         </Button>,\n  //         toCurrency(Number(transaction.totalPrice)),\n  //         toCurrency(Number(transaction.totalBonusAmount)),\n  //         formatDate(transaction.createdAt)\n  //     ])\n  // console.log('Rows', rows)\n  // console.log('Here is transaction data Zvo', data)\n\n  console.log('Data from lazy query', lazyData);\n  console.log('Next paginate token', nextPaginateToken);\n  console.log('Previous paginate Tokens', previousPaginateTokens);\n  return __jsx(Page, {\n    title: \"Transactions\"\n  }, __jsx(TextField, {\n    label: \"Search Product\",\n    value: searchValue,\n    onChange: handleSearchInput,\n    prefix: __jsx(Icon, {\n      source: SearchMajorMonotone\n    }),\n    placeholder: \"Search by Customer phone number\"\n  }), __jsx(Button, {\n    onClick: function onClick() {\n      getTransactions({\n        variables: {\n          nextToken: nextPaginateToken,\n          limit: 4\n        }\n      });\n      setNextPaginateToken(previousPaginateTokens.push(nextPaginateToken));\n    }\n  }, \"Paginate next\"), __jsx(Button, {\n    primary: true,\n    onClick: function onClick() {\n      return redirect.dispatch(Redirect.Action.REMOTE, {\n        url: 'https://dev.d3ivgpkzuz6hkr.amplifyapp.com',\n        newContext: true\n      });\n    }\n  }, \"Create transaction\"));\n};\n\n_s(Index, \"B4l5pzbTP5V58c1JgWbQFe/CICs=\", false, function () {\n  return [useLazyQuery];\n});\n\n_c = Index;\nexport default _c2 = withApollo(Index);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Index\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/pages/index.js"],"names":["React","useState","useCallback","useEffect","createApp","Redirect","TitleBar","gql","useQuery","useLazyQuery","Card","DataTable","Button","Page","TextField","ChoiceList","Filters","Icon","SearchMajorMonotone","withApollo","toCurrency","listTransactions","Index","getTransactions","lazyLoading","loading","lazyData","data","searchValue","setSearchValue","nextPaginateToken","setNextPaginateToken","previousPaginateTokens","setPreviousPaginateTokens","handleSearchInput","newValue","variables","limit","console","log","app","apiKey","shopOrigin","redirect","create","nextToken","push","dispatch","Action","REMOTE","url","newContext"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport createApp from '@shopify/app-bridge'\r\nimport { Redirect } from '@shopify/app-bridge/actions'\r\nimport { TitleBar } from '@shopify/app-bridge-react'\r\nimport gql from 'graphql-tag'\r\nimport { useQuery, useLazyQuery } from '@apollo/react-hooks'\r\nimport {\r\n    Card,\r\n    DataTable,\r\n    Button,\r\n    Page,\r\n    TextField,\r\n    ChoiceList,\r\n    Filters,\r\n    Icon\r\n} from '@shopify/polaris'\r\nimport { SearchMajorMonotone } from '@shopify/polaris-icons'\r\nimport withApollo from '../lib/withApollo'\r\nimport { toCurrency } from '../utils/helper'\r\n\r\nconst listTransactions = gql`\r\n    query listTransactions($limit: Int, $nextToken: String) {\r\n        listTransactions(limit: $limit, nextToken: $nextToken) {\r\n            nextToken\r\n            items {\r\n                id\r\n                totalPrice\r\n                totalBonusAmount\r\n                currency\r\n                products {\r\n                    id\r\n                    title\r\n                    bonusPercentage\r\n                    priceAmount\r\n                    priceCurrency\r\n                    image\r\n                }\r\n                customer {\r\n                    id\r\n                    firstName\r\n                    lastName\r\n                    phone\r\n                    email\r\n                }\r\n                createdAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst Index = () => {\r\n    // const { loading, data, error } = useQuery(listTransactions)\r\n    const [getTransactions, { loading: lazyLoading, data: lazyData }] = useLazyQuery(\r\n        listTransactions\r\n    )\r\n    const [searchValue, setSearchValue] = useState(null)\r\n    const [nextPaginateToken, setNextPaginateToken] = useState(null)\r\n    const [previousPaginateTokens, setPreviousPaginateTokens] = useState([])\r\n    const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\r\n\r\n    useEffect(() => {\r\n        getTransactions({ variables: { limit: 7 } })\r\n    }, [])\r\n\r\n    console.log('Searching value', searchValue)\r\n\r\n    const app = createApp({\r\n        apiKey: '3b01063bac3031d13101100ef3e44fd5',\r\n        shopOrigin: 'transactions-avanta.myshopify.com'\r\n    })\r\n\r\n    const redirect = Redirect.create(app)\r\n    // if (loading) {\r\n    //     return <div>Loading...</div>\r\n    // }\r\n\r\n    if (lazyLoading) {\r\n        return <div>Lazy loading...</div>\r\n    }\r\n\r\n    if (lazyData) {\r\n        setNextPaginateToken(lazyData.listTransactions.nextToken)\r\n    }\r\n\r\n    console.log('Lazy data', lazyData)\r\n\r\n    // if (error) {\r\n    //     console.log('Some error occured Zaven', error)\r\n    // }\r\n\r\n    // const formatDate = (rowDate) => {\r\n    //     const date = new Date(rowDate)\r\n    //     const year = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(date)\r\n    //     const month = new Intl.DateTimeFormat('en', { month: 'short' }).format(date)\r\n    //     const day = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(date)\r\n\r\n    //     return `${day}-${month}-${year}`\r\n    // }\r\n\r\n    // console.log('Data Zaven jan', data)\r\n\r\n    // console.log('Page count', Math.ceil(data.listTransactions.items.length / 7))\r\n\r\n    // const rows = data.listTransactions.items\r\n    //     .filter((transaction) => {\r\n    //         if (searchValue == null) {\r\n    //             return transaction\r\n    //         } else if (\r\n    //             transaction.customer[0].phone.toLowerCase().includes(searchValue.toLowerCase())\r\n    //         ) {\r\n    //             return transaction\r\n    //         }\r\n    //     })\r\n    //     .map((transaction) => [\r\n    //         <Button\r\n    //             primary\r\n    //             onClick={() =>\r\n    //                 redirect.dispatch(Redirect.Action.ADMIN_PATH, {\r\n    //                     path: `/customers/${transaction.customer[0].id}`,\r\n    //                     newContext: true\r\n    //                 })\r\n    //             }>\r\n    //             {transaction.customer[0].phone}\r\n    //         </Button>,\r\n    //         toCurrency(Number(transaction.totalPrice)),\r\n    //         toCurrency(Number(transaction.totalBonusAmount)),\r\n    //         formatDate(transaction.createdAt)\r\n    //     ])\r\n\r\n    // console.log('Rows', rows)\r\n    // console.log('Here is transaction data Zvo', data)\r\n\r\n    console.log('Data from lazy query', lazyData)\r\n    console.log('Next paginate token', nextPaginateToken)\r\n    console.log('Previous paginate Tokens', previousPaginateTokens)\r\n    return (\r\n        <Page title=\"Transactions\">\r\n            <TextField\r\n                label=\"Search Product\"\r\n                value={searchValue}\r\n                onChange={handleSearchInput}\r\n                prefix={<Icon source={SearchMajorMonotone} />}\r\n                placeholder=\"Search by Customer phone number\"\r\n            />\r\n            <Button\r\n                onClick={() => {\r\n                    getTransactions({ variables: { nextToken: nextPaginateToken, limit: 4 } })\r\n                    setNextPaginateToken(previousPaginateTokens.push(nextPaginateToken))\r\n                }}>\r\n                Paginate next\r\n            </Button>\r\n            {/* <Button onClick={() => getTransactions()}>Paginate previous</Button> */}\r\n            <Button\r\n                primary\r\n                onClick={() =>\r\n                    redirect.dispatch(Redirect.Action.REMOTE, {\r\n                        url: 'https://dev.d3ivgpkzuz6hkr.amplifyapp.com',\r\n                        newContext: true\r\n                    })\r\n                }>\r\n                Create transaction\r\n            </Button>\r\n            {/* <Card>\r\n                <DataTable\r\n                    columnContentTypes={['text', 'text', 'text', 'text']}\r\n                    headings={[\r\n                        'Customer phone number',\r\n                        'TotalPrice',\r\n                        'TotalBonusAmount',\r\n                        'CreatedAt'\r\n                    ]}\r\n                    rows={rows}\r\n                />\r\n            </Card> */}\r\n        </Page>\r\n    )\r\n}\r\n\r\nexport default withApollo(Index)\r\n"]},"metadata":{},"sourceType":"module"}