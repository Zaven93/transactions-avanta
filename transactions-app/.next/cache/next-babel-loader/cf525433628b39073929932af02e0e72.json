{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport gql from 'graphql-tag';\nimport { Table, Icon, Popup, Header } from 'semantic-ui-react';\nimport { Badge, Pagination } from '@shopify/polaris';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nAPI.configure(config);\nconst listPaymentRequest = gql`\n    query listPaymentRequest {\n        listPaymentRequests(filter: { status: { eq: APPROVED } }) {\n            items {\n                bonusAmount\n                createdAt\n                customerId\n                id\n                orderId\n                status\n                updatedAt\n            }\n            nextToken\n        }\n    }\n`;\n\nconst AcceptedPaymentRequest = () => {\n  const {\n    0: nextPaginateToken,\n    1: setNextPaginateToken\n  } = useState('');\n  const {\n    0: previousPaginateTokens,\n    1: setPreviousPaginateTokens\n  } = useState([]);\n  const {\n    0: paymentRequestItems,\n    1: setPaymentRequestItems\n  } = useState([]);\n  const fetchAcceptedPayments = useCallback(async () => {\n    try {\n      const res = await API.graphql(graphqlOperation(listPaymentRequest, {\n        limit: 3\n      }));\n      setNextPaginateToken(res.data.listPaymentRequests.nextToken);\n      setPaymentRequestItems(res.data.listPaymentRequests.items);\n      console.log('Accepted payments', res.data);\n    } catch (error) {\n      console.log(error);\n    }\n  }, []);\n  useEffect(() => {\n    fetchAcceptedPayments();\n  }, [fetchAcceptedPayments]);\n\n  const paginateNext = async () => {\n    setPreviousPaginateTokens([...previousPaginateTokens, nextPaginateToken]);\n\n    try {\n      const res = await API.graphql(graphqlOperation(listPaymentRequest, {\n        nextToken: nextPaginateToken\n      }));\n      console.log('Data from pagination', res);\n      setNextPaginateToken(res.data.listPaymentRequests.nextToken);\n      setPaymentRequestItems(res.data.listPaymentRequests.items);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const paginatePrevious = async () => {\n    const previousToken = previousPaginateTokens[previousPaginateTokens.length === 1 ? 0 : previousPaginateTokens.length - 2];\n    setPreviousPaginateTokens([...previousPaginateTokens.slice(0, previousPaginateTokens.length - 1)]);\n\n    try {\n      if (previousPaginateTokens.length === 1) {\n        const res = await API.graphql(graphqlOperation(listPaymentRequest));\n        setNextPaginateToken(res.data.listPaymentRequests.nextToken);\n        setPaymentRequestItems(res.data.listPaymentRequests.items);\n      } else {\n        const data = await API.graphql(graphqlOperation(listTransactions, {\n          nextToken: previousToken\n        }));\n        setNextPaginateToken(res.data.listPaymentRequests.nextToken);\n        setPaymentRequestItems(res.data.listPaymentRequests.items);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  console.log('Next paginate token', nextPaginateToken);\n  console.log('Accepted state data', paymentRequestItems);\n  return __jsx(Table, {\n    celled: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Customer Id\"), __jsx(Table.HeaderCell, null, \"Order Id\"), __jsx(Table.HeaderCell, null, \"Bonus Amount\"), __jsx(Table.HeaderCell, null, \"Created At\"), __jsx(Table.HeaderCell, null, \"Updated At\"), __jsx(Table.HeaderCell, null, \"Status\"))), __jsx(Table.Body, null, paymentRequestItems && paymentRequestItems.filter(item => item.status === 'APPROVED').map(item => __jsx(Table.Row, {\n    key: item.id\n  }, __jsx(Table.Cell, null, __jsx(Badge, {\n    size: \"small\"\n  }, item.customerId)), __jsx(Table.Cell, null, __jsx(Badge, {\n    size: \"small\"\n  }, item.orderId)), __jsx(Table.Cell, null, toCurrency(item.bonusAmount)), __jsx(Table.Cell, null, formatDate(item.createdAt)), __jsx(Table.Cell, null, formatDate(item.updatedAt)), __jsx(Table.Cell, null, __jsx(Badge, {\n    size: \"small\",\n    progress: \"complete\",\n    status: \"success\"\n  }, item.status))))), __jsx(Table.Footer, null, __jsx(Pagination, {\n    hasPrevious: previousPaginateTokens.length > 0,\n    onPrevious: paginatePrevious,\n    hasNext: nextPaginateToken,\n    onNext: paginateNext\n  })));\n};\n\nexport default AcceptedPaymentRequest;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/components/AcceptedPaymentRequest.js"],"names":["React","useState","useEffect","useCallback","API","graphqlOperation","gql","Table","Icon","Popup","Header","Badge","Pagination","toCurrency","formatDate","config","configure","listPaymentRequest","AcceptedPaymentRequest","nextPaginateToken","setNextPaginateToken","previousPaginateTokens","setPreviousPaginateTokens","paymentRequestItems","setPaymentRequestItems","fetchAcceptedPayments","res","graphql","limit","data","listPaymentRequests","nextToken","items","console","log","error","paginateNext","paginatePrevious","previousToken","length","slice","listTransactions","filter","item","status","map","id","customerId","orderId","bonusAmount","createdAt","updatedAt"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\r\nimport { API, graphqlOperation } from 'aws-amplify'\r\nimport gql from 'graphql-tag'\r\nimport { Table, Icon, Popup, Header } from 'semantic-ui-react'\r\nimport { Badge, Pagination } from '@shopify/polaris'\r\nimport { toCurrency, formatDate } from '../utils/helper'\r\nimport config from '../aws-exports'\r\n\r\nAPI.configure(config)\r\n\r\nconst listPaymentRequest = gql`\r\n    query listPaymentRequest {\r\n        listPaymentRequests(filter: { status: { eq: APPROVED } }) {\r\n            items {\r\n                bonusAmount\r\n                createdAt\r\n                customerId\r\n                id\r\n                orderId\r\n                status\r\n                updatedAt\r\n            }\r\n            nextToken\r\n        }\r\n    }\r\n`\r\n\r\nconst AcceptedPaymentRequest = () => {\r\n    const [nextPaginateToken, setNextPaginateToken] = useState('')\r\n    const [previousPaginateTokens, setPreviousPaginateTokens] = useState([])\r\n    const [paymentRequestItems, setPaymentRequestItems] = useState([])\r\n\r\n    const fetchAcceptedPayments = useCallback(async () => {\r\n        try {\r\n            const res = await API.graphql(graphqlOperation(listPaymentRequest, { limit: 3 }))\r\n            setNextPaginateToken(res.data.listPaymentRequests.nextToken)\r\n            setPaymentRequestItems(res.data.listPaymentRequests.items)\r\n            console.log('Accepted payments', res.data)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        fetchAcceptedPayments()\r\n    }, [fetchAcceptedPayments])\r\n\r\n    const paginateNext = async () => {\r\n        setPreviousPaginateTokens([...previousPaginateTokens, nextPaginateToken])\r\n        try {\r\n            const res = await API.graphql(\r\n                graphqlOperation(listPaymentRequest, { nextToken: nextPaginateToken })\r\n            )\r\n\r\n            console.log('Data from pagination', res)\r\n            setNextPaginateToken(res.data.listPaymentRequests.nextToken)\r\n            setPaymentRequestItems(res.data.listPaymentRequests.items)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    const paginatePrevious = async () => {\r\n        const previousToken =\r\n            previousPaginateTokens[\r\n                previousPaginateTokens.length === 1 ? 0 : previousPaginateTokens.length - 2\r\n            ]\r\n        setPreviousPaginateTokens([\r\n            ...previousPaginateTokens.slice(0, previousPaginateTokens.length - 1)\r\n        ])\r\n        try {\r\n            if (previousPaginateTokens.length === 1) {\r\n                const res = await API.graphql(graphqlOperation(listPaymentRequest))\r\n                setNextPaginateToken(res.data.listPaymentRequests.nextToken)\r\n                setPaymentRequestItems(res.data.listPaymentRequests.items)\r\n            } else {\r\n                const data = await API.graphql(\r\n                    graphqlOperation(listTransactions, { nextToken: previousToken })\r\n                )\r\n                setNextPaginateToken(res.data.listPaymentRequests.nextToken)\r\n                setPaymentRequestItems(res.data.listPaymentRequests.items)\r\n            }\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    console.log('Next paginate token', nextPaginateToken)\r\n    console.log('Accepted state data', paymentRequestItems)\r\n\r\n    return (\r\n        <Table celled>\r\n            <Table.Header>\r\n                <Table.Row>\r\n                    <Table.HeaderCell>Customer Id</Table.HeaderCell>\r\n                    <Table.HeaderCell>Order Id</Table.HeaderCell>\r\n                    <Table.HeaderCell>Bonus Amount</Table.HeaderCell>\r\n                    <Table.HeaderCell>Created At</Table.HeaderCell>\r\n                    <Table.HeaderCell>Updated At</Table.HeaderCell>\r\n                    <Table.HeaderCell>Status</Table.HeaderCell>\r\n                </Table.Row>\r\n            </Table.Header>\r\n            <Table.Body>\r\n                {paymentRequestItems &&\r\n                    paymentRequestItems\r\n                        .filter((item) => item.status === 'APPROVED')\r\n                        .map((item) => (\r\n                            <Table.Row key={item.id}>\r\n                                <Table.Cell>\r\n                                    <Badge size=\"small\">{item.customerId}</Badge>\r\n                                </Table.Cell>\r\n                                <Table.Cell>\r\n                                    <Badge size=\"small\">{item.orderId}</Badge>\r\n                                </Table.Cell>\r\n                                <Table.Cell>{toCurrency(item.bonusAmount)}</Table.Cell>\r\n                                <Table.Cell>{formatDate(item.createdAt)}</Table.Cell>\r\n                                <Table.Cell>{formatDate(item.updatedAt)}</Table.Cell>\r\n                                <Table.Cell>\r\n                                    <Badge size=\"small\" progress=\"complete\" status=\"success\">\r\n                                        {item.status}\r\n                                    </Badge>\r\n                                </Table.Cell>\r\n                            </Table.Row>\r\n                        ))}\r\n            </Table.Body>\r\n            <Table.Footer>\r\n                <Pagination\r\n                    hasPrevious={previousPaginateTokens.length > 0}\r\n                    onPrevious={paginatePrevious}\r\n                    hasNext={nextPaginateToken}\r\n                    onNext={paginateNext}\r\n                />\r\n            </Table.Footer>\r\n        </Table>\r\n    )\r\n}\r\n\r\nexport default AcceptedPaymentRequest\r\n"]},"metadata":{},"sourceType":"module"}