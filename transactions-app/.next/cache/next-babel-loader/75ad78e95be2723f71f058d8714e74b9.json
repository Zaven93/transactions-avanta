{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { Auth, API, graphqlOperation } from \"aws-amplify\";\nimport gql from \"graphql-tag\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { Page, Button, Modal, Form, FormLayout, TextField, Badge, Stack } from \"@shopify/polaris\";\nimport { Table, Popup, Header, Icon } from \"semantic-ui-react\";\nimport { useConfirmSignUp, useSignUp, useCreateBranch, useListBranches } from \"../core/hooks\";\nimport ProductList from \"./ProductsList\";\nimport { formatDate } from \"../utils/helper\";\nimport config from \"../aws-exports\";\nimport BranchProducts from \"./BranchProducts\";\nimport BranchList from \"./BranchList\";\nimport AdminBranchInfo from \"./AdminBranchInfo\";\nimport { createBranch } from \"../graphql/mutation\";\nimport { listBranchs } from \"../graphql/queries\";\nAPI.configure(config);\n\nconst BranchConsole = ({\n  updateUser\n}) => {\n  const {\n    0: active,\n    1: setActive\n  } = useState(false);\n  const {\n    0: branchName,\n    1: setBranchName\n  } = useState(\"\");\n  const {\n    0: username,\n    1: setUsername\n  } = useState(\"\");\n  const {\n    0: email,\n    1: setEmail\n  } = useState(\"\");\n  const {\n    0: password,\n    1: setPassword\n  } = useState(\"\");\n  const {\n    0: code,\n    1: setCode\n  } = useState(\"\");\n  const {\n    0: formType,\n    1: setFormType\n  } = useState(\"signUp\");\n  const {\n    0: userSub,\n    1: setUserSub\n  } = useState(null);\n  const {\n    0: branches,\n    1: setBranches\n  } = useState(\"\");\n  const {\n    0: branchId,\n    1: setBranchId\n  } = useState(null);\n  const {\n    signUserUp,\n    data\n  } = useSignUp();\n  const {\n    confirmSignUp\n  } = useConfirmSignUp();\n  const {\n    createBranch,\n    data: createdBranch\n  } = useCreateBranch();\n  const {\n    data: branchesData,\n    refetch: listBranches\n  } = useListBranches();\n  const onChangeBranchName = useCallback(newValue => {\n    setBranchName(newValue);\n  }, []);\n  const onChangeUsername = useCallback(newValue => {\n    setUsername(newValue);\n  }, []);\n  const onChangePassword = useCallback(newValue => {\n    setPassword(newValue);\n  }, []);\n  const onChangeEmail = useCallback(newValue => {\n    setEmail(newValue);\n  }, []);\n  const onChangeCode = useCallback(newValue => {\n    setCode(newValue);\n  }, []);\n\n  const handleChange = () => {\n    setActive(!active);\n  };\n\n  const signUp = e => {\n    e.preventDefault();\n\n    try {\n      signUserUp({\n        username,\n        password,\n        attributes: {\n          email\n        }\n      });\n      setFormType(\"confirm\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    setUserSub(data && data.userSub);\n  }, [data]);\n\n  const confirm = async e => {\n    e.preventDefault();\n\n    try {\n      confirmSignUp({\n        username,\n        code\n      });\n      createBranch({\n        userSub,\n        username,\n        branchName\n      });\n      setFormType(\"signUp\");\n      handleChange();\n    } catch (error) {\n      console.log(error);\n    }\n  }; // const fetchBranches = async () => {\n  //   try {\n  //     listBranches()\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  // }\n  // const fetchBranches = async () => {\n  //   try {\n  //     const getBranches = await API.graphql(graphqlOperation(listBranchs))\n  //     setBranches(getBranches.data)\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  // }\n  // useEffect(() => {\n  //   fetchBranches()\n  // }, [])\n\n\n  useEffect(() => {\n    listBranches();\n  }, []);\n  useEffect(() => {\n    setBranches(branchesData.data);\n  }, [branchesData]);\n  return __jsx(React.Fragment, null, branchId && __jsx(AdminBranchInfo, {\n    setBranchId: setBranchId,\n    branchId: branchId\n  }), !branchId && __jsx(React.Fragment, null, __jsx(Stack, null, __jsx(Stack.Item, {\n    fill: true\n  }, __jsx(Button, {\n    onClick: handleChange,\n    primary: true\n  }, __jsx(Icon, {\n    name: \"code branch\"\n  }), \" Create branch\")), __jsx(Stack.Item, null, __jsx(Button, {\n    primary: true,\n    id: \"Logout\",\n    onClick: () => {\n      Auth.signOut();\n      updateUser(null);\n    }\n  }, __jsx(Icon, {\n    name: \"sign out\"\n  }), \" Logout\"))), __jsx(BranchList, {\n    setBranchId: setBranchId\n  }), __jsx(Modal, {\n    open: active,\n    onClose: handleChange,\n    title: \"Fill in Branch info\"\n  }, __jsx(Modal.Section, null, formType === \"signUp\" && __jsx(Form, {\n    onSubmit: signUp\n  }, __jsx(FormLayout, null, __jsx(TextField, {\n    value: branchName,\n    onChange: onChangeBranchName,\n    label: \"Branch Name\"\n  }), __jsx(TextField, {\n    value: username,\n    onChange: onChangeUsername,\n    label: \"Branch admin username\"\n  }), __jsx(TextField, {\n    value: email,\n    onChange: onChangeEmail,\n    label: \"Branch admin email\"\n  }), __jsx(TextField, {\n    type: \"password\",\n    value: password,\n    onChange: onChangePassword,\n    label: \"Branch admin password\"\n  }), __jsx(Button, {\n    primary: true,\n    submit: true\n  }, \"Create Branch\"))), formType === \"confirm\" && __jsx(Form, {\n    onSubmit: confirm\n  }, __jsx(FormLayout, null, __jsx(TextField, {\n    value: username,\n    onChange: onChangeUsername,\n    label: \"Branch admin username\"\n  }), __jsx(TextField, {\n    value: code,\n    onChange: onChangeCode,\n    label: \"Confirmation code\"\n  }), __jsx(Button, {\n    primary: true,\n    submit: true\n  }, \"Confirm\")))))));\n};\n\nexport default BranchConsole;","map":{"version":3,"sources":["/var/www/transactions-avanta/components/BranchConsole.js"],"names":["React","useState","useEffect","useRef","useCallback","Auth","API","graphqlOperation","gql","v4","uuidv4","Page","Button","Modal","Form","FormLayout","TextField","Badge","Stack","Table","Popup","Header","Icon","useConfirmSignUp","useSignUp","useCreateBranch","useListBranches","ProductList","formatDate","config","BranchProducts","BranchList","AdminBranchInfo","createBranch","listBranchs","configure","BranchConsole","updateUser","active","setActive","branchName","setBranchName","username","setUsername","email","setEmail","password","setPassword","code","setCode","formType","setFormType","userSub","setUserSub","branches","setBranches","branchId","setBranchId","signUserUp","data","confirmSignUp","createdBranch","branchesData","refetch","listBranches","onChangeBranchName","newValue","onChangeUsername","onChangePassword","onChangeEmail","onChangeCode","handleChange","signUp","e","preventDefault","attributes","error","console","log","confirm","signOut"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from \"react\"\nimport { Auth, API, graphqlOperation } from \"aws-amplify\"\nimport gql from \"graphql-tag\"\nimport { v4 as uuidv4 } from \"uuid\"\nimport { Page, Button, Modal, Form, FormLayout, TextField, Badge, Stack } from \"@shopify/polaris\"\nimport { Table, Popup, Header, Icon } from \"semantic-ui-react\"\nimport { useConfirmSignUp, useSignUp, useCreateBranch, useListBranches } from \"../core/hooks\"\nimport ProductList from \"./ProductsList\"\nimport { formatDate } from \"../utils/helper\"\nimport config from \"../aws-exports\"\nimport BranchProducts from \"./BranchProducts\"\nimport BranchList from \"./BranchList\"\nimport AdminBranchInfo from \"./AdminBranchInfo\"\nimport { createBranch } from \"../graphql/mutation\"\nimport { listBranchs } from \"../graphql/queries\"\n\nAPI.configure(config)\n\nconst BranchConsole = ({ updateUser }) => {\n  const [active, setActive] = useState(false)\n  const [branchName, setBranchName] = useState(\"\")\n  const [username, setUsername] = useState(\"\")\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [code, setCode] = useState(\"\")\n  const [formType, setFormType] = useState(\"signUp\")\n  const [userSub, setUserSub] = useState(null)\n  const [branches, setBranches] = useState(\"\")\n  const [branchId, setBranchId] = useState(null)\n\n  const { signUserUp, data } = useSignUp()\n  const { confirmSignUp } = useConfirmSignUp()\n  const { createBranch, data: createdBranch } = useCreateBranch()\n  const { data: branchesData, refetch: listBranches } = useListBranches()\n\n  const onChangeBranchName = useCallback((newValue) => {\n    setBranchName(newValue)\n  }, [])\n\n  const onChangeUsername = useCallback((newValue) => {\n    setUsername(newValue)\n  }, [])\n\n  const onChangePassword = useCallback((newValue) => {\n    setPassword(newValue)\n  }, [])\n\n  const onChangeEmail = useCallback((newValue) => {\n    setEmail(newValue)\n  }, [])\n\n  const onChangeCode = useCallback((newValue) => {\n    setCode(newValue)\n  }, [])\n\n  const handleChange = () => {\n    setActive(!active)\n  }\n\n  const signUp = (e) => {\n    e.preventDefault()\n    try {\n      signUserUp({ username, password, attributes: { email } })\n      setFormType(\"confirm\")\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    setUserSub(data && data.userSub)\n  }, [data])\n\n  const confirm = async (e) => {\n    e.preventDefault()\n    try {\n      confirmSignUp({ username, code })\n      createBranch({ userSub, username, branchName })\n      setFormType(\"signUp\")\n      handleChange()\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  // const fetchBranches = async () => {\n  //   try {\n  //     listBranches()\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  // }\n\n  // const fetchBranches = async () => {\n  //   try {\n  //     const getBranches = await API.graphql(graphqlOperation(listBranchs))\n  //     setBranches(getBranches.data)\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  // }\n\n  // useEffect(() => {\n  //   fetchBranches()\n  // }, [])\n\n  useEffect(() => {\n    listBranches()\n  }, [])\n\n  useEffect(() => {\n    setBranches(branchesData.data)\n  }, [branchesData])\n\n  return (\n    <>\n      {branchId && <AdminBranchInfo setBranchId={setBranchId} branchId={branchId} />}\n      {!branchId && (\n        <>\n          <Stack>\n            <Stack.Item fill>\n              <Button onClick={handleChange} primary>\n                <Icon name=\"code branch\" /> Create branch\n              </Button>\n            </Stack.Item>\n            <Stack.Item>\n              <Button\n                primary\n                id=\"Logout\"\n                onClick={() => {\n                  Auth.signOut()\n                  updateUser(null)\n                }}>\n                <Icon name=\"sign out\" /> Logout\n              </Button>\n            </Stack.Item>\n          </Stack>\n          <BranchList setBranchId={setBranchId} />\n          <Modal open={active} onClose={handleChange} title=\"Fill in Branch info\">\n            <Modal.Section>\n              {formType === \"signUp\" && (\n                <Form onSubmit={signUp}>\n                  <FormLayout>\n                    <TextField\n                      value={branchName}\n                      onChange={onChangeBranchName}\n                      label=\"Branch Name\"\n                    />\n                    <TextField\n                      value={username}\n                      onChange={onChangeUsername}\n                      label=\"Branch admin username\"\n                    />\n                    <TextField value={email} onChange={onChangeEmail} label=\"Branch admin email\" />\n                    <TextField\n                      type=\"password\"\n                      value={password}\n                      onChange={onChangePassword}\n                      label=\"Branch admin password\"\n                    />\n                    <Button primary submit>\n                      Create Branch\n                    </Button>\n                  </FormLayout>\n                </Form>\n              )}\n              {formType === \"confirm\" && (\n                <Form onSubmit={confirm}>\n                  <FormLayout>\n                    <TextField\n                      value={username}\n                      onChange={onChangeUsername}\n                      label=\"Branch admin username\"\n                    />\n                    <TextField value={code} onChange={onChangeCode} label=\"Confirmation code\" />\n                    <Button primary submit>\n                      Confirm\n                    </Button>\n                  </FormLayout>\n                </Form>\n              )}\n            </Modal.Section>\n          </Modal>\n        </>\n      )}\n    </>\n  )\n}\n\nexport default BranchConsole\n"]},"metadata":{},"sourceType":"module"}