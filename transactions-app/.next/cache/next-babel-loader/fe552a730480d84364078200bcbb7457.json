{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation CompleteOrder($id: ID!) {\\n        draftOrderComplete(id: $id, paymentPending: true) {\\n            draftOrder {\\n                customer {\\n                    id\\n                }\\n                email\\n                name\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation CreateOrder($input: DraftOrderInput!) {\\n        draftOrderCreate(input: $input) {\\n            draftOrder {\\n                id\\n                customer {\\n                    id\\n                }\\n                email\\n                lineItems(first: 10) {\\n                    edges {\\n                        node {\\n                            title\\n                            quantity\\n                            originalUnitPrice\\n                            variant {\\n                                id\\n                                price\\n                                title\\n                                product {\\n                                    tags\\n                                    title\\n                                    images(first: 5) {\\n                                        edges {\\n                                            node {\\n                                                originalSrc\\n                                            }\\n                                        }\\n                                    }\\n                                }\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query Products {\\n        products(first: 100) {\\n            edges {\\n                node {\\n                    id\\n                    title\\n                    tags\\n                    description(truncateAt: 100)\\n                    variants(first: 1) {\\n                        edges {\\n                            node {\\n                                id\\n                                price\\n                            }\\n                        }\\n                    }\\n                    images(first: 1) {\\n                        edges {\\n                            node {\\n                                originalSrc\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport axios from 'axios';\nimport gql from 'graphql-tag';\nimport { print } from 'graphql';\nimport { API } from 'aws-amplify';\nimport { ResourcePicker } from '@shopify/app-bridge/actions';\nimport { Page, Badge, Avatar, TextStyle, Card, TextContainer, Modal, Checkbox, Thumbnail, Toast, Frame, Button } from '@shopify/polaris';\nimport { CustomersMajorMonotone } from '@shopify/polaris-icons';\nimport { Table, TableCell, Icon, Popup, Header } from 'semantic-ui-react';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nAPI.configure(config);\nvar listProducts = gql(_templateObject());\nvar createDraftOrder = gql(_templateObject2());\nvar completeOrder = gql(_templateObject3());\n\nvar AcceptPayment = function AcceptPayment(_ref) {\n  _s();\n\n  var paymentRequests = _ref.paymentRequests,\n      products = _ref.products;\n\n  var _useState = useState(paymentRequests.listPaymentRequests.items),\n      paymentRequestItems = _useState[0],\n      setPaymentRequestItems = _useState[1];\n\n  var _useState2 = useState(products),\n      productItems = _useState2[0],\n      setProductItems = _useState2[1];\n\n  var _useState3 = useState(false),\n      openPicker = _useState3[0],\n      setOpenPicker = _useState3[1];\n\n  var _useState4 = useState(false),\n      active = _useState4[0],\n      setActive = _useState4[1];\n\n  var _useState5 = useState([]),\n      rowId = _useState5[0],\n      setRowId = _useState5[1];\n\n  var _useState6 = useState({\n    customerId: '',\n    bonusAmount: '',\n    products: []\n  }),\n      state = _useState6[0],\n      setState = _useState6[1];\n\n  var _useState7 = useState(null),\n      searchValue = _useState7[0],\n      setSearchValue = _useState7[1];\n\n  var _useState8 = useState(false),\n      activeToast = _useState8[0],\n      setActiveToast = _useState8[1];\n\n  var handleSearchInput = useCallback(function (newValue) {\n    return setSearchValue(newValue);\n  }, []);\n  var handleChange = useCallback(function () {\n    return setActive(!active);\n  }, [active]);\n\n  var createOrder = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _products;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return axios({\n                url: '/',\n                method: 'post',\n                headers: {\n                  'Content-Type': 'application/json',\n                  'X-Shopify-Access-Token': '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'\n                },\n                data: {\n                  query: print(listProducts)\n                }\n              });\n\n            case 3:\n              _products = _context.sent;\n              console.log('products from axios', _products.data); // const orderRes = await axios({\n              //     url: 'https://transactions-avanta.myshopify.com/admin/api/2020-07/graphql.json',\n              //     method: 'post',\n              //     headers: {\n              //         'Content-Type': 'application/json',\n              //         'X-Shopify-Access-Token': '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'\n              //     },\n              //     data: {\n              //         query: print(createDraftOrder),\n              //         variables: {\n              //             input: {\n              //                 customerId: `gid://shopify/Customer/${state.customerId}`,\n              //                 taxExempt: true,\n              //                 note: `${toCurrency(\n              //                     state.bonusAmount\n              //                 )} of bonus were spent on these products `,\n              //                 lineItems: state.products.map((product) => ({\n              //                     quantity: 1,\n              //                     originalUnitPrice: Number(\n              //                         product.node.variants.edges[0].node.price\n              //                     ),\n              //                     variantId: product.node.variants.edges[0].node.id\n              //                 }))\n              //             }\n              //         }\n              //     }\n              // })\n              // const order = orderRes.data\n              // console.log('Order from createOrder function', order)\n              // const sendCompleteOrder = await axios({\n              //     url: 'https://transactions-avanta.myshopify.com/admin/api/2020-07/graphql.json',\n              //     method: 'post',\n              //     headers: {\n              //         'Content-Type': 'application/json',\n              //         'X-Shopify-Access-Token': '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'\n              //     },\n              //     data: {\n              //         query: print(completeOrder),\n              //         variables: {\n              //             id: order.data.draftOrderCreate.draftOrder.id\n              //         }\n              //     }\n              // })\n              // console.log('Order created Zav', sendCompleteOrder.data)\n\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 7]]);\n    }));\n\n    return function createOrder() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var toastMarkup = activeToast ? __jsx(Toast, {\n    content: \"Order has been successfully created\",\n    onDismiss: function onDismiss() {\n      return setActiveToast(false);\n    }\n  }) : null;\n  console.log('Payment requests from getStaticProps', paymentRequests);\n  console.log('products data', products);\n  console.log('Payment request items', paymentRequestItems);\n  console.log('Products from modal', state.products);\n  console.log('Customer id', state.customerId);\n  return __jsx(Page, {\n    title: \"Payment Request\"\n  }, __jsx(Button, {\n    onClick: createOrder\n  }, \"Get Products\"), __jsx(Table, {\n    selectable: true,\n    celled: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Customer Id\"), __jsx(Table.HeaderCell, null, \"Order Id\"), __jsx(Table.HeaderCell, null, \"Bonus Amount\"), __jsx(Table.HeaderCell, null, \"Created At\"), __jsx(Table.HeaderCell, null, \"Updated At\"), __jsx(Table.HeaderCell, null, \"Status\"), __jsx(Table.HeaderCell, null, \"Action\"))), __jsx(Table.Body, null, paymentRequestItems && paymentRequestItems.map(function (item) {\n    return __jsx(Table.Row, {\n      key: item.id\n    }, __jsx(Table.Cell, null, __jsx(Badge, {\n      size: \"small\"\n    }, item.customerId)), __jsx(Table.Cell, null, __jsx(Badge, {\n      size: \"small\"\n    }, item.orderId)), __jsx(Table.Cell, null, toCurrency(item.bonusAmount)), __jsx(Table.Cell, null, formatDate(item.createdAt)), __jsx(Table.Cell, null, formatDate(item.updatedAt)), __jsx(Table.Cell, null, __jsx(Badge, {\n      size: \"small\",\n      status: item.status === 'PENDING' ? 'attention' : item.status === 'APPROVED' ? 'success' : 'critical'\n    }, item.status)), __jsx(Table.Cell, {\n      className: \"actions-cell\"\n    }, __jsx(Popup, {\n      content: \"Approve payment\",\n      trigger: __jsx(Icon, {\n        className: \"accept\",\n        name: \"check\",\n        onClick: function onClick() {\n          setState(_objectSpread(_objectSpread({}, state), {}, {\n            customerId: item.customerId,\n            bonusAmount: item.bonusAmount\n          }));\n          handleChange();\n        }\n      })\n    }), __jsx(Popup, {\n      content: \"Decline payment\",\n      trigger: __jsx(Icon, {\n        className: \"decline\",\n        name: \"remove\"\n      })\n    })));\n  }))), __jsx(\"div\", {\n    style: {\n      height: '500px'\n    }\n  }, __jsx(Modal, {\n    open: active,\n    onClose: handleChange,\n    title: \"Choose products\",\n    primaryAction: {\n      content: 'Proceed',\n      onAction: function onAction() {\n        createOrder();\n        handleChange();\n        setActiveToast(true);\n      }\n    }\n  }, __jsx(Modal.Section, null, __jsx(Table, {\n    celled: true,\n    striped: true,\n    selectable: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Products\"), __jsx(Table.HeaderCell, null, \"Description\"), __jsx(Table.HeaderCell, {\n    textAlign: \"center\"\n  }, \"Price\"))), __jsx(Table.Body, null, productItems && productItems.filter(function (product) {\n    if (searchValue == null) {\n      return product;\n    } else if (product.node.title.toLowerCase().includes(searchValue.toLowerCase())) {\n      return product;\n    }\n  }).map(function (product) {\n    return __jsx(Table.Row, {\n      key: product.node.id,\n      onClick: function onClick() {\n        if (rowId.includes(product.node.id)) {\n          setRowId(rowId.filter(function (id) {\n            return id !== product.node.id;\n          }));\n          setState({\n            products: state.products.filter(function (filteredProduct) {\n              return filteredProduct.node.id !== product.node.id;\n            })\n          });\n        } else {\n          setRowId([].concat(_toConsumableArray(rowId), [product.node.id]));\n          setState({\n            products: [].concat(_toConsumableArray(state.products), [product])\n          });\n        }\n      }\n    }, __jsx(Table.Cell, null, __jsx(Header, {\n      as: \"h4\",\n      image: true,\n      className: \"product-header\"\n    }, __jsx(Checkbox, {\n      checked: rowId.includes(product.node.id) && true\n    }), __jsx(Thumbnail, {\n      source: product.node.images.edges[0] && product.node.images.edges[0].node.originalSrc,\n      size: \"small\",\n      alt: \"\"\n    }), __jsx(Header.Content, null, product.node.title))), __jsx(Table.Cell, null, __jsx(TextStyle, {\n      variation: \"subdued\"\n    }, product.node.description)), __jsx(Table.Cell, {\n      textAlign: \"center\"\n    }, __jsx(TextStyle, {\n      variation: \"subdued\"\n    }, product.node.variants.edges[0] && toCurrency(product.node.variants.edges[0].node.price))));\n  })), __jsx(Table.Footer, {\n    fullWidth: true\n  }, __jsx(Table.Row, null)))))), toastMarkup);\n};\n\n_s(AcceptPayment, \"ZmTsEm08nGDd7KTPkviGZwa3fzg=\");\n\n_c = AcceptPayment;\nexport var __N_SSG = true;\nexport default AcceptPayment;\n\nvar _c;\n\n$RefreshReg$(_c, \"AcceptPayment\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/pages/accept-payment.js"],"names":["React","useState","useCallback","useEffect","axios","gql","print","API","ResourcePicker","Page","Badge","Avatar","TextStyle","Card","TextContainer","Modal","Checkbox","Thumbnail","Toast","Frame","Button","CustomersMajorMonotone","Table","TableCell","Icon","Popup","Header","toCurrency","formatDate","config","configure","listProducts","createDraftOrder","completeOrder","AcceptPayment","paymentRequests","products","listPaymentRequests","items","paymentRequestItems","setPaymentRequestItems","productItems","setProductItems","openPicker","setOpenPicker","active","setActive","rowId","setRowId","customerId","bonusAmount","state","setState","searchValue","setSearchValue","activeToast","setActiveToast","handleSearchInput","newValue","handleChange","createOrder","url","method","headers","data","query","console","log","toastMarkup","map","item","id","orderId","createdAt","updatedAt","status","height","content","onAction","filter","product","node","title","toLowerCase","includes","filteredProduct","images","edges","originalSrc","description","variants","price"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport gql from 'graphql-tag'\r\nimport { print } from 'graphql'\r\nimport { API, graphqlOperation } from 'aws-amplify'\r\nimport { ResourcePicker } from '@shopify/app-bridge/actions'\r\nimport {\r\n    Page,\r\n    Badge,\r\n    Avatar,\r\n    TextStyle,\r\n    Card,\r\n    TextContainer,\r\n    Modal,\r\n    Checkbox,\r\n    Thumbnail,\r\n    Toast,\r\n    Frame,\r\n    Button\r\n} from '@shopify/polaris'\r\nimport { CustomersMajorMonotone } from '@shopify/polaris-icons'\r\nimport { Table, TableCell, Icon, Popup, Header } from 'semantic-ui-react'\r\nimport { toCurrency, formatDate } from '../utils/helper'\r\nimport config from '../aws-exports'\r\n\r\nAPI.configure(config)\r\n\r\nconst listPaymentRequest = gql`\r\n    query listPaymentRequest {\r\n        listPaymentRequests {\r\n            items {\r\n                bonusAmount\r\n                createdAt\r\n                customerId\r\n                id\r\n                orderId\r\n                status\r\n                updatedAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst listProducts = gql`\r\n    query Products {\r\n        products(first: 100) {\r\n            edges {\r\n                node {\r\n                    id\r\n                    title\r\n                    tags\r\n                    description(truncateAt: 100)\r\n                    variants(first: 1) {\r\n                        edges {\r\n                            node {\r\n                                id\r\n                                price\r\n                            }\r\n                        }\r\n                    }\r\n                    images(first: 1) {\r\n                        edges {\r\n                            node {\r\n                                originalSrc\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst createDraftOrder = gql`\r\n    mutation CreateOrder($input: DraftOrderInput!) {\r\n        draftOrderCreate(input: $input) {\r\n            draftOrder {\r\n                id\r\n                customer {\r\n                    id\r\n                }\r\n                email\r\n                lineItems(first: 10) {\r\n                    edges {\r\n                        node {\r\n                            title\r\n                            quantity\r\n                            originalUnitPrice\r\n                            variant {\r\n                                id\r\n                                price\r\n                                title\r\n                                product {\r\n                                    tags\r\n                                    title\r\n                                    images(first: 5) {\r\n                                        edges {\r\n                                            node {\r\n                                                originalSrc\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst completeOrder = gql`\r\n    mutation CompleteOrder($id: ID!) {\r\n        draftOrderComplete(id: $id, paymentPending: true) {\r\n            draftOrder {\r\n                customer {\r\n                    id\r\n                }\r\n                email\r\n                name\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst AcceptPayment = ({ paymentRequests, products }) => {\r\n    const [paymentRequestItems, setPaymentRequestItems] = useState(\r\n        paymentRequests.listPaymentRequests.items\r\n    )\r\n    const [productItems, setProductItems] = useState(products)\r\n    const [openPicker, setOpenPicker] = useState(false)\r\n    const [active, setActive] = useState(false)\r\n    const [rowId, setRowId] = useState([])\r\n    const [state, setState] = useState({\r\n        customerId: '',\r\n        bonusAmount: '',\r\n        products: []\r\n    })\r\n    const [searchValue, setSearchValue] = useState(null)\r\n    const [activeToast, setActiveToast] = useState(false)\r\n    const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\r\n\r\n    const handleChange = useCallback(() => setActive(!active), [active])\r\n\r\n    const createOrder = async () => {\r\n        try {\r\n            const products = await axios({\r\n                url: '/',\r\n                method: 'post',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'X-Shopify-Access-Token': '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'\r\n                },\r\n                data: {\r\n                    query: print(listProducts)\r\n                }\r\n            })\r\n\r\n            console.log('products from axios', products.data)\r\n            // const orderRes = await axios({\r\n            //     url: 'https://transactions-avanta.myshopify.com/admin/api/2020-07/graphql.json',\r\n            //     method: 'post',\r\n            //     headers: {\r\n            //         'Content-Type': 'application/json',\r\n            //         'X-Shopify-Access-Token': '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'\r\n            //     },\r\n            //     data: {\r\n            //         query: print(createDraftOrder),\r\n            //         variables: {\r\n            //             input: {\r\n            //                 customerId: `gid://shopify/Customer/${state.customerId}`,\r\n            //                 taxExempt: true,\r\n            //                 note: `${toCurrency(\r\n            //                     state.bonusAmount\r\n            //                 )} of bonus were spent on these products `,\r\n            //                 lineItems: state.products.map((product) => ({\r\n            //                     quantity: 1,\r\n            //                     originalUnitPrice: Number(\r\n            //                         product.node.variants.edges[0].node.price\r\n            //                     ),\r\n            //                     variantId: product.node.variants.edges[0].node.id\r\n            //                 }))\r\n            //             }\r\n            //         }\r\n            //     }\r\n            // })\r\n\r\n            // const order = orderRes.data\r\n\r\n            // console.log('Order from createOrder function', order)\r\n\r\n            // const sendCompleteOrder = await axios({\r\n            //     url: 'https://transactions-avanta.myshopify.com/admin/api/2020-07/graphql.json',\r\n            //     method: 'post',\r\n            //     headers: {\r\n            //         'Content-Type': 'application/json',\r\n            //         'X-Shopify-Access-Token': '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'\r\n            //     },\r\n            //     data: {\r\n            //         query: print(completeOrder),\r\n            //         variables: {\r\n            //             id: order.data.draftOrderCreate.draftOrder.id\r\n            //         }\r\n            //     }\r\n            // })\r\n\r\n            // console.log('Order created Zav', sendCompleteOrder.data)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    const toastMarkup = activeToast ? (\r\n        <Toast\r\n            content=\"Order has been successfully created\"\r\n            onDismiss={() => setActiveToast(false)}\r\n        />\r\n    ) : null\r\n\r\n    console.log('Payment requests from getStaticProps', paymentRequests)\r\n    console.log('products data', products)\r\n    console.log('Payment request items', paymentRequestItems)\r\n    console.log('Products from modal', state.products)\r\n    console.log('Customer id', state.customerId)\r\n    return (\r\n        <Page title=\"Payment Request\">\r\n            <Button onClick={createOrder}>Get Products</Button>\r\n            <Table selectable celled>\r\n                <Table.Header>\r\n                    <Table.Row>\r\n                        <Table.HeaderCell>Customer Id</Table.HeaderCell>\r\n                        <Table.HeaderCell>Order Id</Table.HeaderCell>\r\n                        <Table.HeaderCell>Bonus Amount</Table.HeaderCell>\r\n                        <Table.HeaderCell>Created At</Table.HeaderCell>\r\n                        <Table.HeaderCell>Updated At</Table.HeaderCell>\r\n                        <Table.HeaderCell>Status</Table.HeaderCell>\r\n                        <Table.HeaderCell>Action</Table.HeaderCell>\r\n                    </Table.Row>\r\n                </Table.Header>\r\n                <Table.Body>\r\n                    {paymentRequestItems &&\r\n                        paymentRequestItems.map((item) => (\r\n                            <Table.Row key={item.id}>\r\n                                <Table.Cell>\r\n                                    <Badge size=\"small\">{item.customerId}</Badge>\r\n                                </Table.Cell>\r\n                                <Table.Cell>\r\n                                    <Badge size=\"small\">{item.orderId}</Badge>\r\n                                </Table.Cell>\r\n                                <Table.Cell>{toCurrency(item.bonusAmount)}</Table.Cell>\r\n                                <Table.Cell>{formatDate(item.createdAt)}</Table.Cell>\r\n                                <Table.Cell>{formatDate(item.updatedAt)}</Table.Cell>\r\n                                <Table.Cell>\r\n                                    <Badge\r\n                                        size=\"small\"\r\n                                        status={\r\n                                            item.status === 'PENDING'\r\n                                                ? 'attention'\r\n                                                : item.status === 'APPROVED'\r\n                                                ? 'success'\r\n                                                : 'critical'\r\n                                        }>\r\n                                        {item.status}\r\n                                    </Badge>\r\n                                </Table.Cell>\r\n                                <Table.Cell className=\"actions-cell\">\r\n                                    <Popup\r\n                                        content=\"Approve payment\"\r\n                                        trigger={\r\n                                            <Icon\r\n                                                className=\"accept\"\r\n                                                name=\"check\"\r\n                                                onClick={() => {\r\n                                                    setState({\r\n                                                        ...state,\r\n                                                        customerId: item.customerId,\r\n                                                        bonusAmount: item.bonusAmount\r\n                                                    })\r\n                                                    handleChange()\r\n                                                }}\r\n                                            />\r\n                                        }\r\n                                    />\r\n                                    <Popup\r\n                                        content=\"Decline payment\"\r\n                                        trigger={<Icon className=\"decline\" name=\"remove\" />}\r\n                                    />\r\n                                </Table.Cell>\r\n                            </Table.Row>\r\n                        ))}\r\n                </Table.Body>\r\n            </Table>\r\n            <div style={{ height: '500px' }}>\r\n                <Modal\r\n                    open={active}\r\n                    onClose={handleChange}\r\n                    title=\"Choose products\"\r\n                    primaryAction={{\r\n                        content: 'Proceed',\r\n                        onAction: () => {\r\n                            createOrder()\r\n                            handleChange()\r\n                            setActiveToast(true)\r\n                        }\r\n                    }}>\r\n                    <Modal.Section>\r\n                        <Table celled striped selectable>\r\n                            <Table.Header>\r\n                                <Table.Row>\r\n                                    <Table.HeaderCell>Products</Table.HeaderCell>\r\n                                    <Table.HeaderCell>Description</Table.HeaderCell>\r\n                                    <Table.HeaderCell textAlign=\"center\">Price</Table.HeaderCell>\r\n                                </Table.Row>\r\n                            </Table.Header>\r\n                            <Table.Body>\r\n                                {productItems &&\r\n                                    productItems\r\n                                        .filter((product) => {\r\n                                            if (searchValue == null) {\r\n                                                return product\r\n                                            } else if (\r\n                                                product.node.title\r\n                                                    .toLowerCase()\r\n                                                    .includes(searchValue.toLowerCase())\r\n                                            ) {\r\n                                                return product\r\n                                            }\r\n                                        })\r\n                                        .map((product) => (\r\n                                            <Table.Row\r\n                                                key={product.node.id}\r\n                                                onClick={() => {\r\n                                                    if (rowId.includes(product.node.id)) {\r\n                                                        setRowId(\r\n                                                            rowId.filter(\r\n                                                                (id) => id !== product.node.id\r\n                                                            )\r\n                                                        )\r\n                                                        setState({\r\n                                                            products: state.products.filter(\r\n                                                                (filteredProduct) =>\r\n                                                                    filteredProduct.node.id !==\r\n                                                                    product.node.id\r\n                                                            )\r\n                                                        })\r\n                                                    } else {\r\n                                                        setRowId([...rowId, product.node.id])\r\n                                                        setState({\r\n                                                            products: [...state.products, product]\r\n                                                        })\r\n                                                    }\r\n                                                }}>\r\n                                                <Table.Cell>\r\n                                                    <Header\r\n                                                        as=\"h4\"\r\n                                                        image\r\n                                                        className=\"product-header\">\r\n                                                        <Checkbox\r\n                                                            checked={\r\n                                                                rowId.includes(product.node.id) &&\r\n                                                                true\r\n                                                            }\r\n                                                        />\r\n                                                        <Thumbnail\r\n                                                            source={\r\n                                                                product.node.images.edges[0] &&\r\n                                                                product.node.images.edges[0].node\r\n                                                                    .originalSrc\r\n                                                            }\r\n                                                            size=\"small\"\r\n                                                            alt=\"\"\r\n                                                        />\r\n                                                        <Header.Content>\r\n                                                            {product.node.title}\r\n                                                        </Header.Content>\r\n                                                    </Header>\r\n                                                </Table.Cell>\r\n                                                <Table.Cell>\r\n                                                    <TextStyle variation=\"subdued\">\r\n                                                        {product.node.description}\r\n                                                    </TextStyle>\r\n                                                </Table.Cell>\r\n                                                <Table.Cell textAlign=\"center\">\r\n                                                    <TextStyle variation=\"subdued\">\r\n                                                        {product.node.variants.edges[0] &&\r\n                                                            toCurrency(\r\n                                                                product.node.variants.edges[0].node\r\n                                                                    .price\r\n                                                            )}\r\n                                                    </TextStyle>\r\n                                                </Table.Cell>\r\n                                            </Table.Row>\r\n                                        ))}\r\n                            </Table.Body>\r\n                            <Table.Footer fullWidth>\r\n                                <Table.Row></Table.Row>\r\n                            </Table.Footer>\r\n                        </Table>\r\n                    </Modal.Section>\r\n                </Modal>\r\n            </div>\r\n            {toastMarkup}\r\n        </Page>\r\n    )\r\n}\r\n\r\nexport async function getStaticProps() {\r\n    let result\r\n    let products\r\n    try {\r\n        result = await API.graphql(graphqlOperation(listPaymentRequest))\r\n        products = await axios({\r\n            url: 'https://transactions-avanta.myshopify.com/admin/api/2020-07/graphql.json',\r\n            method: 'post',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'X-Shopify-Access-Token': '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'\r\n            },\r\n            data: {\r\n                query: print(listProducts)\r\n            }\r\n        })\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n\r\n    if (result.errors || products.errors) {\r\n        console.warn('Failed to fetch payment requests.', result.errors)\r\n        return { props: { paymentRequests: [], products: [] } }\r\n    }\r\n    if (result.data !== null && products.data !== null) {\r\n        return {\r\n            props: { paymentRequests: result.data, products: products.data.data.products.edges }\r\n        }\r\n    }\r\n}\r\n\r\nexport default AcceptPayment\r\n"]},"metadata":{},"sourceType":"module"}