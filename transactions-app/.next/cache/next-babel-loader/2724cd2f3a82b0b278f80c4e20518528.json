{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { ClientApplication } from '@shopify/app-bridge';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport gql from 'graphql-tag';\nimport config from '../../aws-exports';\nAPI.configure(config);\nconst getBranchById = gql`\n    query getBranch($id: ID) {\n        getBranch(id: $id) {\n            branchName\n            adminId\n            id\n            branchProducts {\n                items {\n                    branchId\n                    createdAt\n                    id\n                    productId\n                    tags\n                    updatedAt\n                }\n            }\n        }\n    }\n`;\n\nconst Branch = props => {\n  const router = useRouter();\n  const {\n    0: branchId,\n    1: setBranchId\n  } = useState(router.asPath.split('/')[2].split('?')[0]);\n  console.log('Router from branch', router.asPath.split('/')[2].split('?')[0]);\n  console.log('Type of branch Id', typeof router.asPath.split('/')[2].split('?')[0]);\n  console.log('Props', props);\n\n  const fetchBranch = async () => {\n    console.log('Branch id', branchId);\n\n    try {\n      const branch = await API.graphql(graphqlOperation(getBranchById, {\n        id: branchId\n      }));\n      console.log('Fetched branch', branch);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    if (typeof branchId == '[branchId]') {\n      return;\n    }\n\n    fetchBranch();\n  }, [branchId]);\n  return __jsx(\"div\", null, \"Branch\");\n};\n\nexport default Branch;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/pages/branch/[branchId].js"],"names":["React","useState","useEffect","useRouter","ClientApplication","API","graphqlOperation","gql","config","configure","getBranchById","Branch","props","router","branchId","setBranchId","asPath","split","console","log","fetchBranch","branch","graphql","id","error"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,SAASC,GAAT,EAAcC,gBAAd,QAAsC,aAAtC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEAH,GAAG,CAACI,SAAJ,CAAcD,MAAd;AAEA,MAAME,aAAa,GAAGH,GAAI;;;;;;;;;;;;;;;;;;CAA1B;;AAoBA,MAAMI,MAAM,GAAIC,KAAD,IAAW;AACtB,QAAMC,MAAM,GAAGV,SAAS,EAAxB;AACA,QAAM;AAAA,OAACW,QAAD;AAAA,OAAWC;AAAX,MAA0Bd,QAAQ,CAACY,MAAM,CAACG,MAAP,CAAcC,KAAd,CAAoB,GAApB,EAAyB,CAAzB,EAA4BA,KAA5B,CAAkC,GAAlC,EAAuC,CAAvC,CAAD,CAAxC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCN,MAAM,CAACG,MAAP,CAAcC,KAAd,CAAoB,GAApB,EAAyB,CAAzB,EAA4BA,KAA5B,CAAkC,GAAlC,EAAuC,CAAvC,CAAlC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiC,OAAON,MAAM,CAACG,MAAP,CAAcC,KAAd,CAAoB,GAApB,EAAyB,CAAzB,EAA4BA,KAA5B,CAAkC,GAAlC,EAAuC,CAAvC,CAAxC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBP,KAArB;;AAEA,QAAMQ,WAAW,GAAG,YAAY;AAC5BF,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBL,QAAzB;;AACA,QAAI;AACA,YAAMO,MAAM,GAAG,MAAMhB,GAAG,CAACiB,OAAJ,CAAYhB,gBAAgB,CAACI,aAAD,EAAgB;AAAEa,QAAAA,EAAE,EAAET;AAAN,OAAhB,CAA5B,CAArB;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BE,MAA9B;AACH,KAHD,CAGE,OAAOG,KAAP,EAAc;AACZN,MAAAA,OAAO,CAACC,GAAR,CAAYK,KAAZ;AACH;AACJ,GARD;;AASAtB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,OAAOY,QAAP,IAAmB,YAAvB,EAAqC;AACjC;AACH;;AACDM,IAAAA,WAAW;AACd,GALQ,EAKN,CAACN,QAAD,CALM,CAAT;AAMA,SAAO,4BAAP;AACH,CAvBD;;AAyBA,eAAeH,MAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { ClientApplication } from '@shopify/app-bridge'\r\nimport { API, graphqlOperation } from 'aws-amplify'\r\nimport gql from 'graphql-tag'\r\nimport config from '../../aws-exports'\r\n\r\nAPI.configure(config)\r\n\r\nconst getBranchById = gql`\r\n    query getBranch($id: ID) {\r\n        getBranch(id: $id) {\r\n            branchName\r\n            adminId\r\n            id\r\n            branchProducts {\r\n                items {\r\n                    branchId\r\n                    createdAt\r\n                    id\r\n                    productId\r\n                    tags\r\n                    updatedAt\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst Branch = (props) => {\r\n    const router = useRouter()\r\n    const [branchId, setBranchId] = useState(router.asPath.split('/')[2].split('?')[0])\r\n    console.log('Router from branch', router.asPath.split('/')[2].split('?')[0])\r\n    console.log('Type of branch Id', typeof router.asPath.split('/')[2].split('?')[0])\r\n    console.log('Props', props)\r\n\r\n    const fetchBranch = async () => {\r\n        console.log('Branch id', branchId)\r\n        try {\r\n            const branch = await API.graphql(graphqlOperation(getBranchById, { id: branchId }))\r\n            console.log('Fetched branch', branch)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (typeof branchId == '[branchId]') {\r\n            return\r\n        }\r\n        fetchBranch()\r\n    }, [branchId])\r\n    return <div>Branch</div>\r\n}\r\n\r\nexport default Branch\r\n"]},"metadata":{},"sourceType":"module"}