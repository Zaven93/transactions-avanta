{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport axios from 'axios';\nimport gql from 'graphql-tag';\nimport { print } from 'graphql';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { ResourcePicker } from '@shopify/app-bridge/actions';\nimport { Page, Badge, Avatar, TextStyle, Card, TextContainer, Modal, Checkbox, Thumbnail, Toast, Frame, Button, Tabs } from '@shopify/polaris';\nimport { CustomersMajorMonotone } from '@shopify/polaris-icons';\nimport { Table, Icon, Popup, Header } from 'semantic-ui-react';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nimport ProductList from '../components/ProductsList';\nimport AcceptedPaymentRequest from '../components/AcceptedPaymentRequest';\nimport PendingPaymentRequest from '../components/PendingPaymentRequest';\nimport DeclinedPaymentRequest from '../components/DeclinedPaymentRequest';\nAPI.configure(config);\nconst listPaymentRequest = gql`\n    query listPaymentRequest {\n        listPaymentRequests {\n            items {\n                bonusAmount\n                createdAt\n                customerId\n                id\n                orderId\n                status\n                updatedAt\n            }\n        }\n    }\n`;\nconst listProducts = gql`\n    query Products {\n        products(first: 100) {\n            edges {\n                node {\n                    id\n                    title\n                    tags\n                    description(truncateAt: 100)\n                    variants(first: 1) {\n                        edges {\n                            node {\n                                id\n                                price\n                            }\n                        }\n                    }\n                    images(first: 1) {\n                        edges {\n                            node {\n                                originalSrc\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n`;\nconst createDraftOrder = gql`\n    mutation CreateOrder($input: DraftOrderInput!) {\n        draftOrderCreate(input: $input) {\n            draftOrder {\n                id\n                customer {\n                    id\n                }\n                email\n                lineItems(first: 10) {\n                    edges {\n                        node {\n                            title\n                            quantity\n                            originalUnitPrice\n                            variant {\n                                id\n                                price\n                                title\n                                product {\n                                    tags\n                                    title\n                                    images(first: 5) {\n                                        edges {\n                                            node {\n                                                originalSrc\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n`;\nconst completeOrder = gql`\n    mutation CompleteOrder($id: ID!) {\n        draftOrderComplete(id: $id, paymentPending: true) {\n            draftOrder {\n                customer {\n                    id\n                }\n                email\n                name\n            }\n        }\n    }\n`;\n\nconst AcceptPayment = ({\n  paymentRequests\n}) => {\n  const {\n    0: paymentRequestItems,\n    1: setPaymentRequestItems\n  } = useState(paymentRequests.listPaymentRequests.items);\n  const {\n    0: openPicker,\n    1: setOpenPicker\n  } = useState(false);\n  const {\n    0: active,\n    1: setActive\n  } = useState(false);\n  const {\n    0: rowId,\n    1: setRowId\n  } = useState([]);\n  const {\n    0: paymentRequestId,\n    1: setPaymentRequestId\n  } = useState('');\n  const {\n    0: searchValue,\n    1: setSearchValue\n  } = useState(null);\n  const {\n    0: activeToast,\n    1: setActiveToast\n  } = useState(false);\n  const {\n    0: selected,\n    1: setSelected\n  } = useState(0);\n  const handleTabChange = useCallback(selectedTabIndex => setSelected(selectedTabIndex), []);\n  const handleSearchInput = useCallback(newValue => setSearchValue(newValue), []);\n  const handleChange = useCallback(() => setActive(!active), [active]);\n  const tabs = [{\n    id: 'pending-payments',\n    content: 'Pending Payment Requests',\n    accessibilityLabel: 'Pending Requests',\n    panelID: 'pending-payments-content'\n  }, {\n    id: 'accepted-payments',\n    content: 'Accepted Payment Requests',\n    accessibilityLabel: 'Accepted Request',\n    panelID: 'accepted-payments-content'\n  }, {\n    id: 'declined-payments',\n    content: 'Declined Payment Requests',\n    accessibilityLabel: 'Declined Requests',\n    panelID: 'declined-payments-content'\n  }];\n  const toastMarkup = activeToast ? __jsx(Toast, {\n    content: \"Order has been successfully created\",\n    onDismiss: () => setActiveToast(false)\n  }) : null;\n  console.log('Payment id', paymentRequestId);\n\n  const renderPaymentRequest = selected => {\n    switch (selected) {\n      case 0:\n        return __jsx(PendingPaymentRequest, {\n          paymentRequestItems: paymentRequestItems\n        });\n\n      case 1:\n        return __jsx(AcceptedPaymentRequest, {\n          paymentRequestItems: paymentRequestItems\n        });\n\n      case 2:\n        return __jsx(DeclinedPaymentRequest, {\n          paymentRequestItems: paymentRequestItems\n        });\n\n      default:\n        return;\n    }\n  };\n\n  return __jsx(Frame, null, __jsx(Page, {\n    title: \"Payment Request\"\n  }, __jsx(Card, null, __jsx(Tabs, {\n    tabs: tabs,\n    selected: selected,\n    onSelect: handleTabChange\n  }, __jsx(Card.Section, {\n    title: tabs[selected].content\n  }, renderPaymentRequest(selected)))), __jsx(ProductList, {\n    paymentRequestId: paymentRequestId,\n    active: active,\n    handleChange: handleChange\n  }), toastMarkup));\n};\n\nexport async function getStaticProps() {\n  let result;\n\n  try {\n    result = await API.graphql(graphqlOperation(listPaymentRequest));\n  } catch (error) {\n    console.log(error);\n  }\n\n  if (result.errors) {\n    console.warn('Failed to fetch payment requests.', result.errors);\n    return {\n      props: {\n        paymentRequests: []\n      }\n    };\n  }\n\n  if (result.data !== null) {\n    return {\n      props: {\n        paymentRequests: result.data\n      }\n    };\n  }\n}\nexport default AcceptPayment;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/pages/accept-payment.js"],"names":["React","useState","useCallback","useEffect","axios","gql","print","API","graphqlOperation","ResourcePicker","Page","Badge","Avatar","TextStyle","Card","TextContainer","Modal","Checkbox","Thumbnail","Toast","Frame","Button","Tabs","CustomersMajorMonotone","Table","Icon","Popup","Header","toCurrency","formatDate","config","ProductList","AcceptedPaymentRequest","PendingPaymentRequest","DeclinedPaymentRequest","configure","listPaymentRequest","listProducts","createDraftOrder","completeOrder","AcceptPayment","paymentRequests","paymentRequestItems","setPaymentRequestItems","listPaymentRequests","items","openPicker","setOpenPicker","active","setActive","rowId","setRowId","paymentRequestId","setPaymentRequestId","searchValue","setSearchValue","activeToast","setActiveToast","selected","setSelected","handleTabChange","selectedTabIndex","handleSearchInput","newValue","handleChange","tabs","id","content","accessibilityLabel","panelID","toastMarkup","console","log","renderPaymentRequest","getStaticProps","result","graphql","error","errors","warn","props","data"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport gql from 'graphql-tag'\r\nimport { print } from 'graphql'\r\nimport { API, graphqlOperation } from 'aws-amplify'\r\nimport { ResourcePicker } from '@shopify/app-bridge/actions'\r\nimport {\r\n    Page,\r\n    Badge,\r\n    Avatar,\r\n    TextStyle,\r\n    Card,\r\n    TextContainer,\r\n    Modal,\r\n    Checkbox,\r\n    Thumbnail,\r\n    Toast,\r\n    Frame,\r\n    Button,\r\n    Tabs\r\n} from '@shopify/polaris'\r\nimport { CustomersMajorMonotone } from '@shopify/polaris-icons'\r\nimport { Table, Icon, Popup, Header } from 'semantic-ui-react'\r\nimport { toCurrency, formatDate } from '../utils/helper'\r\nimport config from '../aws-exports'\r\nimport ProductList from '../components/ProductsList'\r\nimport AcceptedPaymentRequest from '../components/AcceptedPaymentRequest'\r\nimport PendingPaymentRequest from '../components/PendingPaymentRequest'\r\nimport DeclinedPaymentRequest from '../components/DeclinedPaymentRequest'\r\n\r\nAPI.configure(config)\r\n\r\nconst listPaymentRequest = gql`\r\n    query listPaymentRequest {\r\n        listPaymentRequests {\r\n            items {\r\n                bonusAmount\r\n                createdAt\r\n                customerId\r\n                id\r\n                orderId\r\n                status\r\n                updatedAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst listProducts = gql`\r\n    query Products {\r\n        products(first: 100) {\r\n            edges {\r\n                node {\r\n                    id\r\n                    title\r\n                    tags\r\n                    description(truncateAt: 100)\r\n                    variants(first: 1) {\r\n                        edges {\r\n                            node {\r\n                                id\r\n                                price\r\n                            }\r\n                        }\r\n                    }\r\n                    images(first: 1) {\r\n                        edges {\r\n                            node {\r\n                                originalSrc\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst createDraftOrder = gql`\r\n    mutation CreateOrder($input: DraftOrderInput!) {\r\n        draftOrderCreate(input: $input) {\r\n            draftOrder {\r\n                id\r\n                customer {\r\n                    id\r\n                }\r\n                email\r\n                lineItems(first: 10) {\r\n                    edges {\r\n                        node {\r\n                            title\r\n                            quantity\r\n                            originalUnitPrice\r\n                            variant {\r\n                                id\r\n                                price\r\n                                title\r\n                                product {\r\n                                    tags\r\n                                    title\r\n                                    images(first: 5) {\r\n                                        edges {\r\n                                            node {\r\n                                                originalSrc\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst completeOrder = gql`\r\n    mutation CompleteOrder($id: ID!) {\r\n        draftOrderComplete(id: $id, paymentPending: true) {\r\n            draftOrder {\r\n                customer {\r\n                    id\r\n                }\r\n                email\r\n                name\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst AcceptPayment = ({ paymentRequests }) => {\r\n    const [paymentRequestItems, setPaymentRequestItems] = useState(\r\n        paymentRequests.listPaymentRequests.items\r\n    )\r\n    const [openPicker, setOpenPicker] = useState(false)\r\n    const [active, setActive] = useState(false)\r\n    const [rowId, setRowId] = useState([])\r\n    const [paymentRequestId, setPaymentRequestId] = useState('')\r\n    const [searchValue, setSearchValue] = useState(null)\r\n    const [activeToast, setActiveToast] = useState(false)\r\n    const [selected, setSelected] = useState(0)\r\n\r\n    const handleTabChange = useCallback((selectedTabIndex) => setSelected(selectedTabIndex), [])\r\n\r\n    const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\r\n\r\n    const handleChange = useCallback(() => setActive(!active), [active])\r\n\r\n    const tabs = [\r\n        {\r\n            id: 'pending-payments',\r\n            content: 'Pending Payment Requests',\r\n            accessibilityLabel: 'Pending Requests',\r\n            panelID: 'pending-payments-content'\r\n        },\r\n        {\r\n            id: 'accepted-payments',\r\n            content: 'Accepted Payment Requests',\r\n            accessibilityLabel: 'Accepted Request',\r\n            panelID: 'accepted-payments-content'\r\n        },\r\n        {\r\n            id: 'declined-payments',\r\n            content: 'Declined Payment Requests',\r\n            accessibilityLabel: 'Declined Requests',\r\n            panelID: 'declined-payments-content'\r\n        }\r\n    ]\r\n\r\n    const toastMarkup = activeToast ? (\r\n        <Toast\r\n            content=\"Order has been successfully created\"\r\n            onDismiss={() => setActiveToast(false)}\r\n        />\r\n    ) : null\r\n\r\n    console.log('Payment id', paymentRequestId)\r\n\r\n    const renderPaymentRequest = (selected) => {\r\n        switch (selected) {\r\n            case 0:\r\n                return <PendingPaymentRequest paymentRequestItems={paymentRequestItems} />\r\n            case 1:\r\n                return <AcceptedPaymentRequest paymentRequestItems={paymentRequestItems} />\r\n            case 2:\r\n                return <DeclinedPaymentRequest paymentRequestItems={paymentRequestItems} />\r\n            default:\r\n                return\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Frame>\r\n            <Page title=\"Payment Request\">\r\n                <Card>\r\n                    <Tabs tabs={tabs} selected={selected} onSelect={handleTabChange}>\r\n                        <Card.Section title={tabs[selected].content}>\r\n                            {renderPaymentRequest(selected)}\r\n                        </Card.Section>\r\n                    </Tabs>\r\n                </Card>\r\n                {/* <AcceptedPaymentRequest paymentRequestItems={paymentRequestItems} />\r\n                <PendingPaymentRequest paymentRequestItems={paymentRequestItems} />\r\n                <DeclinedPaymentRequest paymentRequestItems={paymentRequestItems} /> */}\r\n                {/* <Table selectable celled>\r\n                    <Table.Header>\r\n                        <Table.Row>\r\n                            <Table.HeaderCell>Customer Id</Table.HeaderCell>\r\n                            <Table.HeaderCell>Order Id</Table.HeaderCell>\r\n                            <Table.HeaderCell>Bonus Amount</Table.HeaderCell>\r\n                            <Table.HeaderCell>Created At</Table.HeaderCell>\r\n                            <Table.HeaderCell>Updated At</Table.HeaderCell>\r\n                            <Table.HeaderCell>Status</Table.HeaderCell>\r\n                            <Table.HeaderCell>Action</Table.HeaderCell>\r\n                        </Table.Row>\r\n                    </Table.Header>\r\n                    <Table.Body>\r\n                        {paymentRequestItems &&\r\n                            paymentRequestItems.map((item) => (\r\n                                <Table.Row key={item.id}>\r\n                                    <Table.Cell>\r\n                                        <Badge size=\"small\">{item.customerId}</Badge>\r\n                                    </Table.Cell>\r\n                                    <Table.Cell>\r\n                                        <Badge size=\"small\">{item.orderId}</Badge>\r\n                                    </Table.Cell>\r\n                                    <Table.Cell>{toCurrency(item.bonusAmount)}</Table.Cell>\r\n                                    <Table.Cell>{formatDate(item.createdAt)}</Table.Cell>\r\n                                    <Table.Cell>{formatDate(item.updatedAt)}</Table.Cell>\r\n                                    <Table.Cell>\r\n                                        <Badge\r\n                                            size=\"small\"\r\n                                            progress={\r\n                                                item.status === 'PENDING'\r\n                                                    ? 'partiallyComplete'\r\n                                                    : item.status === 'APPROVED'\r\n                                                    ? 'complete'\r\n                                                    : 'incomplete'\r\n                                            }\r\n                                            status={\r\n                                                item.status === 'PENDING'\r\n                                                    ? 'attention'\r\n                                                    : item.status === 'APPROVED'\r\n                                                    ? 'success'\r\n                                                    : 'critical'\r\n                                            }>\r\n                                            {item.status}\r\n                                        </Badge>\r\n                                    </Table.Cell>\r\n                                    <Table.Cell className=\"actions-cell\">\r\n                                        <Popup\r\n                                            content=\"Approve payment\"\r\n                                            trigger={\r\n                                                <Icon\r\n                                                    className=\"accept\"\r\n                                                    name=\"check\"\r\n                                                    onClick={() => {\r\n                                                        setPaymentRequestId(item.id)\r\n                                                        handleChange()\r\n                                                    }}\r\n                                                />\r\n                                            }\r\n                                        />\r\n                                        <Popup\r\n                                            content=\"Decline payment\"\r\n                                            trigger={<Icon className=\"decline\" name=\"remove\" />}\r\n                                        />\r\n                                    </Table.Cell>\r\n                                </Table.Row>\r\n                            ))}\r\n                    </Table.Body>\r\n                </Table> */}\r\n                <ProductList\r\n                    paymentRequestId={paymentRequestId}\r\n                    active={active}\r\n                    handleChange={handleChange}\r\n                />\r\n                {toastMarkup}\r\n            </Page>\r\n        </Frame>\r\n    )\r\n}\r\n\r\nexport async function getStaticProps() {\r\n    let result\r\n    try {\r\n        result = await API.graphql(graphqlOperation(listPaymentRequest))\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n\r\n    if (result.errors) {\r\n        console.warn('Failed to fetch payment requests.', result.errors)\r\n        return { props: { paymentRequests: [] } }\r\n    }\r\n    if (result.data !== null) {\r\n        return {\r\n            props: { paymentRequests: result.data }\r\n        }\r\n    }\r\n}\r\n\r\nexport default AcceptPayment\r\n"]},"metadata":{},"sourceType":"module"}