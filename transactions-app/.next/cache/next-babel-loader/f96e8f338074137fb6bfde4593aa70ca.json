{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport gql from 'graphql-tag';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { Table, Icon, Popup, Header } from 'semantic-ui-react';\nimport { Badge } from '@shopify/polaris';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport ProductList from './ProductsList';\nimport config from '../aws-exports';\nAPI.configure(config);\nconst updatePaymentRequest = gql`\n    mutation updatePaymentRequest($input: UpdatePaymentRequestInput!) {\n        updatePaymentRequest(input: $input) {\n            bonusAmount\n            customerId\n            id\n            orderId\n            status\n            products {\n                originalUnitPrice\n                quantity\n                variantId\n            }\n            createdAt\n            updatedAt\n        }\n    }\n`;\nconst listPaymentRequest = gql`\n    query listPaymentRequest {\n        listPaymentRequests(filter: { status: { eq: PENDING } }) {\n            items {\n                bonusAmount\n                createdAt\n                customerId\n                id\n                orderId\n                status\n                updatedAt\n            }\n            nextToken\n        }\n    }\n`;\nconst paymentSubscription = gql`\n    subscription paymentRequest {\n        onCreatePaymentRequest {\n            bonusAmount\n            createdAt\n            customerId\n            id\n            orderId\n            status\n            updatedAt\n        }\n    }\n`;\n\nconst PendingPaymentRequest = ({\n  createUpdatePaymentSubscription\n}) => {\n  const {\n    0: paymentRequestId,\n    1: setPaymentRequestId\n  } = useState('');\n  const {\n    0: active,\n    1: setActive\n  } = useState(false);\n  const {\n    0: paymentRequestItems,\n    1: setPaymentRequestItems\n  } = useState([]);\n  const handleChange = useCallback(() => setActive(!active), [active]);\n  console.log('Payment request id for decline', paymentRequestId);\n  const fetchAcceptedPayments = useCallback(async () => {\n    try {\n      const res = await API.graphql(graphqlOperation(listPaymentRequest, {\n        limit: 3\n      }));\n      setPaymentRequestItems(res.data.listPaymentRequests.items);\n      console.log('Accepted payments', res.data);\n    } catch (error) {\n      console.log(error);\n    }\n  }, [createUpdatePaymentSubscription]);\n  useEffect(() => {\n    fetchAcceptedPayments();\n  }, [fetchAcceptedPayments]);\n\n  const declinePayment = async paymentId => {\n    try {\n      const paymentResponse = await API.graphql(graphqlOperation(updatePaymentRequest, {\n        input: {\n          id: paymentId,\n          status: 'DECLINED'\n        }\n      }));\n      console.log('Declined Payment data from lambda', paymentResponse.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Table, {\n    selectable: true,\n    celled: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Customer Id\"), __jsx(Table.HeaderCell, null, \"Bonus Amount\"), __jsx(Table.HeaderCell, null, \"Created At\"), __jsx(Table.HeaderCell, null, \"Updated At\"), __jsx(Table.HeaderCell, null, \"Status\"), __jsx(Table.HeaderCell, null, \"Action\"))), __jsx(Table.Body, null, paymentRequestItems && paymentRequestItems.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt)).map(item => __jsx(Table.Row, {\n    key: item.id\n  }, __jsx(Table.Cell, null, __jsx(Badge, {\n    size: \"small\"\n  }, item.customerId)), __jsx(Table.Cell, null, toCurrency(item.bonusAmount)), __jsx(Table.Cell, null, formatDate(item.createdAt)), __jsx(Table.Cell, null, formatDate(item.updatedAt)), __jsx(Table.Cell, null, __jsx(Badge, {\n    size: \"small\",\n    progress: \"partiallyComplete\",\n    status: \"attention\"\n  }, item.status)), __jsx(Table.Cell, {\n    className: \"actions-cell\"\n  }, __jsx(Popup, {\n    content: \"Approve payment\",\n    trigger: __jsx(Icon, {\n      className: \"accept\",\n      name: \"check\",\n      onClick: () => {\n        setPaymentRequestId(item.id);\n        handleChange();\n      }\n    })\n  }), __jsx(Popup, {\n    content: \"Decline payment\",\n    trigger: __jsx(Icon, {\n      className: \"decline\",\n      name: \"remove\",\n      onClick: async () => {\n        declinePayment(item.id);\n      }\n    })\n  })))))), __jsx(ProductList, {\n    paymentRequestId: paymentRequestId,\n    active: active,\n    handleChange: handleChange\n  }));\n};\n\nexport default PendingPaymentRequest;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/components/PendingPaymentRequest.js"],"names":["React","useState","useCallback","useEffect","gql","API","graphqlOperation","Table","Icon","Popup","Header","Badge","toCurrency","formatDate","ProductList","config","configure","updatePaymentRequest","listPaymentRequest","paymentSubscription","PendingPaymentRequest","createUpdatePaymentSubscription","paymentRequestId","setPaymentRequestId","active","setActive","paymentRequestItems","setPaymentRequestItems","handleChange","console","log","fetchAcceptedPayments","res","graphql","limit","data","listPaymentRequests","items","error","declinePayment","paymentId","paymentResponse","input","id","status","sort","a","b","Date","updatedAt","map","item","customerId","bonusAmount","createdAt"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport gql from 'graphql-tag'\r\nimport { API, graphqlOperation } from 'aws-amplify'\r\nimport { Table, Icon, Popup, Header } from 'semantic-ui-react'\r\nimport { Badge } from '@shopify/polaris'\r\nimport { toCurrency, formatDate } from '../utils/helper'\r\nimport ProductList from './ProductsList'\r\nimport config from '../aws-exports'\r\n\r\nAPI.configure(config)\r\n\r\nconst updatePaymentRequest = gql`\r\n    mutation updatePaymentRequest($input: UpdatePaymentRequestInput!) {\r\n        updatePaymentRequest(input: $input) {\r\n            bonusAmount\r\n            customerId\r\n            id\r\n            orderId\r\n            status\r\n            products {\r\n                originalUnitPrice\r\n                quantity\r\n                variantId\r\n            }\r\n            createdAt\r\n            updatedAt\r\n        }\r\n    }\r\n`\r\n\r\nconst listPaymentRequest = gql`\r\n    query listPaymentRequest {\r\n        listPaymentRequests(filter: { status: { eq: PENDING } }) {\r\n            items {\r\n                bonusAmount\r\n                createdAt\r\n                customerId\r\n                id\r\n                orderId\r\n                status\r\n                updatedAt\r\n            }\r\n            nextToken\r\n        }\r\n    }\r\n`\r\n\r\nconst paymentSubscription = gql`\r\n    subscription paymentRequest {\r\n        onCreatePaymentRequest {\r\n            bonusAmount\r\n            createdAt\r\n            customerId\r\n            id\r\n            orderId\r\n            status\r\n            updatedAt\r\n        }\r\n    }\r\n`\r\n\r\nconst PendingPaymentRequest = ({ createUpdatePaymentSubscription }) => {\r\n    const [paymentRequestId, setPaymentRequestId] = useState('')\r\n    const [active, setActive] = useState(false)\r\n    const [paymentRequestItems, setPaymentRequestItems] = useState([])\r\n\r\n    const handleChange = useCallback(() => setActive(!active), [active])\r\n\r\n    console.log('Payment request id for decline', paymentRequestId)\r\n\r\n    const fetchAcceptedPayments = useCallback(async () => {\r\n        try {\r\n            const res = await API.graphql(graphqlOperation(listPaymentRequest, { limit: 3 }))\r\n            setPaymentRequestItems(res.data.listPaymentRequests.items)\r\n            console.log('Accepted payments', res.data)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }, [createUpdatePaymentSubscription])\r\n\r\n    useEffect(() => {\r\n        fetchAcceptedPayments()\r\n    }, [fetchAcceptedPayments])\r\n\r\n    const declinePayment = async (paymentId) => {\r\n        try {\r\n            const paymentResponse = await API.graphql(\r\n                graphqlOperation(updatePaymentRequest, {\r\n                    input: {\r\n                        id: paymentId,\r\n                        status: 'DECLINED'\r\n                    }\r\n                })\r\n            )\r\n\r\n            console.log('Declined Payment data from lambda', paymentResponse.data)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <Table selectable celled>\r\n                <Table.Header>\r\n                    <Table.Row>\r\n                        <Table.HeaderCell>Customer Id</Table.HeaderCell>\r\n                        <Table.HeaderCell>Bonus Amount</Table.HeaderCell>\r\n                        <Table.HeaderCell>Created At</Table.HeaderCell>\r\n                        <Table.HeaderCell>Updated At</Table.HeaderCell>\r\n                        <Table.HeaderCell>Status</Table.HeaderCell>\r\n                        <Table.HeaderCell>Action</Table.HeaderCell>\r\n                    </Table.Row>\r\n                </Table.Header>\r\n                <Table.Body>\r\n                    {paymentRequestItems &&\r\n                        paymentRequestItems\r\n                            .sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt))\r\n                            .map((item) => (\r\n                                <Table.Row key={item.id}>\r\n                                    <Table.Cell>\r\n                                        <Badge size=\"small\">{item.customerId}</Badge>\r\n                                    </Table.Cell>\r\n                                    <Table.Cell>{toCurrency(item.bonusAmount)}</Table.Cell>\r\n                                    <Table.Cell>{formatDate(item.createdAt)}</Table.Cell>\r\n                                    <Table.Cell>{formatDate(item.updatedAt)}</Table.Cell>\r\n                                    <Table.Cell>\r\n                                        <Badge\r\n                                            size=\"small\"\r\n                                            progress=\"partiallyComplete\"\r\n                                            status=\"attention\">\r\n                                            {item.status}\r\n                                        </Badge>\r\n                                    </Table.Cell>\r\n                                    <Table.Cell className=\"actions-cell\">\r\n                                        <Popup\r\n                                            content=\"Approve payment\"\r\n                                            trigger={\r\n                                                <Icon\r\n                                                    className=\"accept\"\r\n                                                    name=\"check\"\r\n                                                    onClick={() => {\r\n                                                        setPaymentRequestId(item.id)\r\n                                                        handleChange()\r\n                                                    }}\r\n                                                />\r\n                                            }\r\n                                        />\r\n                                        <Popup\r\n                                            content=\"Decline payment\"\r\n                                            trigger={\r\n                                                <Icon\r\n                                                    className=\"decline\"\r\n                                                    name=\"remove\"\r\n                                                    onClick={async () => {\r\n                                                        declinePayment(item.id)\r\n                                                    }}\r\n                                                />\r\n                                            }\r\n                                        />\r\n                                    </Table.Cell>\r\n                                </Table.Row>\r\n                            ))}\r\n                </Table.Body>\r\n            </Table>\r\n            <ProductList\r\n                paymentRequestId={paymentRequestId}\r\n                active={active}\r\n                handleChange={handleChange}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PendingPaymentRequest\r\n"]},"metadata":{},"sourceType":"module"}