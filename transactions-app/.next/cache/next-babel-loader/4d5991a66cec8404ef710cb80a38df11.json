{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useCallback } from 'react';\nimport createApp from '@shopify/app-bridge';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { TitleBar } from '@shopify/app-bridge-react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport withApollo from '../lib/withApollo';\nimport { Card, DataTable, Button, Page, TextField, ChoiceList, Filters, Icon } from '@shopify/polaris';\nimport { SearchMajorMonotone } from '@shopify/polaris-icons';\nimport { toCurrency } from '../utils/helper';\nconst listTransactions = gql`\n    query listTransactions {\n        listTransactions {\n            items {\n                id\n                totalPrice\n                totalBonusAmount\n                currency\n                products {\n                    id\n                    title\n                    bonusPercentage\n                    priceAmount\n                    priceCurrency\n                    image\n                }\n                customer {\n                    id\n                    firstName\n                    lastName\n                    phone\n                    email\n                }\n                createdAt\n            }\n        }\n    }\n`;\n\nconst Index = () => {\n  const {\n    loading,\n    data,\n    error\n  } = useQuery(listTransactions);\n  const {\n    0: searchValue,\n    1: setSearchValue\n  } = useState(null);\n  const {\n    0: paginationData,\n    1: setPaginationData\n  } = useState({\n    offset: 0,\n    pagesCount: null\n  });\n  const handleSearchInput = useCallback(newValue => setSearchValue(newValue), []);\n  console.log('Searching value', searchValue);\n  const app = createApp({\n    apiKey: '3b01063bac3031d13101100ef3e44fd5',\n    shopOrigin: 'transactions-avanta.myshopify.com'\n  });\n  const redirect = Redirect.create(app);\n\n  if (loading) {\n    return __jsx(\"div\", null, \"Loading...\");\n  }\n\n  if (error) {\n    console.log('Some error occured Zaven', error);\n  }\n\n  const formatDate = rowDate => {\n    const date = new Date(rowDate);\n    const year = new Intl.DateTimeFormat('en', {\n      year: 'numeric'\n    }).format(date);\n    const month = new Intl.DateTimeFormat('en', {\n      month: 'short'\n    }).format(date);\n    const day = new Intl.DateTimeFormat('en', {\n      day: '2-digit'\n    }).format(date);\n    return `${day}-${month}-${year}`;\n  };\n\n  console.log('Data Zaven jan', data);\n  console.log('Page count', Math.ceil(data.listTransactions.items.length / 7));\n\n  const paginateNext = () => {\n    setPaginationData(_objectSpread(_objectSpread({}, paginationData), {}, {\n      pagesCount: Math.ceil(data.listTransactions.items.length / 7)\n    }));\n    console.log('pages count before pagination', paginationData.pagesCount);\n    setPaginationData(_objectSpread(_objectSpread({}, paginationData), {}, {\n      pagesCount: paginationData.pagesCount - 1\n    }));\n    console.log('pages count after pagination', paginationData.pagesCount);\n    data.listTransactions.items.slice;\n  };\n\n  const rows = data.listTransactions.items.filter(transaction => {\n    if (searchValue == null) {\n      return transaction;\n    } else if (transaction.customer[0].phone.toLowerCase().includes(searchValue.toLowerCase())) {\n      return transaction;\n    }\n  }).map(transaction => [__jsx(Button, {\n    primary: true,\n    onClick: () => redirect.dispatch(Redirect.Action.ADMIN_PATH, {\n      path: `/customers/${transaction.customer[0].id}`,\n      newContext: true\n    })\n  }, transaction.customer[0].phone), toCurrency(Number(transaction.totalPrice)), toCurrency(Number(transaction.totalBonusAmount)), formatDate(transaction.createdAt)]);\n  console.log('Rows', rows);\n  console.log('Here is transaction data Zvo', data);\n  return __jsx(Page, {\n    title: \"Transactions\"\n  }, __jsx(TextField, {\n    label: \"Search Product\",\n    value: searchValue,\n    onChange: handleSearchInput,\n    prefix: __jsx(Icon, {\n      source: SearchMajorMonotone\n    }),\n    placeholder: \"Search by Order ID or by customer email\"\n  }), __jsx(Button, {\n    primary: true,\n    onClick: () => redirect.dispatch(Redirect.Action.REMOTE, {\n      url: 'https://dev.d3ivgpkzuz6hkr.amplifyapp.com',\n      newContext: true\n    })\n  }, \"Create transaction\"), __jsx(Card, null, __jsx(DataTable, {\n    columnContentTypes: ['text', 'text', 'text', 'text'],\n    headings: ['Customer phone number', 'TotalPrice', 'TotalBonusAmount', 'CreatedAt'],\n    rows: rows\n  })));\n};\n\nexport default withApollo(Index);","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/pages/index.js"],"names":["React","useState","useCallback","createApp","Redirect","TitleBar","gql","useQuery","withApollo","Card","DataTable","Button","Page","TextField","ChoiceList","Filters","Icon","SearchMajorMonotone","toCurrency","listTransactions","Index","loading","data","error","searchValue","setSearchValue","paginationData","setPaginationData","offset","pagesCount","handleSearchInput","newValue","console","log","app","apiKey","shopOrigin","redirect","create","formatDate","rowDate","date","Date","year","Intl","DateTimeFormat","format","month","day","Math","ceil","items","length","paginateNext","slice","rows","filter","transaction","customer","phone","toLowerCase","includes","map","dispatch","Action","ADMIN_PATH","path","id","newContext","Number","totalPrice","totalBonusAmount","createdAt","REMOTE","url"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react'\r\nimport createApp from '@shopify/app-bridge'\r\nimport { Redirect } from '@shopify/app-bridge/actions'\r\nimport { TitleBar } from '@shopify/app-bridge-react'\r\nimport gql from 'graphql-tag'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport withApollo from '../lib/withApollo'\r\nimport {\r\n    Card,\r\n    DataTable,\r\n    Button,\r\n    Page,\r\n    TextField,\r\n    ChoiceList,\r\n    Filters,\r\n    Icon\r\n} from '@shopify/polaris'\r\nimport { SearchMajorMonotone } from '@shopify/polaris-icons'\r\nimport { toCurrency } from '../utils/helper'\r\n\r\nconst listTransactions = gql`\r\n    query listTransactions {\r\n        listTransactions {\r\n            items {\r\n                id\r\n                totalPrice\r\n                totalBonusAmount\r\n                currency\r\n                products {\r\n                    id\r\n                    title\r\n                    bonusPercentage\r\n                    priceAmount\r\n                    priceCurrency\r\n                    image\r\n                }\r\n                customer {\r\n                    id\r\n                    firstName\r\n                    lastName\r\n                    phone\r\n                    email\r\n                }\r\n                createdAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst Index = () => {\r\n    const { loading, data, error } = useQuery(listTransactions)\r\n    const [searchValue, setSearchValue] = useState(null)\r\n    const [paginationData, setPaginationData] = useState({\r\n        offset: 0,\r\n        pagesCount: null\r\n    })\r\n    const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\r\n\r\n    console.log('Searching value', searchValue)\r\n\r\n    const app = createApp({\r\n        apiKey: '3b01063bac3031d13101100ef3e44fd5',\r\n        shopOrigin: 'transactions-avanta.myshopify.com'\r\n    })\r\n\r\n    const redirect = Redirect.create(app)\r\n    if (loading) {\r\n        return <div>Loading...</div>\r\n    }\r\n\r\n    if (error) {\r\n        console.log('Some error occured Zaven', error)\r\n    }\r\n\r\n    const formatDate = (rowDate) => {\r\n        const date = new Date(rowDate)\r\n        const year = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(date)\r\n        const month = new Intl.DateTimeFormat('en', { month: 'short' }).format(date)\r\n        const day = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(date)\r\n\r\n        return `${day}-${month}-${year}`\r\n    }\r\n\r\n    console.log('Data Zaven jan', data)\r\n\r\n    console.log('Page count', Math.ceil(data.listTransactions.items.length / 7))\r\n\r\n    const paginateNext = () => {\r\n        setPaginationData({\r\n            ...paginationData,\r\n            pagesCount: Math.ceil(data.listTransactions.items.length / 7)\r\n        })\r\n        console.log('pages count before pagination', paginationData.pagesCount)\r\n\r\n        setPaginationData({ ...paginationData, pagesCount: paginationData.pagesCount - 1 })\r\n        console.log('pages count after pagination', paginationData.pagesCount)\r\n\r\n        data.listTransactions.items.slice\r\n    }\r\n\r\n    const rows = data.listTransactions.items\r\n        .filter((transaction) => {\r\n            if (searchValue == null) {\r\n                return transaction\r\n            } else if (\r\n                transaction.customer[0].phone.toLowerCase().includes(searchValue.toLowerCase())\r\n            ) {\r\n                return transaction\r\n            }\r\n        })\r\n        .map((transaction) => [\r\n            <Button\r\n                primary\r\n                onClick={() =>\r\n                    redirect.dispatch(Redirect.Action.ADMIN_PATH, {\r\n                        path: `/customers/${transaction.customer[0].id}`,\r\n                        newContext: true\r\n                    })\r\n                }>\r\n                {transaction.customer[0].phone}\r\n            </Button>,\r\n            toCurrency(Number(transaction.totalPrice)),\r\n            toCurrency(Number(transaction.totalBonusAmount)),\r\n            formatDate(transaction.createdAt)\r\n        ])\r\n\r\n    console.log('Rows', rows)\r\n    console.log('Here is transaction data Zvo', data)\r\n    return (\r\n        <Page title=\"Transactions\">\r\n            <TextField\r\n                label=\"Search Product\"\r\n                value={searchValue}\r\n                onChange={handleSearchInput}\r\n                prefix={<Icon source={SearchMajorMonotone} />}\r\n                placeholder=\"Search by Order ID or by customer email\"\r\n            />\r\n            <Button\r\n                primary\r\n                onClick={() =>\r\n                    redirect.dispatch(Redirect.Action.REMOTE, {\r\n                        url: 'https://dev.d3ivgpkzuz6hkr.amplifyapp.com',\r\n                        newContext: true\r\n                    })\r\n                }>\r\n                Create transaction\r\n            </Button>\r\n            <Card>\r\n                <DataTable\r\n                    columnContentTypes={['text', 'text', 'text', 'text']}\r\n                    headings={[\r\n                        'Customer phone number',\r\n                        'TotalPrice',\r\n                        'TotalBonusAmount',\r\n                        'CreatedAt'\r\n                    ]}\r\n                    rows={rows}\r\n                />\r\n            </Card>\r\n        </Page>\r\n    )\r\n}\r\n\r\nexport default withApollo(Index)\r\n"]},"metadata":{},"sourceType":"module"}