{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { API } from 'aws-amplify';\nimport { ResourcePicker } from '@shopify/app-bridge/actions';\nimport { Page, Layout, Badge } from '@shopify/polaris';\nimport { CustomersMajorMonotone } from '@shopify/polaris-icons';\nimport { Table, TableCell, Icon, Popup } from 'semantic-ui-react';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nAPI.configure(config);\n\nvar AcceptPayment = /*#__PURE__*/function (_React$Component) {\n  _inherits(AcceptPayment, _React$Component);\n\n  var _super = _createSuper(AcceptPayment);\n\n  function AcceptPayment() {\n    var _this;\n\n    _classCallCheck(this, AcceptPayment);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      paymentRequestItems: _this.props.paymentRequests.listPaymentRequests.items,\n      open: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSelection\", function (resources) {\n      _this.setState({\n        open: false\n      });\n\n      console.log(resources);\n    });\n\n    return _this;\n  }\n\n  _createClass(AcceptPayment, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var paymentRequestItems = this.state.paymentRequestItems;\n      console.log('Payment request data from class component', this.state.paymentRequestItems);\n      return __jsx(Page, {\n        title: \"Payment Request\"\n      }, __jsx(ResourcePicker, {\n        resourceType: \"Product\",\n        showVariants: false,\n        open: this.state.open,\n        onSelection: function onSelection(resources) {\n          return _this2.handleSelection(resources);\n        },\n        onCancel: function onCancel() {\n          return _this2.setState({\n            open: false\n          });\n        }\n      }), __jsx(Table, {\n        selectable: true,\n        celled: true\n      }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Customer Id\"), __jsx(Table.HeaderCell, null, \"Order Id\"), __jsx(Table.HeaderCell, null, \"Bonus Amount\"), __jsx(Table.HeaderCell, null, \"Created At\"), __jsx(Table.HeaderCell, null, \"Updated At\"), __jsx(Table.HeaderCell, null, \"Status\"), __jsx(Table.HeaderCell, null, \"Action\"))), __jsx(Table.Body, null, paymentRequestItems && paymentRequestItems.map(function (item) {\n        return __jsx(Table.Row, {\n          key: item.id\n        }, __jsx(Table.Cell, null, __jsx(Badge, {\n          size: \"small\"\n        }, item.customerId)), __jsx(Table.Cell, null, __jsx(Badge, {\n          size: \"small\"\n        }, item.orderId)), __jsx(Table.Cell, null, toCurrency(item.bonusAmount)), __jsx(Table.Cell, null, formatDate(item.createdAt)), __jsx(Table.Cell, null, formatDate(item.updatedAt)), __jsx(Table.Cell, null, __jsx(Badge, {\n          size: \"small\",\n          status: item.status === 'PENDING' ? 'attention' : item.status === 'APPROVED' ? 'success' : 'critical'\n        }, item.status)), __jsx(Table.Cell, {\n          className: \"actions-cell\"\n        }, __jsx(Popup, {\n          content: \"Approve payment\",\n          trigger: __jsx(Icon, {\n            className: \"accept\",\n            name: \"check\",\n            onClick: function onClick() {\n              return _this2.setState({\n                openPicker: true\n              });\n            }\n          })\n        }), __jsx(Popup, {\n          content: \"Decline payment\",\n          trigger: __jsx(Icon, {\n            className: \"decline\" // color={hoveredItemId === item.id ? 'red' : ''}\n            // className={\n            //     hoveredItemId === item.id ? 'decline-hovered' : ''\n            // }\n            ,\n            name: \"remove\" // onMouseEnter={() => setHoveredItemId(item.id)}\n            // onMouseLeave={() => setHoveredItemId(null)}\n\n          })\n        })));\n      }))));\n    }\n  }]);\n\n  return AcceptPayment;\n}(React.Component);\n\nexport var __N_SSG = true;\nexport default AcceptPayment;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/pages/accept-payment.js"],"names":["API","ResourcePicker","Page","Layout","Badge","CustomersMajorMonotone","Table","TableCell","Icon","Popup","toCurrency","formatDate","config","configure","AcceptPayment","paymentRequestItems","props","paymentRequests","listPaymentRequests","items","open","resources","setState","console","log","state","handleSelection","map","item","id","customerId","orderId","bonusAmount","createdAt","updatedAt","status","openPicker","React","Component"],"mappings":"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","sourcesContent":["import { API, graphqlOperation } from 'aws-amplify'\r\nimport gql from 'graphql-tag'\r\nimport { ResourcePicker } from '@shopify/app-bridge/actions'\r\nimport { Page, Layout, Badge } from '@shopify/polaris'\r\nimport { CustomersMajorMonotone } from '@shopify/polaris-icons'\r\nimport { Table, TableCell, Icon, Popup } from 'semantic-ui-react'\r\nimport { toCurrency, formatDate } from '../utils/helper'\r\nimport config from '../aws-exports'\r\n\r\nAPI.configure(config)\r\n\r\nconst listPaymentRequest = gql`\r\n    query listPaymentRequest {\r\n        listPaymentRequests {\r\n            items {\r\n                bonusAmount\r\n                createdAt\r\n                customerId\r\n                id\r\n                orderId\r\n                status\r\n                updatedAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nclass AcceptPayment extends React.Component {\r\n    state = {\r\n        paymentRequestItems: this.props.paymentRequests.listPaymentRequests.items,\r\n        open: false\r\n    }\r\n    render() {\r\n        const { paymentRequestItems } = this.state\r\n        console.log('Payment request data from class component', this.state.paymentRequestItems)\r\n        return (\r\n            <Page title=\"Payment Request\">\r\n                <ResourcePicker\r\n                    resourceType=\"Product\"\r\n                    showVariants={false}\r\n                    open={this.state.open}\r\n                    onSelection={(resources) => this.handleSelection(resources)}\r\n                    onCancel={() => this.setState({ open: false })}\r\n                />\r\n                <Table selectable celled>\r\n                    <Table.Header>\r\n                        <Table.Row>\r\n                            <Table.HeaderCell>Customer Id</Table.HeaderCell>\r\n                            <Table.HeaderCell>Order Id</Table.HeaderCell>\r\n                            <Table.HeaderCell>Bonus Amount</Table.HeaderCell>\r\n                            <Table.HeaderCell>Created At</Table.HeaderCell>\r\n                            <Table.HeaderCell>Updated At</Table.HeaderCell>\r\n                            <Table.HeaderCell>Status</Table.HeaderCell>\r\n                            <Table.HeaderCell>Action</Table.HeaderCell>\r\n                        </Table.Row>\r\n                    </Table.Header>\r\n                    <Table.Body>\r\n                        {paymentRequestItems &&\r\n                            paymentRequestItems.map((item) => (\r\n                                <Table.Row key={item.id}>\r\n                                    <Table.Cell>\r\n                                        <Badge size=\"small\">{item.customerId}</Badge>\r\n                                    </Table.Cell>\r\n                                    <Table.Cell>\r\n                                        <Badge size=\"small\">{item.orderId}</Badge>\r\n                                    </Table.Cell>\r\n                                    <Table.Cell>{toCurrency(item.bonusAmount)}</Table.Cell>\r\n                                    <Table.Cell>{formatDate(item.createdAt)}</Table.Cell>\r\n                                    <Table.Cell>{formatDate(item.updatedAt)}</Table.Cell>\r\n                                    <Table.Cell>\r\n                                        <Badge\r\n                                            size=\"small\"\r\n                                            status={\r\n                                                item.status === 'PENDING'\r\n                                                    ? 'attention'\r\n                                                    : item.status === 'APPROVED'\r\n                                                    ? 'success'\r\n                                                    : 'critical'\r\n                                            }>\r\n                                            {item.status}\r\n                                        </Badge>\r\n                                    </Table.Cell>\r\n                                    <Table.Cell className=\"actions-cell\">\r\n                                        <Popup\r\n                                            content=\"Approve payment\"\r\n                                            trigger={\r\n                                                <Icon\r\n                                                    className=\"accept\"\r\n                                                    name=\"check\"\r\n                                                    onClick={() =>\r\n                                                        this.setState({ openPicker: true })\r\n                                                    }\r\n                                                />\r\n                                            }\r\n                                        />\r\n                                        <Popup\r\n                                            content=\"Decline payment\"\r\n                                            trigger={\r\n                                                <Icon\r\n                                                    className=\"decline\"\r\n                                                    // color={hoveredItemId === item.id ? 'red' : ''}\r\n                                                    // className={\r\n                                                    //     hoveredItemId === item.id ? 'decline-hovered' : ''\r\n                                                    // }\r\n                                                    name=\"remove\"\r\n                                                    // onMouseEnter={() => setHoveredItemId(item.id)}\r\n                                                    // onMouseLeave={() => setHoveredItemId(null)}\r\n                                                />\r\n                                            }\r\n                                        />\r\n                                    </Table.Cell>\r\n                                </Table.Row>\r\n                            ))}\r\n                    </Table.Body>\r\n                </Table>\r\n            </Page>\r\n        )\r\n    }\r\n    handleSelection = (resources) => {\r\n        this.setState({ open: false })\r\n        console.log(resources)\r\n    }\r\n}\r\n\r\nexport async function getStaticProps() {\r\n    let result\r\n    try {\r\n        result = await API.graphql(graphqlOperation(listPaymentRequest))\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n\r\n    if (result.errors) {\r\n        console.warn('Failed to fetch transactions.', result.errors)\r\n        return { props: { paymentRequests: [] } }\r\n    }\r\n    if (result.data !== null) {\r\n        return { props: { paymentRequests: result.data } }\r\n    }\r\n}\r\n\r\nexport default AcceptPayment\r\n"]},"metadata":{},"sourceType":"module"}