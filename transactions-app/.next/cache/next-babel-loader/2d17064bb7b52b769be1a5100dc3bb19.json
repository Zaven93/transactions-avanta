{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect, useCallback } from 'react';\nimport AWS from 'aws-sdk';\nimport { Auth, API, graphqlOperation } from 'aws-amplify';\nimport createApp from '@shopify/app-bridge';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport gql from 'graphql-tag';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Page, Button, Modal, Form, FormLayout, TextField, Badge } from '@shopify/polaris';\nimport { Table, Popup, Header, Icon } from 'semantic-ui-react';\nimport ProductList from './ProductsList';\nimport { formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nimport BranchProducts from './BranchProducts';\nimport AdminBranchInfo from '../components/AdminBranchInfo';\nAPI.configure(config);\nAWS.config.update({\n  accessKeyId: 'AKIAI53OMMWOAP5X3K5Q',\n  secretAccessKey: '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',\n  region: 'us-east-1'\n});\nconst cognito = new AWS.CognitoIdentityServiceProvider();\nconst listBranchs = gql`\n    query listBranchs {\n        listBranchs {\n            items {\n                adminId\n                branchName\n                branchUsername\n                createdAt\n                id\n                branchProducts {\n                    items {\n                        branchId\n                        createdAt\n                        id\n                        productId\n                        tags\n                        updatedAt\n                    }\n                }\n            }\n        }\n    }\n`;\nconst onCreateBranchSubscription = gql`\n    subscription onCreateBranch {\n        onCreateBranch {\n            adminId\n            branchName\n            id\n            createdAt\n        }\n    }\n`;\nconst onDeleteBranchSubscription = gql`\n    subscription onDeleteBranch {\n        onDeleteBranch {\n            id\n        }\n    }\n`;\nconst removeBranch = gql`\n    mutation deleteBranch($input: DeleteBranchInput!) {\n        deleteBranch(input: $input) {\n            id\n        }\n    }\n`;\n\nconst BranchList = ({\n  setBranchId,\n  branchId\n}) => {\n  const {\n    0: active,\n    1: setActive\n  } = useState(false);\n  const {\n    0: branches,\n    1: setBranches\n  } = useState('');\n  const {\n    0: branchName,\n    1: setBranchName\n  } = useState('');\n  const {\n    0: productBranchId,\n    1: setProductBranchId\n  } = useState('');\n  const {\n    0: newCreatedBranch,\n    1: setNewCreatedBranch\n  } = useState('');\n  const app = createApp({\n    apiKey: '3b01063bac3031d13101100ef3e44fd5',\n    shopOrigin: 'transactions-avanta.myshopify.com'\n  });\n  const redirect = Redirect.create(app);\n\n  const handleChange = () => {\n    setActive(!active);\n  };\n\n  const fetchBranches = async () => {\n    try {\n      const getBranches = await API.graphql(graphqlOperation(listBranchs));\n      setBranches(getBranches.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const deleteBranch = async id => {\n    try {\n      const deletedBranch = await API.graphql(graphqlOperation(removeBranch, {\n        input: {\n          id\n        }\n      }));\n      console.log('Deleted branch', deletedBranch);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const deleteUserFromCognito = async username => {\n    try {\n      await cognito.adminDeleteUser({\n        UserPoolId: 'us-east-1_IfrnnzGFR',\n        Username: username\n      }).promise();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    fetchBranches();\n    API.graphql(graphqlOperation(onCreateBranchSubscription)).subscribe({\n      next: createdBranch => {\n        setNewCreatedBranch(createdBranch);\n      }\n    });\n    API.graphql(graphqlOperation(onDeleteBranchSubscription)).subscribe({\n      next: deletedBranch => {\n        setNewCreatedBranch(deletedBranch);\n      }\n    });\n  }, [newCreatedBranch]);\n  console.log('Branches from Branch list', branches);\n  return __jsx(React.Fragment, null, __jsx(Table, {\n    selectable: true,\n    celled: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Branch Name\"), __jsx(Table.HeaderCell, {\n    textAlign: \"center\"\n  }, \"Created At\"), __jsx(Table.HeaderCell, {\n    textAlign: \"center\"\n  }, \"Actions\"))), __jsx(Table.Body, null, branches && branches.listBranchs.items.map(item => __jsx(Table.Row, {\n    key: item.id\n  }, __jsx(Table.Cell, null, __jsx(Button, {\n    primary: true,\n    onClick: () => {\n      setBranchId(item.id); // redirect.dispatch(\n      //     Redirect.Action.ADMIN_PATH,\n      //     `/apps/3b01063bac3031d13101100ef3e44fd5/branch/${item.id}`\n      // )\n    }\n  }, __jsx(Icon, {\n    name: \"code branch\"\n  }), \" \", item.branchName)), __jsx(Table.Cell, {\n    textAlign: \"center\"\n  }, formatDate(item.createdAt)), __jsx(Table.Cell, {\n    textAlign: \"center\",\n    className: \"branch-actions\"\n  }, __jsx(Popup, {\n    content: \"Edit branch\",\n    trigger: __jsx(Icon, {\n      onClick: () => {\n        setProductBranchId(item.id);\n        setBranchName(item.branchName);\n        handleChange();\n      },\n      className: \"edit-branch\",\n      name: \"edit outline\"\n    })\n  }), __jsx(Popup, {\n    content: \"Delete Branch\",\n    trigger: __jsx(Icon, {\n      className: \"remove-branch\",\n      name: \"trash alternate\",\n      onClick: () => {\n        deleteBranch(item.id);\n        deleteUserFromCognito(item.branchUsername);\n      }\n    })\n  })))))), __jsx(BranchProducts, {\n    branchName: branchName,\n    branchId: productBranchId,\n    active: active,\n    handleChange: handleChange\n  }));\n};\n\nexport default BranchList;","map":null,"metadata":{},"sourceType":"module"}