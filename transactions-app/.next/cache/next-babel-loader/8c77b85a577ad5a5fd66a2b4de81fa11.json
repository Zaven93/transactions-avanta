{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback } from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { Modal, Thumbnail, Checkbox, TextStyle } from '@shopify/polaris';\nimport { Table, Header } from 'semantic-ui-react';\nimport { toCurrency, formatDate } from '../utils/helper';\nconst listProducts = gql`\n    query Products {\n        products(first: 100) {\n            edges {\n                node {\n                    id\n                    title\n                    tags\n                    description(truncateAt: 100)\n                    variants(first: 1) {\n                        edges {\n                            node {\n                                id\n                                price\n                            }\n                        }\n                    }\n                    images(first: 1) {\n                        edges {\n                            node {\n                                originalSrc\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n`;\n\nconst ProductsList = ({\n  active,\n  handleChange\n}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(listProducts);\n  const {\n    0: rowId,\n    1: setRowId\n  } = useState([]);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    customerId: '',\n    bonusAmount: '',\n    products: []\n  });\n  const {\n    0: searchValue,\n    1: setSearchValue\n  } = useState(null);\n  const handleSearchInput = useCallback(newValue => setSearchValue(newValue), []);\n\n  if (loading) {\n    return __jsx(\"div\", null, \"Loading products...\");\n  }\n\n  if (error) {\n    return __jsx(\"div\", null, \"Some error occured\");\n  }\n\n  return __jsx(\"div\", {\n    style: {\n      height: '500px'\n    }\n  }, __jsx(Modal, {\n    open: active,\n    onClose: handleChange,\n    title: \"Choose products\",\n    primaryAction: {\n      content: 'Proceed',\n      onAction: () => {// createOrder()\n        // handleChange()\n        // setActiveToast(true)\n      }\n    }\n  }, __jsx(Modal.Section, null, __jsx(Table, {\n    celled: true,\n    striped: true,\n    selectable: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Products\"), __jsx(Table.HeaderCell, null, \"Description\"), __jsx(Table.HeaderCell, {\n    textAlign: \"center\"\n  }, \"Price\"))), __jsx(Table.Body, null, data && data.products.edges.filter(product => {\n    if (searchValue == null) {\n      return product;\n    } else if (product.node.title.toLowerCase().includes(searchValue.toLowerCase())) {\n      return product;\n    }\n  }).map(product => __jsx(Table.Row, {\n    key: product.node.id,\n    onClick: () => {\n      if (rowId.includes(product.node.id)) {\n        setRowId(rowId.filter(id => id !== product.node.id));\n        setState({\n          products: state.products.filter(filteredProduct => filteredProduct.node.id !== product.node.id)\n        });\n      } else {\n        setRowId([...rowId, product.node.id]);\n        setState({\n          products: [...state.products, product]\n        });\n      }\n    }\n  }, __jsx(Table.Cell, null, __jsx(Header, {\n    as: \"h4\",\n    image: true,\n    className: \"product-header\"\n  }, __jsx(Checkbox, {\n    checked: rowId.includes(product.node.id) && true\n  }), __jsx(Thumbnail, {\n    source: product.node.images.edges[0] && product.node.images.edges[0].node.originalSrc,\n    size: \"small\",\n    alt: \"\"\n  }), __jsx(Header.Content, null, product.node.title))), __jsx(Table.Cell, null, __jsx(TextStyle, {\n    variation: \"subdued\"\n  }, product.node.description)), __jsx(Table.Cell, {\n    textAlign: \"center\"\n  }, __jsx(TextStyle, {\n    variation: \"subdued\"\n  }, product.node.variants.edges[0] && toCurrency(product.node.variants.edges[0].node.price)))))), __jsx(Table.Footer, {\n    fullWidth: true\n  }, __jsx(Table.Row, null))))));\n};\n\nexport default ProductsList;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/components/ProductsList.js"],"names":["React","useState","useCallback","gql","useQuery","Modal","Thumbnail","Checkbox","TextStyle","Table","Header","toCurrency","formatDate","listProducts","ProductsList","active","handleChange","loading","error","data","rowId","setRowId","state","setState","customerId","bonusAmount","products","searchValue","setSearchValue","handleSearchInput","newValue","height","content","onAction","edges","filter","product","node","title","toLowerCase","includes","map","id","filteredProduct","images","originalSrc","description","variants","price"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react'\r\nimport gql from 'graphql-tag'\r\nimport { useQuery } from '@apollo/client'\r\nimport { Modal, Thumbnail, Checkbox, TextStyle } from '@shopify/polaris'\r\nimport { Table, Header } from 'semantic-ui-react'\r\nimport { toCurrency, formatDate } from '../utils/helper'\r\n\r\nconst listProducts = gql`\r\n    query Products {\r\n        products(first: 100) {\r\n            edges {\r\n                node {\r\n                    id\r\n                    title\r\n                    tags\r\n                    description(truncateAt: 100)\r\n                    variants(first: 1) {\r\n                        edges {\r\n                            node {\r\n                                id\r\n                                price\r\n                            }\r\n                        }\r\n                    }\r\n                    images(first: 1) {\r\n                        edges {\r\n                            node {\r\n                                originalSrc\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst ProductsList = ({ active, handleChange }) => {\r\n    const { loading, error, data } = useQuery(listProducts)\r\n    const [rowId, setRowId] = useState([])\r\n    const [state, setState] = useState({\r\n        customerId: '',\r\n        bonusAmount: '',\r\n        products: []\r\n    })\r\n    const [searchValue, setSearchValue] = useState(null)\r\n    const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\r\n\r\n    if (loading) {\r\n        return <div>Loading products...</div>\r\n    }\r\n\r\n    if (error) {\r\n        return <div>Some error occured</div>\r\n    }\r\n\r\n    return (\r\n        <div style={{ height: '500px' }}>\r\n            <Modal\r\n                open={active}\r\n                onClose={handleChange}\r\n                title=\"Choose products\"\r\n                primaryAction={{\r\n                    content: 'Proceed',\r\n                    onAction: () => {\r\n                        // createOrder()\r\n                        // handleChange()\r\n                        // setActiveToast(true)\r\n                    }\r\n                }}>\r\n                <Modal.Section>\r\n                    <Table celled striped selectable>\r\n                        <Table.Header>\r\n                            <Table.Row>\r\n                                <Table.HeaderCell>Products</Table.HeaderCell>\r\n                                <Table.HeaderCell>Description</Table.HeaderCell>\r\n                                <Table.HeaderCell textAlign=\"center\">Price</Table.HeaderCell>\r\n                            </Table.Row>\r\n                        </Table.Header>\r\n                        <Table.Body>\r\n                            {data &&\r\n                                data.products.edges\r\n                                    .filter((product) => {\r\n                                        if (searchValue == null) {\r\n                                            return product\r\n                                        } else if (\r\n                                            product.node.title\r\n                                                .toLowerCase()\r\n                                                .includes(searchValue.toLowerCase())\r\n                                        ) {\r\n                                            return product\r\n                                        }\r\n                                    })\r\n                                    .map((product) => (\r\n                                        <Table.Row\r\n                                            key={product.node.id}\r\n                                            onClick={() => {\r\n                                                if (rowId.includes(product.node.id)) {\r\n                                                    setRowId(\r\n                                                        rowId.filter((id) => id !== product.node.id)\r\n                                                    )\r\n                                                    setState({\r\n                                                        products: state.products.filter(\r\n                                                            (filteredProduct) =>\r\n                                                                filteredProduct.node.id !==\r\n                                                                product.node.id\r\n                                                        )\r\n                                                    })\r\n                                                } else {\r\n                                                    setRowId([...rowId, product.node.id])\r\n                                                    setState({\r\n                                                        products: [...state.products, product]\r\n                                                    })\r\n                                                }\r\n                                            }}>\r\n                                            <Table.Cell>\r\n                                                <Header as=\"h4\" image className=\"product-header\">\r\n                                                    <Checkbox\r\n                                                        checked={\r\n                                                            rowId.includes(product.node.id) && true\r\n                                                        }\r\n                                                    />\r\n                                                    <Thumbnail\r\n                                                        source={\r\n                                                            product.node.images.edges[0] &&\r\n                                                            product.node.images.edges[0].node\r\n                                                                .originalSrc\r\n                                                        }\r\n                                                        size=\"small\"\r\n                                                        alt=\"\"\r\n                                                    />\r\n                                                    <Header.Content>\r\n                                                        {product.node.title}\r\n                                                    </Header.Content>\r\n                                                </Header>\r\n                                            </Table.Cell>\r\n                                            <Table.Cell>\r\n                                                <TextStyle variation=\"subdued\">\r\n                                                    {product.node.description}\r\n                                                </TextStyle>\r\n                                            </Table.Cell>\r\n                                            <Table.Cell textAlign=\"center\">\r\n                                                <TextStyle variation=\"subdued\">\r\n                                                    {product.node.variants.edges[0] &&\r\n                                                        toCurrency(\r\n                                                            product.node.variants.edges[0].node\r\n                                                                .price\r\n                                                        )}\r\n                                                </TextStyle>\r\n                                            </Table.Cell>\r\n                                        </Table.Row>\r\n                                    ))}\r\n                        </Table.Body>\r\n                        <Table.Footer fullWidth>\r\n                            <Table.Row></Table.Row>\r\n                        </Table.Footer>\r\n                    </Table>\r\n                </Modal.Section>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProductsList\r\n"]},"metadata":{},"sourceType":"module"}