{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport gql from 'graphql-tag';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { Table, Icon, Popup, Header } from 'semantic-ui-react';\nimport { Badge } from '@shopify/polaris';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport ProductList from './ProductsList';\nimport config from '../aws-exports';\nAPI.configure(config);\nconst updatePaymentRequest = gql`\n    mutation updatePaymentRequest($input: UpdatePaymentRequestInput!) {\n        updatePaymentRequest(input: $input) {\n            bonusAmount\n            customerId\n            id\n            orderId\n            status\n            products {\n                originalUnitPrice\n                quantity\n                variantId\n            }\n            createdAt\n            updatedAt\n        }\n    }\n`;\nconst listPaymentRequest = gql`\n    query listPaymentRequest($branchId: ID) {\n        listPaymentRequests(filter: { status: { eq: PENDING }, branchId: { eq: $branchId } }) {\n            items {\n                bonusAmount\n                createdAt\n                customerId\n                id\n                orderId\n                status\n                updatedAt\n            }\n            nextToken\n        }\n    }\n`;\nconst paymentSubscription = gql`\n    subscription paymentRequest {\n        onCreatePaymentRequest {\n            bonusAmount\n            createdAt\n            customerId\n            id\n            orderId\n            status\n            updatedAt\n        }\n    }\n`;\n\nconst PendingPaymentRequest = ({\n  createUpdatePaymentSubscription,\n  branchId\n}) => {\n  const {\n    0: paymentRequestId,\n    1: setPaymentRequestId\n  } = useState('');\n  const {\n    0: active,\n    1: setActive\n  } = useState(false);\n  const {\n    0: paymentRequestItems,\n    1: setPaymentRequestItems\n  } = useState([]);\n  const handleChange = useCallback(() => setActive(!active), [active]);\n  console.log('Payment request id for decline', paymentRequestId);\n  const fetchAcceptedPayments = useCallback(async () => {\n    try {\n      const res = await API.graphql(graphqlOperation(listPaymentRequest, {\n        branchId\n      }));\n      setPaymentRequestItems(res.data.listPaymentRequests.items);\n      console.log('Accepted payments', res.data);\n    } catch (error) {\n      console.log(error);\n    }\n  }, [createUpdatePaymentSubscription]);\n  useEffect(() => {\n    fetchAcceptedPayments();\n  }, [fetchAcceptedPayments]);\n\n  const declinePayment = async paymentId => {\n    try {\n      const paymentResponse = await API.graphql(graphqlOperation(updatePaymentRequest, {\n        input: {\n          id: paymentId,\n          status: 'DECLINED'\n        }\n      }));\n      console.log('Declined Payment data from lambda', paymentResponse.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Table, {\n    selectable: true,\n    celled: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Customer Id\"), __jsx(Table.HeaderCell, null, \"Bonus Amount\"), __jsx(Table.HeaderCell, null, \"Created At\"), __jsx(Table.HeaderCell, null, \"Updated At\"), __jsx(Table.HeaderCell, null, \"Status\"), __jsx(Table.HeaderCell, null, \"Action\"))), __jsx(Table.Body, null, paymentRequestItems && paymentRequestItems.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt)).map(item => __jsx(Table.Row, {\n    key: item.id\n  }, __jsx(Table.Cell, null, __jsx(Badge, {\n    size: \"small\"\n  }, item.customerId)), __jsx(Table.Cell, null, toCurrency(item.bonusAmount)), __jsx(Table.Cell, null, formatDate(item.createdAt)), __jsx(Table.Cell, null, formatDate(item.updatedAt)), __jsx(Table.Cell, null, __jsx(Badge, {\n    size: \"small\",\n    progress: \"partiallyComplete\",\n    status: \"attention\"\n  }, item.status)), __jsx(Table.Cell, {\n    className: \"actions-cell\"\n  }, __jsx(Popup, {\n    content: \"Approve payment\",\n    trigger: __jsx(Icon, {\n      className: \"accept\",\n      name: \"check\",\n      onClick: () => {\n        setPaymentRequestId(item.id);\n        handleChange();\n      }\n    })\n  }), __jsx(Popup, {\n    content: \"Decline payment\",\n    trigger: __jsx(Icon, {\n      className: \"decline\",\n      name: \"remove\",\n      onClick: async () => {\n        declinePayment(item.id);\n      }\n    })\n  })))))), __jsx(ProductList, {\n    paymentRequestId: paymentRequestId,\n    active: active,\n    handleChange: handleChange\n  }));\n};\n\nexport default PendingPaymentRequest;","map":null,"metadata":{},"sourceType":"module"}