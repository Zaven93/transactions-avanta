{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport axios from 'axios';\nimport gql from 'graphql-tag';\nimport { print } from 'graphql';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { ResourcePicker } from '@shopify/app-bridge/actions';\nimport { Page, Badge, Avatar, TextStyle, Card, TextContainer, Modal, Checkbox, Thumbnail, Toast, Frame, Button } from '@shopify/polaris';\nimport { CustomersMajorMonotone } from '@shopify/polaris-icons';\nimport { Table, TableCell, Icon, Popup, Header } from 'semantic-ui-react';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nimport ProductList from '../components/ProductsList';\nAPI.configure(config);\nconst listPaymentRequest = gql`\n    query listPaymentRequest {\n        listPaymentRequests {\n            items {\n                bonusAmount\n                createdAt\n                customerId\n                id\n                orderId\n                status\n                updatedAt\n            }\n        }\n    }\n`;\nconst listProducts = gql`\n    query Products {\n        products(first: 100) {\n            edges {\n                node {\n                    id\n                    title\n                    tags\n                    description(truncateAt: 100)\n                    variants(first: 1) {\n                        edges {\n                            node {\n                                id\n                                price\n                            }\n                        }\n                    }\n                    images(first: 1) {\n                        edges {\n                            node {\n                                originalSrc\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n`;\nconst createDraftOrder = gql`\n    mutation CreateOrder($input: DraftOrderInput!) {\n        draftOrderCreate(input: $input) {\n            draftOrder {\n                id\n                customer {\n                    id\n                }\n                email\n                lineItems(first: 10) {\n                    edges {\n                        node {\n                            title\n                            quantity\n                            originalUnitPrice\n                            variant {\n                                id\n                                price\n                                title\n                                product {\n                                    tags\n                                    title\n                                    images(first: 5) {\n                                        edges {\n                                            node {\n                                                originalSrc\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n`;\nconst completeOrder = gql`\n    mutation CompleteOrder($id: ID!) {\n        draftOrderComplete(id: $id, paymentPending: true) {\n            draftOrder {\n                customer {\n                    id\n                }\n                email\n                name\n            }\n        }\n    }\n`;\n\nconst AcceptPayment = ({\n  paymentRequests\n}) => {\n  const {\n    0: paymentRequestItems,\n    1: setPaymentRequestItems\n  } = useState(paymentRequests.listPaymentRequests.items);\n  const {\n    0: openPicker,\n    1: setOpenPicker\n  } = useState(false);\n  const {\n    0: active,\n    1: setActive\n  } = useState(false);\n  const {\n    0: rowId,\n    1: setRowId\n  } = useState([]);\n  const {\n    0: paymentRequestId,\n    1: setPaymentRequestId\n  } = useState('');\n  const {\n    0: searchValue,\n    1: setSearchValue\n  } = useState(null);\n  const {\n    0: activeToast,\n    1: setActiveToast\n  } = useState(false);\n  const handleSearchInput = useCallback(newValue => setSearchValue(newValue), []);\n  const handleChange = useCallback(() => setActive(!active), [active]);\n  const toastMarkup = activeToast ? __jsx(Toast, {\n    content: \"Order has been successfully created\",\n    onDismiss: () => setActiveToast(false)\n  }) : null;\n  console.log('Payment id', paymentRequestId);\n  return __jsx(Frame, null, __jsx(Page, {\n    title: \"Payment Request\"\n  }, __jsx(Table, {\n    selectable: true,\n    celled: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Customer Id\"), __jsx(Table.HeaderCell, null, \"Order Id\"), __jsx(Table.HeaderCell, null, \"Bonus Amount\"), __jsx(Table.HeaderCell, null, \"Created At\"), __jsx(Table.HeaderCell, null, \"Updated At\"), __jsx(Table.HeaderCell, null, \"Status\"), __jsx(Table.HeaderCell, null, \"Action\"))), __jsx(Table.Body, null, paymentRequestItems && paymentRequestItems.map(item => __jsx(Table.Row, {\n    key: item.id\n  }, __jsx(Table.Cell, null, __jsx(Badge, {\n    size: \"small\"\n  }, item.customerId)), __jsx(Table.Cell, null, __jsx(Badge, {\n    size: \"small\"\n  }, item.orderId)), __jsx(Table.Cell, null, toCurrency(item.bonusAmount)), __jsx(Table.Cell, null, formatDate(item.createdAt)), __jsx(Table.Cell, null, formatDate(item.updatedAt)), __jsx(Table.Cell, null, __jsx(Badge, {\n    size: \"small\",\n    progress: item.status === 'PENDING' ? 'partiallyComplete' : item.status === 'APPROVED' ? 'complete' : 'incomplete',\n    status: item.status === 'PENDING' ? 'attention' : item.status === 'APPROVED' ? 'success' : 'critical'\n  }, item.status)), __jsx(Table.Cell, {\n    className: \"actions-cell\"\n  }, __jsx(Popup, {\n    content: \"Approve payment\",\n    trigger: __jsx(Icon, {\n      className: \"accept\",\n      name: \"check\",\n      onClick: () => {\n        setPaymentRequestId(item.id);\n        handleChange();\n      }\n    })\n  }), __jsx(Popup, {\n    content: \"Decline payment\",\n    trigger: __jsx(Icon, {\n      className: \"decline\",\n      name: \"remove\"\n    })\n  })))))), __jsx(ProductList, {\n    customerId: state.customerId,\n    bonusAmount: state.bonusAmount,\n    active: active,\n    handleChange: handleChange\n  }), toastMarkup));\n};\n\nexport async function getStaticProps() {\n  let result;\n\n  try {\n    result = await API.graphql(graphqlOperation(listPaymentRequest));\n  } catch (error) {\n    console.log(error);\n  }\n\n  if (result.errors) {\n    console.warn('Failed to fetch payment requests.', result.errors);\n    return {\n      props: {\n        paymentRequests: []\n      }\n    };\n  }\n\n  if (result.data !== null) {\n    return {\n      props: {\n        paymentRequests: result.data\n      }\n    };\n  }\n}\nexport default AcceptPayment;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/pages/accept-payment.js"],"names":["React","useState","useCallback","useEffect","axios","gql","print","API","graphqlOperation","ResourcePicker","Page","Badge","Avatar","TextStyle","Card","TextContainer","Modal","Checkbox","Thumbnail","Toast","Frame","Button","CustomersMajorMonotone","Table","TableCell","Icon","Popup","Header","toCurrency","formatDate","config","ProductList","configure","listPaymentRequest","listProducts","createDraftOrder","completeOrder","AcceptPayment","paymentRequests","paymentRequestItems","setPaymentRequestItems","listPaymentRequests","items","openPicker","setOpenPicker","active","setActive","rowId","setRowId","paymentRequestId","setPaymentRequestId","searchValue","setSearchValue","activeToast","setActiveToast","handleSearchInput","newValue","handleChange","toastMarkup","console","log","map","item","id","customerId","orderId","bonusAmount","createdAt","updatedAt","status","state","getStaticProps","result","graphql","error","errors","warn","props","data"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport gql from 'graphql-tag'\r\nimport { print } from 'graphql'\r\nimport { API, graphqlOperation } from 'aws-amplify'\r\nimport { ResourcePicker } from '@shopify/app-bridge/actions'\r\nimport {\r\n    Page,\r\n    Badge,\r\n    Avatar,\r\n    TextStyle,\r\n    Card,\r\n    TextContainer,\r\n    Modal,\r\n    Checkbox,\r\n    Thumbnail,\r\n    Toast,\r\n    Frame,\r\n    Button\r\n} from '@shopify/polaris'\r\nimport { CustomersMajorMonotone } from '@shopify/polaris-icons'\r\nimport { Table, TableCell, Icon, Popup, Header } from 'semantic-ui-react'\r\nimport { toCurrency, formatDate } from '../utils/helper'\r\nimport config from '../aws-exports'\r\nimport ProductList from '../components/ProductsList'\r\n\r\nAPI.configure(config)\r\n\r\nconst listPaymentRequest = gql`\r\n    query listPaymentRequest {\r\n        listPaymentRequests {\r\n            items {\r\n                bonusAmount\r\n                createdAt\r\n                customerId\r\n                id\r\n                orderId\r\n                status\r\n                updatedAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst listProducts = gql`\r\n    query Products {\r\n        products(first: 100) {\r\n            edges {\r\n                node {\r\n                    id\r\n                    title\r\n                    tags\r\n                    description(truncateAt: 100)\r\n                    variants(first: 1) {\r\n                        edges {\r\n                            node {\r\n                                id\r\n                                price\r\n                            }\r\n                        }\r\n                    }\r\n                    images(first: 1) {\r\n                        edges {\r\n                            node {\r\n                                originalSrc\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst createDraftOrder = gql`\r\n    mutation CreateOrder($input: DraftOrderInput!) {\r\n        draftOrderCreate(input: $input) {\r\n            draftOrder {\r\n                id\r\n                customer {\r\n                    id\r\n                }\r\n                email\r\n                lineItems(first: 10) {\r\n                    edges {\r\n                        node {\r\n                            title\r\n                            quantity\r\n                            originalUnitPrice\r\n                            variant {\r\n                                id\r\n                                price\r\n                                title\r\n                                product {\r\n                                    tags\r\n                                    title\r\n                                    images(first: 5) {\r\n                                        edges {\r\n                                            node {\r\n                                                originalSrc\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst completeOrder = gql`\r\n    mutation CompleteOrder($id: ID!) {\r\n        draftOrderComplete(id: $id, paymentPending: true) {\r\n            draftOrder {\r\n                customer {\r\n                    id\r\n                }\r\n                email\r\n                name\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst AcceptPayment = ({ paymentRequests }) => {\r\n    const [paymentRequestItems, setPaymentRequestItems] = useState(\r\n        paymentRequests.listPaymentRequests.items\r\n    )\r\n    const [openPicker, setOpenPicker] = useState(false)\r\n    const [active, setActive] = useState(false)\r\n    const [rowId, setRowId] = useState([])\r\n    const [paymentRequestId, setPaymentRequestId] = useState('')\r\n    const [searchValue, setSearchValue] = useState(null)\r\n    const [activeToast, setActiveToast] = useState(false)\r\n    const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\r\n\r\n    const handleChange = useCallback(() => setActive(!active), [active])\r\n\r\n    const toastMarkup = activeToast ? (\r\n        <Toast\r\n            content=\"Order has been successfully created\"\r\n            onDismiss={() => setActiveToast(false)}\r\n        />\r\n    ) : null\r\n\r\n    console.log('Payment id', paymentRequestId)\r\n\r\n    return (\r\n        <Frame>\r\n            <Page title=\"Payment Request\">\r\n                <Table selectable celled>\r\n                    <Table.Header>\r\n                        <Table.Row>\r\n                            <Table.HeaderCell>Customer Id</Table.HeaderCell>\r\n                            <Table.HeaderCell>Order Id</Table.HeaderCell>\r\n                            <Table.HeaderCell>Bonus Amount</Table.HeaderCell>\r\n                            <Table.HeaderCell>Created At</Table.HeaderCell>\r\n                            <Table.HeaderCell>Updated At</Table.HeaderCell>\r\n                            <Table.HeaderCell>Status</Table.HeaderCell>\r\n                            <Table.HeaderCell>Action</Table.HeaderCell>\r\n                        </Table.Row>\r\n                    </Table.Header>\r\n                    <Table.Body>\r\n                        {paymentRequestItems &&\r\n                            paymentRequestItems.map((item) => (\r\n                                <Table.Row key={item.id}>\r\n                                    <Table.Cell>\r\n                                        <Badge size=\"small\">{item.customerId}</Badge>\r\n                                    </Table.Cell>\r\n                                    <Table.Cell>\r\n                                        <Badge size=\"small\">{item.orderId}</Badge>\r\n                                    </Table.Cell>\r\n                                    <Table.Cell>{toCurrency(item.bonusAmount)}</Table.Cell>\r\n                                    <Table.Cell>{formatDate(item.createdAt)}</Table.Cell>\r\n                                    <Table.Cell>{formatDate(item.updatedAt)}</Table.Cell>\r\n                                    <Table.Cell>\r\n                                        <Badge\r\n                                            size=\"small\"\r\n                                            progress={\r\n                                                item.status === 'PENDING'\r\n                                                    ? 'partiallyComplete'\r\n                                                    : item.status === 'APPROVED'\r\n                                                    ? 'complete'\r\n                                                    : 'incomplete'\r\n                                            }\r\n                                            status={\r\n                                                item.status === 'PENDING'\r\n                                                    ? 'attention'\r\n                                                    : item.status === 'APPROVED'\r\n                                                    ? 'success'\r\n                                                    : 'critical'\r\n                                            }>\r\n                                            {item.status}\r\n                                        </Badge>\r\n                                    </Table.Cell>\r\n                                    <Table.Cell className=\"actions-cell\">\r\n                                        <Popup\r\n                                            content=\"Approve payment\"\r\n                                            trigger={\r\n                                                <Icon\r\n                                                    className=\"accept\"\r\n                                                    name=\"check\"\r\n                                                    onClick={() => {\r\n                                                        setPaymentRequestId(item.id)\r\n                                                        handleChange()\r\n                                                    }}\r\n                                                />\r\n                                            }\r\n                                        />\r\n                                        <Popup\r\n                                            content=\"Decline payment\"\r\n                                            trigger={<Icon className=\"decline\" name=\"remove\" />}\r\n                                        />\r\n                                    </Table.Cell>\r\n                                </Table.Row>\r\n                            ))}\r\n                    </Table.Body>\r\n                </Table>\r\n                <ProductList\r\n                    customerId={state.customerId}\r\n                    bonusAmount={state.bonusAmount}\r\n                    active={active}\r\n                    handleChange={handleChange}\r\n                />\r\n                {toastMarkup}\r\n            </Page>\r\n        </Frame>\r\n    )\r\n}\r\n\r\nexport async function getStaticProps() {\r\n    let result\r\n    try {\r\n        result = await API.graphql(graphqlOperation(listPaymentRequest))\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n\r\n    if (result.errors) {\r\n        console.warn('Failed to fetch payment requests.', result.errors)\r\n        return { props: { paymentRequests: [] } }\r\n    }\r\n    if (result.data !== null) {\r\n        return {\r\n            props: { paymentRequests: result.data }\r\n        }\r\n    }\r\n}\r\n\r\nexport default AcceptPayment\r\n"]},"metadata":{},"sourceType":"module"}