{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    subscription onCreateBranch {\\n        onCreateBranch {\\n            adminId\\n            branchName\\n            id\\n            createdAt\\n        }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query listBranchs {\\n        listBranchs {\\n            items {\\n                adminId\\n                branchName\\n                createdAt\\n                id\\n                branchProducts {\\n                    items {\\n                        branchId\\n                        createdAt\\n                        id\\n                        productId\\n                        tags\\n                        updatedAt\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useRouter } from 'next/router';\nimport { Auth, API, graphqlOperation } from 'aws-amplify';\nimport createApp from '@shopify/app-bridge';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport gql from 'graphql-tag';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Page, Button, Modal, Form, FormLayout, TextField, Badge } from '@shopify/polaris';\nimport { Table, Popup, Header, Icon } from 'semantic-ui-react';\nimport ProductList from './ProductsList';\nimport { formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nimport BranchProducts from './BranchProducts';\nimport BranchContext from '../context/branchContext';\nimport AdminBranchInfo from '../components/AdminBranchInfo';\nAPI.configure(config);\nvar listBranchs = gql(_templateObject());\nvar onCreateBranchSubscription = gql(_templateObject2());\n\nvar BranchList = function BranchList(_ref) {\n  _s();\n\n  var setBranchId = _ref.setBranchId,\n      branchId = _ref.branchId;\n\n  var _useState = useState(false),\n      active = _useState[0],\n      setActive = _useState[1];\n\n  var _useState2 = useState(''),\n      branches = _useState2[0],\n      setBranches = _useState2[1];\n\n  var _useState3 = useState(''),\n      branchName = _useState3[0],\n      setBranchName = _useState3[1];\n\n  var _useState4 = useState(''),\n      productBranchId = _useState4[0],\n      setProductBranchId = _useState4[1];\n\n  var _useState5 = useState(''),\n      newCreatedBranch = _useState5[0],\n      setNewCreatedBranch = _useState5[1];\n\n  var app = createApp({\n    apiKey: '3b01063bac3031d13101100ef3e44fd5',\n    shopOrigin: 'transactions-avanta.myshopify.com'\n  });\n  var redirect = Redirect.create(app);\n\n  var handleChange = function handleChange() {\n    setActive(!active);\n  };\n\n  var fetchBranches = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var getBranches;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return API.graphql(graphqlOperation(listBranchs));\n\n            case 3:\n              getBranches = _context.sent;\n              setBranches(getBranches.data);\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 7]]);\n    }));\n\n    return function fetchBranches() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var router = useRouter();\n  useEffect(function () {\n    fetchBranches();\n    API.graphql(graphqlOperation(onCreateBranchSubscription)).subscribe({\n      next: function next(createdBranch) {\n        console.log('New created Branch Zaven', createdBranch);\n        setNewCreatedBranch(createdBranch);\n      }\n    });\n  }, [newCreatedBranch]);\n  console.log('Branches from Branch list', branches);\n  return __jsx(React.Fragment, null, __jsx(Table, {\n    selectable: true,\n    celled: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Branch Name\"), __jsx(Table.HeaderCell, {\n    textAlign: \"center\"\n  }, \"Created At\"), __jsx(Table.HeaderCell, {\n    textAlign: \"center\"\n  }, \"Actions\"))), __jsx(Table.Body, null, branches && branches.listBranchs.items.map(function (item) {\n    return __jsx(Table.Row, {\n      key: item.id\n    }, __jsx(Table.Cell, null, __jsx(Button, {\n      primary: true,\n      onClick: function onClick() {\n        setBranchId(item.id); // redirect.dispatch(\n        //     Redirect.Action.ADMIN_PATH,\n        //     `/apps/3b01063bac3031d13101100ef3e44fd5/branch/${item.id}`\n        // )\n      }\n    }, __jsx(Icon, {\n      name: \"code branch\"\n    }), \" \", item.branchName)), __jsx(Table.Cell, {\n      textAlign: \"center\"\n    }, formatDate(item.createdAt)), __jsx(Table.Cell, {\n      textAlign: \"center\",\n      className: \"branch-actions\"\n    }, __jsx(Popup, {\n      content: \"Edit branch\",\n      trigger: __jsx(Icon, {\n        onClick: function onClick() {\n          setProductBranchId(item.id);\n          setBranchName(item.branchName);\n          handleChange();\n        },\n        className: \"edit-branch\",\n        name: \"edit outline\"\n      })\n    }), __jsx(Popup, {\n      content: \"Delete Branch\",\n      trigger: __jsx(Icon, {\n        className: \"remove-branch\",\n        name: \"trash alternate\"\n      })\n    })));\n  }))), __jsx(BranchProducts, {\n    branchName: branchName,\n    branchId: productBranchId,\n    active: active,\n    handleChange: handleChange\n  }));\n};\n\n_s(BranchList, \"EUqfRKfumtqVmC69Hf3PFSklsaw=\", false, function () {\n  return [useRouter];\n});\n\n_c = BranchList;\nexport default BranchList;\n\nvar _c;\n\n$RefreshReg$(_c, \"BranchList\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/components/BranchList.js"],"names":["React","useState","useEffect","useCallback","useRouter","Auth","API","graphqlOperation","createApp","Redirect","gql","v4","uuidv4","Page","Button","Modal","Form","FormLayout","TextField","Badge","Table","Popup","Header","Icon","ProductList","formatDate","config","BranchProducts","BranchContext","AdminBranchInfo","configure","listBranchs","onCreateBranchSubscription","BranchList","setBranchId","branchId","active","setActive","branches","setBranches","branchName","setBranchName","productBranchId","setProductBranchId","newCreatedBranch","setNewCreatedBranch","app","apiKey","shopOrigin","redirect","create","handleChange","fetchBranches","graphql","getBranches","data","console","log","router","subscribe","next","createdBranch","items","map","item","id","createdAt"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { Auth, API, graphqlOperation } from 'aws-amplify'\r\nimport createApp from '@shopify/app-bridge'\r\nimport { Redirect } from '@shopify/app-bridge/actions'\r\nimport gql from 'graphql-tag'\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport { Page, Button, Modal, Form, FormLayout, TextField, Badge } from '@shopify/polaris'\r\nimport { Table, Popup, Header, Icon } from 'semantic-ui-react'\r\nimport ProductList from './ProductsList'\r\nimport { formatDate } from '../utils/helper'\r\nimport config from '../aws-exports'\r\nimport BranchProducts from './BranchProducts'\r\nimport BranchContext from '../context/branchContext'\r\nimport AdminBranchInfo from '../components/AdminBranchInfo'\r\n\r\nAPI.configure(config)\r\n\r\nconst listBranchs = gql`\r\n    query listBranchs {\r\n        listBranchs {\r\n            items {\r\n                adminId\r\n                branchName\r\n                createdAt\r\n                id\r\n                branchProducts {\r\n                    items {\r\n                        branchId\r\n                        createdAt\r\n                        id\r\n                        productId\r\n                        tags\r\n                        updatedAt\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\nconst onCreateBranchSubscription = gql`\r\n    subscription onCreateBranch {\r\n        onCreateBranch {\r\n            adminId\r\n            branchName\r\n            id\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nconst BranchList = ({ setBranchId, branchId }) => {\r\n    const [active, setActive] = useState(false)\r\n    const [branches, setBranches] = useState('')\r\n    const [branchName, setBranchName] = useState('')\r\n    const [productBranchId, setProductBranchId] = useState('')\r\n    const [newCreatedBranch, setNewCreatedBranch] = useState('')\r\n\r\n    const app = createApp({\r\n        apiKey: '3b01063bac3031d13101100ef3e44fd5',\r\n        shopOrigin: 'transactions-avanta.myshopify.com'\r\n    })\r\n\r\n    const redirect = Redirect.create(app)\r\n\r\n    const handleChange = () => {\r\n        setActive(!active)\r\n    }\r\n\r\n    const fetchBranches = async () => {\r\n        try {\r\n            const getBranches = await API.graphql(graphqlOperation(listBranchs))\r\n            setBranches(getBranches.data)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    const router = useRouter()\r\n\r\n    useEffect(() => {\r\n        fetchBranches()\r\n        API.graphql(graphqlOperation(onCreateBranchSubscription)).subscribe({\r\n            next: (createdBranch) => {\r\n                console.log('New created Branch Zaven', createdBranch)\r\n                setNewCreatedBranch(createdBranch)\r\n            }\r\n        })\r\n    }, [newCreatedBranch])\r\n\r\n    console.log('Branches from Branch list', branches)\r\n\r\n    return (\r\n        <>\r\n            <Table selectable celled>\r\n                <Table.Header>\r\n                    <Table.Row>\r\n                        <Table.HeaderCell>Branch Name</Table.HeaderCell>\r\n                        <Table.HeaderCell textAlign=\"center\">Created At</Table.HeaderCell>\r\n                        <Table.HeaderCell textAlign=\"center\">Actions</Table.HeaderCell>\r\n                    </Table.Row>\r\n                </Table.Header>\r\n                <Table.Body>\r\n                    {branches &&\r\n                        branches.listBranchs.items.map((item) => (\r\n                            <Table.Row key={item.id}>\r\n                                <Table.Cell>\r\n                                    {/* <Badge size=\"medium\" status=\"info\">\r\n                                        {item.branchName}\r\n                                    </Badge> */}\r\n                                    <Button\r\n                                        primary\r\n                                        onClick={() => {\r\n                                            setBranchId(item.id)\r\n                                            // redirect.dispatch(\r\n                                            //     Redirect.Action.ADMIN_PATH,\r\n                                            //     `/apps/3b01063bac3031d13101100ef3e44fd5/branch/${item.id}`\r\n                                            // )\r\n                                        }}>\r\n                                        <Icon name=\"code branch\" /> {item.branchName}\r\n                                    </Button>\r\n                                </Table.Cell>\r\n                                <Table.Cell textAlign=\"center\">\r\n                                    {formatDate(item.createdAt)}\r\n                                </Table.Cell>\r\n                                <Table.Cell textAlign=\"center\" className=\"branch-actions\">\r\n                                    <Popup\r\n                                        content=\"Edit branch\"\r\n                                        trigger={\r\n                                            <Icon\r\n                                                onClick={() => {\r\n                                                    setProductBranchId(item.id)\r\n                                                    setBranchName(item.branchName)\r\n                                                    handleChange()\r\n                                                }}\r\n                                                className=\"edit-branch\"\r\n                                                name=\"edit outline\"\r\n                                            />\r\n                                        }\r\n                                    />\r\n                                    <Popup\r\n                                        content=\"Delete Branch\"\r\n                                        trigger={\r\n                                            <Icon\r\n                                                className=\"remove-branch\"\r\n                                                name=\"trash alternate\"\r\n                                            />\r\n                                        }\r\n                                    />\r\n                                </Table.Cell>\r\n                            </Table.Row>\r\n                        ))}\r\n                </Table.Body>\r\n            </Table>\r\n            <BranchProducts\r\n                branchName={branchName}\r\n                branchId={productBranchId}\r\n                active={active}\r\n                handleChange={handleChange}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BranchList\r\n"]},"metadata":{},"sourceType":"module"}