{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query listTransactions($limit: Int, $nextToken: String) {\\n        listTransactions(limit: $limit, nextToken: $nextToken) {\\n            nextToken\\n            items {\\n                id\\n                totalPrice\\n                totalBonusAmount\\n                currency\\n                products {\\n                    id\\n                    title\\n                    bonusPercentage\\n                    priceAmount\\n                    priceCurrency\\n                    image\\n                }\\n                customer {\\n                    id\\n                    firstName\\n                    lastName\\n                    phone\\n                    email\\n                }\\n                createdAt\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport axios from 'axios';\nimport createApp from '@shopify/app-bridge';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport gql from 'graphql-tag';\nimport { print } from 'graphql';\nimport { Card, DataTable, Button, Page, TextField, ChoiceList, Filters, Icon } from '@shopify/polaris';\nimport { SearchMajorMonotone } from '@shopify/polaris-icons';\nimport { toCurrency } from '../utils/helper';\nvar listTransactions = gql(_templateObject());\n\nvar Index = function Index() {\n  _s();\n\n  var _useState = useState(null),\n      searchValue = _useState[0],\n      setSearchValue = _useState[1];\n\n  var _useState2 = useState(null),\n      transactionItems = _useState2[0],\n      setTransactionItems = _useState2[1];\n\n  var _useState3 = useState(null),\n      nextPaginateToken = _useState3[0],\n      setNextPaginateToken = _useState3[1];\n\n  var _useState4 = useState([]),\n      previousPaginateTokens = _useState4[0],\n      setPreviousPaginateTokens = _useState4[1];\n\n  var _useState5 = useState(0),\n      fetchCount = _useState5[0],\n      setFetchCount = _useState5[1];\n\n  var handleSearchInput = useCallback(function (newValue) {\n    return setSearchValue(newValue);\n  }, []);\n  var fetchTransactions = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return axios({\n              url: 'https://kytejmxrrrgahiikcodklhf6rq.appsync-api.us-east-1.amazonaws.com/graphql',\n              method: 'post',\n              headers: {\n                'x-api-key': 'da2-iwznaxe3h5bxznagzuctrhqekm'\n              },\n              data: {\n                query: print(listTransactions),\n                variables: {\n                  limit: 8\n                }\n              }\n            });\n\n          case 3:\n            data = _context.sent;\n            setTransactionItems(data.data.data.listTransactions.items);\n            console.log('Axios data', data.data.data.listTransactions.items);\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 8]]);\n  })), [listTransactions]);\n  useEffect(function () {\n    fetchTransactions();\n  }, [fetchTransactions]);\n  console.log('Transaction items', transactionItems);\n  var app = createApp({\n    apiKey: '3b01063bac3031d13101100ef3e44fd5',\n    shopOrigin: 'transactions-avanta.myshopify.com'\n  });\n  var redirect = Redirect.create(app);\n\n  var formatDate = function formatDate(rowDate) {\n    var date = new Date(rowDate);\n    var year = new Intl.DateTimeFormat('en', {\n      year: 'numeric'\n    }).format(date);\n    var month = new Intl.DateTimeFormat('en', {\n      month: 'short'\n    }).format(date);\n    var day = new Intl.DateTimeFormat('en', {\n      day: '2-digit'\n    }).format(date);\n    return \"\".concat(day, \"-\").concat(month, \"-\").concat(year);\n  }; // const rows = data.listTransactions.items\n  //     .filter((transaction) => {\n  //         if (searchValue == null) {\n  //             return transaction\n  //         } else if (\n  //             transaction.customer[0].phone.toLowerCase().includes(searchValue.toLowerCase())\n  //         ) {\n  //             return transaction\n  //         }\n  //     })\n  //     .map((transaction) => [\n  //         <Button\n  //             primary\n  //             onClick={() =>\n  //                 redirect.dispatch(Redirect.Action.ADMIN_PATH, {\n  //                     path: `/customers/${transaction.customer[0].id}`,\n  //                     newContext: true\n  //                 })\n  //             }>\n  //             {transaction.customer[0].phone}\n  //         </Button>,\n  //         toCurrency(Number(transaction.totalPrice)),\n  //         toCurrency(Number(transaction.totalBonusAmount)),\n  //         formatDate(transaction.createdAt)\n  //     ])\n\n\n  return __jsx(Page, {\n    title: \"Transactions\"\n  }, __jsx(TextField, {\n    label: \"Search Product\",\n    value: searchValue,\n    onChange: handleSearchInput,\n    prefix: __jsx(Icon, {\n      source: SearchMajorMonotone\n    }),\n    placeholder: \"Search by Customer phone number\"\n  }), __jsx(Button, {\n    onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return getTransactions({\n                variables: {\n                  nextToken: nextPaginateToken,\n                  limit: 4\n                }\n              });\n\n            case 2:\n              setNextPaginateToken(previousPaginateTokens.push(nextPaginateToken));\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))\n  }, \"Paginate next\"), __jsx(Button, {\n    onClick: function onClick() {\n      return getTransactions();\n    }\n  }, \"Paginate previous\"), __jsx(Button, {\n    primary: true,\n    onClick: function onClick() {\n      return redirect.dispatch(Redirect.Action.REMOTE, {\n        url: 'https://dev.d3ivgpkzuz6hkr.amplifyapp.com',\n        newContext: true\n      });\n    }\n  }, \"Create transaction\"));\n}; // export default withApollo(Index)\n\n\n_s(Index, \"i425pEcMmtc6VV6v01PnzycATLs=\");\n\n_c = Index;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/pages/index.js"],"names":["React","useState","useCallback","useEffect","axios","createApp","Redirect","gql","print","Card","DataTable","Button","Page","TextField","ChoiceList","Filters","Icon","SearchMajorMonotone","toCurrency","listTransactions","Index","searchValue","setSearchValue","transactionItems","setTransactionItems","nextPaginateToken","setNextPaginateToken","previousPaginateTokens","setPreviousPaginateTokens","fetchCount","setFetchCount","handleSearchInput","newValue","fetchTransactions","url","method","headers","data","query","variables","limit","items","console","log","app","apiKey","shopOrigin","redirect","create","formatDate","rowDate","date","Date","year","Intl","DateTimeFormat","format","month","day","getTransactions","nextToken","push","dispatch","Action","REMOTE","newContext"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport createApp from '@shopify/app-bridge'\r\nimport { Redirect } from '@shopify/app-bridge/actions'\r\nimport gql from 'graphql-tag'\r\nimport { print } from 'graphql'\r\nimport {\r\n    Card,\r\n    DataTable,\r\n    Button,\r\n    Page,\r\n    TextField,\r\n    ChoiceList,\r\n    Filters,\r\n    Icon\r\n} from '@shopify/polaris'\r\nimport { SearchMajorMonotone } from '@shopify/polaris-icons'\r\nimport { toCurrency } from '../utils/helper'\r\n\r\nconst listTransactions = gql`\r\n    query listTransactions($limit: Int, $nextToken: String) {\r\n        listTransactions(limit: $limit, nextToken: $nextToken) {\r\n            nextToken\r\n            items {\r\n                id\r\n                totalPrice\r\n                totalBonusAmount\r\n                currency\r\n                products {\r\n                    id\r\n                    title\r\n                    bonusPercentage\r\n                    priceAmount\r\n                    priceCurrency\r\n                    image\r\n                }\r\n                customer {\r\n                    id\r\n                    firstName\r\n                    lastName\r\n                    phone\r\n                    email\r\n                }\r\n                createdAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst Index = () => {\r\n    const [searchValue, setSearchValue] = useState(null)\r\n    const [transactionItems, setTransactionItems] = useState(null)\r\n    const [nextPaginateToken, setNextPaginateToken] = useState(null)\r\n    const [previousPaginateTokens, setPreviousPaginateTokens] = useState([])\r\n    const [fetchCount, setFetchCount] = useState(0)\r\n    const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\r\n\r\n    const fetchTransactions = useCallback(async () => {\r\n        try {\r\n            const data = await axios({\r\n                url:\r\n                    'https://kytejmxrrrgahiikcodklhf6rq.appsync-api.us-east-1.amazonaws.com/graphql',\r\n                method: 'post',\r\n                headers: {\r\n                    'x-api-key': 'da2-iwznaxe3h5bxznagzuctrhqekm'\r\n                },\r\n                data: {\r\n                    query: print(listTransactions),\r\n                    variables: {\r\n                        limit: 8\r\n                    }\r\n                }\r\n            })\r\n            setTransactionItems(data.data.data.listTransactions.items)\r\n            console.log('Axios data', data.data.data.listTransactions.items)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }, [listTransactions])\r\n\r\n    useEffect(() => {\r\n        fetchTransactions()\r\n    }, [fetchTransactions])\r\n\r\n    console.log('Transaction items', transactionItems)\r\n\r\n    const app = createApp({\r\n        apiKey: '3b01063bac3031d13101100ef3e44fd5',\r\n        shopOrigin: 'transactions-avanta.myshopify.com'\r\n    })\r\n\r\n    const redirect = Redirect.create(app)\r\n\r\n    const formatDate = (rowDate) => {\r\n        const date = new Date(rowDate)\r\n        const year = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(date)\r\n        const month = new Intl.DateTimeFormat('en', { month: 'short' }).format(date)\r\n        const day = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(date)\r\n\r\n        return `${day}-${month}-${year}`\r\n    }\r\n\r\n    // const rows = data.listTransactions.items\r\n    //     .filter((transaction) => {\r\n    //         if (searchValue == null) {\r\n    //             return transaction\r\n    //         } else if (\r\n    //             transaction.customer[0].phone.toLowerCase().includes(searchValue.toLowerCase())\r\n    //         ) {\r\n    //             return transaction\r\n    //         }\r\n    //     })\r\n    //     .map((transaction) => [\r\n    //         <Button\r\n    //             primary\r\n    //             onClick={() =>\r\n    //                 redirect.dispatch(Redirect.Action.ADMIN_PATH, {\r\n    //                     path: `/customers/${transaction.customer[0].id}`,\r\n    //                     newContext: true\r\n    //                 })\r\n    //             }>\r\n    //             {transaction.customer[0].phone}\r\n    //         </Button>,\r\n    //         toCurrency(Number(transaction.totalPrice)),\r\n    //         toCurrency(Number(transaction.totalBonusAmount)),\r\n    //         formatDate(transaction.createdAt)\r\n    //     ])\r\n\r\n    return (\r\n        <Page title=\"Transactions\">\r\n            <TextField\r\n                label=\"Search Product\"\r\n                value={searchValue}\r\n                onChange={handleSearchInput}\r\n                prefix={<Icon source={SearchMajorMonotone} />}\r\n                placeholder=\"Search by Customer phone number\"\r\n            />\r\n            <Button\r\n                onClick={async () => {\r\n                    await getTransactions({\r\n                        variables: { nextToken: nextPaginateToken, limit: 4 }\r\n                    })\r\n                    setNextPaginateToken(previousPaginateTokens.push(nextPaginateToken))\r\n                }}>\r\n                Paginate next\r\n            </Button>\r\n            <Button onClick={() => getTransactions()}>Paginate previous</Button>\r\n            <Button\r\n                primary\r\n                onClick={() =>\r\n                    redirect.dispatch(Redirect.Action.REMOTE, {\r\n                        url: 'https://dev.d3ivgpkzuz6hkr.amplifyapp.com',\r\n                        newContext: true\r\n                    })\r\n                }>\r\n                Create transaction\r\n            </Button>\r\n            {/* <Card>\r\n                <DataTable\r\n                    columnContentTypes={['text', 'text', 'text', 'text']}\r\n                    headings={[\r\n                        'Customer phone number',\r\n                        'TotalPrice',\r\n                        'TotalBonusAmount',\r\n                        'CreatedAt'\r\n                    ]}\r\n                    rows={rows}\r\n                />\r\n            </Card> */}\r\n        </Page>\r\n    )\r\n}\r\n\r\n// export default withApollo(Index)\r\nexport default Index\r\n"]},"metadata":{},"sourceType":"module"}