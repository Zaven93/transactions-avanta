{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query listPaymentRequest($limit: Int, $nextToken: String) {\\n        listPaymentRequests(\\n            limit: $limit\\n            nextToken: $nextToken\\n            filter: { status: { eq: DECLINED } }\\n        ) {\\n            items {\\n                bonusAmount\\n                createdAt\\n                customerId\\n                id\\n                orderId\\n                status\\n                updatedAt\\n            }\\n            nextToken\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Table, Icon, Popup, Header } from 'semantic-ui-react';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { Badge, Button } from '@shopify/polaris';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport config from 'aws-amplify';\nAPI.configure(config);\nvar listPaymentRequest = gql(_templateObject());\n\nvar DeclinedPaymentRequest = function DeclinedPaymentRequest() {\n  _s();\n\n  var _useState = useState(''),\n      nextPaginateToken = _useState[0],\n      setNextPaginateToken = _useState[1];\n\n  var _useState2 = useState([]),\n      paymentRequestItems = _useState2[0],\n      setPaymentRequestItems = _useState2[1];\n\n  var fetchAcceptedPayments = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return API.graphql(graphqlOperation(listPaymentRequest, {\n              limit: 20\n            }));\n\n          case 3:\n            res = _context.sent;\n            setNextPaginateToken(res.data.listPaymentRequests.nextToken);\n            setPaymentRequestItems(res.data.listPaymentRequests.items);\n            console.log('Accepted payments', res.data);\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 9]]);\n  })), []);\n  useEffect(function () {\n    fetchAcceptedPayments();\n  }, [fetchAcceptedPayments]);\n\n  var loadMore = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return API.graphql(graphqlOperation(listPaymentRequest, {\n                limit: 20,\n                nextToken: nextPaginateToken\n              }));\n\n            case 3:\n              res = _context2.sent;\n              setNextPaginateToken(res.data.listPaymentRequests.nextToken);\n              setPaymentRequestItems([].concat(_toConsumableArray(paymentRequestItems), _toConsumableArray(res.data.listPaymentRequests.items)));\n              _context2.next = 11;\n              break;\n\n            case 8:\n              _context2.prev = 8;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(_context2.t0);\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 8]]);\n    }));\n\n    return function loadMore() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(React.Fragment, null, __jsx(Table, {\n    celled: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Customer Id\"), __jsx(Table.HeaderCell, null, \"Bonus Amount\"), __jsx(Table.HeaderCell, null, \"Created At\"), __jsx(Table.HeaderCell, null, \"Updated At\"), __jsx(Table.HeaderCell, null, \"Status\"))), __jsx(Table.Body, null, paymentRequestItems && paymentRequestItems.map(function (item) {\n    return __jsx(Table.Row, {\n      key: item.id\n    }, __jsx(Table.Cell, null, __jsx(Badge, {\n      size: \"small\"\n    }, item.customerId)), __jsx(Table.Cell, null, toCurrency(item.bonusAmount)), __jsx(Table.Cell, null, formatDate(item.createdAt)), __jsx(Table.Cell, null, formatDate(item.updatedAt)), __jsx(Table.Cell, null, __jsx(Badge, {\n      size: \"small\",\n      progress: \"incomplete\",\n      status: \"critical\"\n    }, item.status)));\n  }))), __jsx(Button, {\n    disabled: !nextPaginateToken,\n    primary: true,\n    onClick: loadMore\n  }, \"Load more\"));\n};\n\n_s(DeclinedPaymentRequest, \"d2PcopmrbjxGhcROvsgIJebC75w=\");\n\n_c = DeclinedPaymentRequest;\nexport default DeclinedPaymentRequest;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeclinedPaymentRequest\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/components/DeclinedPaymentRequest.js"],"names":["React","useState","useEffect","useCallback","Table","Icon","Popup","Header","API","graphqlOperation","Badge","Button","toCurrency","formatDate","config","configure","listPaymentRequest","gql","DeclinedPaymentRequest","nextPaginateToken","setNextPaginateToken","paymentRequestItems","setPaymentRequestItems","fetchAcceptedPayments","graphql","limit","res","data","listPaymentRequests","nextToken","items","console","log","loadMore","map","item","id","customerId","bonusAmount","createdAt","updatedAt","status"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,QAAwD,OAAxD;AACA,SAASC,KAAT,EAAgBC,IAAhB,EAAsBC,KAAtB,EAA6BC,MAA7B,QAA2C,mBAA3C;AACA,SAASC,GAAT,EAAcC,gBAAd,QAAsC,aAAtC;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,kBAA9B;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,iBAAvC;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEAN,GAAG,CAACO,SAAJ,CAAcD,MAAd;AAEA,IAAME,kBAAkB,GAAGC,GAAH,mBAAxB;;AAqBA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,GAAM;AAAA;;AAAA,kBACiBjB,QAAQ,CAAC,EAAD,CADzB;AAAA,MAC1BkB,iBAD0B;AAAA,MACPC,oBADO;;AAAA,mBAEqBnB,QAAQ,CAAC,EAAD,CAF7B;AAAA,MAE1BoB,mBAF0B;AAAA,MAELC,sBAFK;;AAIjC,MAAMC,qBAAqB,GAAGpB,WAAW,wEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEhBK,GAAG,CAACgB,OAAJ,CAAYf,gBAAgB,CAACO,kBAAD,EAAqB;AAAES,cAAAA,KAAK,EAAE;AAAT,aAArB,CAA5B,CAFgB;;AAAA;AAE5BC,YAAAA,GAF4B;AAGlCN,YAAAA,oBAAoB,CAACM,GAAG,CAACC,IAAJ,CAASC,mBAAT,CAA6BC,SAA9B,CAApB;AACAP,YAAAA,sBAAsB,CAACI,GAAG,CAACC,IAAJ,CAASC,mBAAT,CAA6BE,KAA9B,CAAtB;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCN,GAAG,CAACC,IAArC;AALkC;AAAA;;AAAA;AAAA;AAAA;AAOlCI,YAAAA,OAAO,CAACC,GAAR;;AAPkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,IAStC,EATsC,CAAzC;AAWA9B,EAAAA,SAAS,CAAC,YAAM;AACZqB,IAAAA,qBAAqB;AACxB,GAFQ,EAEN,CAACA,qBAAD,CAFM,CAAT;;AAIA,MAAMU,QAAQ;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAESzB,GAAG,CAACgB,OAAJ,CACdf,gBAAgB,CAACO,kBAAD,EAAqB;AAAES,gBAAAA,KAAK,EAAE,EAAT;AAAaI,gBAAAA,SAAS,EAAEV;AAAxB,eAArB,CADF,CAFT;;AAAA;AAEHO,cAAAA,GAFG;AAKTN,cAAAA,oBAAoB,CAACM,GAAG,CAACC,IAAJ,CAASC,mBAAT,CAA6BC,SAA9B,CAApB;AACAP,cAAAA,sBAAsB,8BAAKD,mBAAL,sBAA6BK,GAAG,CAACC,IAAJ,CAASC,mBAAT,CAA6BE,KAA1D,GAAtB;AANS;AAAA;;AAAA;AAAA;AAAA;AAQTC,cAAAA,OAAO,CAACC,GAAR;;AARS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAARC,QAAQ;AAAA;AAAA;AAAA,KAAd;;AAYA,SACI,4BACI,MAAC,KAAD;AAAO,IAAA,MAAM;AAAb,KACI,MAAC,KAAD,CAAO,MAAP,QACI,MAAC,KAAD,CAAO,GAAP,QACI,MAAC,KAAD,CAAO,UAAP,sBADJ,EAEI,MAAC,KAAD,CAAO,UAAP,uBAFJ,EAGI,MAAC,KAAD,CAAO,UAAP,qBAHJ,EAII,MAAC,KAAD,CAAO,UAAP,qBAJJ,EAKI,MAAC,KAAD,CAAO,UAAP,iBALJ,CADJ,CADJ,EAUI,MAAC,KAAD,CAAO,IAAP,QACKZ,mBAAmB,IAChBA,mBAAmB,CAACa,GAApB,CAAwB,UAACC,IAAD;AAAA,WACpB,MAAC,KAAD,CAAO,GAAP;AAAW,MAAA,GAAG,EAAEA,IAAI,CAACC;AAArB,OACI,MAAC,KAAD,CAAO,IAAP,QACI,MAAC,KAAD;AAAO,MAAA,IAAI,EAAC;AAAZ,OAAqBD,IAAI,CAACE,UAA1B,CADJ,CADJ,EAII,MAAC,KAAD,CAAO,IAAP,QAAazB,UAAU,CAACuB,IAAI,CAACG,WAAN,CAAvB,CAJJ,EAKI,MAAC,KAAD,CAAO,IAAP,QAAazB,UAAU,CAACsB,IAAI,CAACI,SAAN,CAAvB,CALJ,EAMI,MAAC,KAAD,CAAO,IAAP,QAAa1B,UAAU,CAACsB,IAAI,CAACK,SAAN,CAAvB,CANJ,EAOI,MAAC,KAAD,CAAO,IAAP,QACI,MAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,QAAQ,EAAC,YAA7B;AAA0C,MAAA,MAAM,EAAC;AAAjD,OACKL,IAAI,CAACM,MADV,CADJ,CAPJ,CADoB;AAAA,GAAxB,CAFR,CAVJ,CADJ,EA8BI,MAAC,MAAD;AAAQ,IAAA,QAAQ,EAAE,CAACtB,iBAAnB;AAAsC,IAAA,OAAO,MAA7C;AAA8C,IAAA,OAAO,EAAEc;AAAvD,iBA9BJ,CADJ;AAoCH,CAnED;;GAAMf,sB;;KAAAA,sB;AAqEN,eAAeA,sBAAf","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\r\nimport { Table, Icon, Popup, Header } from 'semantic-ui-react'\r\nimport { API, graphqlOperation } from 'aws-amplify'\r\nimport { Badge, Button } from '@shopify/polaris'\r\nimport { toCurrency, formatDate } from '../utils/helper'\r\nimport config from 'aws-amplify'\r\n\r\nAPI.configure(config)\r\n\r\nconst listPaymentRequest = gql`\r\n    query listPaymentRequest($limit: Int, $nextToken: String) {\r\n        listPaymentRequests(\r\n            limit: $limit\r\n            nextToken: $nextToken\r\n            filter: { status: { eq: DECLINED } }\r\n        ) {\r\n            items {\r\n                bonusAmount\r\n                createdAt\r\n                customerId\r\n                id\r\n                orderId\r\n                status\r\n                updatedAt\r\n            }\r\n            nextToken\r\n        }\r\n    }\r\n`\r\n\r\nconst DeclinedPaymentRequest = () => {\r\n    const [nextPaginateToken, setNextPaginateToken] = useState('')\r\n    const [paymentRequestItems, setPaymentRequestItems] = useState([])\r\n\r\n    const fetchAcceptedPayments = useCallback(async () => {\r\n        try {\r\n            const res = await API.graphql(graphqlOperation(listPaymentRequest, { limit: 20 }))\r\n            setNextPaginateToken(res.data.listPaymentRequests.nextToken)\r\n            setPaymentRequestItems(res.data.listPaymentRequests.items)\r\n            console.log('Accepted payments', res.data)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        fetchAcceptedPayments()\r\n    }, [fetchAcceptedPayments])\r\n\r\n    const loadMore = async () => {\r\n        try {\r\n            const res = await API.graphql(\r\n                graphqlOperation(listPaymentRequest, { limit: 20, nextToken: nextPaginateToken })\r\n            )\r\n            setNextPaginateToken(res.data.listPaymentRequests.nextToken)\r\n            setPaymentRequestItems([...paymentRequestItems, ...res.data.listPaymentRequests.items])\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Table celled>\r\n                <Table.Header>\r\n                    <Table.Row>\r\n                        <Table.HeaderCell>Customer Id</Table.HeaderCell>\r\n                        <Table.HeaderCell>Bonus Amount</Table.HeaderCell>\r\n                        <Table.HeaderCell>Created At</Table.HeaderCell>\r\n                        <Table.HeaderCell>Updated At</Table.HeaderCell>\r\n                        <Table.HeaderCell>Status</Table.HeaderCell>\r\n                    </Table.Row>\r\n                </Table.Header>\r\n                <Table.Body>\r\n                    {paymentRequestItems &&\r\n                        paymentRequestItems.map((item) => (\r\n                            <Table.Row key={item.id}>\r\n                                <Table.Cell>\r\n                                    <Badge size=\"small\">{item.customerId}</Badge>\r\n                                </Table.Cell>\r\n                                <Table.Cell>{toCurrency(item.bonusAmount)}</Table.Cell>\r\n                                <Table.Cell>{formatDate(item.createdAt)}</Table.Cell>\r\n                                <Table.Cell>{formatDate(item.updatedAt)}</Table.Cell>\r\n                                <Table.Cell>\r\n                                    <Badge size=\"small\" progress=\"incomplete\" status=\"critical\">\r\n                                        {item.status}\r\n                                    </Badge>\r\n                                </Table.Cell>\r\n                            </Table.Row>\r\n                        ))}\r\n                </Table.Body>\r\n            </Table>\r\n            <Button disabled={!nextPaginateToken} primary onClick={loadMore}>\r\n                Load more\r\n            </Button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DeclinedPaymentRequest\r\n"]},"metadata":{},"sourceType":"module"}