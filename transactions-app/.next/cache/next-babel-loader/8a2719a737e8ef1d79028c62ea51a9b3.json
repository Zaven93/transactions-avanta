{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { API, graphqlOperation } from 'aws-amplify';\nimport gql from 'graphql-tag';\nimport { ResourcePicker } from '@shopify/app-bridge/actions';\nimport { Page, Layout, Badge } from '@shopify/polaris';\nimport { CustomersMajorMonotone } from '@shopify/polaris-icons';\nimport { Table, TableCell, Icon, Popup } from 'semantic-ui-react';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nAPI.configure(config);\nconst listPaymentRequest = gql`\n    query listPaymentRequest {\n        listPaymentRequests {\n            items {\n                bonusAmount\n                createdAt\n                customerId\n                id\n                orderId\n                status\n                updatedAt\n            }\n        }\n    }\n`;\n\nclass AcceptPayment extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      paymentRequestItems: this.props.paymentRequests\n    });\n  }\n\n  render() {\n    const {\n      paymentRequestItems\n    } = this.state;\n    console.log('Payment request data from class component', this.state.paymentRequestItems);\n    return __jsx(Page, {\n      title: \"Payment Request\"\n    }, __jsx(Layout, null, __jsx(Table, {\n      selectable: true,\n      celled: true\n    }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Customer Id\"), __jsx(Table.HeaderCell, null, \"Order Id\"), __jsx(Table.HeaderCell, null, \"Bonus Amount\"), __jsx(Table.HeaderCell, null, \"Created At\"), __jsx(Table.HeaderCell, null, \"Updated At\"), __jsx(Table.HeaderCell, null, \"Status\"), __jsx(Table.HeaderCell, null, \"Action\"))))));\n  }\n\n}\n\nexport async function getStaticProps() {\n  let result;\n\n  try {\n    result = await API.graphql(graphqlOperation(listPaymentRequest));\n  } catch (error) {\n    console.log(error);\n  }\n\n  if (result.errors) {\n    console.warn('Failed to fetch transactions.', result.errors);\n    return {\n      props: {\n        paymentRequests: []\n      }\n    };\n  }\n\n  if (result.data !== null) {\n    return {\n      props: {\n        paymentRequests: result.data\n      }\n    };\n  }\n}\nexport default AcceptPayment;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/pages/accept-payment.js"],"names":["API","graphqlOperation","gql","ResourcePicker","Page","Layout","Badge","CustomersMajorMonotone","Table","TableCell","Icon","Popup","toCurrency","formatDate","config","configure","listPaymentRequest","AcceptPayment","React","Component","paymentRequestItems","props","paymentRequests","render","state","console","log","getStaticProps","result","graphql","error","errors","warn","data"],"mappings":";;;;;AAAA,SAASA,GAAT,EAAcC,gBAAd,QAAsC,aAAtC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,cAAT,QAA+B,6BAA/B;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,KAAvB,QAAoC,kBAApC;AACA,SAASC,sBAAT,QAAuC,wBAAvC;AACA,SAASC,KAAT,EAAgBC,SAAhB,EAA2BC,IAA3B,EAAiCC,KAAjC,QAA8C,mBAA9C;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,iBAAvC;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AAEAd,GAAG,CAACe,SAAJ,CAAcD,MAAd;AAEA,MAAME,kBAAkB,GAAGd,GAAI;;;;;;;;;;;;;;CAA/B;;AAgBA,MAAMe,aAAN,SAA4BC,KAAK,CAACC,SAAlC,CAA4C;AAAA;AAAA;;AAAA,mCAChC;AACJC,MAAAA,mBAAmB,EAAE,KAAKC,KAAL,CAAWC;AAD5B,KADgC;AAAA;;AAIxCC,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEH,MAAAA;AAAF,QAA0B,KAAKI,KAArC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,2CAAZ,EAAyD,KAAKF,KAAL,CAAWJ,mBAApE;AACA,WACI,MAAC,IAAD;AAAM,MAAA,KAAK,EAAC;AAAZ,OACI,MAAC,MAAD,QACI,MAAC,KAAD;AAAO,MAAA,UAAU,MAAjB;AAAkB,MAAA,MAAM;AAAxB,OACI,MAAC,KAAD,CAAO,MAAP,QACI,MAAC,KAAD,CAAO,GAAP,QACI,MAAC,KAAD,CAAO,UAAP,sBADJ,EAEI,MAAC,KAAD,CAAO,UAAP,mBAFJ,EAGI,MAAC,KAAD,CAAO,UAAP,uBAHJ,EAII,MAAC,KAAD,CAAO,UAAP,qBAJJ,EAKI,MAAC,KAAD,CAAO,UAAP,qBALJ,EAMI,MAAC,KAAD,CAAO,UAAP,iBANJ,EAOI,MAAC,KAAD,CAAO,UAAP,iBAPJ,CADJ,CADJ,CADJ,CADJ,CADJ;AA2EH;;AAlFuC;;AAqF5C,OAAO,eAAeO,cAAf,GAAgC;AACnC,MAAIC,MAAJ;;AACA,MAAI;AACAA,IAAAA,MAAM,GAAG,MAAM5B,GAAG,CAAC6B,OAAJ,CAAY5B,gBAAgB,CAACe,kBAAD,CAA5B,CAAf;AACH,GAFD,CAEE,OAAOc,KAAP,EAAc;AACZL,IAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AACH;;AAED,MAAIF,MAAM,CAACG,MAAX,EAAmB;AACfN,IAAAA,OAAO,CAACO,IAAR,CAAa,+BAAb,EAA8CJ,MAAM,CAACG,MAArD;AACA,WAAO;AAAEV,MAAAA,KAAK,EAAE;AAAEC,QAAAA,eAAe,EAAE;AAAnB;AAAT,KAAP;AACH;;AACD,MAAIM,MAAM,CAACK,IAAP,KAAgB,IAApB,EAA0B;AACtB,WAAO;AAAEZ,MAAAA,KAAK,EAAE;AAAEC,QAAAA,eAAe,EAAEM,MAAM,CAACK;AAA1B;AAAT,KAAP;AACH;AACJ;AAED,eAAehB,aAAf","sourcesContent":["import { API, graphqlOperation } from 'aws-amplify'\r\nimport gql from 'graphql-tag'\r\nimport { ResourcePicker } from '@shopify/app-bridge/actions'\r\nimport { Page, Layout, Badge } from '@shopify/polaris'\r\nimport { CustomersMajorMonotone } from '@shopify/polaris-icons'\r\nimport { Table, TableCell, Icon, Popup } from 'semantic-ui-react'\r\nimport { toCurrency, formatDate } from '../utils/helper'\r\nimport config from '../aws-exports'\r\n\r\nAPI.configure(config)\r\n\r\nconst listPaymentRequest = gql`\r\n    query listPaymentRequest {\r\n        listPaymentRequests {\r\n            items {\r\n                bonusAmount\r\n                createdAt\r\n                customerId\r\n                id\r\n                orderId\r\n                status\r\n                updatedAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nclass AcceptPayment extends React.Component {\r\n    state = {\r\n        paymentRequestItems: this.props.paymentRequests\r\n    }\r\n    render() {\r\n        const { paymentRequestItems } = this.state\r\n        console.log('Payment request data from class component', this.state.paymentRequestItems)\r\n        return (\r\n            <Page title=\"Payment Request\">\r\n                <Layout>\r\n                    <Table selectable celled>\r\n                        <Table.Header>\r\n                            <Table.Row>\r\n                                <Table.HeaderCell>Customer Id</Table.HeaderCell>\r\n                                <Table.HeaderCell>Order Id</Table.HeaderCell>\r\n                                <Table.HeaderCell>Bonus Amount</Table.HeaderCell>\r\n                                <Table.HeaderCell>Created At</Table.HeaderCell>\r\n                                <Table.HeaderCell>Updated At</Table.HeaderCell>\r\n                                <Table.HeaderCell>Status</Table.HeaderCell>\r\n                                <Table.HeaderCell>Action</Table.HeaderCell>\r\n                            </Table.Row>\r\n                        </Table.Header>\r\n                        {/* <Table.Body>\r\n                            {paymentRequestItems &&\r\n                                paymentRequestItems.map((item) => (\r\n                                    <Table.Row key={item.id}>\r\n                                        <Table.Cell>\r\n                                            <Badge size=\"small\">{item.customerId}</Badge>\r\n                                        </Table.Cell>\r\n                                        <Table.Cell>\r\n                                            <Badge size=\"small\">{item.orderId}</Badge>\r\n                                        </Table.Cell>\r\n                                        <Table.Cell>{toCurrency(item.bonusAmount)}</Table.Cell>\r\n                                        <Table.Cell>{formatDate(item.createdAt)}</Table.Cell>\r\n                                        <Table.Cell>{formatDate(item.updatedAt)}</Table.Cell>\r\n                                        <Table.Cell>\r\n                                            <Badge\r\n                                                size=\"small\"\r\n                                                status={\r\n                                                    item.status === 'PENDING'\r\n                                                        ? 'attention'\r\n                                                        : item.status === 'APPROVED'\r\n                                                        ? 'success'\r\n                                                        : 'critical'\r\n                                                }>\r\n                                                {item.status}\r\n                                            </Badge>\r\n                                        </Table.Cell>\r\n                                        <Table.Cell className=\"actions-cell\">\r\n                                            <Popup\r\n                                                content=\"Approve payment\"\r\n                                                trigger={\r\n                                                    <Icon\r\n                                                        className=\"accept\"\r\n                                                        name=\"check\"\r\n                                                        onClick={() => setOpenPicker(true)}\r\n                                                    />\r\n                                                }\r\n                                            />\r\n                                            <Popup\r\n                                                content=\"Decline payment\"\r\n                                                trigger={\r\n                                                    <Icon\r\n                                                        className=\"decline\"\r\n                                                        // color={hoveredItemId === item.id ? 'red' : ''}\r\n                                                        // className={\r\n                                                        //     hoveredItemId === item.id ? 'decline-hovered' : ''\r\n                                                        // }\r\n                                                        name=\"remove\"\r\n                                                        // onMouseEnter={() => setHoveredItemId(item.id)}\r\n                                                        // onMouseLeave={() => setHoveredItemId(null)}\r\n                                                    />\r\n                                                }\r\n                                            />\r\n                                        </Table.Cell>\r\n                                    </Table.Row>\r\n                                ))}\r\n                        </Table.Body> */}\r\n                    </Table>\r\n                </Layout>\r\n            </Page>\r\n        )\r\n    }\r\n}\r\n\r\nexport async function getStaticProps() {\r\n    let result\r\n    try {\r\n        result = await API.graphql(graphqlOperation(listPaymentRequest))\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n\r\n    if (result.errors) {\r\n        console.warn('Failed to fetch transactions.', result.errors)\r\n        return { props: { paymentRequests: [] } }\r\n    }\r\n    if (result.data !== null) {\r\n        return { props: { paymentRequests: result.data } }\r\n    }\r\n}\r\n\r\nexport default AcceptPayment\r\n"]},"metadata":{},"sourceType":"module"}