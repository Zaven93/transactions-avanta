{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { Modal, Thumbnail, Checkbox, TextStyle } from '@shopify/polaris';\nimport { Table, Header } from 'semantic-ui-react';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nimport BranchRow from './BranchRow';\nimport { subscribe } from 'graphql';\nAPI.configure(config);\nconst listProducts = gql`\n    query Products {\n        products(first: 100) {\n            edges {\n                node {\n                    id\n                    title\n                    tags\n                    description(truncateAt: 100)\n                    variants(first: 1) {\n                        edges {\n                            node {\n                                id\n                                price\n                            }\n                        }\n                    }\n                    images(first: 1) {\n                        edges {\n                            node {\n                                originalSrc\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n`;\nconst createBranchProduct = gql`\n    mutation createBranchProduct($input: CreateBranchProductInput!) {\n        createBranchProduct(input: $input) {\n            id\n            branchId\n            productId\n            tags\n        }\n    }\n`;\nconst productUpdate = gql`\n    mutation productUpdate($input: ProductInput!) {\n        productUpdate(input: $input) {\n            product {\n                id\n                metafields(first: 100) {\n                    edges {\n                        node {\n                            namespace\n                            key\n                            value\n                        }\n                    }\n                }\n            }\n        }\n    }\n`;\nconst getBranchById = gql`\n    query getBranch($id: ID!) {\n        getBranch(id: $id) {\n            transactions(sortDirection: DESC) {\n                items {\n                    branchId\n                    createdAt\n                    currency\n                    note\n                    customer {\n                        email\n                        id\n                        firstName\n                        lastName\n                        phone\n                    }\n                    totalBonusAmount\n                    totalPrice\n                    updatedAt\n                    sortDate\n                }\n            }\n            branchName\n            adminId\n            id\n            branchProducts {\n                items {\n                    branchId\n                    createdAt\n                    id\n                    productId\n                    tags\n                    updatedAt\n                }\n            }\n        }\n    }\n`;\nconst updateBranchProduct = gql`\n    mutation updateBranchProduct($input: UpdateBranchProductInput!) {\n        updateBranchProduct(input: $input) {\n            id\n            tags\n            branchId\n            productId\n        }\n    }\n`;\nconst deleteBranchProduct = gql`\n    mutation deleteBranchProduct($input: DeleteBranchProductInput!) {\n        deleteBranchProduct(input: $input) {\n            id\n        }\n    }\n`;\nconst onCreateBranchProduct = gql`\n    subscription onCreateBranchProduct {\n        onCreateBranchProduct {\n            id\n        }\n    }\n`;\nconst onUpdateBranchProduct = gql`\n    subscription onUpdateBranchProduct {\n        onUpdateBranchProduct {\n            id\n        }\n    }\n`;\nconst onDeleteBranchProduct = gql`\n    subscription onDeleteBranchProduct {\n        onDeleteBranchProduct {\n            id\n        }\n    }\n`;\n\nconst ProductsList = ({\n  active,\n  handleChange,\n  branchId,\n  branchName\n}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(listProducts);\n  const {\n    0: branchProductSubscription,\n    1: setBranchProductSubscription\n  } = useState('');\n  const {\n    0: rowId,\n    1: setRowId\n  } = useState([]);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    products: []\n  });\n  const {\n    0: searchValue,\n    1: setSearchValue\n  } = useState(null);\n  const {\n    0: branchInfo,\n    1: setBranchInfo\n  } = useState('');\n  const handleSearchInput = useCallback(newValue => setSearchValue(newValue), []);\n\n  const getBranch = async () => {\n    try {\n      const branch = await API.graphql(graphqlOperation(getBranchById, {\n        id: branchId\n      }));\n      setBranchInfo(branch.data.getBranch);\n      setRowId([...rowId, ...branch.data.getBranch.branchProducts.items.map(item => item.productId)]);\n      setState({\n        products: [...state.products, ...branch.data.getBranch.branchProducts.items.map(product => ({\n          id: product.productId\n        }))]\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getBranch();\n    const createListener = API.graphql(graphqlOperation(onCreateBranchProduct)).subscribe({\n      next: createdBranchProduct => setBranchProductSubscription(createdBranchProduct)\n    });\n    const updateListener = API.graphql(graphqlOperation(onUpdateBranchProduct)).subscribe({\n      next: updatedBranchProduct => setBranchProductSubscription(updatedBranchProduct)\n    });\n    const deleteListener = API.graphql(graphqlOperation(onDeleteBranchProduct)).subscribe({\n      next: deletedBranchProduct => setBranchProductSubscription(deletedBranchProduct)\n    });\n    return () => {\n      createListener.unsubscribe();\n      updateListener.unsubscribe();\n      deleteListener.unsubscribe();\n    };\n  }, [branchId, branchProductSubscription]);\n\n  if (loading) {\n    return __jsx(\"div\", null, \"Loading products...\");\n  }\n\n  if (error) {\n    return __jsx(\"div\", null, \"Some error occured\");\n  }\n\n  console.log('Branch info from BranchProducts', branchInfo);\n  console.log('Products from state in BranchProducts', state.products);\n\n  const deleteProductsFromBranch = () => {\n    const productsToDeleteFromBranch = branchInfo.branchProducts.items.filter(branchProduct => !state.products.map(product => product.id).includes(branchProduct.productId));\n    console.log('Products that are not included in products array', productsToDeleteFromBranch);\n    Promise.all(productsToDeleteFromBranch.map(deleteProduct => {\n      API.graphql(graphqlOperation(deleteBranchProduct, {\n        input: {\n          id: deleteProduct.id\n        }\n      }));\n    })).catch(err => console.log(err));\n    return;\n  };\n\n  const addProductsToBranch = () => {\n    Promise.all(state.products.map(product => {\n      const updatedProduct = branchInfo.branchProducts.items.filter(branchProduct => branchProduct.productId === product.id)[0];\n\n      if (updatedProduct) {\n        console.log('Yes it containes products that should be updated', updatedProduct);\n        API.graphql(graphqlOperation(updateBranchProduct, {\n          input: {\n            id: updatedProduct.id,\n            tags: product.tags\n          }\n        }));\n      } else {\n        console.log(\"No it doesn't contain the product that should be updated\");\n        API.graphql(graphqlOperation(createBranchProduct, {\n          input: {\n            id: uuidv4(),\n            branchId: branchId,\n            productId: product.id,\n            tags: product.tags\n          }\n        }));\n      }\n    })).catch(err => console.log(err));\n    return;\n  }; // const updateProducts = async () => {\n  //     try {\n  //         await axios({\n  //             url: 'http://localhost:3000/updateProduct',\n  //             method: 'POST',\n  //             data: {\n  //                 products: state.products\n  //             }\n  //         })\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // }\n\n\n  console.log('State data from product list', state);\n  console.log('BranchInfo from modalZaven jan', branchInfo);\n  return __jsx(Modal, {\n    open: active,\n    onClose: () => handleChange(),\n    title: \"Choose products\",\n    primaryAction: {\n      content: 'Save changes',\n      onAction: () => {\n        addProductsToBranch();\n        deleteProductsFromBranch(); // updateProducts()\n\n        handleChange();\n      }\n    }\n  }, __jsx(Modal.Section, null, __jsx(Table, {\n    celled: true,\n    striped: true,\n    selectable: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Products\"), __jsx(Table.HeaderCell, {\n    textAlign: \"center\"\n  }, \"Price\"), __jsx(Table.HeaderCell, null, \"Bonus Percentage\"))), __jsx(Table.Body, null, data && branchInfo && data.products.edges // .filter((product) => {\n  //     if (searchValue == null) {\n  //         return product\n  //     } else if (\n  //         product.node.title\n  //             .toLowerCase()\n  //             .includes(searchValue.toLowerCase())\n  //     ) {\n  //         return product\n  //     }\n  // })\n  .map(product => __jsx(BranchRow, {\n    rowId: rowId,\n    setRowId: setRowId,\n    branchInfo: branchInfo,\n    branchId: branchId,\n    product: product,\n    state: state,\n    setState: setState\n  }) // <Table.Row\n  //     key={product.node.id}\n  //     >\n  //     <Table.Cell>\n  //         <Header as=\"h4\" image className=\"product-header\">\n  //             <Checkbox\n  //                 checked={\n  //                     rowId.includes(product.node.id) && true\n  //                 }\n  //                 onClick={() => {\n  //                     if (rowId.includes(product.node.id)) {\n  //                         setRowId(\n  //                             rowId.filter((id) => id !== product.node.id)\n  //                         )\n  //                         setState({\n  //                             products: state.products.filter(\n  //                                 (filteredProduct) =>\n  //                                     filteredProduct.node.id !==\n  //                                     product.node.id\n  //                             )\n  //                         })\n  //                     } else {\n  //                         setRowId([...rowId, product.node.id])\n  //                         setState({\n  //                             ...state,\n  //                             products: [...state.products, product]\n  //                         })\n  //                     }\n  //                 }}\n  //             />\n  //             <Thumbnail\n  //                 source={\n  //                     product.node.images.edges[0] &&\n  //                     product.node.images.edges[0].node\n  //                         .originalSrc\n  //                 }\n  //                 size=\"small\"\n  //                 alt=\"\"\n  //             />\n  //             <Header.Content>\n  //                 {product.node.title}\n  //             </Header.Content>\n  //         </Header>\n  //     </Table.Cell>\n  //     <Table.Cell>\n  //         <TextStyle variation=\"subdued\">\n  //             {product.node.description}\n  //         </TextStyle>\n  //     </Table.Cell>\n  //     <Table.Cell textAlign=\"center\">\n  //         <TextStyle variation=\"subdued\">\n  //             {product.node.variants.edges[0] &&\n  //                 toCurrency(\n  //                     product.node.variants.edges[0].node.price\n  //                 )}\n  //         </TextStyle>\n  //     </Table.Cell>\n  // </Table.Row>\n  )), __jsx(Table.Footer, {\n    fullWidth: true\n  }, __jsx(Table.Row, null)))));\n};\n\nexport default ProductsList;","map":null,"metadata":{},"sourceType":"module"}