{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback } from 'react';\nimport createApp from '@shopify/app-bridge';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport withApollo from '../lib/withApollo';\nimport { Card, DataTable, Button, Page, TextField, ChoiceList, Filters } from '@shopify/polaris';\nimport { toCurrency } from '../utils/helper';\nconst listTransactions = gql`\n    query listTransactions {\n        listTransactions {\n            items {\n                id\n                totalPrice\n                totalBonusAmount\n                currency\n                products {\n                    id\n                    title\n                    bonusPercentage\n                    priceAmount\n                    priceCurrency\n                    image\n                }\n                customer {\n                    id\n                    firstName\n                    lastName\n                    phone\n                    email\n                }\n                createdAt\n            }\n        }\n    }\n`;\n\nconst Index = () => {\n  console.log('Hi there Zaven jan');\n  const {\n    0: filterById,\n    1: setFilterById\n  } = useState(null);\n  const {\n    0: queryValue,\n    1: setQueryValue\n  } = useState(null);\n  const {\n    loading,\n    data,\n    error\n  } = useQuery(listTransactions);\n  const handleFilterByIdChange = useCallback(value => setFilterById(value), []);\n  const handleFiltersQueryChange = useCallback(value => setQueryValue(value), []);\n  const handleFilterByIdRemove = useCallback(() => setFilterById(null), []);\n  const handleQueryValueRemove = useCallback(() => setQueryValue(null), []);\n  const handleFiltersClearAll = useCallback(() => {\n    handleFilterByIdRemove, handleQueryValueRemove;\n  }, [handleFilterByIdRemove, handleQueryValueRemove]);\n  const filters = [{\n    key: 'filterById',\n    label: 'FilterById',\n    filter: __jsx(ChoiceList, {\n      title: \"Filter by Id\",\n      titleHidden: true,\n      choices: [{\n        label: 'Order Id',\n        value: 'Order Id'\n      }, {\n        label: 'Customer Id',\n        value: 'Customer Id'\n      }],\n      selected: filterById || [],\n      onChange: handleFilterByIdChange,\n      allowMultiple: true\n    })\n  }];\n  const app = createApp({\n    apiKey: '3b01063bac3031d13101100ef3e44fd5',\n    shopOrigin: 'transactions-avanta.myshopify.com'\n  });\n  const redirect = Redirect.create(app);\n\n  if (loading) {\n    return __jsx(\"div\", null, \"Loading...\");\n  }\n\n  if (error) {\n    console.log('Some error occured Zaven', error);\n  }\n\n  const formatDate = rowDate => {\n    const date = new Date(rowDate);\n    const year = new Intl.DateTimeFormat('en', {\n      year: 'numeric'\n    }).format(date);\n    const month = new Intl.DateTimeFormat('en', {\n      month: 'short'\n    }).format(date);\n    const day = new Intl.DateTimeFormat('en', {\n      day: '2-digit'\n    }).format(date);\n    return `${day}-${month}-${year}`;\n  };\n\n  const rows = data.listTransactions.items.map(transaction => [__jsx(Button, {\n    onClick: () => redirect.dispatch(Redirect.Action.ADMIN_PATH, {\n      path: `/orders/${transaction.id}?orderListBeta=true`,\n      newContext: true\n    })\n  }, transaction.id), toCurrency(Number(transaction.totalPrice)), toCurrency(Number(transaction.totalBonusAmount)), formatDate(transaction.createdAt), __jsx(Button, {\n    primary: true,\n    onClick: () => redirect.dispatch(Redirect.Action.ADMIN_PATH, {\n      path: `/customers/${transaction.customer[0].id}`,\n      newContext: true\n    })\n  }, transaction.customer[0].email)]);\n  const sortedByDateRows = rows.sort((a, b) => a[3] - b[3]);\n  const appliedFilters = [];\n\n  if (!isEmpty(filterById)) {\n    const key = 'filterById';\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, filterById),\n      onRemove: handleFilterByIdRemove\n    });\n  }\n\n  console.log('Rows', rows);\n  console.log('Here is transaction data Zvo', data);\n  return __jsx(Page, {\n    title: \"Transactions\"\n  }, __jsx(Button, {\n    primary: true,\n    onClick: () => redirect.dispatch(Redirect.Action.REMOTE, {\n      url: 'https://dev.d3ivgpkzuz6hkr.amplifyapp.com',\n      newContext: true\n    })\n  }, \"Create transaction\"), __jsx(Card, null, __jsx(Card.Section, null, __jsx(Filters, {\n    queryValue: queryValue,\n    filters: filters,\n    appliedFilters: appliedFilters,\n    onQueryChange: handleFiltersQueryChange,\n    onQueryClear: handleQueryValueRemove,\n    onClearAll: handleFiltersClearAll\n  })), __jsx(DataTable, {\n    columnContentTypes: ['text', 'text', 'text', 'text', 'text'],\n    headings: ['OrderId', 'TotalPrice', 'TotalBonusAmount', 'CreatedAt', 'Customer'],\n    rows: sortedByDateRows\n  })));\n\n  function disambiguateLabel(key, value) {\n    switch (key) {\n      case 'taggedWith':\n        return `Tagged with ${value}`;\n\n      case 'availability':\n        return value.map(val => `Available on ${val}`).join(', ');\n\n      case 'productType':\n        return value.join(', ');\n\n      default:\n        return value;\n    }\n  }\n\n  function isEmpty(value) {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === '' || value == null;\n    }\n  }\n};\n\nexport default withApollo(Index);","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/pages/index.js"],"names":["React","useState","useCallback","createApp","Redirect","gql","useQuery","withApollo","Card","DataTable","Button","Page","TextField","ChoiceList","Filters","toCurrency","listTransactions","Index","console","log","filterById","setFilterById","queryValue","setQueryValue","loading","data","error","handleFilterByIdChange","value","handleFiltersQueryChange","handleFilterByIdRemove","handleQueryValueRemove","handleFiltersClearAll","filters","key","label","filter","app","apiKey","shopOrigin","redirect","create","formatDate","rowDate","date","Date","year","Intl","DateTimeFormat","format","month","day","rows","items","map","transaction","dispatch","Action","ADMIN_PATH","path","id","newContext","Number","totalPrice","totalBonusAmount","createdAt","customer","email","sortedByDateRows","sort","a","b","appliedFilters","isEmpty","push","disambiguateLabel","onRemove","REMOTE","url","val","join","Array","isArray","length"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react'\r\nimport createApp from '@shopify/app-bridge'\r\nimport { Redirect } from '@shopify/app-bridge/actions'\r\nimport gql from 'graphql-tag'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport withApollo from '../lib/withApollo'\r\nimport { Card, DataTable, Button, Page, TextField, ChoiceList, Filters } from '@shopify/polaris'\r\nimport { toCurrency } from '../utils/helper'\r\n\r\nconst listTransactions = gql`\r\n    query listTransactions {\r\n        listTransactions {\r\n            items {\r\n                id\r\n                totalPrice\r\n                totalBonusAmount\r\n                currency\r\n                products {\r\n                    id\r\n                    title\r\n                    bonusPercentage\r\n                    priceAmount\r\n                    priceCurrency\r\n                    image\r\n                }\r\n                customer {\r\n                    id\r\n                    firstName\r\n                    lastName\r\n                    phone\r\n                    email\r\n                }\r\n                createdAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst Index = () => {\r\n    console.log('Hi there Zaven jan')\r\n    const [filterById, setFilterById] = useState(null)\r\n    const [queryValue, setQueryValue] = useState(null)\r\n    const { loading, data, error } = useQuery(listTransactions)\r\n\r\n    const handleFilterByIdChange = useCallback((value) => setFilterById(value), [])\r\n\r\n    const handleFiltersQueryChange = useCallback((value) => setQueryValue(value), [])\r\n\r\n    const handleFilterByIdRemove = useCallback(() => setFilterById(null), [])\r\n\r\n    const handleQueryValueRemove = useCallback(() => setQueryValue(null), [])\r\n\r\n    const handleFiltersClearAll = useCallback(() => {\r\n        handleFilterByIdRemove, handleQueryValueRemove\r\n    }, [handleFilterByIdRemove, handleQueryValueRemove])\r\n\r\n    const filters = [\r\n        {\r\n            key: 'filterById',\r\n            label: 'FilterById',\r\n            filter: (\r\n                <ChoiceList\r\n                    title=\"Filter by Id\"\r\n                    titleHidden\r\n                    choices={[\r\n                        { label: 'Order Id', value: 'Order Id' },\r\n                        { label: 'Customer Id', value: 'Customer Id' }\r\n                    ]}\r\n                    selected={filterById || []}\r\n                    onChange={handleFilterByIdChange}\r\n                    allowMultiple\r\n                />\r\n            )\r\n        }\r\n    ]\r\n\r\n    const app = createApp({\r\n        apiKey: '3b01063bac3031d13101100ef3e44fd5',\r\n        shopOrigin: 'transactions-avanta.myshopify.com'\r\n    })\r\n\r\n    const redirect = Redirect.create(app)\r\n    if (loading) {\r\n        return <div>Loading...</div>\r\n    }\r\n\r\n    if (error) {\r\n        console.log('Some error occured Zaven', error)\r\n    }\r\n\r\n    const formatDate = (rowDate) => {\r\n        const date = new Date(rowDate)\r\n        const year = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(date)\r\n        const month = new Intl.DateTimeFormat('en', { month: 'short' }).format(date)\r\n        const day = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(date)\r\n\r\n        return `${day}-${month}-${year}`\r\n    }\r\n\r\n    const rows = data.listTransactions.items.map((transaction) => [\r\n        <Button\r\n            onClick={() =>\r\n                redirect.dispatch(Redirect.Action.ADMIN_PATH, {\r\n                    path: `/orders/${transaction.id}?orderListBeta=true`,\r\n                    newContext: true\r\n                })\r\n            }>\r\n            {transaction.id}\r\n        </Button>,\r\n        toCurrency(Number(transaction.totalPrice)),\r\n        toCurrency(Number(transaction.totalBonusAmount)),\r\n        formatDate(transaction.createdAt),\r\n        <Button\r\n            primary\r\n            onClick={() =>\r\n                redirect.dispatch(Redirect.Action.ADMIN_PATH, {\r\n                    path: `/customers/${transaction.customer[0].id}`,\r\n                    newContext: true\r\n                })\r\n            }>\r\n            {transaction.customer[0].email}\r\n        </Button>\r\n    ])\r\n\r\n    const sortedByDateRows = rows.sort((a, b) => a[3] - b[3])\r\n\r\n    const appliedFilters = []\r\n\r\n    if (!isEmpty(filterById)) {\r\n        const key = 'filterById'\r\n        appliedFilters.push({\r\n            key,\r\n            label: disambiguateLabel(key, filterById),\r\n            onRemove: handleFilterByIdRemove\r\n        })\r\n    }\r\n\r\n    console.log('Rows', rows)\r\n    console.log('Here is transaction data Zvo', data)\r\n    return (\r\n        <Page title=\"Transactions\">\r\n            <Button\r\n                primary\r\n                onClick={() =>\r\n                    redirect.dispatch(Redirect.Action.REMOTE, {\r\n                        url: 'https://dev.d3ivgpkzuz6hkr.amplifyapp.com',\r\n                        newContext: true\r\n                    })\r\n                }>\r\n                Create transaction\r\n            </Button>\r\n            <Card>\r\n                <Card.Section>\r\n                    <Filters\r\n                        queryValue={queryValue}\r\n                        filters={filters}\r\n                        appliedFilters={appliedFilters}\r\n                        onQueryChange={handleFiltersQueryChange}\r\n                        onQueryClear={handleQueryValueRemove}\r\n                        onClearAll={handleFiltersClearAll}\r\n                    />\r\n                </Card.Section>\r\n                <DataTable\r\n                    columnContentTypes={['text', 'text', 'text', 'text', 'text']}\r\n                    headings={[\r\n                        'OrderId',\r\n                        'TotalPrice',\r\n                        'TotalBonusAmount',\r\n                        'CreatedAt',\r\n                        'Customer'\r\n                    ]}\r\n                    rows={sortedByDateRows}\r\n                />\r\n            </Card>\r\n        </Page>\r\n    )\r\n\r\n    function disambiguateLabel(key, value) {\r\n        switch (key) {\r\n            case 'taggedWith':\r\n                return `Tagged with ${value}`\r\n            case 'availability':\r\n                return value.map((val) => `Available on ${val}`).join(', ')\r\n            case 'productType':\r\n                return value.join(', ')\r\n            default:\r\n                return value\r\n        }\r\n    }\r\n\r\n    function isEmpty(value) {\r\n        if (Array.isArray(value)) {\r\n            return value.length === 0\r\n        } else {\r\n            return value === '' || value == null\r\n        }\r\n    }\r\n}\r\n\r\nexport default withApollo(Index)\r\n"]},"metadata":{},"sourceType":"module"}