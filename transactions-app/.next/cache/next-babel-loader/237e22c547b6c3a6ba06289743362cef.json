{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    subscription onCreateTransaction {\\n        onCreateTransaction {\\n            id\\n        }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query branchByAdminId($adminId: ID!) {\\n        branchByAdminId(adminId: $adminId) {\\n            items {\\n                adminId\\n                branchName\\n                id\\n                transactions {\\n                    items {\\n                        branchId\\n                        createdAt\\n                        currency\\n                        id\\n                        note\\n                        customer {\\n                            email\\n                            firstName\\n                            id\\n                            lastName\\n                            phone\\n                        }\\n                        products {\\n                            bonusPercentage\\n                            id\\n                            image\\n                            priceAmount\\n                            priceCurrency\\n                            title\\n                        }\\n                        sortDate\\n                        totalBonusAmount\\n                        totalPrice\\n                        updatedAt\\n                    }\\n                }\\n                branchProducts {\\n                    items {\\n                        branchId\\n                        createdAt\\n                        id\\n                        productId\\n                        tags\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport axios from 'axios';\nimport { useRouter } from 'next/router';\nimport { Auth, API, graphqlOperation } from 'aws-amplify';\nimport createApp from '@shopify/app-bridge';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport gql from 'graphql-tag';\nimport { Card, DataTable, Button, Page, Pagination, TextField, ChoiceList, Filters, Icon, Stack } from '@shopify/polaris';\nimport { SearchMajorMonotone, TransactionMajorMonotone, BalanceMajorMonotone, LogOutMinor } from '@shopify/polaris-icons';\nimport { toCurrency, formatDate, extractNumbersFromString } from '../utils/helper';\nimport config from '../aws-exports';\nimport Login from '../components/Login';\nimport BranchConsole from '../components/BranchConsole';\nimport PaymentRequest from '../components/PaymentRequest';\nAPI.configure(config);\nvar branchByAdminId = gql(_templateObject());\nvar onCreateTransaction = gql(_templateObject2());\n\nvar BranchData = function BranchData(_ref) {\n  _s();\n\n  var user = _ref.user,\n      updateUser = _ref.updateUser;\n\n  var _useState = useState(''),\n      branchInfo = _useState[0],\n      setBranchInfo = _useState[1];\n\n  var _useState2 = useState(null),\n      searchValue = _useState2[0],\n      setSearchValue = _useState2[1];\n\n  var _useState3 = useState(''),\n      newCreatedTransaction = _useState3[0],\n      setNewCreatedTransaction = _useState3[1];\n\n  var _useState4 = useState(false),\n      showPaymentRequest = _useState4[0],\n      setShowPaymentRequest = _useState4[1]; // const [transactionItems, setTransactionItems] = useState(transactions.listTransactions.items)\n  // const [nextPaginateToken, setNextPaginateToken] = useState(\n  //     transactions.listTransactions.nextToken\n  // )\n  // const [previousPaginateTokens, setPreviousPaginateTokens] = useState([])\n\n\n  var handleSearchInput = useCallback(function (newValue) {\n    return setSearchValue(newValue);\n  }, []);\n  var router = useRouter();\n  var app = createApp({\n    apiKey: '3b01063bac3031d13101100ef3e44fd5',\n    shopOrigin: 'transactions-avanta.myshopify.com'\n  });\n  var redirect = Redirect.create(app); // const paginateNext = async () => {\n  //     setPreviousPaginateTokens([...previousPaginateTokens, nextPaginateToken])\n  //     try {\n  //         const data = await API.graphql(\n  //             graphqlOperation(listTransactions, { limit: 5, nextToken: nextPaginateToken })\n  //         )\n  //         console.log('Data from pagination', data)\n  //         setTransactionItems(data.data.listTransactions.items)\n  //         setNextPaginateToken(data.data.listTransactions.nextToken)\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // }\n  // const paginatePrevious = async () => {\n  //     const previousToken =\n  //         previousPaginateTokens[\n  //             previousPaginateTokens.length === 1 ? 0 : previousPaginateTokens.length - 2\n  //         ]\n  //     setPreviousPaginateTokens([\n  //         ...previousPaginateTokens.slice(0, previousPaginateTokens.length - 1)\n  //     ])\n  //     try {\n  //         if (previousPaginateTokens.length === 1) {\n  //             const data = await API.graphql(graphqlOperation(listTransactions, { limit: 5 }))\n  //             setTransactionItems(data.data.listTransactions.items)\n  //             setNextPaginateToken(data.data.listTransactions.nextToken)\n  //         } else {\n  //             const data = await API.graphql(\n  //                 graphqlOperation(listTransactions, { limit: 5, nextToken: previousToken })\n  //             )\n  //             setTransactionItems(data.data.listTransactions.items)\n  //             setNextPaginateToken(data.data.listTransactions.nextToken)\n  //         }\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // }\n\n  var getBranch = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var fetchBranch;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return API.graphql(graphqlOperation(branchByAdminId, {\n                adminId: user.attributes.sub\n              }));\n\n            case 3:\n              fetchBranch = _context.sent;\n              setBranchInfo(fetchBranch.data.branchByAdminId.items[0]);\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 7]]);\n    }));\n\n    return function getBranch() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    getBranch();\n    API.graphql(graphqlOperation(onCreateTransaction)).subscribe({\n      next: function next(createdTransaction) {\n        return setNewCreatedTransaction(createdTransaction);\n      }\n    });\n  }, [newCreatedTransaction]);\n  console.log('Branch data user', user);\n  console.log('Branch info', branchInfo);\n  return __jsx(React.Fragment, null, showPaymentRequest ? __jsx(PaymentRequest, {\n    setShowPaymentRequest: setShowPaymentRequest,\n    branchId: branchInfo.id\n  }) : __jsx(Page, {\n    title: branchInfo && branchInfo.branchName\n  }, __jsx(TextField, {\n    label: \"Search Product\",\n    value: searchValue,\n    onChange: handleSearchInput,\n    prefix: __jsx(Icon, {\n      source: SearchMajorMonotone\n    }),\n    placeholder: \"Search by Customer phone number\"\n  }), __jsx(Stack, null, __jsx(Stack.Item, {\n    fill: true\n  }, __jsx(Button, {\n    id: \"Accept-Payment\",\n    onClick: function onClick() {\n      return (// redirect.dispatch(\n        //     Redirect.Action.ADMIN_PATH,\n        //     '/apps/3b01063bac3031d13101100ef3e44fd5/accept-payment'\n        // )\n        setShowPaymentRequest(true)\n      );\n    }\n  }, __jsx(Icon, {\n    source: BalanceMajorMonotone\n  }), \" Accept Payment\")), __jsx(Stack.Item, null, __jsx(Button, {\n    id: \"Create-Transaction\",\n    primary: true,\n    onClick: function onClick() {\n      return redirect.dispatch(Redirect.Action.REMOTE, {\n        // url: `https://dev.d3ivgpkzuz6hkr.amplifyapp.com?adminId=${user.attributes.sub}`,\n        url: \"http://localhost:3001/transactions/\".concat(user.attributes.sub),\n        newContext: true\n      });\n    }\n  }, __jsx(Icon, {\n    source: TransactionMajorMonotone\n  }), \" Create transaction\")), __jsx(Stack.Item, null, __jsx(Button, {\n    primary: true,\n    id: \"Logout\",\n    onClick: function onClick() {\n      Auth.signOut();\n      updateUser(null);\n    }\n  }, __jsx(Icon, {\n    source: LogOutMinor\n  }), \" Logout\"))), branchInfo && __jsx(Card, null, __jsx(DataTable, {\n    columnContentTypes: ['text', 'text', 'text', 'text'],\n    headings: ['Customer phone number', 'TotalPrice', 'TotalBonusAmount', 'Minus from Bonus Amount', 'CreatedAt'],\n    rows: branchInfo && branchInfo.transactions.items.filter(function (transaction) {\n      if (searchValue == null) {\n        return transaction;\n      } else if (transaction.customer[0].phone.toLowerCase().includes(searchValue.toLowerCase())) {\n        return transaction;\n      }\n    }).sort(function (a, b) {\n      return new Date(b.createdAt) - new Date(a.createdAt);\n    }).map(function (transaction) {\n      return [__jsx(Button, {\n        primary: true,\n        onClick: function onClick() {\n          return redirect.dispatch(Redirect.Action.ADMIN_PATH, {\n            path: \"/customers/\".concat(transaction.customer[0].id),\n            newContext: true\n          });\n        }\n      }, transaction.customer[0].phone), toCurrency(Number(transaction.totalPrice)), toCurrency(Number(transaction.totalBonusAmount)), transaction.note === null ? '' : toCurrency(extractNumbersFromString(transaction.note)), formatDate(transaction.createdAt)];\n    })\n  }))));\n};\n\n_s(BranchData, \"yWNxa0z+ulrnlC4YlHel182XY58=\", false, function () {\n  return [useRouter];\n});\n\n_c = BranchData;\nexport default BranchData;\n\nvar _c;\n\n$RefreshReg$(_c, \"BranchData\");","map":{"version":3,"sources":["/var/www/transactions-avanta/components/BranchData.js"],"names":["React","useState","useCallback","useEffect","axios","useRouter","Auth","API","graphqlOperation","createApp","Redirect","gql","Card","DataTable","Button","Page","Pagination","TextField","ChoiceList","Filters","Icon","Stack","SearchMajorMonotone","TransactionMajorMonotone","BalanceMajorMonotone","LogOutMinor","toCurrency","formatDate","extractNumbersFromString","config","Login","BranchConsole","PaymentRequest","configure","branchByAdminId","onCreateTransaction","BranchData","user","updateUser","branchInfo","setBranchInfo","searchValue","setSearchValue","newCreatedTransaction","setNewCreatedTransaction","showPaymentRequest","setShowPaymentRequest","handleSearchInput","newValue","router","app","apiKey","shopOrigin","redirect","create","getBranch","graphql","adminId","attributes","sub","fetchBranch","data","items","console","log","subscribe","next","createdTransaction","id","branchName","dispatch","Action","REMOTE","url","newContext","signOut","transactions","filter","transaction","customer","phone","toLowerCase","includes","sort","a","b","Date","createdAt","map","ADMIN_PATH","path","Number","totalPrice","totalBonusAmount","note"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\nimport axios from 'axios'\nimport { useRouter } from 'next/router'\nimport { Auth, API, graphqlOperation } from 'aws-amplify'\nimport createApp from '@shopify/app-bridge'\nimport { Redirect } from '@shopify/app-bridge/actions'\nimport gql from 'graphql-tag'\nimport {\n    Card,\n    DataTable,\n    Button,\n    Page,\n    Pagination,\n    TextField,\n    ChoiceList,\n    Filters,\n    Icon,\n    Stack\n} from '@shopify/polaris'\nimport {\n    SearchMajorMonotone,\n    TransactionMajorMonotone,\n    BalanceMajorMonotone,\n    LogOutMinor\n} from '@shopify/polaris-icons'\nimport { toCurrency, formatDate, extractNumbersFromString } from '../utils/helper'\nimport config from '../aws-exports'\nimport Login from '../components/Login'\nimport BranchConsole from '../components/BranchConsole'\nimport PaymentRequest from '../components/PaymentRequest'\n\nAPI.configure(config)\n\nconst branchByAdminId = gql`\n    query branchByAdminId($adminId: ID!) {\n        branchByAdminId(adminId: $adminId) {\n            items {\n                adminId\n                branchName\n                id\n                transactions {\n                    items {\n                        branchId\n                        createdAt\n                        currency\n                        id\n                        note\n                        customer {\n                            email\n                            firstName\n                            id\n                            lastName\n                            phone\n                        }\n                        products {\n                            bonusPercentage\n                            id\n                            image\n                            priceAmount\n                            priceCurrency\n                            title\n                        }\n                        sortDate\n                        totalBonusAmount\n                        totalPrice\n                        updatedAt\n                    }\n                }\n                branchProducts {\n                    items {\n                        branchId\n                        createdAt\n                        id\n                        productId\n                        tags\n                    }\n                }\n            }\n        }\n    }\n`\n\nconst onCreateTransaction = gql`\n    subscription onCreateTransaction {\n        onCreateTransaction {\n            id\n        }\n    }\n`\n\nconst BranchData = ({ user, updateUser }) => {\n    const [branchInfo, setBranchInfo] = useState('')\n    const [searchValue, setSearchValue] = useState(null)\n    const [newCreatedTransaction, setNewCreatedTransaction] = useState('')\n    const [showPaymentRequest, setShowPaymentRequest] = useState(false)\n    // const [transactionItems, setTransactionItems] = useState(transactions.listTransactions.items)\n    // const [nextPaginateToken, setNextPaginateToken] = useState(\n    //     transactions.listTransactions.nextToken\n    // )\n    // const [previousPaginateTokens, setPreviousPaginateTokens] = useState([])\n    const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\n\n    const router = useRouter()\n\n    const app = createApp({\n        apiKey: '3b01063bac3031d13101100ef3e44fd5',\n        shopOrigin: 'transactions-avanta.myshopify.com'\n    })\n\n    const redirect = Redirect.create(app)\n\n    // const paginateNext = async () => {\n    //     setPreviousPaginateTokens([...previousPaginateTokens, nextPaginateToken])\n    //     try {\n    //         const data = await API.graphql(\n    //             graphqlOperation(listTransactions, { limit: 5, nextToken: nextPaginateToken })\n    //         )\n\n    //         console.log('Data from pagination', data)\n    //         setTransactionItems(data.data.listTransactions.items)\n    //         setNextPaginateToken(data.data.listTransactions.nextToken)\n    //     } catch (error) {\n    //         console.log(error)\n    //     }\n    // }\n\n    // const paginatePrevious = async () => {\n    //     const previousToken =\n    //         previousPaginateTokens[\n    //             previousPaginateTokens.length === 1 ? 0 : previousPaginateTokens.length - 2\n    //         ]\n    //     setPreviousPaginateTokens([\n    //         ...previousPaginateTokens.slice(0, previousPaginateTokens.length - 1)\n    //     ])\n    //     try {\n    //         if (previousPaginateTokens.length === 1) {\n    //             const data = await API.graphql(graphqlOperation(listTransactions, { limit: 5 }))\n    //             setTransactionItems(data.data.listTransactions.items)\n    //             setNextPaginateToken(data.data.listTransactions.nextToken)\n    //         } else {\n    //             const data = await API.graphql(\n    //                 graphqlOperation(listTransactions, { limit: 5, nextToken: previousToken })\n    //             )\n    //             setTransactionItems(data.data.listTransactions.items)\n    //             setNextPaginateToken(data.data.listTransactions.nextToken)\n    //         }\n    //     } catch (error) {\n    //         console.log(error)\n    //     }\n    // }\n\n    const getBranch = async () => {\n        try {\n            const fetchBranch = await API.graphql(\n                graphqlOperation(branchByAdminId, { adminId: user.attributes.sub })\n            )\n            setBranchInfo(fetchBranch.data.branchByAdminId.items[0])\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    useEffect(() => {\n        getBranch()\n        API.graphql(graphqlOperation(onCreateTransaction)).subscribe({\n            next: (createdTransaction) => setNewCreatedTransaction(createdTransaction)\n        })\n    }, [newCreatedTransaction])\n\n    console.log('Branch data user', user)\n    console.log('Branch info', branchInfo)\n\n    return (\n        <>\n            {showPaymentRequest ? (\n                <PaymentRequest\n                    setShowPaymentRequest={setShowPaymentRequest}\n                    branchId={branchInfo.id}\n                />\n            ) : (\n                <Page title={branchInfo && branchInfo.branchName}>\n                    <TextField\n                        label=\"Search Product\"\n                        value={searchValue}\n                        onChange={handleSearchInput}\n                        prefix={<Icon source={SearchMajorMonotone} />}\n                        placeholder=\"Search by Customer phone number\"\n                    />\n                    <Stack>\n                        <Stack.Item fill>\n                            <Button\n                                id=\"Accept-Payment\"\n                                onClick={() =>\n                                    // redirect.dispatch(\n                                    //     Redirect.Action.ADMIN_PATH,\n                                    //     '/apps/3b01063bac3031d13101100ef3e44fd5/accept-payment'\n                                    // )\n                                    setShowPaymentRequest(true)\n                                }>\n                                <Icon source={BalanceMajorMonotone} /> Accept Payment\n                            </Button>\n                        </Stack.Item>\n                        <Stack.Item>\n                            <Button\n                                id=\"Create-Transaction\"\n                                primary\n                                onClick={() =>\n                                    redirect.dispatch(Redirect.Action.REMOTE, {\n                                        // url: `https://dev.d3ivgpkzuz6hkr.amplifyapp.com?adminId=${user.attributes.sub}`,\n                                        url: `http://localhost:3001/transactions/${user.attributes.sub}`,\n                                        newContext: true\n                                    })\n                                }>\n                                <Icon source={TransactionMajorMonotone} /> Create transaction\n                            </Button>\n                        </Stack.Item>\n                        <Stack.Item>\n                            <Button\n                                primary\n                                id=\"Logout\"\n                                onClick={() => {\n                                    Auth.signOut()\n                                    updateUser(null)\n                                }}>\n                                <Icon source={LogOutMinor} /> Logout\n                            </Button>\n                        </Stack.Item>\n                    </Stack>\n                    {branchInfo && (\n                        <Card>\n                            <DataTable\n                                columnContentTypes={['text', 'text', 'text', 'text']}\n                                headings={[\n                                    'Customer phone number',\n                                    'TotalPrice',\n                                    'TotalBonusAmount',\n                                    'Minus from Bonus Amount',\n                                    'CreatedAt'\n                                ]}\n                                rows={\n                                    branchInfo &&\n                                    branchInfo.transactions.items\n                                        .filter((transaction) => {\n                                            if (searchValue == null) {\n                                                return transaction\n                                            } else if (\n                                                transaction.customer[0].phone\n                                                    .toLowerCase()\n                                                    .includes(searchValue.toLowerCase())\n                                            ) {\n                                                return transaction\n                                            }\n                                        })\n                                        .sort(\n                                            (a, b) => new Date(b.createdAt) - new Date(a.createdAt)\n                                        )\n                                        .map((transaction) => [\n                                            <Button\n                                                primary\n                                                onClick={() =>\n                                                    redirect.dispatch(Redirect.Action.ADMIN_PATH, {\n                                                        path: `/customers/${transaction.customer[0].id}`,\n                                                        newContext: true\n                                                    })\n                                                }>\n                                                {transaction.customer[0].phone}\n                                            </Button>,\n                                            toCurrency(Number(transaction.totalPrice)),\n                                            toCurrency(Number(transaction.totalBonusAmount)),\n                                            transaction.note === null\n                                                ? ''\n                                                : toCurrency(\n                                                      extractNumbersFromString(transaction.note)\n                                                  ),\n                                            formatDate(transaction.createdAt)\n                                        ])\n                                }\n                            />\n                            {/* <Pagination\n                        hasPrevious={previousPaginateTokens.length > 0}\n                        onPrevious={paginatePrevious}\n                        hasNext={nextPaginateToken}\n                        onNext={paginateNext}\n                    /> */}\n                        </Card>\n                    )}\n                </Page>\n            )}\n        </>\n    )\n}\n\nexport default BranchData\n"]},"metadata":{},"sourceType":"module"}