{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    query listBranchs {\\n        listBranchs {\\n            items {\\n                adminId\\n                branchName\\n                createdAt\\n                id\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation createBranch($input: CreateBranchInput!) {\\n        createBranch(input: $input) {\\n            id\\n            adminId\\n            branchName\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Auth, API, graphqlOperation } from 'aws-amplify';\nimport gql from 'graphql-tag';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Page, Button, Modal, Form, FormLayout, TextField, Badge } from '@shopify/polaris';\nimport { Table, Popup, Header, Icon } from 'semantic-ui-react';\nimport ProductList from './ProductsList';\nimport { formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nAPI.configure(config);\nvar createBranch = gql(_templateObject());\nvar listBranchs = gql(_templateObject2());\n\nvar BranchConsole = function BranchConsole() {\n  _s();\n\n  var _useState = useState(false),\n      active = _useState[0],\n      setActive = _useState[1];\n\n  var _useState2 = useState(''),\n      branchName = _useState2[0],\n      setBranchName = _useState2[1];\n\n  var _useState3 = useState(''),\n      username = _useState3[0],\n      setUsername = _useState3[1];\n\n  var _useState4 = useState(''),\n      email = _useState4[0],\n      setEmail = _useState4[1];\n\n  var _useState5 = useState(''),\n      password = _useState5[0],\n      setPassword = _useState5[1];\n\n  var _useState6 = useState(''),\n      code = _useState6[0],\n      setCode = _useState6[1];\n\n  var _useState7 = useState('signUp'),\n      formType = _useState7[0],\n      setFormType = _useState7[1];\n\n  var _useState8 = useState(null),\n      userSub = _useState8[0],\n      setUserSub = _useState8[1];\n\n  var _useState9 = useState(''),\n      branches = _useState9[0],\n      setBranches = _useState9[1];\n\n  var onChangeBranchName = useCallback(function (newValue) {\n    setBranchName(newValue);\n  }, []);\n  var onChangeUsername = useCallback(function (newValue) {\n    setUsername(newValue);\n  }, []);\n  var onChangePassword = useCallback(function (newValue) {\n    setPassword(newValue);\n  }, []);\n  var onChangeEmail = useCallback(function (newValue) {\n    setEmail(newValue);\n  }, []);\n  var onChangeCode = useCallback(function (newValue) {\n    setCode(newValue);\n  }, []);\n\n  var handleChange = function handleChange() {\n    setActive(!active);\n  };\n\n  var signUp = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var user;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              _context.prev = 1;\n              _context.next = 4;\n              return Auth.signUp({\n                username: username,\n                password: password,\n                attributes: {\n                  email: email\n                }\n              });\n\n            case 4:\n              user = _context.sent;\n              setUserSub(user.userSub);\n              console.log('User from Modal', user);\n              setFormType('confirm');\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](1);\n              console.log(_context.t0);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 10]]);\n    }));\n\n    return function signUp(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var confirm = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(e) {\n      var confirmedUser, branch;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              e.preventDefault();\n              _context2.prev = 1;\n              _context2.next = 4;\n              return Auth.confirmSignUp(username, code);\n\n            case 4:\n              confirmedUser = _context2.sent;\n              console.log('Confirmed user', confirmedUser);\n              _context2.next = 8;\n              return API.graphql(graphqlOperation(createBranch, {\n                input: {\n                  adminId: userSub,\n                  branchName: branchName,\n                  id: uuidv4()\n                }\n              }));\n\n            case 8:\n              branch = _context2.sent;\n              console.log('New created branch', branch);\n              setFormType('signUp');\n              handleChange();\n              _context2.next = 17;\n              break;\n\n            case 14:\n              _context2.prev = 14;\n              _context2.t0 = _context2[\"catch\"](1);\n              console.log(_context2.t0);\n\n            case 17:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 14]]);\n    }));\n\n    return function confirm(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var fetchBranches = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var getBranches;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return API.graphql(graphqlOperation(listBranchs));\n\n            case 3:\n              getBranches = _context3.sent;\n              setBranches(getBranches.data);\n              _context3.next = 10;\n              break;\n\n            case 7:\n              _context3.prev = 7;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.log(_context3.t0);\n\n            case 10:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[0, 7]]);\n    }));\n\n    return function fetchBranches() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    fetchBranches();\n  }, []);\n  console.log('Branch name', branchName);\n  console.log('Username', username);\n  console.log('Password', password);\n  console.log('Email', email);\n  console.log('Code', code);\n  console.log('Fetched branches', branches);\n  return __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: handleChange,\n    primary: true\n  }, \"Create branch\"), __jsx(Table, {\n    selectable: true,\n    celled: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Branch Name\"), __jsx(Table.HeaderCell, null, \"Created At\"), __jsx(Table.HeaderCell, null, \"Actions\"))), __jsx(Table.Body, null, branches && branches.listBranchs.items.map(function (item) {\n    return __jsx(Table.Row, {\n      key: item.id\n    }, __jsx(Table.Cell, null, __jsx(Badge, {\n      size: \"medium\",\n      status: \"info\"\n    }, item.branchName)), __jsx(Table.Cell, null, formatDate(item.createdAt)), __jsx(Table.Cell, {\n      className: \"actions-cell\"\n    }, __jsx(Popup, {\n      content: \"Edit branch\",\n      trigger: __jsx(Icon, {\n        className: \"edit-branch\",\n        name: \"edit outline\"\n      })\n    }), __jsx(Popup, {\n      content: \"Delete Branch\",\n      trigger: __jsx(Icon, {\n        className: \"remove-branch\",\n        name: \"trash alternate\"\n      })\n    })));\n  }))), __jsx(Modal, {\n    open: active,\n    onClose: handleChange,\n    title: \"Fill in Branch info\" //  primaryAction={{\n    //      content: 'Proceed',\n    //     //  onAction: () => {\n    //     //  }\n    //  }}\n\n  }, __jsx(Modal.Section, null, formType === 'signUp' && __jsx(Form, null, __jsx(FormLayout, null, __jsx(TextField, {\n    value: branchName,\n    onChange: onChangeBranchName,\n    label: \"Branch Name\"\n  }), __jsx(TextField, {\n    value: username,\n    onChange: onChangeUsername,\n    label: \"Branch admin username\"\n  }), __jsx(TextField, {\n    value: email,\n    onChange: onChangeEmail,\n    label: \"Branch admin email\"\n  }), __jsx(TextField, {\n    type: \"password\",\n    value: password,\n    onChange: onChangePassword,\n    label: \"Branch admin password\"\n  }), __jsx(Button, {\n    onClick: signUp,\n    primary: true,\n    submit: true\n  }, \"Create Branch\"))), formType === 'confirm' && __jsx(Form, null, __jsx(FormLayout, null, __jsx(TextField, {\n    value: username,\n    onChange: onChangeUsername,\n    label: \"Branch admin username\"\n  }), __jsx(TextField, {\n    value: code,\n    onChange: onChangeCode,\n    label: \"Confirmation code\"\n  }), __jsx(Button, {\n    onClick: confirm,\n    primary: true,\n    submit: true\n  }, \"Confirm\"))))));\n};\n\n_s(BranchConsole, \"71XozDxjfKKe/9GHpIqGbLHFBIE=\");\n\n_c = BranchConsole;\nexport default BranchConsole;\n\nvar _c;\n\n$RefreshReg$(_c, \"BranchConsole\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/components/BranchConsole.js"],"names":["React","useState","useEffect","useRef","useCallback","Auth","API","graphqlOperation","gql","v4","uuidv4","Page","Button","Modal","Form","FormLayout","TextField","Badge","Table","Popup","Header","Icon","ProductList","formatDate","config","configure","createBranch","listBranchs","BranchConsole","active","setActive","branchName","setBranchName","username","setUsername","email","setEmail","password","setPassword","code","setCode","formType","setFormType","userSub","setUserSub","branches","setBranches","onChangeBranchName","newValue","onChangeUsername","onChangePassword","onChangeEmail","onChangeCode","handleChange","signUp","e","preventDefault","attributes","user","console","log","confirm","confirmSignUp","confirmedUser","graphql","input","adminId","id","branch","fetchBranches","getBranches","data","items","map","item","createdAt"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react'\r\nimport { Auth, API, graphqlOperation } from 'aws-amplify'\r\nimport gql from 'graphql-tag'\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport { Page, Button, Modal, Form, FormLayout, TextField, Badge } from '@shopify/polaris'\r\nimport { Table, Popup, Header, Icon } from 'semantic-ui-react'\r\nimport ProductList from './ProductsList'\r\nimport { formatDate } from '../utils/helper'\r\nimport config from '../aws-exports'\r\n\r\nAPI.configure(config)\r\n\r\nconst createBranch = gql`\r\n    mutation createBranch($input: CreateBranchInput!) {\r\n        createBranch(input: $input) {\r\n            id\r\n            adminId\r\n            branchName\r\n        }\r\n    }\r\n`\r\n\r\nconst listBranchs = gql`\r\n    query listBranchs {\r\n        listBranchs {\r\n            items {\r\n                adminId\r\n                branchName\r\n                createdAt\r\n                id\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst BranchConsole = () => {\r\n    const [active, setActive] = useState(false)\r\n    const [branchName, setBranchName] = useState('')\r\n    const [username, setUsername] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [code, setCode] = useState('')\r\n    const [formType, setFormType] = useState('signUp')\r\n    const [userSub, setUserSub] = useState(null)\r\n    const [branches, setBranches] = useState('')\r\n\r\n    const onChangeBranchName = useCallback((newValue) => {\r\n        setBranchName(newValue)\r\n    }, [])\r\n\r\n    const onChangeUsername = useCallback((newValue) => {\r\n        setUsername(newValue)\r\n    }, [])\r\n\r\n    const onChangePassword = useCallback((newValue) => {\r\n        setPassword(newValue)\r\n    }, [])\r\n\r\n    const onChangeEmail = useCallback((newValue) => {\r\n        setEmail(newValue)\r\n    }, [])\r\n\r\n    const onChangeCode = useCallback((newValue) => {\r\n        setCode(newValue)\r\n    }, [])\r\n\r\n    const handleChange = () => {\r\n        setActive(!active)\r\n    }\r\n\r\n    const signUp = async (e) => {\r\n        e.preventDefault()\r\n        try {\r\n            const user = await Auth.signUp({ username, password, attributes: { email } })\r\n            setUserSub(user.userSub)\r\n            console.log('User from Modal', user)\r\n            setFormType('confirm')\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    const confirm = async (e) => {\r\n        e.preventDefault()\r\n        try {\r\n            const confirmedUser = await Auth.confirmSignUp(username, code)\r\n            console.log('Confirmed user', confirmedUser)\r\n            const branch = await API.graphql(\r\n                graphqlOperation(createBranch, {\r\n                    input: { adminId: userSub, branchName: branchName, id: uuidv4() }\r\n                })\r\n            )\r\n            console.log('New created branch', branch)\r\n            setFormType('signUp')\r\n            handleChange()\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    const fetchBranches = async () => {\r\n        try {\r\n            const getBranches = await API.graphql(graphqlOperation(listBranchs))\r\n            setBranches(getBranches.data)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchBranches()\r\n    }, [])\r\n\r\n    console.log('Branch name', branchName)\r\n    console.log('Username', username)\r\n    console.log('Password', password)\r\n    console.log('Email', email)\r\n    console.log('Code', code)\r\n    console.log('Fetched branches', branches)\r\n\r\n    return (\r\n        <>\r\n            <Button onClick={handleChange} primary>\r\n                Create branch\r\n            </Button>\r\n            <Table selectable celled>\r\n                <Table.Header>\r\n                    <Table.Row>\r\n                        <Table.HeaderCell>Branch Name</Table.HeaderCell>\r\n                        <Table.HeaderCell>Created At</Table.HeaderCell>\r\n                        <Table.HeaderCell>Actions</Table.HeaderCell>\r\n                    </Table.Row>\r\n                </Table.Header>\r\n                <Table.Body>\r\n                    {branches &&\r\n                        branches.listBranchs.items.map((item) => (\r\n                            <Table.Row key={item.id}>\r\n                                <Table.Cell>\r\n                                    <Badge size=\"medium\" status=\"info\">\r\n                                        {item.branchName}\r\n                                    </Badge>\r\n                                </Table.Cell>\r\n                                <Table.Cell>{formatDate(item.createdAt)}</Table.Cell>\r\n                                <Table.Cell className=\"actions-cell\">\r\n                                    <Popup\r\n                                        content=\"Edit branch\"\r\n                                        trigger={\r\n                                            <Icon className=\"edit-branch\" name=\"edit outline\" />\r\n                                        }\r\n                                    />\r\n                                    <Popup\r\n                                        content=\"Delete Branch\"\r\n                                        trigger={\r\n                                            <Icon\r\n                                                className=\"remove-branch\"\r\n                                                name=\"trash alternate\"\r\n                                            />\r\n                                        }\r\n                                    />\r\n                                </Table.Cell>\r\n                            </Table.Row>\r\n                        ))}\r\n                </Table.Body>\r\n            </Table>\r\n            <Modal\r\n                open={active}\r\n                onClose={handleChange}\r\n                title=\"Fill in Branch info\"\r\n                //  primaryAction={{\r\n                //      content: 'Proceed',\r\n                //     //  onAction: () => {\r\n\r\n                //     //  }\r\n                //  }}\r\n            >\r\n                <Modal.Section>\r\n                    {formType === 'signUp' && (\r\n                        <Form>\r\n                            <FormLayout>\r\n                                <TextField\r\n                                    value={branchName}\r\n                                    onChange={onChangeBranchName}\r\n                                    label=\"Branch Name\"\r\n                                />\r\n                                <TextField\r\n                                    value={username}\r\n                                    onChange={onChangeUsername}\r\n                                    label=\"Branch admin username\"\r\n                                />\r\n                                <TextField\r\n                                    value={email}\r\n                                    onChange={onChangeEmail}\r\n                                    label=\"Branch admin email\"\r\n                                />\r\n                                <TextField\r\n                                    type=\"password\"\r\n                                    value={password}\r\n                                    onChange={onChangePassword}\r\n                                    label=\"Branch admin password\"\r\n                                />\r\n                                <Button onClick={signUp} primary submit>\r\n                                    Create Branch\r\n                                </Button>\r\n                            </FormLayout>\r\n                        </Form>\r\n                    )}\r\n                    {formType === 'confirm' && (\r\n                        <Form>\r\n                            <FormLayout>\r\n                                <TextField\r\n                                    value={username}\r\n                                    onChange={onChangeUsername}\r\n                                    label=\"Branch admin username\"\r\n                                />\r\n                                <TextField\r\n                                    value={code}\r\n                                    onChange={onChangeCode}\r\n                                    label=\"Confirmation code\"\r\n                                />\r\n                                <Button onClick={confirm} primary submit>\r\n                                    Confirm\r\n                                </Button>\r\n                            </FormLayout>\r\n                        </Form>\r\n                    )}\r\n                </Modal.Section>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BranchConsole\r\n"]},"metadata":{},"sourceType":"module"}