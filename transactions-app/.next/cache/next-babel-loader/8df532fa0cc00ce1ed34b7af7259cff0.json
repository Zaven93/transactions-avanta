{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport { Button, Icon, Card, DataTable, TextField } from \"@shopify/polaris\";\nimport { SearchMajorMonotone } from \"@shopify/polaris-icons\";\nimport { toCurrency, formatDate } from \"../utils/helper\";\nimport config from \"../aws-exports\";\nimport { getBranchById } from \"../graphql/queries\";\nAPI.configure(config);\n\nvar AdminBranchInfo = function AdminBranchInfo(_ref) {\n  _s();\n\n  var branchId = _ref.branchId,\n      setBranchId = _ref.setBranchId;\n\n  var _useState = useState(\"\"),\n      branchInfo = _useState[0],\n      setBranchInfo = _useState[1];\n\n  var _useState2 = useState(null),\n      searchValue = _useState2[0],\n      setSearchValue = _useState2[1];\n\n  var handleSearchInput = useCallback(function (newValue) {\n    return setSearchValue(newValue);\n  }, []);\n\n  var getBranch = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var branch;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return API.graphql(graphqlOperation(getBranchById, {\n                id: branchId\n              }));\n\n            case 3:\n              branch = _context.sent;\n              setBranchInfo(branch.data.getBranch);\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 7]]);\n    }));\n\n    return function getBranch() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    getBranch();\n  }, []);\n  return __jsx(React.Fragment, null, branchInfo && __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: function onClick() {\n      return setBranchId(null);\n    },\n    primary: true\n  }, \"Go back\"), __jsx(TextField, {\n    label: \"Search Product\",\n    value: searchValue,\n    onChange: handleSearchInput,\n    prefix: __jsx(Icon, {\n      source: SearchMajorMonotone\n    }),\n    placeholder: \"Search by Customer phone number\"\n  }), __jsx(Card, null, __jsx(DataTable, {\n    columnContentTypes: [\"text\", \"text\", \"text\", \"text\"],\n    headings: [\"Customer phone number\", \"TotalPrice\", \"TotalBonusAmount\", \"Minus from Bonus Amount\", \"CreatedAt\"],\n    rows: branchInfo && branchInfo.transactions.items.filter(function (transaction) {\n      if (searchValue == null) {\n        return transaction;\n      } else if (transaction.customer[0].phone.toLowerCase().includes(searchValue.toLowerCase())) {\n        return transaction;\n      }\n    }).sort(function (a, b) {\n      return new Date(b.createdAt) - new Date(a.createdAt);\n    }).map(function (transaction) {\n      return [__jsx(Button, {\n        primary: true,\n        onClick: function onClick() {\n          return redirect.dispatch(Redirect.Action.ADMIN_PATH, {\n            path: \"/customers/\".concat(transaction.customer[0].id),\n            newContext: true\n          });\n        }\n      }, transaction.customer[0].phone), toCurrency(Number(transaction.totalPrice)), toCurrency(Number(transaction.totalBonusAmount)), transaction.note === null ? \"\" : toCurrency(extractNumbersFromString(transaction.note)), formatDate(transaction.createdAt)];\n    })\n  }))));\n};\n\n_s(AdminBranchInfo, \"ghTTBfqZFbhVUiA/oBT+TO1sbHc=\");\n\n_c = AdminBranchInfo;\nexport default AdminBranchInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdminBranchInfo\");","map":{"version":3,"sources":["/var/www/transactions-avanta/components/AdminBranchInfo.js"],"names":["React","useState","useEffect","useCallback","API","graphqlOperation","Button","Icon","Card","DataTable","TextField","SearchMajorMonotone","toCurrency","formatDate","config","getBranchById","configure","AdminBranchInfo","branchId","setBranchId","branchInfo","setBranchInfo","searchValue","setSearchValue","handleSearchInput","newValue","getBranch","graphql","id","branch","data","console","log","transactions","items","filter","transaction","customer","phone","toLowerCase","includes","sort","a","b","Date","createdAt","map","redirect","dispatch","Redirect","Action","ADMIN_PATH","path","newContext","Number","totalPrice","totalBonusAmount","note","extractNumbersFromString"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,QAAwD,OAAxD;AACA,SAASC,GAAT,EAAcC,gBAAd,QAAsC,aAAtC;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,IAAvB,EAA6BC,SAA7B,EAAwCC,SAAxC,QAAyD,kBAAzD;AACA,SAASC,mBAAT,QAAoC,wBAApC;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,iBAAvC;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AACA,SAASC,aAAT,QAA8B,oBAA9B;AAEAX,GAAG,CAACY,SAAJ,CAAcF,MAAd;;AAEA,IAAMG,eAAe,GAAG,SAAlBA,eAAkB,OAA+B;AAAA;;AAAA,MAA5BC,QAA4B,QAA5BA,QAA4B;AAAA,MAAlBC,WAAkB,QAAlBA,WAAkB;;AAAA,kBACjBlB,QAAQ,CAAC,EAAD,CADS;AAAA,MAC9CmB,UAD8C;AAAA,MAClCC,aADkC;;AAAA,mBAEfpB,QAAQ,CAAC,IAAD,CAFO;AAAA,MAE9CqB,WAF8C;AAAA,MAEjCC,cAFiC;;AAIrD,MAAMC,iBAAiB,GAAGrB,WAAW,CAAC,UAACsB,QAAD;AAAA,WAAcF,cAAc,CAACE,QAAD,CAA5B;AAAA,GAAD,EAAyC,EAAzC,CAArC;;AAEA,MAAMC,SAAS;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEOtB,GAAG,CAACuB,OAAJ,CAAYtB,gBAAgB,CAACU,aAAD,EAAgB;AAAEa,gBAAAA,EAAE,EAAEV;AAAN,eAAhB,CAA5B,CAFP;;AAAA;AAERW,cAAAA,MAFQ;AAGdR,cAAAA,aAAa,CAACQ,MAAM,CAACC,IAAP,CAAYJ,SAAb,CAAb;AAHc;AAAA;;AAAA;AAAA;AAAA;AAKdK,cAAAA,OAAO,CAACC,GAAR;;AALc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAATN,SAAS;AAAA;AAAA;AAAA,KAAf;;AASAxB,EAAAA,SAAS,CAAC,YAAM;AACdwB,IAAAA,SAAS;AACV,GAFQ,EAEN,EAFM,CAAT;AAIA,SACE,4BACGN,UAAU,IACT,4BACE,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAMD,WAAW,CAAC,IAAD,CAAjB;AAAA,KAAjB;AAA0C,IAAA,OAAO;AAAjD,eADF,EAIE,MAAC,SAAD;AACE,IAAA,KAAK,EAAC,gBADR;AAEE,IAAA,KAAK,EAAEG,WAFT;AAGE,IAAA,QAAQ,EAAEE,iBAHZ;AAIE,IAAA,MAAM,EAAE,MAAC,IAAD;AAAM,MAAA,MAAM,EAAEb;AAAd,MAJV;AAKE,IAAA,WAAW,EAAC;AALd,IAJF,EAWE,MAAC,IAAD,QACE,MAAC,SAAD;AACE,IAAA,kBAAkB,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,EAAyB,MAAzB,CADtB;AAEE,IAAA,QAAQ,EAAE,CACR,uBADQ,EAER,YAFQ,EAGR,kBAHQ,EAIR,yBAJQ,EAKR,WALQ,CAFZ;AASE,IAAA,IAAI,EACFS,UAAU,IACVA,UAAU,CAACa,YAAX,CAAwBC,KAAxB,CACGC,MADH,CACU,UAACC,WAAD,EAAiB;AACvB,UAAId,WAAW,IAAI,IAAnB,EAAyB;AACvB,eAAOc,WAAP;AACD,OAFD,MAEO,IACLA,WAAW,CAACC,QAAZ,CAAqB,CAArB,EAAwBC,KAAxB,CACGC,WADH,GAEGC,QAFH,CAEYlB,WAAW,CAACiB,WAAZ,EAFZ,CADK,EAIL;AACA,eAAOH,WAAP;AACD;AACF,KAXH,EAYGK,IAZH,CAYQ,UAACC,CAAD,EAAIC,CAAJ;AAAA,aAAU,IAAIC,IAAJ,CAASD,CAAC,CAACE,SAAX,IAAwB,IAAID,IAAJ,CAASF,CAAC,CAACG,SAAX,CAAlC;AAAA,KAZR,EAaGC,GAbH,CAaO,UAACV,WAAD;AAAA,aAAiB,CACpB,MAAC,MAAD;AACE,QAAA,OAAO,MADT;AAEE,QAAA,OAAO,EAAE;AAAA,iBACPW,QAAQ,CAACC,QAAT,CAAkBC,QAAQ,CAACC,MAAT,CAAgBC,UAAlC,EAA8C;AAC5CC,YAAAA,IAAI,uBAAgBhB,WAAW,CAACC,QAAZ,CAAqB,CAArB,EAAwBT,EAAxC,CADwC;AAE5CyB,YAAAA,UAAU,EAAE;AAFgC,WAA9C,CADO;AAAA;AAFX,SAQGjB,WAAW,CAACC,QAAZ,CAAqB,CAArB,EAAwBC,KAR3B,CADoB,EAWpB1B,UAAU,CAAC0C,MAAM,CAAClB,WAAW,CAACmB,UAAb,CAAP,CAXU,EAYpB3C,UAAU,CAAC0C,MAAM,CAAClB,WAAW,CAACoB,gBAAb,CAAP,CAZU,EAapBpB,WAAW,CAACqB,IAAZ,KAAqB,IAArB,GACI,EADJ,GAEI7C,UAAU,CAAC8C,wBAAwB,CAACtB,WAAW,CAACqB,IAAb,CAAzB,CAfM,EAgBpB5C,UAAU,CAACuB,WAAW,CAACS,SAAb,CAhBU,CAAjB;AAAA,KAbP;AAXJ,IADF,CAXF,CAFJ,CADF;AAgED,CAnFD;;GAAM5B,e;;KAAAA,e;AAqFN,eAAeA,eAAf","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\"\nimport { API, graphqlOperation } from \"aws-amplify\"\nimport { Button, Icon, Card, DataTable, TextField } from \"@shopify/polaris\"\nimport { SearchMajorMonotone } from \"@shopify/polaris-icons\"\nimport { toCurrency, formatDate } from \"../utils/helper\"\nimport config from \"../aws-exports\"\nimport { getBranchById } from \"../graphql/queries\"\n\nAPI.configure(config)\n\nconst AdminBranchInfo = ({ branchId, setBranchId }) => {\n  const [branchInfo, setBranchInfo] = useState(\"\")\n  const [searchValue, setSearchValue] = useState(null)\n\n  const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\n\n  const getBranch = async () => {\n    try {\n      const branch = await API.graphql(graphqlOperation(getBranchById, { id: branchId }))\n      setBranchInfo(branch.data.getBranch)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    getBranch()\n  }, [])\n\n  return (\n    <>\n      {branchInfo && (\n        <>\n          <Button onClick={() => setBranchId(null)} primary>\n            Go back\n          </Button>\n          <TextField\n            label=\"Search Product\"\n            value={searchValue}\n            onChange={handleSearchInput}\n            prefix={<Icon source={SearchMajorMonotone} />}\n            placeholder=\"Search by Customer phone number\"\n          />\n          <Card>\n            <DataTable\n              columnContentTypes={[\"text\", \"text\", \"text\", \"text\"]}\n              headings={[\n                \"Customer phone number\",\n                \"TotalPrice\",\n                \"TotalBonusAmount\",\n                \"Minus from Bonus Amount\",\n                \"CreatedAt\",\n              ]}\n              rows={\n                branchInfo &&\n                branchInfo.transactions.items\n                  .filter((transaction) => {\n                    if (searchValue == null) {\n                      return transaction\n                    } else if (\n                      transaction.customer[0].phone\n                        .toLowerCase()\n                        .includes(searchValue.toLowerCase())\n                    ) {\n                      return transaction\n                    }\n                  })\n                  .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))\n                  .map((transaction) => [\n                    <Button\n                      primary\n                      onClick={() =>\n                        redirect.dispatch(Redirect.Action.ADMIN_PATH, {\n                          path: `/customers/${transaction.customer[0].id}`,\n                          newContext: true,\n                        })\n                      }>\n                      {transaction.customer[0].phone}\n                    </Button>,\n                    toCurrency(Number(transaction.totalPrice)),\n                    toCurrency(Number(transaction.totalBonusAmount)),\n                    transaction.note === null\n                      ? \"\"\n                      : toCurrency(extractNumbersFromString(transaction.note)),\n                    formatDate(transaction.createdAt),\n                  ])\n              }\n            />\n          </Card>\n        </>\n      )}\n    </>\n  )\n}\n\nexport default AdminBranchInfo\n"]},"metadata":{},"sourceType":"module"}