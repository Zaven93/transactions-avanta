{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport config from '../aws-exports';\nimport gql from 'graphql-tag';\nimport axios from 'axios';\nAPI.configure(config);\nconst listTransactions = gql`\n    query listTransactions($limit: Int, $nextToken: String) {\n        listTransactions(limit: $limit, nextToken: $nextToken) {\n            nextToken\n            items {\n                id\n                totalPrice\n                totalBonusAmount\n                currency\n                products {\n                    id\n                    title\n                    bonusPercentage\n                    priceAmount\n                    priceCurrency\n                    image\n                }\n                customer {\n                    id\n                    firstName\n                    lastName\n                    phone\n                    email\n                }\n                createdAt\n            }\n        }\n    }\n`;\n\nconst Index = ({\n  transactions\n}) => {\n  const fetchTransactions = useCallback(async () => {\n    try {\n      const data = await API.graphql(graphqlOperation(listTransactions));\n      console.log('Data from useEffect', data.data);\n    } catch (error) {\n      console.log(error);\n    }\n  }, []);\n  useEffect(() => {\n    fetchTransactions();\n  }, [fetchTransactions]);\n  console.log('Transactions', transactions);\n  return __jsx(\"div\", null, \"Main page\");\n}; // export async function getStaticProps() {\n//     let result\n//     try {\n//         result = await API.graphql(graphqlOperation(listTransactions))\n//     } catch (error) {\n//         console.log(error)\n//     }\n//     if (result.errors) {\n//         console.warn('Failed to fetch todolist. ', result.errors)\n//         return { props: { transactions: [] } }\n//     }\n//     if (result.data !== null) {\n//         return { props: { transactions: result.data } }\n//     }\n// }\n// Index.getInitialProps = async () => {\n//     let result\n//     try {\n//         result = await API.graphql(graphqlOperation(listTransactions))\n//     } catch (error) {\n//         console.log(error)\n//     }\n//     if (result.errors) {\n//         console.warn('Failed to fetch todolist. ', result.errors)\n//         return { transactions: [] }\n//     }\n//     if (result.data !== null) {\n//         return { transactions: result.data }\n//     }\n// }\n\n\nexport default Index;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/pages/index.js"],"names":["React","useEffect","useState","useCallback","API","graphqlOperation","config","gql","axios","configure","listTransactions","Index","transactions","fetchTransactions","data","graphql","console","log","error"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,WAArC,QAAwD,OAAxD;AACA,SAASC,GAAT,EAAcC,gBAAd,QAAsC,aAAtC;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEAJ,GAAG,CAACK,SAAJ,CAAcH,MAAd;AAEA,MAAMI,gBAAgB,GAAGH,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAA7B;;AA8BA,MAAMI,KAAK,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAsB;AAChC,QAAMC,iBAAiB,GAAGV,WAAW,CAAC,YAAY;AAC9C,QAAI;AACA,YAAMW,IAAI,GAAG,MAAMV,GAAG,CAACW,OAAJ,CAAYV,gBAAgB,CAACK,gBAAD,CAA5B,CAAnB;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCH,IAAI,CAACA,IAAxC;AACH,KAHD,CAGE,OAAOI,KAAP,EAAc;AACZF,MAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACH;AACJ,GAPoC,EAOlC,EAPkC,CAArC;AASAjB,EAAAA,SAAS,CAAC,MAAM;AACZY,IAAAA,iBAAiB;AACpB,GAFQ,EAEN,CAACA,iBAAD,CAFM,CAAT;AAGAG,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BL,YAA5B;AACA,SAAO,+BAAP;AACH,CAfD,C,CAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeD,KAAf","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react'\r\nimport { API, graphqlOperation } from 'aws-amplify'\r\nimport config from '../aws-exports'\r\nimport gql from 'graphql-tag'\r\nimport axios from 'axios'\r\n\r\nAPI.configure(config)\r\n\r\nconst listTransactions = gql`\r\n    query listTransactions($limit: Int, $nextToken: String) {\r\n        listTransactions(limit: $limit, nextToken: $nextToken) {\r\n            nextToken\r\n            items {\r\n                id\r\n                totalPrice\r\n                totalBonusAmount\r\n                currency\r\n                products {\r\n                    id\r\n                    title\r\n                    bonusPercentage\r\n                    priceAmount\r\n                    priceCurrency\r\n                    image\r\n                }\r\n                customer {\r\n                    id\r\n                    firstName\r\n                    lastName\r\n                    phone\r\n                    email\r\n                }\r\n                createdAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst Index = ({ transactions }) => {\r\n    const fetchTransactions = useCallback(async () => {\r\n        try {\r\n            const data = await API.graphql(graphqlOperation(listTransactions))\r\n            console.log('Data from useEffect', data.data)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        fetchTransactions()\r\n    }, [fetchTransactions])\r\n    console.log('Transactions', transactions)\r\n    return <div>Main page</div>\r\n}\r\n\r\n// export async function getStaticProps() {\r\n//     let result\r\n//     try {\r\n//         result = await API.graphql(graphqlOperation(listTransactions))\r\n//     } catch (error) {\r\n//         console.log(error)\r\n//     }\r\n\r\n//     if (result.errors) {\r\n//         console.warn('Failed to fetch todolist. ', result.errors)\r\n//         return { props: { transactions: [] } }\r\n//     }\r\n//     if (result.data !== null) {\r\n//         return { props: { transactions: result.data } }\r\n//     }\r\n// }\r\n\r\n// Index.getInitialProps = async () => {\r\n//     let result\r\n//     try {\r\n//         result = await API.graphql(graphqlOperation(listTransactions))\r\n//     } catch (error) {\r\n//         console.log(error)\r\n//     }\r\n\r\n//     if (result.errors) {\r\n//         console.warn('Failed to fetch todolist. ', result.errors)\r\n//         return { transactions: [] }\r\n//     }\r\n//     if (result.data !== null) {\r\n//         return { transactions: result.data }\r\n//     }\r\n// }\r\n\r\nexport default Index\r\n"]},"metadata":{},"sourceType":"module"}