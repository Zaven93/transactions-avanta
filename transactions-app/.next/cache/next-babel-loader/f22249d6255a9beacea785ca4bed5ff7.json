{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport axios from 'axios';\nimport { Auth, API, graphqlOperation } from 'aws-amplify';\nimport createApp from '@shopify/app-bridge';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport gql from 'graphql-tag';\nimport { print } from 'graphql';\nimport { Card, DataTable, Button, Page, Pagination, TextField, ChoiceList, Filters, Icon, Stack } from '@shopify/polaris';\nimport { SearchMajorMonotone, TransactionMajorMonotone, BalanceMajorMonotone, LogOutMinor } from '@shopify/polaris-icons';\nimport { toCurrency, formatDate, extractNumbersFromString } from '../utils/helper';\nimport config from '../aws-exports';\nimport Login from '../components/Login';\nAPI.configure(config);\nconst listTransactions = gql`\n    query listTransactions($limit: Int, $nextToken: String) {\n        listTransactions(limit: $limit, nextToken: $nextToken) {\n            nextToken\n            items {\n                id\n                totalPrice\n                totalBonusAmount\n                note\n                currency\n                products {\n                    id\n                    title\n                    bonusPercentage\n                    priceAmount\n                    priceCurrency\n                    image\n                }\n                customer {\n                    id\n                    firstName\n                    lastName\n                    phone\n                    email\n                }\n                createdAt\n            }\n        }\n    }\n`;\nconst paymentSubscription = gql`\n    subscription paymentRequest {\n        onCreatePaymentRequest {\n            bonusAmount\n            createdAt\n            customerId\n            orderId\n            updatedAt\n        }\n    }\n`;\nconst listProducts = gql`\n    query Products {\n        products(first: 100) {\n            edges {\n                node {\n                    id\n                    title\n                    tags\n                    description(truncateAt: 100)\n                    variants(first: 1) {\n                        edges {\n                            node {\n                                id\n                                price\n                            }\n                        }\n                    }\n                    images(first: 1) {\n                        edges {\n                            node {\n                                originalSrc\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n`;\n\nconst Index = ({\n  transactions\n}) => {\n  const {\n    0: searchValue,\n    1: setSearchValue\n  } = useState(null);\n  const {\n    0: user,\n    1: updateUser\n  } = useState(null);\n  const {\n    0: transactionItems,\n    1: setTransactionItems\n  } = useState(transactions.listTransactions.items);\n  const {\n    0: nextPaginateToken,\n    1: setNextPaginateToken\n  } = useState(transactions.listTransactions.nextToken);\n  const {\n    0: previousPaginateTokens,\n    1: setPreviousPaginateTokens\n  } = useState([]);\n  const handleSearchInput = useCallback(newValue => setSearchValue(newValue), []);\n  const app = createApp({\n    apiKey: '3b01063bac3031d13101100ef3e44fd5',\n    shopOrigin: 'transactions-avanta.myshopify.com'\n  });\n  const redirect = Redirect.create(app);\n  useEffect(() => {\n    checkUser();\n  }, []);\n\n  const checkUser = async () => {\n    try {\n      const user = await Auth.currentAuthenticatedUser();\n\n      if (!user) {\n        return;\n      }\n\n      updateUser(user);\n      console.log('User: ', user);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const paginateNext = async () => {\n    setPreviousPaginateTokens([...previousPaginateTokens, nextPaginateToken]);\n\n    try {\n      const data = await API.graphql(graphqlOperation(listTransactions, {\n        limit: 5,\n        nextToken: nextPaginateToken\n      }));\n      console.log('Data from pagination', data);\n      setTransactionItems(data.data.listTransactions.items);\n      setNextPaginateToken(data.data.listTransactions.nextToken);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const paginatePrevious = async () => {\n    const previousToken = previousPaginateTokens[previousPaginateTokens.length === 1 ? 0 : previousPaginateTokens.length - 2];\n    setPreviousPaginateTokens([...previousPaginateTokens.slice(0, previousPaginateTokens.length - 1)]);\n\n    try {\n      if (previousPaginateTokens.length === 1) {\n        const data = await API.graphql(graphqlOperation(listTransactions, {\n          limit: 5\n        }));\n        setTransactionItems(data.data.listTransactions.items);\n        setNextPaginateToken(data.data.listTransactions.nextToken);\n      } else {\n        const data = await API.graphql(graphqlOperation(listTransactions, {\n          limit: 5,\n          nextToken: previousToken\n        }));\n        setTransactionItems(data.data.listTransactions.items);\n        setNextPaginateToken(data.data.listTransactions.nextToken);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return __jsx(Page, {\n    title: user ? 'Transactions' : 'Log into your branch'\n  }, user ? __jsx(React.Fragment, null, __jsx(TextField, {\n    label: \"Search Product\",\n    value: searchValue,\n    onChange: handleSearchInput,\n    prefix: __jsx(Icon, {\n      source: SearchMajorMonotone\n    }),\n    placeholder: \"Search by Customer phone number\"\n  }), __jsx(Stack, null, __jsx(Stack.Item, {\n    fill: true\n  }, __jsx(Button, {\n    id: \"Accept-Payment\",\n    onClick: () => redirect.dispatch(Redirect.Action.ADMIN_PATH, '/apps/3b01063bac3031d13101100ef3e44fd5/accept-payment')\n  }, __jsx(Icon, {\n    source: BalanceMajorMonotone\n  }), \" Accept Payment\")), __jsx(Stack.Item, null, __jsx(Button, {\n    id: \"Create-Transaction\",\n    primary: true,\n    onClick: () => redirect.dispatch(Redirect.Action.REMOTE, {\n      // url: `https://dev.d3ivgpkzuz6hkr.amplifyapp.com?adminId=${user.attributes.sub}`,\n      url: `http://localhost:3001/transactions?adminId=${user.attributes.sub}`,\n      newContext: true\n    })\n  }, __jsx(Icon, {\n    source: TransactionMajorMonotone\n  }), \" Create transaction\")), __jsx(Stack.Item, null, __jsx(Button, {\n    primary: true,\n    id: \"Logout\",\n    onClick: () => {\n      Auth.signOut();\n      updateUser(null);\n    }\n  }, __jsx(Icon, {\n    source: LogOutMinor\n  }), \" Logout\"))), transactionItems && __jsx(Card, null, __jsx(DataTable, {\n    columnContentTypes: ['text', 'text', 'text', 'text'],\n    headings: ['Customer phone number', 'TotalPrice', 'TotalBonusAmount', 'Minus from Bonus Amount', 'CreatedAt'],\n    rows: transactionItems && transactionItems.filter(transaction => {\n      if (searchValue == null) {\n        return transaction;\n      } else if (transaction.customer[0].phone.toLowerCase().includes(searchValue.toLowerCase())) {\n        return transaction;\n      }\n    }).sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt)).map(transaction => [__jsx(Button, {\n      primary: true,\n      onClick: () => redirect.dispatch(Redirect.Action.ADMIN_PATH, {\n        path: `/customers/${transaction.customer[0].id}`,\n        newContext: true\n      })\n    }, transaction.customer[0].phone), toCurrency(Number(transaction.totalPrice)), toCurrency(Number(transaction.totalBonusAmount)), transaction.note === null ? '' : toCurrency(extractNumbersFromString(transaction.note)), formatDate(transaction.createdAt)])\n  }), __jsx(Pagination, {\n    hasPrevious: previousPaginateTokens.length > 0,\n    onPrevious: paginatePrevious,\n    hasNext: nextPaginateToken,\n    onNext: paginateNext\n  }))) : __jsx(Login, {\n    setUser: fetchedUser => updateUser(fetchedUser)\n  }));\n};\n\nexport async function getStaticProps() {\n  let result;\n\n  try {\n    result = await API.graphql(graphqlOperation(listTransactions, {\n      limit: 5\n    }));\n  } catch (error) {\n    console.log(error);\n  }\n\n  if (result.errors) {\n    console.warn('Failed to fetch transactions.', result.errors);\n    return {\n      props: {\n        transactions: []\n      }\n    };\n  }\n\n  if (result.data !== null) {\n    return {\n      props: {\n        transactions: result.data\n      }\n    };\n  }\n}\nexport default Index;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/pages/index.js"],"names":["React","useState","useCallback","useEffect","axios","Auth","API","graphqlOperation","createApp","Redirect","gql","print","Card","DataTable","Button","Page","Pagination","TextField","ChoiceList","Filters","Icon","Stack","SearchMajorMonotone","TransactionMajorMonotone","BalanceMajorMonotone","LogOutMinor","toCurrency","formatDate","extractNumbersFromString","config","Login","configure","listTransactions","paymentSubscription","listProducts","Index","transactions","searchValue","setSearchValue","user","updateUser","transactionItems","setTransactionItems","items","nextPaginateToken","setNextPaginateToken","nextToken","previousPaginateTokens","setPreviousPaginateTokens","handleSearchInput","newValue","app","apiKey","shopOrigin","redirect","create","checkUser","currentAuthenticatedUser","console","log","error","paginateNext","data","graphql","limit","paginatePrevious","previousToken","length","slice","dispatch","Action","ADMIN_PATH","REMOTE","url","attributes","sub","newContext","signOut","filter","transaction","customer","phone","toLowerCase","includes","sort","a","b","Date","createdAt","map","path","id","Number","totalPrice","totalBonusAmount","note","fetchedUser","getStaticProps","result","errors","warn","props"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { Auth, API, graphqlOperation } from 'aws-amplify'\r\nimport createApp from '@shopify/app-bridge'\r\nimport { Redirect } from '@shopify/app-bridge/actions'\r\nimport gql from 'graphql-tag'\r\nimport { print } from 'graphql'\r\nimport {\r\n    Card,\r\n    DataTable,\r\n    Button,\r\n    Page,\r\n    Pagination,\r\n    TextField,\r\n    ChoiceList,\r\n    Filters,\r\n    Icon,\r\n    Stack\r\n} from '@shopify/polaris'\r\nimport {\r\n    SearchMajorMonotone,\r\n    TransactionMajorMonotone,\r\n    BalanceMajorMonotone,\r\n    LogOutMinor\r\n} from '@shopify/polaris-icons'\r\nimport { toCurrency, formatDate, extractNumbersFromString } from '../utils/helper'\r\nimport config from '../aws-exports'\r\nimport Login from '../components/Login'\r\n\r\nAPI.configure(config)\r\n\r\nconst listTransactions = gql`\r\n    query listTransactions($limit: Int, $nextToken: String) {\r\n        listTransactions(limit: $limit, nextToken: $nextToken) {\r\n            nextToken\r\n            items {\r\n                id\r\n                totalPrice\r\n                totalBonusAmount\r\n                note\r\n                currency\r\n                products {\r\n                    id\r\n                    title\r\n                    bonusPercentage\r\n                    priceAmount\r\n                    priceCurrency\r\n                    image\r\n                }\r\n                customer {\r\n                    id\r\n                    firstName\r\n                    lastName\r\n                    phone\r\n                    email\r\n                }\r\n                createdAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst paymentSubscription = gql`\r\n    subscription paymentRequest {\r\n        onCreatePaymentRequest {\r\n            bonusAmount\r\n            createdAt\r\n            customerId\r\n            orderId\r\n            updatedAt\r\n        }\r\n    }\r\n`\r\n\r\nconst listProducts = gql`\r\n    query Products {\r\n        products(first: 100) {\r\n            edges {\r\n                node {\r\n                    id\r\n                    title\r\n                    tags\r\n                    description(truncateAt: 100)\r\n                    variants(first: 1) {\r\n                        edges {\r\n                            node {\r\n                                id\r\n                                price\r\n                            }\r\n                        }\r\n                    }\r\n                    images(first: 1) {\r\n                        edges {\r\n                            node {\r\n                                originalSrc\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst Index = ({ transactions }) => {\r\n    const [searchValue, setSearchValue] = useState(null)\r\n    const [user, updateUser] = useState(null)\r\n    const [transactionItems, setTransactionItems] = useState(transactions.listTransactions.items)\r\n    const [nextPaginateToken, setNextPaginateToken] = useState(\r\n        transactions.listTransactions.nextToken\r\n    )\r\n    const [previousPaginateTokens, setPreviousPaginateTokens] = useState([])\r\n    const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\r\n\r\n    const app = createApp({\r\n        apiKey: '3b01063bac3031d13101100ef3e44fd5',\r\n        shopOrigin: 'transactions-avanta.myshopify.com'\r\n    })\r\n\r\n    const redirect = Redirect.create(app)\r\n\r\n    useEffect(() => {\r\n        checkUser()\r\n    }, [])\r\n\r\n    const checkUser = async () => {\r\n        try {\r\n            const user = await Auth.currentAuthenticatedUser()\r\n\r\n            if (!user) {\r\n                return\r\n            }\r\n            updateUser(user)\r\n            console.log('User: ', user)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    const paginateNext = async () => {\r\n        setPreviousPaginateTokens([...previousPaginateTokens, nextPaginateToken])\r\n        try {\r\n            const data = await API.graphql(\r\n                graphqlOperation(listTransactions, { limit: 5, nextToken: nextPaginateToken })\r\n            )\r\n\r\n            console.log('Data from pagination', data)\r\n            setTransactionItems(data.data.listTransactions.items)\r\n            setNextPaginateToken(data.data.listTransactions.nextToken)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    const paginatePrevious = async () => {\r\n        const previousToken =\r\n            previousPaginateTokens[\r\n                previousPaginateTokens.length === 1 ? 0 : previousPaginateTokens.length - 2\r\n            ]\r\n        setPreviousPaginateTokens([\r\n            ...previousPaginateTokens.slice(0, previousPaginateTokens.length - 1)\r\n        ])\r\n        try {\r\n            if (previousPaginateTokens.length === 1) {\r\n                const data = await API.graphql(graphqlOperation(listTransactions, { limit: 5 }))\r\n                setTransactionItems(data.data.listTransactions.items)\r\n                setNextPaginateToken(data.data.listTransactions.nextToken)\r\n            } else {\r\n                const data = await API.graphql(\r\n                    graphqlOperation(listTransactions, { limit: 5, nextToken: previousToken })\r\n                )\r\n                setTransactionItems(data.data.listTransactions.items)\r\n                setNextPaginateToken(data.data.listTransactions.nextToken)\r\n            }\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Page title={user ? 'Transactions' : 'Log into your branch'}>\r\n            {user ? (\r\n                <>\r\n                    <TextField\r\n                        label=\"Search Product\"\r\n                        value={searchValue}\r\n                        onChange={handleSearchInput}\r\n                        prefix={<Icon source={SearchMajorMonotone} />}\r\n                        placeholder=\"Search by Customer phone number\"\r\n                    />\r\n                    <Stack>\r\n                        <Stack.Item fill>\r\n                            <Button\r\n                                id=\"Accept-Payment\"\r\n                                onClick={() =>\r\n                                    redirect.dispatch(\r\n                                        Redirect.Action.ADMIN_PATH,\r\n                                        '/apps/3b01063bac3031d13101100ef3e44fd5/accept-payment'\r\n                                    )\r\n                                }>\r\n                                <Icon source={BalanceMajorMonotone} /> Accept Payment\r\n                            </Button>\r\n                        </Stack.Item>\r\n                        <Stack.Item>\r\n                            <Button\r\n                                id=\"Create-Transaction\"\r\n                                primary\r\n                                onClick={() =>\r\n                                    redirect.dispatch(Redirect.Action.REMOTE, {\r\n                                        // url: `https://dev.d3ivgpkzuz6hkr.amplifyapp.com?adminId=${user.attributes.sub}`,\r\n                                        url: `http://localhost:3001/transactions?adminId=${user.attributes.sub}`,\r\n                                        newContext: true\r\n                                    })\r\n                                }>\r\n                                <Icon source={TransactionMajorMonotone} /> Create transaction\r\n                            </Button>\r\n                        </Stack.Item>\r\n                        <Stack.Item>\r\n                            <Button\r\n                                primary\r\n                                id=\"Logout\"\r\n                                onClick={() => {\r\n                                    Auth.signOut()\r\n                                    updateUser(null)\r\n                                }}>\r\n                                <Icon source={LogOutMinor} /> Logout\r\n                            </Button>\r\n                        </Stack.Item>\r\n                    </Stack>\r\n                    {transactionItems && (\r\n                        <Card>\r\n                            <DataTable\r\n                                columnContentTypes={['text', 'text', 'text', 'text']}\r\n                                headings={[\r\n                                    'Customer phone number',\r\n                                    'TotalPrice',\r\n                                    'TotalBonusAmount',\r\n                                    'Minus from Bonus Amount',\r\n                                    'CreatedAt'\r\n                                ]}\r\n                                rows={\r\n                                    transactionItems &&\r\n                                    transactionItems\r\n                                        .filter((transaction) => {\r\n                                            if (searchValue == null) {\r\n                                                return transaction\r\n                                            } else if (\r\n                                                transaction.customer[0].phone\r\n                                                    .toLowerCase()\r\n                                                    .includes(searchValue.toLowerCase())\r\n                                            ) {\r\n                                                return transaction\r\n                                            }\r\n                                        })\r\n                                        .sort(\r\n                                            (a, b) => new Date(b.createdAt) - new Date(a.createdAt)\r\n                                        )\r\n                                        .map((transaction) => [\r\n                                            <Button\r\n                                                primary\r\n                                                onClick={() =>\r\n                                                    redirect.dispatch(Redirect.Action.ADMIN_PATH, {\r\n                                                        path: `/customers/${transaction.customer[0].id}`,\r\n                                                        newContext: true\r\n                                                    })\r\n                                                }>\r\n                                                {transaction.customer[0].phone}\r\n                                            </Button>,\r\n                                            toCurrency(Number(transaction.totalPrice)),\r\n                                            toCurrency(Number(transaction.totalBonusAmount)),\r\n                                            transaction.note === null\r\n                                                ? ''\r\n                                                : toCurrency(\r\n                                                      extractNumbersFromString(transaction.note)\r\n                                                  ),\r\n                                            formatDate(transaction.createdAt)\r\n                                        ])\r\n                                }\r\n                            />\r\n                            <Pagination\r\n                                hasPrevious={previousPaginateTokens.length > 0}\r\n                                onPrevious={paginatePrevious}\r\n                                hasNext={nextPaginateToken}\r\n                                onNext={paginateNext}\r\n                            />\r\n                        </Card>\r\n                    )}\r\n                </>\r\n            ) : (\r\n                <Login setUser={(fetchedUser) => updateUser(fetchedUser)} />\r\n            )}\r\n        </Page>\r\n    )\r\n}\r\n\r\nexport async function getStaticProps() {\r\n    let result\r\n    try {\r\n        result = await API.graphql(graphqlOperation(listTransactions, { limit: 5 }))\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n\r\n    if (result.errors) {\r\n        console.warn('Failed to fetch transactions.', result.errors)\r\n        return { props: { transactions: [] } }\r\n    }\r\n    if (result.data !== null) {\r\n        return { props: { transactions: result.data } }\r\n    }\r\n}\r\n\r\nexport default Index\r\n"]},"metadata":{},"sourceType":"module"}