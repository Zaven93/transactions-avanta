{"ast":null,"code":"import gql from \"graphql-tag\";\nexport const listTransactions = gql`\n  query listTransactions($limit: Int, $nextToken: String) {\n    listTransactions(limit: $limit, nextToken: $nextToken) {\n      nextToken\n      items {\n        id\n        totalPrice\n        totalBonusAmount\n        note\n        currency\n        products {\n          id\n          title\n          bonusPercentage\n          priceAmount\n          priceCurrency\n          image\n        }\n        customer {\n          id\n          firstName\n          lastName\n          phone\n          email\n        }\n        createdAt\n      }\n    }\n  }\n`;\nexport const listProducts = gql`\n  query Products {\n    products(first: 100) {\n      edges {\n        node {\n          id\n          title\n          tags\n          description(truncateAt: 100)\n          variants(first: 1) {\n            edges {\n              node {\n                id\n                price\n              }\n            }\n          }\n          images(first: 1) {\n            edges {\n              node {\n                originalSrc\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nexport const branchByAdminId = gql`\n  query branchByAdminId($adminId: ID!) {\n    branchByAdminId(adminId: $adminId) {\n      items {\n        adminId\n        branchName\n        id\n        branchProducts {\n          items {\n            branchId\n            createdAt\n            id\n            productId\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\nexport const listPaymentRequest = gql`\n  query listPaymentRequest($limit: Int, $branchId: ID, $status: PaymentState, $nextToken: String) {\n    listPaymentRequests(\n      limit: $limit\n      nextToken: $nextToken\n      filter: { status: { eq: $status }, branchId: { eq: $branchId } }\n    ) {\n      items {\n        bonusAmount\n        createdAt\n        customerId\n        id\n        orderId\n        status\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\nexport const getBranchById = gql`\n  query getBranch($id: ID!) {\n    getBranch(id: $id) {\n      transactions(sortDirection: DESC) {\n        items {\n          branchId\n          createdAt\n          currency\n          note\n          customer {\n            email\n            id\n            firstName\n            lastName\n            phone\n          }\n          totalBonusAmount\n          totalPrice\n          updatedAt\n          sortDate\n        }\n      }\n      branchName\n      adminId\n      id\n      branchProducts {\n        items {\n          branchId\n          createdAt\n          id\n          productId\n          tags\n          updatedAt\n        }\n      }\n    }\n  }\n`;","map":{"version":3,"sources":["/var/www/transactions-avanta/graphql/queries.js"],"names":["gql","listTransactions","listProducts","branchByAdminId","listPaymentRequest","getBranchById"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,aAAhB;AAEA,OAAO,MAAMC,gBAAgB,GAAGD,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAA7B;AA+BP,OAAO,MAAME,YAAY,GAAGF,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAzB;AA6BP,OAAO,MAAMG,eAAe,GAAGH,GAAI;;;;;;;;;;;;;;;;;;;CAA5B;AAoBP,OAAO,MAAMI,kBAAkB,GAAGJ,GAAI;;;;;;;;;;;;;;;;;;;CAA/B;AAoBP,OAAO,MAAMK,aAAa,GAAGL,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAA1B","sourcesContent":["import gql from \"graphql-tag\"\n\nexport const listTransactions = gql`\n  query listTransactions($limit: Int, $nextToken: String) {\n    listTransactions(limit: $limit, nextToken: $nextToken) {\n      nextToken\n      items {\n        id\n        totalPrice\n        totalBonusAmount\n        note\n        currency\n        products {\n          id\n          title\n          bonusPercentage\n          priceAmount\n          priceCurrency\n          image\n        }\n        customer {\n          id\n          firstName\n          lastName\n          phone\n          email\n        }\n        createdAt\n      }\n    }\n  }\n`\n\nexport const listProducts = gql`\n  query Products {\n    products(first: 100) {\n      edges {\n        node {\n          id\n          title\n          tags\n          description(truncateAt: 100)\n          variants(first: 1) {\n            edges {\n              node {\n                id\n                price\n              }\n            }\n          }\n          images(first: 1) {\n            edges {\n              node {\n                originalSrc\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\nexport const branchByAdminId = gql`\n  query branchByAdminId($adminId: ID!) {\n    branchByAdminId(adminId: $adminId) {\n      items {\n        adminId\n        branchName\n        id\n        branchProducts {\n          items {\n            branchId\n            createdAt\n            id\n            productId\n            tags\n          }\n        }\n      }\n    }\n  }\n`\nexport const listPaymentRequest = gql`\n  query listPaymentRequest($limit: Int, $branchId: ID, $status: PaymentState, $nextToken: String) {\n    listPaymentRequests(\n      limit: $limit\n      nextToken: $nextToken\n      filter: { status: { eq: $status }, branchId: { eq: $branchId } }\n    ) {\n      items {\n        bonusAmount\n        createdAt\n        customerId\n        id\n        orderId\n        status\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`\nexport const getBranchById = gql`\n  query getBranch($id: ID!) {\n    getBranch(id: $id) {\n      transactions(sortDirection: DESC) {\n        items {\n          branchId\n          createdAt\n          currency\n          note\n          customer {\n            email\n            id\n            firstName\n            lastName\n            phone\n          }\n          totalBonusAmount\n          totalPrice\n          updatedAt\n          sortDate\n        }\n      }\n      branchName\n      adminId\n      id\n      branchProducts {\n        items {\n          branchId\n          createdAt\n          id\n          productId\n          tags\n          updatedAt\n        }\n      }\n    }\n  }\n`\n"]},"metadata":{},"sourceType":"module"}