{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback } from 'react';\nimport gql from 'graphql-tag';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { Table, Icon, Popup, Header } from 'semantic-ui-react';\nimport { Badge } from '@shopify/polaris';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport ProductList from './ProductsList';\nimport config from '../aws-exports';\nAPI.configure(config);\nconst updatePaymentRequest = gql`\n    mutation updatePaymentRequest($input: UpdatePaymentRequestInput!) {\n        updatePaymentRequest(input: $input) {\n            bonusAmount\n            customerId\n            id\n            orderId\n            status\n            products {\n                originalUnitPrice\n                quantity\n                variantId\n            }\n            createdAt\n            updatedAt\n        }\n    }\n`;\n\nconst AcceptedPaymentRequest = ({\n  paymentRequestItems\n}) => {\n  const {\n    0: paymentRequestId,\n    1: setPaymentRequestId\n  } = useState('');\n  const {\n    0: active,\n    1: setActive\n  } = useState(false);\n  const handleChange = useCallback(() => setActive(!active), [active]);\n  console.log('Payment request id for decline', paymentRequestId);\n\n  const declinePayment = async () => {\n    try {\n      const paymentResponse = await API.graphql(graphqlOperation(updatePaymentRequest, {\n        input: {\n          id: paymentRequestId,\n          status: 'DECLINED'\n        }\n      }));\n      console.log('Declined Payment data from lambda', paymentResponse.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Table, {\n    selectable: true,\n    celled: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Customer Id\"), __jsx(Table.HeaderCell, null, \"Bonus Amount\"), __jsx(Table.HeaderCell, null, \"Created At\"), __jsx(Table.HeaderCell, null, \"Updated At\"), __jsx(Table.HeaderCell, null, \"Status\"), __jsx(Table.HeaderCell, null, \"Action\"))), __jsx(Table.Body, null, paymentRequestItems && paymentRequestItems.filter(item => item.status === 'PENDING').map(item => __jsx(Table.Row, {\n    key: item.id\n  }, __jsx(Table.Cell, null, __jsx(Badge, {\n    size: \"small\"\n  }, item.customerId)), __jsx(Table.Cell, null, toCurrency(item.bonusAmount)), __jsx(Table.Cell, null, formatDate(item.createdAt)), __jsx(Table.Cell, null, formatDate(item.updatedAt)), __jsx(Table.Cell, null, __jsx(Badge, {\n    size: \"small\",\n    progress: \"partiallyComplete\",\n    status: \"attention\"\n  }, item.status)), __jsx(Table.Cell, {\n    className: \"actions-cell\"\n  }, __jsx(Popup, {\n    content: \"Approve payment\",\n    trigger: __jsx(Icon, {\n      className: \"accept\",\n      name: \"check\",\n      onClick: () => {\n        setPaymentRequestId(item.id);\n        handleChange();\n      }\n    })\n  }), __jsx(Popup, {\n    content: \"Decline payment\",\n    trigger: __jsx(Icon, {\n      className: \"decline\",\n      name: \"remove\",\n      onClick: () => {\n        setPaymentRequestId(item.id);\n\n        if (paymentRequestId) {\n          declinePayment();\n        }\n\n        return;\n      }\n    })\n  })))))), __jsx(ProductList, {\n    paymentRequestId: paymentRequestId,\n    active: active,\n    handleChange: handleChange\n  }));\n};\n\nexport default AcceptedPaymentRequest;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/components/PendingPaymentRequest.js"],"names":["React","useState","useCallback","gql","API","graphqlOperation","Table","Icon","Popup","Header","Badge","toCurrency","formatDate","ProductList","config","configure","updatePaymentRequest","AcceptedPaymentRequest","paymentRequestItems","paymentRequestId","setPaymentRequestId","active","setActive","handleChange","console","log","declinePayment","paymentResponse","graphql","input","id","status","data","error","filter","item","map","customerId","bonusAmount","createdAt","updatedAt"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react'\r\nimport gql from 'graphql-tag'\r\nimport { API, graphqlOperation } from 'aws-amplify'\r\nimport { Table, Icon, Popup, Header } from 'semantic-ui-react'\r\nimport { Badge } from '@shopify/polaris'\r\nimport { toCurrency, formatDate } from '../utils/helper'\r\nimport ProductList from './ProductsList'\r\nimport config from '../aws-exports'\r\n\r\nAPI.configure(config)\r\n\r\nconst updatePaymentRequest = gql`\r\n    mutation updatePaymentRequest($input: UpdatePaymentRequestInput!) {\r\n        updatePaymentRequest(input: $input) {\r\n            bonusAmount\r\n            customerId\r\n            id\r\n            orderId\r\n            status\r\n            products {\r\n                originalUnitPrice\r\n                quantity\r\n                variantId\r\n            }\r\n            createdAt\r\n            updatedAt\r\n        }\r\n    }\r\n`\r\n\r\nconst AcceptedPaymentRequest = ({ paymentRequestItems }) => {\r\n    const [paymentRequestId, setPaymentRequestId] = useState('')\r\n    const [active, setActive] = useState(false)\r\n\r\n    const handleChange = useCallback(() => setActive(!active), [active])\r\n\r\n    console.log('Payment request id for decline', paymentRequestId)\r\n\r\n    const declinePayment = async () => {\r\n        try {\r\n            const paymentResponse = await API.graphql(\r\n                graphqlOperation(updatePaymentRequest, {\r\n                    input: {\r\n                        id: paymentRequestId,\r\n                        status: 'DECLINED'\r\n                    }\r\n                })\r\n            )\r\n\r\n            console.log('Declined Payment data from lambda', paymentResponse.data)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <Table selectable celled>\r\n                <Table.Header>\r\n                    <Table.Row>\r\n                        <Table.HeaderCell>Customer Id</Table.HeaderCell>\r\n                        <Table.HeaderCell>Bonus Amount</Table.HeaderCell>\r\n                        <Table.HeaderCell>Created At</Table.HeaderCell>\r\n                        <Table.HeaderCell>Updated At</Table.HeaderCell>\r\n                        <Table.HeaderCell>Status</Table.HeaderCell>\r\n                        <Table.HeaderCell>Action</Table.HeaderCell>\r\n                    </Table.Row>\r\n                </Table.Header>\r\n                <Table.Body>\r\n                    {paymentRequestItems &&\r\n                        paymentRequestItems\r\n                            .filter((item) => item.status === 'PENDING')\r\n                            .map((item) => (\r\n                                <Table.Row key={item.id}>\r\n                                    <Table.Cell>\r\n                                        <Badge size=\"small\">{item.customerId}</Badge>\r\n                                    </Table.Cell>\r\n                                    <Table.Cell>{toCurrency(item.bonusAmount)}</Table.Cell>\r\n                                    <Table.Cell>{formatDate(item.createdAt)}</Table.Cell>\r\n                                    <Table.Cell>{formatDate(item.updatedAt)}</Table.Cell>\r\n                                    <Table.Cell>\r\n                                        <Badge\r\n                                            size=\"small\"\r\n                                            progress=\"partiallyComplete\"\r\n                                            status=\"attention\">\r\n                                            {item.status}\r\n                                        </Badge>\r\n                                    </Table.Cell>\r\n                                    <Table.Cell className=\"actions-cell\">\r\n                                        <Popup\r\n                                            content=\"Approve payment\"\r\n                                            trigger={\r\n                                                <Icon\r\n                                                    className=\"accept\"\r\n                                                    name=\"check\"\r\n                                                    onClick={() => {\r\n                                                        setPaymentRequestId(item.id)\r\n                                                        handleChange()\r\n                                                    }}\r\n                                                />\r\n                                            }\r\n                                        />\r\n                                        <Popup\r\n                                            content=\"Decline payment\"\r\n                                            trigger={\r\n                                                <Icon\r\n                                                    className=\"decline\"\r\n                                                    name=\"remove\"\r\n                                                    onClick={() => {\r\n                                                        setPaymentRequestId(item.id)\r\n                                                        if (paymentRequestId) {\r\n                                                            declinePayment()\r\n                                                        }\r\n\r\n                                                        return\r\n                                                    }}\r\n                                                />\r\n                                            }\r\n                                        />\r\n                                    </Table.Cell>\r\n                                </Table.Row>\r\n                            ))}\r\n                </Table.Body>\r\n            </Table>\r\n            <ProductList\r\n                paymentRequestId={paymentRequestId}\r\n                active={active}\r\n                handleChange={handleChange}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AcceptedPaymentRequest\r\n"]},"metadata":{},"sourceType":"module"}