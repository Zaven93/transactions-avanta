{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { Table, Icon, Popup, Header } from \"semantic-ui-react\";\nimport { Badge } from \"@shopify/polaris\";\nimport { useFetchPaymentRequest, useUpdatePaymentRequest } from \"../core/hooks\";\nimport { toCurrency, formatDate } from \"../utils/helper\";\nimport ProductList from \"./ProductsList\";\nimport { updatePaymentRequest } from \"../graphql/mutation\";\nimport { listPaymentRequest } from \"../graphql/queries\";\nimport { paymentSubscription } from \"../graphql/subscriptions\";\n\nconst PendingPaymentRequest = ({\n  createUpdatePaymentSubscription,\n  branchId\n}) => {\n  const {\n    0: paymentRequestId,\n    1: setPaymentRequestId\n  } = useState(\"\");\n  const {\n    0: active,\n    1: setActive\n  } = useState(false);\n  const {\n    0: paymentRequestItems,\n    1: setPaymentRequestItems\n  } = useState([]);\n  const {\n    data: paymentRequests,\n    refetch: getPaymentRequests\n  } = useFetchPaymentRequest(branchId, \"PENDING\");\n  const {\n    updatePaymentRequest\n  } = useUpdatePaymentRequest();\n  const handleChange = useCallback(() => setActive(!active), [active]);\n  useEffect(() => {\n    getPaymentRequests();\n  }, [branchId, createUpdatePaymentSubscription]);\n  useEffect(() => {\n    setPaymentRequestItems(paymentRequests && paymentRequests.data.listPaymentRequests.items);\n  }, [paymentRequests]);\n\n  const declinePayment = paymentId => {\n    updatePaymentRequest({\n      paymentId,\n      status: \"DECLINED\"\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Table, {\n    selectable: true,\n    celled: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Customer Id\"), __jsx(Table.HeaderCell, null, \"Bonus Amount\"), __jsx(Table.HeaderCell, null, \"Created At\"), __jsx(Table.HeaderCell, null, \"Updated At\"), __jsx(Table.HeaderCell, null, \"Status\"), __jsx(Table.HeaderCell, null, \"Action\"))), __jsx(Table.Body, null, paymentRequestItems && paymentRequestItems.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt)).map(item => __jsx(Table.Row, {\n    key: item.id\n  }, __jsx(Table.Cell, null, __jsx(Badge, {\n    size: \"small\"\n  }, item.customerId)), __jsx(Table.Cell, null, toCurrency(item.bonusAmount)), __jsx(Table.Cell, null, formatDate(item.createdAt)), __jsx(Table.Cell, null, formatDate(item.updatedAt)), __jsx(Table.Cell, null, __jsx(Badge, {\n    size: \"small\",\n    progress: \"partiallyComplete\",\n    status: \"attention\"\n  }, item.status)), __jsx(Table.Cell, {\n    className: \"actions-cell\"\n  }, __jsx(Popup, {\n    content: \"Approve payment\",\n    trigger: __jsx(Icon, {\n      className: \"accept\",\n      name: \"check\",\n      onClick: () => {\n        setPaymentRequestId(item.id);\n        handleChange();\n      }\n    })\n  }), __jsx(Popup, {\n    content: \"Decline payment\",\n    trigger: __jsx(Icon, {\n      className: \"decline\",\n      name: \"remove\",\n      onClick: async () => {\n        declinePayment(item.id);\n      }\n    })\n  })))))), __jsx(ProductList, {\n    paymentRequestId: paymentRequestId,\n    active: active,\n    handleChange: handleChange\n  }));\n};\n\nexport default PendingPaymentRequest;","map":{"version":3,"sources":["/var/www/transactions-avanta/components/PendingPaymentRequest.js"],"names":["React","useState","useCallback","useEffect","Table","Icon","Popup","Header","Badge","useFetchPaymentRequest","useUpdatePaymentRequest","toCurrency","formatDate","ProductList","updatePaymentRequest","listPaymentRequest","paymentSubscription","PendingPaymentRequest","createUpdatePaymentSubscription","branchId","paymentRequestId","setPaymentRequestId","active","setActive","paymentRequestItems","setPaymentRequestItems","data","paymentRequests","refetch","getPaymentRequests","handleChange","listPaymentRequests","items","declinePayment","paymentId","status","sort","a","b","Date","updatedAt","map","item","id","customerId","bonusAmount","createdAt"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\"\nimport { Table, Icon, Popup, Header } from \"semantic-ui-react\"\nimport { Badge } from \"@shopify/polaris\"\nimport { useFetchPaymentRequest, useUpdatePaymentRequest } from \"../core/hooks\"\nimport { toCurrency, formatDate } from \"../utils/helper\"\nimport ProductList from \"./ProductsList\"\nimport { updatePaymentRequest } from \"../graphql/mutation\"\nimport { listPaymentRequest } from \"../graphql/queries\"\nimport { paymentSubscription } from \"../graphql/subscriptions\"\n\nconst PendingPaymentRequest = ({ createUpdatePaymentSubscription, branchId }) => {\n  const [paymentRequestId, setPaymentRequestId] = useState(\"\")\n  const [active, setActive] = useState(false)\n  const [paymentRequestItems, setPaymentRequestItems] = useState([])\n  const { data: paymentRequests, refetch: getPaymentRequests } = useFetchPaymentRequest(\n    branchId,\n    \"PENDING\"\n  )\n  const { updatePaymentRequest } = useUpdatePaymentRequest()\n\n  const handleChange = useCallback(() => setActive(!active), [active])\n\n  useEffect(() => {\n    getPaymentRequests()\n  }, [branchId, createUpdatePaymentSubscription])\n\n  useEffect(() => {\n    setPaymentRequestItems(paymentRequests && paymentRequests.data.listPaymentRequests.items)\n  }, [paymentRequests])\n\n  const declinePayment = (paymentId) => {\n    updatePaymentRequest({ paymentId, status: \"DECLINED\" })\n  }\n\n  return (\n    <>\n      <Table selectable celled>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Customer Id</Table.HeaderCell>\n            <Table.HeaderCell>Bonus Amount</Table.HeaderCell>\n            <Table.HeaderCell>Created At</Table.HeaderCell>\n            <Table.HeaderCell>Updated At</Table.HeaderCell>\n            <Table.HeaderCell>Status</Table.HeaderCell>\n            <Table.HeaderCell>Action</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {paymentRequestItems &&\n            paymentRequestItems\n              .sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt))\n              .map((item) => (\n                <Table.Row key={item.id}>\n                  <Table.Cell>\n                    <Badge size=\"small\">{item.customerId}</Badge>\n                  </Table.Cell>\n                  <Table.Cell>{toCurrency(item.bonusAmount)}</Table.Cell>\n                  <Table.Cell>{formatDate(item.createdAt)}</Table.Cell>\n                  <Table.Cell>{formatDate(item.updatedAt)}</Table.Cell>\n                  <Table.Cell>\n                    <Badge size=\"small\" progress=\"partiallyComplete\" status=\"attention\">\n                      {item.status}\n                    </Badge>\n                  </Table.Cell>\n                  <Table.Cell className=\"actions-cell\">\n                    <Popup\n                      content=\"Approve payment\"\n                      trigger={\n                        <Icon\n                          className=\"accept\"\n                          name=\"check\"\n                          onClick={() => {\n                            setPaymentRequestId(item.id)\n                            handleChange()\n                          }}\n                        />\n                      }\n                    />\n                    <Popup\n                      content=\"Decline payment\"\n                      trigger={\n                        <Icon\n                          className=\"decline\"\n                          name=\"remove\"\n                          onClick={async () => {\n                            declinePayment(item.id)\n                          }}\n                        />\n                      }\n                    />\n                  </Table.Cell>\n                </Table.Row>\n              ))}\n        </Table.Body>\n      </Table>\n      <ProductList\n        paymentRequestId={paymentRequestId}\n        active={active}\n        handleChange={handleChange}\n      />\n    </>\n  )\n}\n\nexport default PendingPaymentRequest\n"]},"metadata":{},"sourceType":"module"}