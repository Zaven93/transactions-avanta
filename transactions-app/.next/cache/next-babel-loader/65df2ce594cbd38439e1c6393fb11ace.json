{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport AWS from \"aws-sdk\";\nimport { Auth, API, graphqlOperation } from \"aws-amplify\";\nimport createApp from \"@shopify/app-bridge\";\nimport { Redirect } from \"@shopify/app-bridge/actions\";\nimport gql from \"graphql-tag\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { Page, Button, Modal, Form, FormLayout, TextField, Badge } from \"@shopify/polaris\";\nimport { Table, Popup, Header, Icon } from \"semantic-ui-react\";\nimport ProductList from \"./ProductsList\";\nimport { formatDate } from \"../utils/helper\";\nimport config from \"../aws-exports\";\nimport BranchProducts from \"./BranchProducts\";\nimport AdminBranchInfo from \"../components/AdminBranchInfo\";\nAPI.configure(config);\nAWS.config.update({\n  accessKeyId: \"AKIAI53OMMWOAP5X3K5Q\",\n  secretAccessKey: \"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\",\n  region: \"us-east-1\"\n});\nconst cognito = new AWS.CognitoIdentityServiceProvider();\nconst listBranchs = gql`\n  query listBranchs {\n    listBranchs {\n      items {\n        adminId\n        branchName\n        branchUsername\n        createdAt\n        id\n        branchProducts {\n          items {\n            branchId\n            createdAt\n            id\n            productId\n            tags\n            updatedAt\n          }\n        }\n        branchPaymentRequests {\n          items {\n            branchId\n            id\n          }\n        }\n        transactions {\n          items {\n            branchId\n            id\n          }\n        }\n      }\n    }\n  }\n`;\nconst onCreateBranchSubscription = gql`\n  subscription onCreateBranch {\n    onCreateBranch {\n      adminId\n      branchName\n      id\n      createdAt\n    }\n  }\n`;\nconst onDeleteBranchSubscription = gql`\n  subscription onDeleteBranch {\n    onDeleteBranch {\n      id\n    }\n  }\n`;\nconst removeBranch = gql`\n  mutation deleteBranch($input: DeleteBranchInput!) {\n    deleteBranch(input: $input) {\n      id\n    }\n  }\n`;\nconst deleteTransaction = gql`\n  mutation deleteTransaction($input: DeleteTransactionInput!) {\n    deleteTransaction(input: $input) {\n      id\n    }\n  }\n`;\nconst deleteBranchProduct = gql`\n  mutation deleteBranchProduct($input: DeleteBranchProductInput!) {\n    deleteBranchProduct(input: $input) {\n      id\n    }\n  }\n`;\nconst deletePaymentRequest = gql`\n  mutation deletePaymentRequest($input: DeletePaymentRequestInput!) {\n    deletePaymentRequest(input: $input) {\n      id\n    }\n  }\n`;\n\nconst BranchList = ({\n  setBranchId,\n  branchId\n}) => {\n  const {\n    0: active,\n    1: setActive\n  } = useState(false);\n  const {\n    0: branches,\n    1: setBranches\n  } = useState(\"\");\n  const {\n    0: branchName,\n    1: setBranchName\n  } = useState(\"\");\n  const {\n    0: productBranchId,\n    1: setProductBranchId\n  } = useState(\"\");\n  const {\n    0: newCreatedBranch,\n    1: setNewCreatedBranch\n  } = useState(\"\");\n  const app = createApp({\n    apiKey: \"3b01063bac3031d13101100ef3e44fd5\",\n    shopOrigin: \"transactions-avanta.myshopify.com\"\n  });\n  const redirect = Redirect.create(app);\n\n  const handleChange = () => {\n    setActive(!active);\n  };\n\n  const fetchBranches = async () => {\n    try {\n      const getBranches = await API.graphql(graphqlOperation(listBranchs));\n      setBranches(getBranches.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const deleteBranch = async id => {\n    const branchToDelete = branches.listBranchs.items.filter(item => item.id === id)[0];\n    const transactionsToDelete = branchToDelete.transactions.items ? branchToDelete.transactions.items.map(transaction => transaction.id) : \"\";\n    const productsToDelete = branchToDelete.branchProducts.items ? branchToDelete.branchProducts.items.map(product => product.id) : \"\";\n    const paymentRequestToDelete = branchToDelete.branchPaymentRequests.items ? branchToDelete.branchPaymentRequests.items.map(paymentRequest => paymentRequest.id) : \"\";\n    console.log(\"Transactions to delete\", transactionsToDelete);\n    console.log(\"Products to delete\", productsToDelete);\n    console.log(\"Payment requests to delete\", paymentRequestToDelete);\n\n    try {\n      const deletedBranch = await API.graphql(graphqlOperation(removeBranch, {\n        input: {\n          id\n        }\n      }));\n      console.log(\"Deleted branch\", deletedBranch);\n      await Promise.all(transactionsToDelete.map(transactionId => {\n        API.graphql(graphqlOperation(deleteTransaction, {\n          input: {\n            id: transactionId\n          }\n        }));\n      })).catch(err => console.log(err));\n      await Promise.all(productsToDelete.map(productId => {\n        API.graphql(graphqlOperation(deleteBranchProduct, {\n          input: {\n            id: productId\n          }\n        }));\n      })).catch(err => console.log(err));\n      await Promise.all(paymentRequestToDelete.map(paymentId => {\n        API.graphql(graphqlOperation(deletePaymentRequest, {\n          input: {\n            id: paymentId\n          }\n        }));\n      }));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const deleteUserFromCognito = async username => {\n    try {\n      await cognito.adminDeleteUser({\n        UserPoolId: \"us-east-1_IfrnnzGFR\",\n        Username: username\n      }).promise();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    fetchBranches();\n    API.graphql(graphqlOperation(onCreateBranchSubscription)).subscribe({\n      next: createdBranch => {\n        setNewCreatedBranch(createdBranch);\n      }\n    });\n    API.graphql(graphqlOperation(onDeleteBranchSubscription)).subscribe({\n      next: deletedBranch => {\n        setNewCreatedBranch(deletedBranch);\n      }\n    });\n  }, [newCreatedBranch]);\n  console.log(\"Branches from Branch list\", branches);\n  return __jsx(React.Fragment, null, __jsx(Table, {\n    selectable: true,\n    celled: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Branch Name\"), __jsx(Table.HeaderCell, {\n    textAlign: \"center\"\n  }, \"Created At\"), __jsx(Table.HeaderCell, {\n    textAlign: \"center\"\n  }, \"Actions\"))), __jsx(Table.Body, null, branches && branches.listBranchs.items.map(item => __jsx(Table.Row, {\n    key: item.id\n  }, __jsx(Table.Cell, null, __jsx(Button, {\n    primary: true,\n    onClick: () => {\n      setBranchId(item.id); // redirect.dispatch(\n      //     Redirect.Action.ADMIN_PATH,\n      //     `/apps/3b01063bac3031d13101100ef3e44fd5/branch/${item.id}`\n      // )\n    }\n  }, __jsx(Icon, {\n    name: \"code branch\"\n  }), \" \", item.branchName)), __jsx(Table.Cell, {\n    textAlign: \"center\"\n  }, formatDate(item.createdAt)), __jsx(Table.Cell, {\n    textAlign: \"center\",\n    className: \"branch-actions\"\n  }, __jsx(Popup, {\n    content: \"Edit branch\",\n    trigger: __jsx(Icon, {\n      onClick: () => {\n        setProductBranchId(item.id);\n        setBranchName(item.branchName);\n        handleChange();\n      },\n      className: \"edit-branch\",\n      name: \"edit outline\"\n    })\n  }), __jsx(Popup, {\n    content: \"Delete Branch\",\n    trigger: __jsx(Icon, {\n      className: \"remove-branch\",\n      name: \"trash alternate\",\n      onClick: () => {\n        deleteBranch(item.id);\n        deleteUserFromCognito(item.branchUsername);\n      }\n    })\n  })))))), __jsx(BranchProducts, {\n    branchName: branchName,\n    branchId: productBranchId,\n    active: active,\n    handleChange: handleChange\n  }));\n};\n\nexport default BranchList;","map":{"version":3,"sources":["/var/www/transactions-avanta/components/BranchList.js"],"names":["React","useState","useEffect","useCallback","AWS","Auth","API","graphqlOperation","createApp","Redirect","gql","v4","uuidv4","Page","Button","Modal","Form","FormLayout","TextField","Badge","Table","Popup","Header","Icon","ProductList","formatDate","config","BranchProducts","AdminBranchInfo","configure","update","accessKeyId","secretAccessKey","region","cognito","CognitoIdentityServiceProvider","listBranchs","onCreateBranchSubscription","onDeleteBranchSubscription","removeBranch","deleteTransaction","deleteBranchProduct","deletePaymentRequest","BranchList","setBranchId","branchId","active","setActive","branches","setBranches","branchName","setBranchName","productBranchId","setProductBranchId","newCreatedBranch","setNewCreatedBranch","app","apiKey","shopOrigin","redirect","create","handleChange","fetchBranches","getBranches","graphql","data","error","console","log","deleteBranch","id","branchToDelete","items","filter","item","transactionsToDelete","transactions","map","transaction","productsToDelete","branchProducts","product","paymentRequestToDelete","branchPaymentRequests","paymentRequest","deletedBranch","input","Promise","all","transactionId","catch","err","productId","paymentId","deleteUserFromCognito","username","adminDeleteUser","UserPoolId","Username","promise","subscribe","next","createdBranch","createdAt","branchUsername"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\"\nimport AWS from \"aws-sdk\"\nimport { Auth, API, graphqlOperation } from \"aws-amplify\"\nimport createApp from \"@shopify/app-bridge\"\nimport { Redirect } from \"@shopify/app-bridge/actions\"\nimport gql from \"graphql-tag\"\nimport { v4 as uuidv4 } from \"uuid\"\nimport { Page, Button, Modal, Form, FormLayout, TextField, Badge } from \"@shopify/polaris\"\nimport { Table, Popup, Header, Icon } from \"semantic-ui-react\"\nimport ProductList from \"./ProductsList\"\nimport { formatDate } from \"../utils/helper\"\nimport config from \"../aws-exports\"\nimport BranchProducts from \"./BranchProducts\"\nimport AdminBranchInfo from \"../components/AdminBranchInfo\"\n\nAPI.configure(config)\n\nAWS.config.update({\n  accessKeyId: \"AKIAI53OMMWOAP5X3K5Q\",\n  secretAccessKey: \"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\",\n  region: \"us-east-1\",\n})\n\nconst cognito = new AWS.CognitoIdentityServiceProvider()\n\nconst listBranchs = gql`\n  query listBranchs {\n    listBranchs {\n      items {\n        adminId\n        branchName\n        branchUsername\n        createdAt\n        id\n        branchProducts {\n          items {\n            branchId\n            createdAt\n            id\n            productId\n            tags\n            updatedAt\n          }\n        }\n        branchPaymentRequests {\n          items {\n            branchId\n            id\n          }\n        }\n        transactions {\n          items {\n            branchId\n            id\n          }\n        }\n      }\n    }\n  }\n`\nconst onCreateBranchSubscription = gql`\n  subscription onCreateBranch {\n    onCreateBranch {\n      adminId\n      branchName\n      id\n      createdAt\n    }\n  }\n`\n\nconst onDeleteBranchSubscription = gql`\n  subscription onDeleteBranch {\n    onDeleteBranch {\n      id\n    }\n  }\n`\n\nconst removeBranch = gql`\n  mutation deleteBranch($input: DeleteBranchInput!) {\n    deleteBranch(input: $input) {\n      id\n    }\n  }\n`\n\nconst deleteTransaction = gql`\n  mutation deleteTransaction($input: DeleteTransactionInput!) {\n    deleteTransaction(input: $input) {\n      id\n    }\n  }\n`\n\nconst deleteBranchProduct = gql`\n  mutation deleteBranchProduct($input: DeleteBranchProductInput!) {\n    deleteBranchProduct(input: $input) {\n      id\n    }\n  }\n`\n\nconst deletePaymentRequest = gql`\n  mutation deletePaymentRequest($input: DeletePaymentRequestInput!) {\n    deletePaymentRequest(input: $input) {\n      id\n    }\n  }\n`\n\nconst BranchList = ({ setBranchId, branchId }) => {\n  const [active, setActive] = useState(false)\n  const [branches, setBranches] = useState(\"\")\n  const [branchName, setBranchName] = useState(\"\")\n  const [productBranchId, setProductBranchId] = useState(\"\")\n  const [newCreatedBranch, setNewCreatedBranch] = useState(\"\")\n\n  const app = createApp({\n    apiKey: \"3b01063bac3031d13101100ef3e44fd5\",\n    shopOrigin: \"transactions-avanta.myshopify.com\",\n  })\n\n  const redirect = Redirect.create(app)\n\n  const handleChange = () => {\n    setActive(!active)\n  }\n\n  const fetchBranches = async () => {\n    try {\n      const getBranches = await API.graphql(graphqlOperation(listBranchs))\n      setBranches(getBranches.data)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const deleteBranch = async (id) => {\n    const branchToDelete = branches.listBranchs.items.filter((item) => item.id === id)[0]\n    const transactionsToDelete = branchToDelete.transactions.items\n      ? branchToDelete.transactions.items.map((transaction) => transaction.id)\n      : \"\"\n    const productsToDelete = branchToDelete.branchProducts.items\n      ? branchToDelete.branchProducts.items.map((product) => product.id)\n      : \"\"\n    const paymentRequestToDelete = branchToDelete.branchPaymentRequests.items\n      ? branchToDelete.branchPaymentRequests.items.map((paymentRequest) => paymentRequest.id)\n      : \"\"\n\n    console.log(\"Transactions to delete\", transactionsToDelete)\n    console.log(\"Products to delete\", productsToDelete)\n    console.log(\"Payment requests to delete\", paymentRequestToDelete)\n    try {\n      const deletedBranch = await API.graphql(graphqlOperation(removeBranch, { input: { id } }))\n      console.log(\"Deleted branch\", deletedBranch)\n      await Promise.all(\n        transactionsToDelete.map((transactionId) => {\n          API.graphql(graphqlOperation(deleteTransaction, { input: { id: transactionId } }))\n        })\n      ).catch((err) => console.log(err))\n      await Promise.all(\n        productsToDelete.map((productId) => {\n          API.graphql(graphqlOperation(deleteBranchProduct, { input: { id: productId } }))\n        })\n      ).catch((err) => console.log(err))\n      await Promise.all(\n        paymentRequestToDelete.map((paymentId) => {\n          API.graphql(graphqlOperation(deletePaymentRequest, { input: { id: paymentId } }))\n        })\n      )\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const deleteUserFromCognito = async (username) => {\n    try {\n      await cognito\n        .adminDeleteUser({\n          UserPoolId: \"us-east-1_IfrnnzGFR\",\n          Username: username,\n        })\n        .promise()\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    fetchBranches()\n    API.graphql(graphqlOperation(onCreateBranchSubscription)).subscribe({\n      next: (createdBranch) => {\n        setNewCreatedBranch(createdBranch)\n      },\n    })\n    API.graphql(graphqlOperation(onDeleteBranchSubscription)).subscribe({\n      next: (deletedBranch) => {\n        setNewCreatedBranch(deletedBranch)\n      },\n    })\n  }, [newCreatedBranch])\n\n  console.log(\"Branches from Branch list\", branches)\n\n  return (\n    <>\n      <Table selectable celled>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Branch Name</Table.HeaderCell>\n            <Table.HeaderCell textAlign=\"center\">Created At</Table.HeaderCell>\n            <Table.HeaderCell textAlign=\"center\">Actions</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {branches &&\n            branches.listBranchs.items.map((item) => (\n              <Table.Row key={item.id}>\n                <Table.Cell>\n                  {/* <Badge size=\"medium\" status=\"info\">\n                                        {item.branchName}\n                                    </Badge> */}\n                  <Button\n                    primary\n                    onClick={() => {\n                      setBranchId(item.id)\n                      // redirect.dispatch(\n                      //     Redirect.Action.ADMIN_PATH,\n                      //     `/apps/3b01063bac3031d13101100ef3e44fd5/branch/${item.id}`\n                      // )\n                    }}>\n                    <Icon name=\"code branch\" /> {item.branchName}\n                  </Button>\n                </Table.Cell>\n                <Table.Cell textAlign=\"center\">{formatDate(item.createdAt)}</Table.Cell>\n                <Table.Cell textAlign=\"center\" className=\"branch-actions\">\n                  <Popup\n                    content=\"Edit branch\"\n                    trigger={\n                      <Icon\n                        onClick={() => {\n                          setProductBranchId(item.id)\n                          setBranchName(item.branchName)\n                          handleChange()\n                        }}\n                        className=\"edit-branch\"\n                        name=\"edit outline\"\n                      />\n                    }\n                  />\n                  <Popup\n                    content=\"Delete Branch\"\n                    trigger={\n                      <Icon\n                        className=\"remove-branch\"\n                        name=\"trash alternate\"\n                        onClick={() => {\n                          deleteBranch(item.id)\n                          deleteUserFromCognito(item.branchUsername)\n                        }}\n                      />\n                    }\n                  />\n                </Table.Cell>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n      <BranchProducts\n        branchName={branchName}\n        branchId={productBranchId}\n        active={active}\n        handleChange={handleChange}\n      />\n    </>\n  )\n}\n\nexport default BranchList\n"]},"metadata":{},"sourceType":"module"}