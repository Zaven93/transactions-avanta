{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject8() {\n  var data = _taggedTemplateLiteral([\"\\n    subscription paymentRequest {\\n        onCreatePaymentRequest {\\n            bonusAmount\\n            createdAt\\n            customerId\\n            id\\n            orderId\\n            status\\n            updatedAt\\n        }\\n    }\\n\"]);\n\n  _templateObject8 = function _templateObject8() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject7() {\n  var data = _taggedTemplateLiteral([\"\\n    subscription onDeletePaymentRequest {\\n        onDeletePaymentRequest {\\n            id\\n            status\\n        }\\n    }\\n\"]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n    subscription onUpdatePaymentRequest {\\n        onUpdatePaymentRequest {\\n            id\\n            status\\n        }\\n    }\\n\"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n    subscription onCreatePaymentSubscription {\\n        onCreatePaymentRequest {\\n            bonusAmount\\n            createdAt\\n            customerId\\n            orderId\\n            updatedAt\\n        }\\n    }\\n\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation CompleteOrder($id: ID!) {\\n        draftOrderComplete(id: $id, paymentPending: true) {\\n            draftOrder {\\n                customer {\\n                    id\\n                }\\n                email\\n                name\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation CreateOrder($input: DraftOrderInput!) {\\n        draftOrderCreate(input: $input) {\\n            draftOrder {\\n                id\\n                customer {\\n                    id\\n                }\\n                email\\n                lineItems(first: 10) {\\n                    edges {\\n                        node {\\n                            title\\n                            quantity\\n                            originalUnitPrice\\n                            variant {\\n                                id\\n                                price\\n                                title\\n                                product {\\n                                    tags\\n                                    title\\n                                    images(first: 5) {\\n                                        edges {\\n                                            node {\\n                                                originalSrc\\n                                            }\\n                                        }\\n                                    }\\n                                }\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    query Products {\\n        products(first: 100) {\\n            edges {\\n                node {\\n                    id\\n                    title\\n                    tags\\n                    description(truncateAt: 100)\\n                    variants(first: 1) {\\n                        edges {\\n                            node {\\n                                id\\n                                price\\n                            }\\n                        }\\n                    }\\n                    images(first: 1) {\\n                        edges {\\n                            node {\\n                                originalSrc\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query listPaymentRequest {\\n        listPaymentRequests {\\n            items {\\n                bonusAmount\\n                createdAt\\n                customerId\\n                id\\n                orderId\\n                status\\n                updatedAt\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport axios from 'axios';\nimport gql from 'graphql-tag';\nimport { print } from 'graphql';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { Page, Badge, Avatar, TextStyle, Card, TextContainer, Modal, Checkbox, Thumbnail, Toast, Frame, Button, Tabs } from '@shopify/polaris';\nimport { CustomersMajorMonotone } from '@shopify/polaris-icons';\nimport { Table, Icon, Popup, Header } from 'semantic-ui-react';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nimport ProductList from '../components/ProductsList';\nimport AcceptedPaymentRequest from '../components/AcceptedPaymentRequest';\nimport PendingPaymentRequest from '../components/PendingPaymentRequest';\nimport DeclinedPaymentRequest from '../components/DeclinedPaymentRequest';\nAPI.configure(config);\nvar listPaymentRequest = gql(_templateObject());\nvar listProducts = gql(_templateObject2());\nvar createDraftOrder = gql(_templateObject3());\nvar completeOrder = gql(_templateObject4());\nvar onCreatePaymentSubscription = gql(_templateObject5());\nvar onUpdatePaymentSubscription = gql(_templateObject6());\nvar onDeletePaymentSubscription = gql(_templateObject7());\nvar paymentSubscription = gql(_templateObject8());\n\nvar AcceptPayment = function AcceptPayment() {\n  _s();\n\n  // const [paymentRequestItems, setPaymentRequestItems] = useState(\n  //     paymentRequests.listPaymentRequests.items\n  // )\n  var _useState = useState(false),\n      openPicker = _useState[0],\n      setOpenPicker = _useState[1];\n\n  var _useState2 = useState([]),\n      rowId = _useState2[0],\n      setRowId = _useState2[1];\n\n  var _useState3 = useState(null),\n      searchValue = _useState3[0],\n      setSearchValue = _useState3[1];\n\n  var _useState4 = useState(false),\n      activeToast = _useState4[0],\n      setActiveToast = _useState4[1];\n\n  var _useState5 = useState(0),\n      selected = _useState5[0],\n      setSelected = _useState5[1];\n\n  var _useState6 = useState(''),\n      createUpdatePaymentSubscription = _useState6[0],\n      setCreateUpdatePaymentSubscription = _useState6[1];\n\n  var handleTabChange = useCallback(function (selectedTabIndex) {\n    return setSelected(selectedTabIndex);\n  }, []);\n  var handleSearchInput = useCallback(function (newValue) {\n    return setSearchValue(newValue);\n  }, []);\n  useEffect(function () {\n    var listener = API.graphql(graphqlOperation(paymentSubscription)).subscribe({\n      next: function next(paymentResponse) {\n        setCreateUpdatePaymentSubscription(paymentResponse);\n      }\n    });\n    var onUpdatePayment = API.graphql(graphqlOperation(onUpdatePaymentSubscription)).subscribe({\n      next: function next(onUpdatePaymentResponse) {\n        setCreateUpdatePaymentSubscription(onUpdatePaymentResponse);\n      }\n    });\n    return function () {\n      listener.unsubscribe();\n      onUpdatePayment.unsubscribe();\n    };\n  }, []);\n  var tabs = [{\n    id: 'pending-payments',\n    content: 'Pending Payment Requests',\n    accessibilityLabel: 'Pending Requests',\n    panelID: 'pending-payments-content'\n  }, {\n    id: 'accepted-payments',\n    content: 'Accepted Payment Requests',\n    accessibilityLabel: 'Accepted Request',\n    panelID: 'accepted-payments-content'\n  }, {\n    id: 'declined-payments',\n    content: 'Declined Payment Requests',\n    accessibilityLabel: 'Declined Requests',\n    panelID: 'declined-payments-content'\n  }];\n  var toastMarkup = activeToast ? __jsx(Toast, {\n    content: \"Order has been successfully created\",\n    onDismiss: function onDismiss() {\n      return setActiveToast(false);\n    }\n  }) : null;\n\n  var renderPaymentRequest = function renderPaymentRequest(selected) {\n    switch (selected) {\n      case 0:\n        return __jsx(PendingPaymentRequest, {\n          createUpdatePaymentSubscription: createUpdatePaymentSubscription\n        });\n\n      case 1:\n        return __jsx(AcceptedPaymentRequest, null);\n\n      case 2:\n        return __jsx(DeclinedPaymentRequest, null);\n\n      default:\n        return;\n    }\n  };\n\n  return __jsx(Frame, null, __jsx(Page, {\n    title: \"Payment Request\"\n  }, __jsx(Card, null, __jsx(Tabs, {\n    tabs: tabs,\n    selected: selected,\n    onSelect: handleTabChange\n  }, __jsx(Card.Section, {\n    title: tabs[selected].content\n  }, renderPaymentRequest(selected)))), toastMarkup));\n}; // export async function getStaticProps() {\n//     let result\n//     try {\n//         result = await API.graphql(graphqlOperation(listPaymentRequest))\n//     } catch (error) {\n//         console.log(error)\n//     }\n//     if (result.errors) {\n//         console.warn('Failed to fetch payment requests.', result.errors)\n//         return { props: { paymentRequests: [] } }\n//     }\n//     if (result.data !== null) {\n//         return {\n//             props: { paymentRequests: result.data }\n//         }\n//     }\n// }\n\n\n_s(AcceptPayment, \"+NYimA6LBo0pjTma/etuNl41B3I=\");\n\n_c = AcceptPayment;\nexport default AcceptPayment;\n\nvar _c;\n\n$RefreshReg$(_c, \"AcceptPayment\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/pages/accept-payment.js"],"names":["React","useState","useCallback","useEffect","axios","gql","print","API","graphqlOperation","Page","Badge","Avatar","TextStyle","Card","TextContainer","Modal","Checkbox","Thumbnail","Toast","Frame","Button","Tabs","CustomersMajorMonotone","Table","Icon","Popup","Header","toCurrency","formatDate","config","ProductList","AcceptedPaymentRequest","PendingPaymentRequest","DeclinedPaymentRequest","configure","listPaymentRequest","listProducts","createDraftOrder","completeOrder","onCreatePaymentSubscription","onUpdatePaymentSubscription","onDeletePaymentSubscription","paymentSubscription","AcceptPayment","openPicker","setOpenPicker","rowId","setRowId","searchValue","setSearchValue","activeToast","setActiveToast","selected","setSelected","createUpdatePaymentSubscription","setCreateUpdatePaymentSubscription","handleTabChange","selectedTabIndex","handleSearchInput","newValue","listener","graphql","subscribe","next","paymentResponse","onUpdatePayment","onUpdatePaymentResponse","unsubscribe","tabs","id","content","accessibilityLabel","panelID","toastMarkup","renderPaymentRequest"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport gql from 'graphql-tag'\r\nimport { print } from 'graphql'\r\nimport { API, graphqlOperation } from 'aws-amplify'\r\nimport {\r\n    Page,\r\n    Badge,\r\n    Avatar,\r\n    TextStyle,\r\n    Card,\r\n    TextContainer,\r\n    Modal,\r\n    Checkbox,\r\n    Thumbnail,\r\n    Toast,\r\n    Frame,\r\n    Button,\r\n    Tabs\r\n} from '@shopify/polaris'\r\nimport { CustomersMajorMonotone } from '@shopify/polaris-icons'\r\nimport { Table, Icon, Popup, Header } from 'semantic-ui-react'\r\nimport { toCurrency, formatDate } from '../utils/helper'\r\nimport config from '../aws-exports'\r\nimport ProductList from '../components/ProductsList'\r\nimport AcceptedPaymentRequest from '../components/AcceptedPaymentRequest'\r\nimport PendingPaymentRequest from '../components/PendingPaymentRequest'\r\nimport DeclinedPaymentRequest from '../components/DeclinedPaymentRequest'\r\n\r\nAPI.configure(config)\r\n\r\nconst listPaymentRequest = gql`\r\n    query listPaymentRequest {\r\n        listPaymentRequests {\r\n            items {\r\n                bonusAmount\r\n                createdAt\r\n                customerId\r\n                id\r\n                orderId\r\n                status\r\n                updatedAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst listProducts = gql`\r\n    query Products {\r\n        products(first: 100) {\r\n            edges {\r\n                node {\r\n                    id\r\n                    title\r\n                    tags\r\n                    description(truncateAt: 100)\r\n                    variants(first: 1) {\r\n                        edges {\r\n                            node {\r\n                                id\r\n                                price\r\n                            }\r\n                        }\r\n                    }\r\n                    images(first: 1) {\r\n                        edges {\r\n                            node {\r\n                                originalSrc\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst createDraftOrder = gql`\r\n    mutation CreateOrder($input: DraftOrderInput!) {\r\n        draftOrderCreate(input: $input) {\r\n            draftOrder {\r\n                id\r\n                customer {\r\n                    id\r\n                }\r\n                email\r\n                lineItems(first: 10) {\r\n                    edges {\r\n                        node {\r\n                            title\r\n                            quantity\r\n                            originalUnitPrice\r\n                            variant {\r\n                                id\r\n                                price\r\n                                title\r\n                                product {\r\n                                    tags\r\n                                    title\r\n                                    images(first: 5) {\r\n                                        edges {\r\n                                            node {\r\n                                                originalSrc\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst completeOrder = gql`\r\n    mutation CompleteOrder($id: ID!) {\r\n        draftOrderComplete(id: $id, paymentPending: true) {\r\n            draftOrder {\r\n                customer {\r\n                    id\r\n                }\r\n                email\r\n                name\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst onCreatePaymentSubscription = gql`\r\n    subscription onCreatePaymentSubscription {\r\n        onCreatePaymentRequest {\r\n            bonusAmount\r\n            createdAt\r\n            customerId\r\n            orderId\r\n            updatedAt\r\n        }\r\n    }\r\n`\r\n\r\nconst onUpdatePaymentSubscription = gql`\r\n    subscription onUpdatePaymentRequest {\r\n        onUpdatePaymentRequest {\r\n            id\r\n            status\r\n        }\r\n    }\r\n`\r\n\r\nconst onDeletePaymentSubscription = gql`\r\n    subscription onDeletePaymentRequest {\r\n        onDeletePaymentRequest {\r\n            id\r\n            status\r\n        }\r\n    }\r\n`\r\n\r\nconst paymentSubscription = gql`\r\n    subscription paymentRequest {\r\n        onCreatePaymentRequest {\r\n            bonusAmount\r\n            createdAt\r\n            customerId\r\n            id\r\n            orderId\r\n            status\r\n            updatedAt\r\n        }\r\n    }\r\n`\r\n\r\nconst AcceptPayment = () => {\r\n    // const [paymentRequestItems, setPaymentRequestItems] = useState(\r\n    //     paymentRequests.listPaymentRequests.items\r\n    // )\r\n    const [openPicker, setOpenPicker] = useState(false)\r\n    const [rowId, setRowId] = useState([])\r\n    const [searchValue, setSearchValue] = useState(null)\r\n    const [activeToast, setActiveToast] = useState(false)\r\n    const [selected, setSelected] = useState(0)\r\n    const [createUpdatePaymentSubscription, setCreateUpdatePaymentSubscription] = useState('')\r\n\r\n    const handleTabChange = useCallback((selectedTabIndex) => setSelected(selectedTabIndex), [])\r\n\r\n    const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\r\n\r\n    useEffect(() => {\r\n        const listener = API.graphql(graphqlOperation(paymentSubscription)).subscribe({\r\n            next: (paymentResponse) => {\r\n                setCreateUpdatePaymentSubscription(paymentResponse)\r\n            }\r\n        })\r\n\r\n        const onUpdatePayment = API.graphql(\r\n            graphqlOperation(onUpdatePaymentSubscription)\r\n        ).subscribe({\r\n            next: (onUpdatePaymentResponse) => {\r\n                setCreateUpdatePaymentSubscription(onUpdatePaymentResponse)\r\n            }\r\n        })\r\n\r\n        return () => {\r\n            listener.unsubscribe()\r\n            onUpdatePayment.unsubscribe()\r\n        }\r\n    }, [])\r\n\r\n    const tabs = [\r\n        {\r\n            id: 'pending-payments',\r\n            content: 'Pending Payment Requests',\r\n            accessibilityLabel: 'Pending Requests',\r\n            panelID: 'pending-payments-content'\r\n        },\r\n        {\r\n            id: 'accepted-payments',\r\n            content: 'Accepted Payment Requests',\r\n            accessibilityLabel: 'Accepted Request',\r\n            panelID: 'accepted-payments-content'\r\n        },\r\n        {\r\n            id: 'declined-payments',\r\n            content: 'Declined Payment Requests',\r\n            accessibilityLabel: 'Declined Requests',\r\n            panelID: 'declined-payments-content'\r\n        }\r\n    ]\r\n\r\n    const toastMarkup = activeToast ? (\r\n        <Toast\r\n            content=\"Order has been successfully created\"\r\n            onDismiss={() => setActiveToast(false)}\r\n        />\r\n    ) : null\r\n\r\n    const renderPaymentRequest = (selected) => {\r\n        switch (selected) {\r\n            case 0:\r\n                return (\r\n                    <PendingPaymentRequest\r\n                        createUpdatePaymentSubscription={createUpdatePaymentSubscription}\r\n                    />\r\n                )\r\n            case 1:\r\n                return <AcceptedPaymentRequest />\r\n            case 2:\r\n                return <DeclinedPaymentRequest />\r\n            default:\r\n                return\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Frame>\r\n            <Page title=\"Payment Request\">\r\n                <Card>\r\n                    <Tabs tabs={tabs} selected={selected} onSelect={handleTabChange}>\r\n                        <Card.Section title={tabs[selected].content}>\r\n                            {renderPaymentRequest(selected)}\r\n                        </Card.Section>\r\n                    </Tabs>\r\n                </Card>\r\n                {toastMarkup}\r\n            </Page>\r\n        </Frame>\r\n    )\r\n}\r\n\r\n// export async function getStaticProps() {\r\n//     let result\r\n//     try {\r\n//         result = await API.graphql(graphqlOperation(listPaymentRequest))\r\n//     } catch (error) {\r\n//         console.log(error)\r\n//     }\r\n\r\n//     if (result.errors) {\r\n//         console.warn('Failed to fetch payment requests.', result.errors)\r\n//         return { props: { paymentRequests: [] } }\r\n//     }\r\n//     if (result.data !== null) {\r\n//         return {\r\n//             props: { paymentRequests: result.data }\r\n//         }\r\n//     }\r\n// }\r\n\r\nexport default AcceptPayment\r\n"]},"metadata":{},"sourceType":"module"}