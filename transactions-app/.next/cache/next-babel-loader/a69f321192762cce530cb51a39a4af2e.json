{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation updatePaymentRequest($input: UpdatePaymentRequestInput!) {\\n        updatePaymentRequest(input: $input) {\\n            bonusAmount\\n            customerId\\n            id\\n            orderId\\n            status\\n            products {\\n                originalUnitPrice\\n                quantity\\n                variantId\\n            }\\n            createdAt\\n            updatedAt\\n        }\\n    }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation CompleteOrder($id: ID!) {\\n        draftOrderComplete(id: $id, paymentPending: true) {\\n            draftOrder {\\n                customer {\\n                    id\\n                }\\n                email\\n                name\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation CreateOrder($input: DraftOrderInput!) {\\n        draftOrderCreate(input: $input) {\\n            draftOrder {\\n                id\\n                customer {\\n                    id\\n                }\\n                email\\n                lineItems(first: 10) {\\n                    edges {\\n                        node {\\n                            title\\n                            quantity\\n                            originalUnitPrice\\n                            variant {\\n                                id\\n                                price\\n                                title\\n                                product {\\n                                    tags\\n                                    title\\n                                    images(first: 5) {\\n                                        edges {\\n                                            node {\\n                                                originalSrc\\n                                            }\\n                                        }\\n                                    }\\n                                }\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nvar createDraftOrder = gql(_templateObject());\nexport var completeOrder = gql(_templateObject2());\nexport var updatePaymentRequest = gql(_templateObject3());","map":{"version":3,"sources":["/var/www/transactions-avanta/graphql/mutation.js"],"names":["gql","createDraftOrder","completeOrder","updatePaymentRequest"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AAEA,IAAMC,gBAAgB,GAAGD,GAAH,mBAAtB;AAuCA,OAAO,IAAME,aAAa,GAAGF,GAAH,oBAAnB;AAcP,OAAO,IAAMG,oBAAoB,GAAGH,GAAH,oBAA1B","sourcesContent":["import gql from 'graphql-tag'\n\nconst createDraftOrder = gql`\n    mutation CreateOrder($input: DraftOrderInput!) {\n        draftOrderCreate(input: $input) {\n            draftOrder {\n                id\n                customer {\n                    id\n                }\n                email\n                lineItems(first: 10) {\n                    edges {\n                        node {\n                            title\n                            quantity\n                            originalUnitPrice\n                            variant {\n                                id\n                                price\n                                title\n                                product {\n                                    tags\n                                    title\n                                    images(first: 5) {\n                                        edges {\n                                            node {\n                                                originalSrc\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n`\n\nexport const completeOrder = gql`\n    mutation CompleteOrder($id: ID!) {\n        draftOrderComplete(id: $id, paymentPending: true) {\n            draftOrder {\n                customer {\n                    id\n                }\n                email\n                name\n            }\n        }\n    }\n`\n\nexport const updatePaymentRequest = gql`\n    mutation updatePaymentRequest($input: UpdatePaymentRequestInput!) {\n        updatePaymentRequest(input: $input) {\n            bonusAmount\n            customerId\n            id\n            orderId\n            status\n            products {\n                originalUnitPrice\n                quantity\n                variantId\n            }\n            createdAt\n            updatedAt\n        }\n    }\n`\n"]},"metadata":{},"sourceType":"module"}