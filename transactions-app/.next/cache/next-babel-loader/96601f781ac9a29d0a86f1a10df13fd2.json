{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { API, graphqlOperation } from 'aws-amplify';\nimport gql from 'graphql-tag';\nimport { ResourcePicker } from '@shopify/app-bridge/actions';\nimport { Page, Layout, Badge } from '@shopify/polaris';\nimport { CustomersMajorMonotone } from '@shopify/polaris-icons';\nimport { Table, TableCell, Icon, Popup } from 'semantic-ui-react';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nAPI.configure(config);\nconst listPaymentRequest = gql`\n    query listPaymentRequest {\n        listPaymentRequests {\n            items {\n                bonusAmount\n                createdAt\n                customerId\n                id\n                orderId\n                status\n                updatedAt\n            }\n        }\n    }\n`;\n\nclass AcceptPayment extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      paymentRequestItems: this.props.paymentRequests.listPaymentRequests.items,\n      openPicker: false\n    });\n\n    _defineProperty(this, \"handleSelection\", resources => {\n      this.setState({\n        openPicker: false\n      });\n      console.log('Chosen products', resources);\n    });\n  }\n\n  render() {\n    const {\n      paymentRequestItems\n    } = this.state;\n    console.log('Payment request data from class component', this.state.paymentRequestItems);\n    return __jsx(Page, {\n      title: \"Payment Request\"\n    }, __jsx(ResourcePicker, {\n      resourceType: \"Product\",\n      showVariants: false,\n      open: this.state.openPicker,\n      onSelection: resources => this.handleSelection(resources),\n      onCancel: () => this.setState({\n        openPicker: false\n      })\n    }), __jsx(Table, {\n      selectable: true,\n      celled: true\n    }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Customer Id\"), __jsx(Table.HeaderCell, null, \"Order Id\"), __jsx(Table.HeaderCell, null, \"Bonus Amount\"), __jsx(Table.HeaderCell, null, \"Created At\"), __jsx(Table.HeaderCell, null, \"Updated At\"), __jsx(Table.HeaderCell, null, \"Status\"), __jsx(Table.HeaderCell, null, \"Action\"))), __jsx(Table.Body, null, paymentRequestItems && paymentRequestItems.map(item => __jsx(Table.Row, {\n      key: item.id\n    }, __jsx(Table.Cell, null, __jsx(Badge, {\n      size: \"small\"\n    }, item.customerId)), __jsx(Table.Cell, null, __jsx(Badge, {\n      size: \"small\"\n    }, item.orderId)), __jsx(Table.Cell, null, toCurrency(item.bonusAmount)), __jsx(Table.Cell, null, formatDate(item.createdAt)), __jsx(Table.Cell, null, formatDate(item.updatedAt)), __jsx(Table.Cell, null, __jsx(Badge, {\n      size: \"small\",\n      status: item.status === 'PENDING' ? 'attention' : item.status === 'APPROVED' ? 'success' : 'critical'\n    }, item.status)), __jsx(Table.Cell, {\n      className: \"actions-cell\"\n    }, __jsx(Popup, {\n      content: \"Approve payment\",\n      trigger: __jsx(Icon, {\n        className: \"accept\",\n        name: \"check\",\n        onClick: () => this.setState({\n          openPicker: true\n        })\n      })\n    }), __jsx(Popup, {\n      content: \"Decline payment\",\n      trigger: __jsx(Icon, {\n        className: \"decline\" // color={hoveredItemId === item.id ? 'red' : ''}\n        // className={\n        //     hoveredItemId === item.id ? 'decline-hovered' : ''\n        // }\n        ,\n        name: \"remove\" // onMouseEnter={() => setHoveredItemId(item.id)}\n        // onMouseLeave={() => setHoveredItemId(null)}\n\n      })\n    })))))));\n  }\n\n}\n\nexport async function getStaticProps() {\n  let result;\n\n  try {\n    result = await API.graphql(graphqlOperation(listPaymentRequest));\n  } catch (error) {\n    console.log(error);\n  }\n\n  if (result.errors) {\n    console.warn('Failed to fetch transactions.', result.errors);\n    return {\n      props: {\n        paymentRequests: []\n      }\n    };\n  }\n\n  if (result.data !== null) {\n    return {\n      props: {\n        paymentRequests: result.data\n      }\n    };\n  }\n}\nexport default AcceptPayment;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/pages/accept-payment.js"],"names":["API","graphqlOperation","gql","ResourcePicker","Page","Layout","Badge","CustomersMajorMonotone","Table","TableCell","Icon","Popup","toCurrency","formatDate","config","configure","listPaymentRequest","AcceptPayment","React","Component","paymentRequestItems","props","paymentRequests","listPaymentRequests","items","openPicker","resources","setState","console","log","render","state","handleSelection","map","item","id","customerId","orderId","bonusAmount","createdAt","updatedAt","status","getStaticProps","result","graphql","error","errors","warn","data"],"mappings":"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","sourcesContent":["import { API, graphqlOperation } from 'aws-amplify'\r\nimport gql from 'graphql-tag'\r\nimport { ResourcePicker } from '@shopify/app-bridge/actions'\r\nimport { Page, Layout, Badge } from '@shopify/polaris'\r\nimport { CustomersMajorMonotone } from '@shopify/polaris-icons'\r\nimport { Table, TableCell, Icon, Popup } from 'semantic-ui-react'\r\nimport { toCurrency, formatDate } from '../utils/helper'\r\nimport config from '../aws-exports'\r\n\r\nAPI.configure(config)\r\n\r\nconst listPaymentRequest = gql`\r\n    query listPaymentRequest {\r\n        listPaymentRequests {\r\n            items {\r\n                bonusAmount\r\n                createdAt\r\n                customerId\r\n                id\r\n                orderId\r\n                status\r\n                updatedAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nclass AcceptPayment extends React.Component {\r\n    state = {\r\n        paymentRequestItems: this.props.paymentRequests.listPaymentRequests.items,\r\n        openPicker: false\r\n    }\r\n\r\n    handleSelection = (resources) => {\r\n        this.setState({ openPicker: false })\r\n        console.log('Chosen products', resources)\r\n    }\r\n\r\n    render() {\r\n        const { paymentRequestItems } = this.state\r\n        console.log('Payment request data from class component', this.state.paymentRequestItems)\r\n        return (\r\n            <Page title=\"Payment Request\">\r\n                <ResourcePicker\r\n                    resourceType=\"Product\"\r\n                    showVariants={false}\r\n                    open={this.state.openPicker}\r\n                    onSelection={(resources) => this.handleSelection(resources)}\r\n                    onCancel={() => this.setState({ openPicker: false })}\r\n                />\r\n                <Table selectable celled>\r\n                    <Table.Header>\r\n                        <Table.Row>\r\n                            <Table.HeaderCell>Customer Id</Table.HeaderCell>\r\n                            <Table.HeaderCell>Order Id</Table.HeaderCell>\r\n                            <Table.HeaderCell>Bonus Amount</Table.HeaderCell>\r\n                            <Table.HeaderCell>Created At</Table.HeaderCell>\r\n                            <Table.HeaderCell>Updated At</Table.HeaderCell>\r\n                            <Table.HeaderCell>Status</Table.HeaderCell>\r\n                            <Table.HeaderCell>Action</Table.HeaderCell>\r\n                        </Table.Row>\r\n                    </Table.Header>\r\n                    <Table.Body>\r\n                        {paymentRequestItems &&\r\n                            paymentRequestItems.map((item) => (\r\n                                <Table.Row key={item.id}>\r\n                                    <Table.Cell>\r\n                                        <Badge size=\"small\">{item.customerId}</Badge>\r\n                                    </Table.Cell>\r\n                                    <Table.Cell>\r\n                                        <Badge size=\"small\">{item.orderId}</Badge>\r\n                                    </Table.Cell>\r\n                                    <Table.Cell>{toCurrency(item.bonusAmount)}</Table.Cell>\r\n                                    <Table.Cell>{formatDate(item.createdAt)}</Table.Cell>\r\n                                    <Table.Cell>{formatDate(item.updatedAt)}</Table.Cell>\r\n                                    <Table.Cell>\r\n                                        <Badge\r\n                                            size=\"small\"\r\n                                            status={\r\n                                                item.status === 'PENDING'\r\n                                                    ? 'attention'\r\n                                                    : item.status === 'APPROVED'\r\n                                                    ? 'success'\r\n                                                    : 'critical'\r\n                                            }>\r\n                                            {item.status}\r\n                                        </Badge>\r\n                                    </Table.Cell>\r\n                                    <Table.Cell className=\"actions-cell\">\r\n                                        <Popup\r\n                                            content=\"Approve payment\"\r\n                                            trigger={\r\n                                                <Icon\r\n                                                    className=\"accept\"\r\n                                                    name=\"check\"\r\n                                                    onClick={() =>\r\n                                                        this.setState({ openPicker: true })\r\n                                                    }\r\n                                                />\r\n                                            }\r\n                                        />\r\n                                        <Popup\r\n                                            content=\"Decline payment\"\r\n                                            trigger={\r\n                                                <Icon\r\n                                                    className=\"decline\"\r\n                                                    // color={hoveredItemId === item.id ? 'red' : ''}\r\n                                                    // className={\r\n                                                    //     hoveredItemId === item.id ? 'decline-hovered' : ''\r\n                                                    // }\r\n                                                    name=\"remove\"\r\n                                                    // onMouseEnter={() => setHoveredItemId(item.id)}\r\n                                                    // onMouseLeave={() => setHoveredItemId(null)}\r\n                                                />\r\n                                            }\r\n                                        />\r\n                                    </Table.Cell>\r\n                                </Table.Row>\r\n                            ))}\r\n                    </Table.Body>\r\n                </Table>\r\n            </Page>\r\n        )\r\n    }\r\n}\r\n\r\nexport async function getStaticProps() {\r\n    let result\r\n    try {\r\n        result = await API.graphql(graphqlOperation(listPaymentRequest))\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n\r\n    if (result.errors) {\r\n        console.warn('Failed to fetch transactions.', result.errors)\r\n        return { props: { paymentRequests: [] } }\r\n    }\r\n    if (result.data !== null) {\r\n        return { props: { paymentRequests: result.data } }\r\n    }\r\n}\r\n\r\nexport default AcceptPayment\r\n"]},"metadata":{},"sourceType":"module"}