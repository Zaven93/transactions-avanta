{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation updatePaymentRequest($input: UpdatePaymentRequestInput!) {\\n        updatePaymentRequest(input: $input) {\\n            bonusAmount\\n            customerId\\n            id\\n            orderId\\n            status\\n            products {\\n                originalUnitPrice\\n                quantity\\n                variantId\\n            }\\n            createdAt\\n            updatedAt\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useCallback } from 'react';\nimport gql from 'graphql-tag';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { Table, Icon, Popup, Header } from 'semantic-ui-react';\nimport { Badge } from '@shopify/polaris';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport ProductList from './ProductsList';\nimport config from '../aws-exports';\nAPI.configure(config);\nvar updatePaymentRequest = gql(_templateObject());\n\nvar AcceptedPaymentRequest = function AcceptedPaymentRequest(_ref) {\n  _s();\n\n  var paymentRequestItems = _ref.paymentRequestItems;\n\n  var _useState = useState(''),\n      paymentRequestId = _useState[0],\n      setPaymentRequestId = _useState[1];\n\n  var _useState2 = useState(false),\n      active = _useState2[0],\n      setActive = _useState2[1];\n\n  var handleChange = useCallback(function () {\n    return setActive(!active);\n  }, [active]);\n  console.log('Payment request id for decline', paymentRequestId); // const declinePayment = async () => {\n  //     try {\n  //         const paymentResponse = await API.graphql(\n  //             graphqlOperation(updatePaymentRequest, {\n  //                 input: {\n  //                     id: paymentRequestId,\n  //                     status: 'APPROVED'\n  //                 }\n  //             })\n  //         )\n  //         console.log('Declined Payment data from lambda', paymentResponse.data)\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // }\n\n  return __jsx(React.Fragment, null, __jsx(Table, {\n    selectable: true,\n    celled: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Customer Id\"), __jsx(Table.HeaderCell, null, \"Bonus Amount\"), __jsx(Table.HeaderCell, null, \"Created At\"), __jsx(Table.HeaderCell, null, \"Updated At\"), __jsx(Table.HeaderCell, null, \"Status\"), __jsx(Table.HeaderCell, null, \"Action\"))), __jsx(Table.Body, null, paymentRequestItems && paymentRequestItems.filter(function (item) {\n    return item.status === 'PENDING';\n  }).map(function (item) {\n    return __jsx(Table.Row, {\n      key: item.id\n    }, __jsx(Table.Cell, null, __jsx(Badge, {\n      size: \"small\"\n    }, item.customerId)), __jsx(Table.Cell, null, toCurrency(item.bonusAmount)), __jsx(Table.Cell, null, formatDate(item.createdAt)), __jsx(Table.Cell, null, formatDate(item.updatedAt)), __jsx(Table.Cell, null, __jsx(Badge, {\n      size: \"small\",\n      progress: \"partiallyComplete\",\n      status: \"attention\"\n    }, item.status)), __jsx(Table.Cell, {\n      className: \"actions-cell\"\n    }, __jsx(Popup, {\n      content: \"Approve payment\",\n      trigger: __jsx(Icon, {\n        className: \"accept\",\n        name: \"check\",\n        onClick: function onClick() {\n          setPaymentRequestId(item.id);\n\n          if (paymentRequestId) {\n            handleChange();\n          } else {\n            console.log('Nothing will happen');\n          }\n        }\n      })\n    }), __jsx(Popup, {\n      content: \"Decline payment\",\n      trigger: __jsx(Icon, {\n        className: \"decline\",\n        name: \"remove\",\n        onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var paymentResponse;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.prev = 0;\n                  _context.next = 3;\n                  return setPaymentRequestId(item.id);\n\n                case 3:\n                  _context.next = 5;\n                  return API.graphql(graphqlOperation(updatePaymentRequest, {\n                    input: {\n                      id: paymentRequestId,\n                      status: 'DECLINED'\n                    }\n                  }));\n\n                case 5:\n                  paymentResponse = _context.sent;\n                  console.log('Declined Payment data from lambda', paymentResponse.data);\n                  _context.next = 12;\n                  break;\n\n                case 9:\n                  _context.prev = 9;\n                  _context.t0 = _context[\"catch\"](0);\n                  console.log(_context.t0);\n\n                case 12:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, null, [[0, 9]]);\n        }))\n      })\n    })));\n  }))), __jsx(ProductList, {\n    paymentRequestId: paymentRequestId,\n    active: active,\n    handleChange: handleChange\n  }));\n};\n\n_s(AcceptedPaymentRequest, \"fg2sIBqXixi8cSbcryn6cjuvxwI=\");\n\n_c = AcceptedPaymentRequest;\nexport default AcceptedPaymentRequest;\n\nvar _c;\n\n$RefreshReg$(_c, \"AcceptedPaymentRequest\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/components/PendingPaymentRequest.js"],"names":["React","useState","useCallback","gql","API","graphqlOperation","Table","Icon","Popup","Header","Badge","toCurrency","formatDate","ProductList","config","configure","updatePaymentRequest","AcceptedPaymentRequest","paymentRequestItems","paymentRequestId","setPaymentRequestId","active","setActive","handleChange","console","log","filter","item","status","map","id","customerId","bonusAmount","createdAt","updatedAt","graphql","input","paymentResponse","data"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react'\r\nimport gql from 'graphql-tag'\r\nimport { API, graphqlOperation } from 'aws-amplify'\r\nimport { Table, Icon, Popup, Header } from 'semantic-ui-react'\r\nimport { Badge } from '@shopify/polaris'\r\nimport { toCurrency, formatDate } from '../utils/helper'\r\nimport ProductList from './ProductsList'\r\nimport config from '../aws-exports'\r\n\r\nAPI.configure(config)\r\n\r\nconst updatePaymentRequest = gql`\r\n    mutation updatePaymentRequest($input: UpdatePaymentRequestInput!) {\r\n        updatePaymentRequest(input: $input) {\r\n            bonusAmount\r\n            customerId\r\n            id\r\n            orderId\r\n            status\r\n            products {\r\n                originalUnitPrice\r\n                quantity\r\n                variantId\r\n            }\r\n            createdAt\r\n            updatedAt\r\n        }\r\n    }\r\n`\r\n\r\nconst AcceptedPaymentRequest = ({ paymentRequestItems }) => {\r\n    const [paymentRequestId, setPaymentRequestId] = useState('')\r\n    const [active, setActive] = useState(false)\r\n\r\n    const handleChange = useCallback(() => setActive(!active), [active])\r\n\r\n    console.log('Payment request id for decline', paymentRequestId)\r\n\r\n    // const declinePayment = async () => {\r\n    //     try {\r\n    //         const paymentResponse = await API.graphql(\r\n    //             graphqlOperation(updatePaymentRequest, {\r\n    //                 input: {\r\n    //                     id: paymentRequestId,\r\n    //                     status: 'APPROVED'\r\n    //                 }\r\n    //             })\r\n    //         )\r\n\r\n    //         console.log('Declined Payment data from lambda', paymentResponse.data)\r\n    //     } catch (error) {\r\n    //         console.log(error)\r\n    //     }\r\n    // }\r\n    return (\r\n        <>\r\n            <Table selectable celled>\r\n                <Table.Header>\r\n                    <Table.Row>\r\n                        <Table.HeaderCell>Customer Id</Table.HeaderCell>\r\n                        <Table.HeaderCell>Bonus Amount</Table.HeaderCell>\r\n                        <Table.HeaderCell>Created At</Table.HeaderCell>\r\n                        <Table.HeaderCell>Updated At</Table.HeaderCell>\r\n                        <Table.HeaderCell>Status</Table.HeaderCell>\r\n                        <Table.HeaderCell>Action</Table.HeaderCell>\r\n                    </Table.Row>\r\n                </Table.Header>\r\n                <Table.Body>\r\n                    {paymentRequestItems &&\r\n                        paymentRequestItems\r\n                            .filter((item) => item.status === 'PENDING')\r\n                            .map((item) => (\r\n                                <Table.Row key={item.id}>\r\n                                    <Table.Cell>\r\n                                        <Badge size=\"small\">{item.customerId}</Badge>\r\n                                    </Table.Cell>\r\n                                    <Table.Cell>{toCurrency(item.bonusAmount)}</Table.Cell>\r\n                                    <Table.Cell>{formatDate(item.createdAt)}</Table.Cell>\r\n                                    <Table.Cell>{formatDate(item.updatedAt)}</Table.Cell>\r\n                                    <Table.Cell>\r\n                                        <Badge\r\n                                            size=\"small\"\r\n                                            progress=\"partiallyComplete\"\r\n                                            status=\"attention\">\r\n                                            {item.status}\r\n                                        </Badge>\r\n                                    </Table.Cell>\r\n                                    <Table.Cell className=\"actions-cell\">\r\n                                        <Popup\r\n                                            content=\"Approve payment\"\r\n                                            trigger={\r\n                                                <Icon\r\n                                                    className=\"accept\"\r\n                                                    name=\"check\"\r\n                                                    onClick={() => {\r\n                                                        setPaymentRequestId(item.id)\r\n                                                        if (paymentRequestId) {\r\n                                                            handleChange()\r\n                                                        } else {\r\n                                                            console.log('Nothing will happen')\r\n                                                        }\r\n                                                    }}\r\n                                                />\r\n                                            }\r\n                                        />\r\n                                        <Popup\r\n                                            content=\"Decline payment\"\r\n                                            trigger={\r\n                                                <Icon\r\n                                                    className=\"decline\"\r\n                                                    name=\"remove\"\r\n                                                    onClick={async () => {\r\n                                                        try {\r\n                                                            await setPaymentRequestId(item.id)\r\n                                                            const paymentResponse = await API.graphql(\r\n                                                                graphqlOperation(\r\n                                                                    updatePaymentRequest,\r\n                                                                    {\r\n                                                                        input: {\r\n                                                                            id: paymentRequestId,\r\n                                                                            status: 'DECLINED'\r\n                                                                        }\r\n                                                                    }\r\n                                                                )\r\n                                                            )\r\n\r\n                                                            console.log(\r\n                                                                'Declined Payment data from lambda',\r\n                                                                paymentResponse.data\r\n                                                            )\r\n                                                        } catch (error) {\r\n                                                            console.log(error)\r\n                                                        }\r\n                                                    }}\r\n                                                />\r\n                                            }\r\n                                        />\r\n                                    </Table.Cell>\r\n                                </Table.Row>\r\n                            ))}\r\n                </Table.Body>\r\n            </Table>\r\n            <ProductList\r\n                paymentRequestId={paymentRequestId}\r\n                active={active}\r\n                handleChange={handleChange}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AcceptedPaymentRequest\r\n"]},"metadata":{},"sourceType":"module"}