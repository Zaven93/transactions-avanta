{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query listPaymentRequest {\\n        listPaymentRequests(filter: { status: { eq: APPROVED } }) {\\n            items {\\n                bonusAmount\\n                createdAt\\n                customerId\\n                id\\n                orderId\\n                status\\n                updatedAt\\n            }\\n            nextToken\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport gql from 'graphql-tag';\nimport { Table, Icon, Popup, Header } from 'semantic-ui-react';\nimport { Badge, Pagination } from '@shopify/polaris';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nAPI.configure(config);\nvar listPaymentRequest = gql(_templateObject());\n\nvar AcceptedPaymentRequest = function AcceptedPaymentRequest() {\n  _s();\n\n  var _useState = useState(''),\n      nextPaginateToken = _useState[0],\n      setNextPaginateToken = _useState[1];\n\n  var _useState2 = useState([]),\n      previousPaginateTokens = _useState2[0],\n      setPreviousPaginateTokens = _useState2[1];\n\n  var _useState3 = useState([]),\n      paymentRequestItems = _useState3[0],\n      setPaymentRequestItems = _useState3[1];\n\n  var _useState4 = useState(0),\n      pageOffset = _useState4[0],\n      setPageOffset = _useState4[1];\n\n  var _useState5 = useState(7),\n      itemsPerPage = _useState5[0],\n      setItemsPerPage = _useState5[1];\n\n  var fetchAcceptedPayments = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return API.graphql(graphqlOperation(listPaymentRequest, {\n              limit: 3\n            }));\n\n          case 3:\n            res = _context.sent;\n            setNextPaginateToken(res.data.listPaymentRequests.nextToken);\n            setPaymentRequestItems(res.data.listPaymentRequests.items);\n            console.log('Accepted payments', res.data);\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 9]]);\n  })), []);\n  useEffect(function () {\n    fetchAcceptedPayments();\n  }, [fetchAcceptedPayments]);\n\n  var paginateNext = function paginateNext() {\n    setPageOffset(pageOffset + itemsPerPage);\n  }; // const paginateNext = async () => {\n  //     setPreviousPaginateTokens([...previousPaginateTokens, nextPaginateToken])\n  //     try {\n  //         const res = await API.graphql(\n  //             graphqlOperation(listPaymentRequest, { nextToken: nextPaginateToken })\n  //         )\n  //         console.log('Data from pagination', res)\n  //         setNextPaginateToken(res.data.listPaymentRequests.nextToken)\n  //         setPaymentRequestItems(res.data.listPaymentRequests.items)\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // }\n  // const paginatePrevious = async () => {\n  //     const previousToken =\n  //         previousPaginateTokens[\n  //             previousPaginateTokens.length === 1 ? 0 : previousPaginateTokens.length - 2\n  //         ]\n  //     setPreviousPaginateTokens([\n  //         ...previousPaginateTokens.slice(0, previousPaginateTokens.length - 1)\n  //     ])\n  //     try {\n  //         if (previousPaginateTokens.length === 1) {\n  //             const res = await API.graphql(graphqlOperation(listPaymentRequest))\n  //             setNextPaginateToken(res.data.listPaymentRequests.nextToken)\n  //             setPaymentRequestItems(res.data.listPaymentRequests.items)\n  //         } else {\n  //             const data = await API.graphql(\n  //                 graphqlOperation(listTransactions, { nextToken: previousToken })\n  //             )\n  //             setNextPaginateToken(res.data.listPaymentRequests.nextToken)\n  //             setPaymentRequestItems(res.data.listPaymentRequests.items)\n  //         }\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // }\n\n\n  console.log('Next paginate token', nextPaginateToken);\n  console.log('Accepted state data', paymentRequestItems);\n  return __jsx(Table, {\n    celled: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Customer Id\"), __jsx(Table.HeaderCell, null, \"Order Id\"), __jsx(Table.HeaderCell, null, \"Bonus Amount\"), __jsx(Table.HeaderCell, null, \"Created At\"), __jsx(Table.HeaderCell, null, \"Updated At\"), __jsx(Table.HeaderCell, null, \"Status\"))), __jsx(Table.Body, null, paymentRequestItems && paymentRequestItems.splice(pageOffset, itemsPerPage).map(function (item) {\n    return __jsx(Table.Row, {\n      key: item.id\n    }, __jsx(Table.Cell, null, __jsx(Badge, {\n      size: \"small\"\n    }, item.customerId)), __jsx(Table.Cell, null, __jsx(Badge, {\n      size: \"small\"\n    }, item.orderId)), __jsx(Table.Cell, null, toCurrency(item.bonusAmount)), __jsx(Table.Cell, null, formatDate(item.createdAt)), __jsx(Table.Cell, null, formatDate(item.updatedAt)), __jsx(Table.Cell, null, __jsx(Badge, {\n      size: \"small\",\n      progress: \"complete\",\n      status: \"success\"\n    }, item.status)));\n  })), __jsx(Table.Footer, null, __jsx(Pagination, {\n    hasPrevious: previousPaginateTokens.length > 0,\n    onPrevious: paginatePrevious,\n    hasNext: nextPaginateToken,\n    onNext: paginateNext\n  })));\n};\n\n_s(AcceptedPaymentRequest, \"SyDj9uJ6LWcmHN8WbNxqgQVI090=\");\n\n_c = AcceptedPaymentRequest;\nexport default AcceptedPaymentRequest;\n\nvar _c;\n\n$RefreshReg$(_c, \"AcceptedPaymentRequest\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/components/AcceptedPaymentRequest.js"],"names":["React","useState","useEffect","useCallback","API","graphqlOperation","gql","Table","Icon","Popup","Header","Badge","Pagination","toCurrency","formatDate","config","configure","listPaymentRequest","AcceptedPaymentRequest","nextPaginateToken","setNextPaginateToken","previousPaginateTokens","setPreviousPaginateTokens","paymentRequestItems","setPaymentRequestItems","pageOffset","setPageOffset","itemsPerPage","setItemsPerPage","fetchAcceptedPayments","graphql","limit","res","data","listPaymentRequests","nextToken","items","console","log","paginateNext","splice","map","item","id","customerId","orderId","bonusAmount","createdAt","updatedAt","status","length","paginatePrevious"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\r\nimport { API, graphqlOperation } from 'aws-amplify'\r\nimport gql from 'graphql-tag'\r\nimport { Table, Icon, Popup, Header } from 'semantic-ui-react'\r\nimport { Badge, Pagination } from '@shopify/polaris'\r\nimport { toCurrency, formatDate } from '../utils/helper'\r\nimport config from '../aws-exports'\r\n\r\nAPI.configure(config)\r\n\r\nconst listPaymentRequest = gql`\r\n    query listPaymentRequest {\r\n        listPaymentRequests(filter: { status: { eq: APPROVED } }) {\r\n            items {\r\n                bonusAmount\r\n                createdAt\r\n                customerId\r\n                id\r\n                orderId\r\n                status\r\n                updatedAt\r\n            }\r\n            nextToken\r\n        }\r\n    }\r\n`\r\n\r\nconst AcceptedPaymentRequest = () => {\r\n    const [nextPaginateToken, setNextPaginateToken] = useState('')\r\n    const [previousPaginateTokens, setPreviousPaginateTokens] = useState([])\r\n    const [paymentRequestItems, setPaymentRequestItems] = useState([])\r\n    const [pageOffset, setPageOffset] = useState(0)\r\n    const [itemsPerPage, setItemsPerPage] = useState(7)\r\n\r\n    const fetchAcceptedPayments = useCallback(async () => {\r\n        try {\r\n            const res = await API.graphql(graphqlOperation(listPaymentRequest, { limit: 3 }))\r\n            setNextPaginateToken(res.data.listPaymentRequests.nextToken)\r\n            setPaymentRequestItems(res.data.listPaymentRequests.items)\r\n            console.log('Accepted payments', res.data)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        fetchAcceptedPayments()\r\n    }, [fetchAcceptedPayments])\r\n\r\n    const paginateNext = () => {\r\n        setPageOffset(pageOffset + itemsPerPage)\r\n    }\r\n\r\n    // const paginateNext = async () => {\r\n    //     setPreviousPaginateTokens([...previousPaginateTokens, nextPaginateToken])\r\n    //     try {\r\n    //         const res = await API.graphql(\r\n    //             graphqlOperation(listPaymentRequest, { nextToken: nextPaginateToken })\r\n    //         )\r\n\r\n    //         console.log('Data from pagination', res)\r\n    //         setNextPaginateToken(res.data.listPaymentRequests.nextToken)\r\n    //         setPaymentRequestItems(res.data.listPaymentRequests.items)\r\n    //     } catch (error) {\r\n    //         console.log(error)\r\n    //     }\r\n    // }\r\n\r\n    // const paginatePrevious = async () => {\r\n    //     const previousToken =\r\n    //         previousPaginateTokens[\r\n    //             previousPaginateTokens.length === 1 ? 0 : previousPaginateTokens.length - 2\r\n    //         ]\r\n    //     setPreviousPaginateTokens([\r\n    //         ...previousPaginateTokens.slice(0, previousPaginateTokens.length - 1)\r\n    //     ])\r\n    //     try {\r\n    //         if (previousPaginateTokens.length === 1) {\r\n    //             const res = await API.graphql(graphqlOperation(listPaymentRequest))\r\n    //             setNextPaginateToken(res.data.listPaymentRequests.nextToken)\r\n    //             setPaymentRequestItems(res.data.listPaymentRequests.items)\r\n    //         } else {\r\n    //             const data = await API.graphql(\r\n    //                 graphqlOperation(listTransactions, { nextToken: previousToken })\r\n    //             )\r\n    //             setNextPaginateToken(res.data.listPaymentRequests.nextToken)\r\n    //             setPaymentRequestItems(res.data.listPaymentRequests.items)\r\n    //         }\r\n    //     } catch (error) {\r\n    //         console.log(error)\r\n    //     }\r\n    // }\r\n\r\n    console.log('Next paginate token', nextPaginateToken)\r\n    console.log('Accepted state data', paymentRequestItems)\r\n\r\n    return (\r\n        <Table celled>\r\n            <Table.Header>\r\n                <Table.Row>\r\n                    <Table.HeaderCell>Customer Id</Table.HeaderCell>\r\n                    <Table.HeaderCell>Order Id</Table.HeaderCell>\r\n                    <Table.HeaderCell>Bonus Amount</Table.HeaderCell>\r\n                    <Table.HeaderCell>Created At</Table.HeaderCell>\r\n                    <Table.HeaderCell>Updated At</Table.HeaderCell>\r\n                    <Table.HeaderCell>Status</Table.HeaderCell>\r\n                </Table.Row>\r\n            </Table.Header>\r\n            <Table.Body>\r\n                {paymentRequestItems &&\r\n                    paymentRequestItems.splice(pageOffset, itemsPerPage).map((item) => (\r\n                        <Table.Row key={item.id}>\r\n                            <Table.Cell>\r\n                                <Badge size=\"small\">{item.customerId}</Badge>\r\n                            </Table.Cell>\r\n                            <Table.Cell>\r\n                                <Badge size=\"small\">{item.orderId}</Badge>\r\n                            </Table.Cell>\r\n                            <Table.Cell>{toCurrency(item.bonusAmount)}</Table.Cell>\r\n                            <Table.Cell>{formatDate(item.createdAt)}</Table.Cell>\r\n                            <Table.Cell>{formatDate(item.updatedAt)}</Table.Cell>\r\n                            <Table.Cell>\r\n                                <Badge size=\"small\" progress=\"complete\" status=\"success\">\r\n                                    {item.status}\r\n                                </Badge>\r\n                            </Table.Cell>\r\n                        </Table.Row>\r\n                    ))}\r\n            </Table.Body>\r\n            <Table.Footer>\r\n                <Pagination\r\n                    hasPrevious={previousPaginateTokens.length > 0}\r\n                    onPrevious={paginatePrevious}\r\n                    hasNext={nextPaginateToken}\r\n                    onNext={paginateNext}\r\n                />\r\n            </Table.Footer>\r\n        </Table>\r\n    )\r\n}\r\n\r\nexport default AcceptedPaymentRequest\r\n"]},"metadata":{},"sourceType":"module"}