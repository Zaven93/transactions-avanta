{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useCallback } from 'react';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { Modal, Thumbnail, Checkbox, TextStyle } from '@shopify/polaris';\nimport { Table, Header } from 'semantic-ui-react';\nimport { toCurrency } from '../utils/helper';\nimport config from '../aws-exports';\nimport { listProducts } from \"../graphql/queries\";\nimport { updatePaymentRequest } from \"../graphql/mutation\";\nAPI.configure(config);\n\nvar ProductsList = function ProductsList(_ref) {\n  _s();\n\n  var active = _ref.active,\n      handleChange = _ref.handleChange,\n      paymentRequestId = _ref.paymentRequestId;\n\n  var _useQuery = useQuery(listProducts),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  var _useState = useState([]),\n      rowId = _useState[0],\n      setRowId = _useState[1];\n\n  var _useState2 = useState({\n    products: []\n  }),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  if (loading) {\n    return __jsx(\"div\", null, \"Loading products...\");\n  }\n\n  if (error) {\n    return __jsx(\"div\", null, \"Some error occured\");\n  }\n\n  var acceptPayment = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var paymentResponse;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return API.graphql(graphqlOperation(updatePaymentRequest, {\n                input: {\n                  id: paymentRequestId,\n                  status: 'APPROVED',\n                  products: state.products.map(function (product) {\n                    return {\n                      originalUnitPrice: product.node.variants.edges[0].node.price,\n                      quantity: 1,\n                      variantId: product.node.variants.edges[0].node.id\n                    };\n                  })\n                }\n              }));\n\n            case 3:\n              paymentResponse = _context.sent;\n              console.log('Payment data from lambda', paymentResponse.data);\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 7]]);\n    }));\n\n    return function acceptPayment() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(Modal, {\n    open: active,\n    onClose: handleChange,\n    title: \"Choose products\",\n    primaryAction: {\n      content: 'Proceed',\n      onAction: function onAction() {\n        acceptPayment();\n        handleChange();\n      }\n    }\n  }, __jsx(Modal.Section, null, __jsx(Table, {\n    celled: true,\n    striped: true,\n    selectable: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Products\"), __jsx(Table.HeaderCell, null, \"Description\"), __jsx(Table.HeaderCell, {\n    textAlign: \"center\"\n  }, \"Price\"))), __jsx(Table.Body, null, data && data.products.edges.map(function (product) {\n    return __jsx(Table.Row, {\n      key: product.node.id,\n      onClick: function onClick() {\n        if (rowId.includes(product.node.id)) {\n          setRowId(rowId.filter(function (id) {\n            return id !== product.node.id;\n          }));\n          setState({\n            products: state.products.filter(function (filteredProduct) {\n              return filteredProduct.node.id !== product.node.id;\n            })\n          });\n        } else {\n          setRowId([].concat(_toConsumableArray(rowId), [product.node.id]));\n          setState(_objectSpread(_objectSpread({}, state), {}, {\n            products: [].concat(_toConsumableArray(state.products), [product])\n          }));\n        }\n      }\n    }, __jsx(Table.Cell, null, __jsx(Header, {\n      as: \"h4\",\n      image: true,\n      className: \"product-header\"\n    }, __jsx(Checkbox, {\n      checked: rowId.includes(product.node.id) && true\n    }), __jsx(Thumbnail, {\n      source: product.node.images.edges[0] && product.node.images.edges[0].node.originalSrc,\n      size: \"small\",\n      alt: \"\"\n    }), __jsx(Header.Content, null, product.node.title))), __jsx(Table.Cell, null, __jsx(TextStyle, {\n      variation: \"subdued\"\n    }, product.node.description)), __jsx(Table.Cell, {\n      textAlign: \"center\"\n    }, __jsx(TextStyle, {\n      variation: \"subdued\"\n    }, product.node.variants.edges[0] && toCurrency(product.node.variants.edges[0].node.price))));\n  })), __jsx(Table.Footer, {\n    fullWidth: true\n  }, __jsx(Table.Row, null)))));\n};\n\n_s(ProductsList, \"w3KqerfYe9tJJRZbEZdxcvAeOvo=\", false, function () {\n  return [useQuery];\n});\n\n_c = ProductsList;\nexport default ProductsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductsList\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/components/ProductsList.js"],"names":["React","useState","useCallback","API","graphqlOperation","gql","useQuery","Modal","Thumbnail","Checkbox","TextStyle","Table","Header","toCurrency","config","listProducts","updatePaymentRequest","configure","ProductsList","active","handleChange","paymentRequestId","loading","error","data","rowId","setRowId","products","state","setState","acceptPayment","graphql","input","id","status","map","product","originalUnitPrice","node","variants","edges","price","quantity","variantId","paymentResponse","console","log","content","onAction","includes","filter","filteredProduct","images","originalSrc","title","description"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react'\r\nimport { API, graphqlOperation } from 'aws-amplify'\r\nimport gql from 'graphql-tag'\r\nimport { useQuery } from '@apollo/client'\r\nimport { Modal, Thumbnail, Checkbox, TextStyle } from '@shopify/polaris'\r\nimport { Table, Header } from 'semantic-ui-react'\r\nimport { toCurrency } from '../utils/helper'\r\nimport config from '../aws-exports'\r\nimport {listProducts} from \"../graphql/queries\"\r\nimport {updatePaymentRequest} from \"../graphql/mutation\"\r\n\r\nAPI.configure(config)\r\n\r\nconst ProductsList = ({ active, handleChange, paymentRequestId }) => {\r\n    const { loading, error, data } = useQuery(listProducts)\r\n    const [rowId, setRowId] = useState([])\r\n    const [state, setState] = useState({\r\n        products: []\r\n    })\r\n  \r\n    if (loading) {\r\n        return <div>Loading products...</div>\r\n    }\r\n\r\n    if (error) {\r\n        return <div>Some error occured</div>\r\n    }\r\n\r\n    const acceptPayment = async () => {\r\n        try {\r\n            const paymentResponse = await API.graphql(\r\n                graphqlOperation(updatePaymentRequest, {\r\n                    input: {\r\n                        id: paymentRequestId,\r\n                        status: 'APPROVED',\r\n                        products: state.products.map((product) => ({\r\n                            originalUnitPrice: product.node.variants.edges[0].node.price,\r\n                            quantity: 1,\r\n                            variantId: product.node.variants.edges[0].node.id\r\n                        }))\r\n                    }\r\n                })\r\n            )\r\n\r\n            console.log('Payment data from lambda', paymentResponse.data)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            open={active}\r\n            onClose={handleChange}\r\n            title=\"Choose products\"\r\n            primaryAction={{\r\n                content: 'Proceed',\r\n                onAction: () => {\r\n                    acceptPayment()\r\n                    handleChange()\r\n                }\r\n            }}>\r\n            <Modal.Section>\r\n                <Table celled striped selectable>\r\n                    <Table.Header>\r\n                        <Table.Row>\r\n                            <Table.HeaderCell>Products</Table.HeaderCell>\r\n                            <Table.HeaderCell>Description</Table.HeaderCell>\r\n                            <Table.HeaderCell textAlign=\"center\">Price</Table.HeaderCell>\r\n                        </Table.Row>\r\n                    </Table.Header>\r\n                    <Table.Body>\r\n                        {data &&\r\n                            data.products.edges\r\n                                .map((product) => (\r\n                                    <Table.Row\r\n                                        key={product.node.id}\r\n                                        onClick={() => {\r\n                                            if (rowId.includes(product.node.id)) {\r\n                                                setRowId(\r\n                                                    rowId.filter((id) => id !== product.node.id)\r\n                                                )\r\n                                                setState({\r\n                                                    products: state.products.filter(\r\n                                                        (filteredProduct) =>\r\n                                                            filteredProduct.node.id !==\r\n                                                            product.node.id\r\n                                                    )\r\n                                                })\r\n                                            } else {\r\n                                                setRowId([...rowId, product.node.id])\r\n                                                setState({\r\n                                                    ...state,\r\n                                                    products: [...state.products, product]\r\n                                                })\r\n                                            }\r\n                                        }}>\r\n                                        <Table.Cell>\r\n                                            <Header as=\"h4\" image className=\"product-header\">\r\n                                                <Checkbox\r\n                                                    checked={\r\n                                                        rowId.includes(product.node.id) && true\r\n                                                    }\r\n                                                />\r\n                                                <Thumbnail\r\n                                                    source={\r\n                                                        product.node.images.edges[0] &&\r\n                                                        product.node.images.edges[0].node\r\n                                                            .originalSrc\r\n                                                    }\r\n                                                    size=\"small\"\r\n                                                    alt=\"\"\r\n                                                />\r\n                                                <Header.Content>\r\n                                                    {product.node.title}\r\n                                                </Header.Content>\r\n                                            </Header>\r\n                                        </Table.Cell>\r\n                                        <Table.Cell>\r\n                                            <TextStyle variation=\"subdued\">\r\n                                                {product.node.description}\r\n                                            </TextStyle>\r\n                                        </Table.Cell>\r\n                                        <Table.Cell textAlign=\"center\">\r\n                                            <TextStyle variation=\"subdued\">\r\n                                                {product.node.variants.edges[0] &&\r\n                                                    toCurrency(\r\n                                                        product.node.variants.edges[0].node.price\r\n                                                    )}\r\n                                            </TextStyle>\r\n                                        </Table.Cell>\r\n                                    </Table.Row>\r\n                                ))}\r\n                    </Table.Body>\r\n                    <Table.Footer fullWidth>\r\n                        <Table.Row></Table.Row>\r\n                    </Table.Footer>\r\n                </Table>\r\n            </Modal.Section>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ProductsList\r\n"]},"metadata":{},"sourceType":"module"}