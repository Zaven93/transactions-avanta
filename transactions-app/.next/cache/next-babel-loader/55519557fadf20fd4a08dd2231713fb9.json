{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport { Table } from \"semantic-ui-react\";\nimport { Badge, Button } from \"@shopify/polaris\";\nimport { useFetchPaymentRequest } from \"../core/hooks\";\nimport { toCurrency, formatDate } from \"../utils/helper\";\nimport config from \"../aws-exports\";\nimport { listPaymentRequest } from \"../graphql/queries\";\nAPI.configure(config);\n\nconst AcceptedPaymentRequest = ({\n  branchId\n}) => {\n  const {\n    0: nextPaginateToken,\n    1: setNextPaginateToken\n  } = useState(\"\");\n  const {\n    0: paymentRequestItems,\n    1: setPaymentRequestItems\n  } = useState([]);\n  const {\n    fetchPaymentRequest,\n    data\n  } = useFetchPaymentRequest();\n  const fetchAcceptedPayments = useCallback(async () => {\n    try {\n      fetchPaymentRequest({\n        branchId,\n        status: \"APPROVED\",\n        limit: 3\n      });\n      setNextPaginateToken(data.data.listPaymentRequests.nextToken);\n      setPaymentRequestItems(data.data.listPaymentRequests.items);\n    } catch (error) {\n      console.log(error);\n    }\n  }, [data]);\n  console.log(\"Next paginate token\", nextPaginateToken); // const fetchAcceptedPayments = useCallback(async () => {\n  //   try {\n  //     const res = await API.graphql(\n  //       graphqlOperation(listPaymentRequest, { limit: 3, branchId, status: \"APPROVED\" })\n  //     )\n  //     setNextPaginateToken(res.data.listPaymentRequests.nextToken)\n  //     setPaymentRequestItems(res.data.listPaymentRequests.items)\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  // }, [])\n\n  useEffect(() => {\n    fetchAcceptedPayments();\n  }, [fetchAcceptedPayments]); // const loadMore = useCallback(() => {\n  //   try {\n  //     fetchPaymentRequest({ branchId, status: \"APPROVED\", limit: 3, nextToken: nextPaginateToken })\n  //     setNextPaginateToken(data.data.listPaymentRequests.nextToken)\n  //     setPaymentRequestItems([...paymentRequestItems, ...res.data.listPaymentRequests.items])\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  // }, [data])\n\n  const loadMore = async () => {\n    try {\n      const res = await API.graphql(graphqlOperation(listPaymentRequest, {\n        limit: 3,\n        nextToken: nextPaginateToken,\n        branchId,\n        status: \"APPROVED\"\n      }));\n      setNextPaginateToken(res.data.listPaymentRequests.nextToken);\n      setPaymentRequestItems([...paymentRequestItems, ...res.data.listPaymentRequests.items]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Table, {\n    celled: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Customer Id\"), __jsx(Table.HeaderCell, null, \"Order Id\"), __jsx(Table.HeaderCell, null, \"Bonus Amount\"), __jsx(Table.HeaderCell, null, \"Created At\"), __jsx(Table.HeaderCell, null, \"Updated At\"), __jsx(Table.HeaderCell, null, \"Status\"))), __jsx(Table.Body, null, paymentRequestItems && paymentRequestItems.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt)).map(item => __jsx(Table.Row, {\n    key: item.id\n  }, __jsx(Table.Cell, null, __jsx(Badge, {\n    size: \"small\"\n  }, item.customerId)), __jsx(Table.Cell, null, __jsx(Badge, {\n    size: \"small\"\n  }, item.orderId)), __jsx(Table.Cell, null, toCurrency(item.bonusAmount)), __jsx(Table.Cell, null, formatDate(item.createdAt)), __jsx(Table.Cell, null, formatDate(item.updatedAt)), __jsx(Table.Cell, null, __jsx(Badge, {\n    size: \"small\",\n    progress: \"complete\",\n    status: \"success\"\n  }, item.status)))))), __jsx(Button, {\n    disabled: !nextPaginateToken,\n    primary: true,\n    onClick: loadMore\n  }, \"Load more\"));\n};\n\nexport default AcceptedPaymentRequest;","map":{"version":3,"sources":["/var/www/transactions-avanta/components/AcceptedPaymentRequest.js"],"names":["React","useState","useEffect","useCallback","API","graphqlOperation","Table","Badge","Button","useFetchPaymentRequest","toCurrency","formatDate","config","listPaymentRequest","configure","AcceptedPaymentRequest","branchId","nextPaginateToken","setNextPaginateToken","paymentRequestItems","setPaymentRequestItems","fetchPaymentRequest","data","fetchAcceptedPayments","status","limit","listPaymentRequests","nextToken","items","error","console","log","loadMore","res","graphql","sort","a","b","Date","updatedAt","map","item","id","customerId","orderId","bonusAmount","createdAt"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\"\nimport { API, graphqlOperation } from \"aws-amplify\"\nimport { Table } from \"semantic-ui-react\"\nimport { Badge, Button } from \"@shopify/polaris\"\nimport { useFetchPaymentRequest } from \"../core/hooks\"\nimport { toCurrency, formatDate } from \"../utils/helper\"\nimport config from \"../aws-exports\"\nimport { listPaymentRequest } from \"../graphql/queries\"\n\nAPI.configure(config)\n\nconst AcceptedPaymentRequest = ({ branchId }) => {\n  const [nextPaginateToken, setNextPaginateToken] = useState(\"\")\n  const [paymentRequestItems, setPaymentRequestItems] = useState([])\n  const { fetchPaymentRequest, data } = useFetchPaymentRequest()\n\n  const fetchAcceptedPayments = useCallback(async () => {\n    try {\n      fetchPaymentRequest({ branchId, status: \"APPROVED\", limit: 3 })\n      setNextPaginateToken(data.data.listPaymentRequests.nextToken)\n      setPaymentRequestItems(data.data.listPaymentRequests.items)\n    } catch (error) {\n      console.log(error)\n    }\n  }, [data])\n\n  console.log(\"Next paginate token\", nextPaginateToken)\n\n  // const fetchAcceptedPayments = useCallback(async () => {\n  //   try {\n  //     const res = await API.graphql(\n  //       graphqlOperation(listPaymentRequest, { limit: 3, branchId, status: \"APPROVED\" })\n  //     )\n  //     setNextPaginateToken(res.data.listPaymentRequests.nextToken)\n  //     setPaymentRequestItems(res.data.listPaymentRequests.items)\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  // }, [])\n\n  useEffect(() => {\n    fetchAcceptedPayments()\n  }, [fetchAcceptedPayments])\n\n  // const loadMore = useCallback(() => {\n  //   try {\n  //     fetchPaymentRequest({ branchId, status: \"APPROVED\", limit: 3, nextToken: nextPaginateToken })\n  //     setNextPaginateToken(data.data.listPaymentRequests.nextToken)\n  //     setPaymentRequestItems([...paymentRequestItems, ...res.data.listPaymentRequests.items])\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  // }, [data])\n\n  const loadMore = async () => {\n    try {\n      const res = await API.graphql(\n        graphqlOperation(listPaymentRequest, {\n          limit: 3,\n          nextToken: nextPaginateToken,\n          branchId,\n          status: \"APPROVED\",\n        })\n      )\n      setNextPaginateToken(res.data.listPaymentRequests.nextToken)\n      setPaymentRequestItems([...paymentRequestItems, ...res.data.listPaymentRequests.items])\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  return (\n    <>\n      <Table celled>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Customer Id</Table.HeaderCell>\n            <Table.HeaderCell>Order Id</Table.HeaderCell>\n            <Table.HeaderCell>Bonus Amount</Table.HeaderCell>\n            <Table.HeaderCell>Created At</Table.HeaderCell>\n            <Table.HeaderCell>Updated At</Table.HeaderCell>\n            <Table.HeaderCell>Status</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {paymentRequestItems &&\n            paymentRequestItems\n              .sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt))\n              .map((item) => (\n                <Table.Row key={item.id}>\n                  <Table.Cell>\n                    <Badge size=\"small\">{item.customerId}</Badge>\n                  </Table.Cell>\n                  <Table.Cell>\n                    <Badge size=\"small\">{item.orderId}</Badge>\n                  </Table.Cell>\n                  <Table.Cell>{toCurrency(item.bonusAmount)}</Table.Cell>\n                  <Table.Cell>{formatDate(item.createdAt)}</Table.Cell>\n                  <Table.Cell>{formatDate(item.updatedAt)}</Table.Cell>\n                  <Table.Cell>\n                    <Badge size=\"small\" progress=\"complete\" status=\"success\">\n                      {item.status}\n                    </Badge>\n                  </Table.Cell>\n                </Table.Row>\n              ))}\n        </Table.Body>\n      </Table>\n      <Button disabled={!nextPaginateToken} primary onClick={loadMore}>\n        Load more\n      </Button>\n    </>\n  )\n}\n\nexport default AcceptedPaymentRequest\n"]},"metadata":{},"sourceType":"module"}