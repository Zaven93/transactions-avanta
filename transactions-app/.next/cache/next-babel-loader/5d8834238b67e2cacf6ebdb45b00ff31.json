{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport { Table } from \"semantic-ui-react\";\nimport { Badge, Button } from \"@shopify/polaris\";\nimport { useFetchPaymentRequest } from \"../core/hooks\";\nimport { toCurrency, formatDate } from \"../utils/helper\";\nimport config from \"../aws-exports\";\nimport { listPaymentRequest } from \"../graphql/queries\";\nAPI.configure(config);\n\nvar AcceptedPaymentRequest = function AcceptedPaymentRequest(_ref) {\n  _s();\n\n  var branchId = _ref.branchId;\n\n  var _useState = useState(\"\"),\n      nextPaginateToken = _useState[0],\n      setNextPaginateToken = _useState[1];\n\n  var _useState2 = useState([]),\n      paymentRequestItems = _useState2[0],\n      setPaymentRequestItems = _useState2[1];\n\n  var _useFetchPaymentReque = useFetchPaymentRequest(branchId, \"APPROVED\", 3),\n      paymentRequests = _useFetchPaymentReque.data,\n      getPaymentRequests = _useFetchPaymentReque.refetch; // const fetchAcceptedPayments = useCallback(() => {\n  //   try {\n  //     fetchPaymentRequest({ branchId, status: \"APPROVED\", limit: 3 })\n  //     setNextPaginateToken(data.data.listPaymentRequests.nextToken)\n  //     setPaymentRequestItems(data.data.listPaymentRequests.items)\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  // }, [])\n\n\n  useEffect(function () {\n    getPaymentRequests();\n  }, [branchId, getPaymentRequests]);\n  useEffect(function () {\n    setNextPaginateToken(paymentRequests.data.listPaymentRequests.nextToken);\n    setPaymentRequestItems(paymentRequests.data.listPaymentRequests.items);\n  }, [paymentRequests]);\n  console.log(\"Payment requests from useEffect\", paymentRequests);\n  console.log(\"Next paginate token\", nextPaginateToken); // const fetchAcceptedPayments = useCallback(async () => {\n  //   try {\n  //     const res = await API.graphql(\n  //       graphqlOperation(listPaymentRequest, { limit: 3, branchId, status: \"APPROVED\" })\n  //     )\n  //     setNextPaginateToken(res.data.listPaymentRequests.nextToken)\n  //     setPaymentRequestItems(res.data.listPaymentRequests.items)\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  // }, [])\n  // useEffect(() => {\n  //   fetchAcceptedPayments()\n  // }, [fetchAcceptedPayments])\n  // const loadMore = useCallback(() => {\n  //   try {\n  //     fetchPaymentRequest({ branchId, status: \"APPROVED\", limit: 3, nextToken: nextPaginateToken })\n  //     setNextPaginateToken(data.data.listPaymentRequests.nextToken)\n  //     setPaymentRequestItems([...paymentRequestItems, ...res.data.listPaymentRequests.items])\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  // }, [data])\n\n  var loadMore = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return API.graphql(graphqlOperation(listPaymentRequest, {\n                limit: 3,\n                nextToken: nextPaginateToken,\n                branchId: branchId,\n                status: \"APPROVED\"\n              }));\n\n            case 3:\n              res = _context.sent;\n              setNextPaginateToken(res.data.listPaymentRequests.nextToken);\n              setPaymentRequestItems([].concat(_toConsumableArray(paymentRequestItems), _toConsumableArray(res.data.listPaymentRequests.items)));\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 8]]);\n    }));\n\n    return function loadMore() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(React.Fragment, null, __jsx(Table, {\n    celled: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Customer Id\"), __jsx(Table.HeaderCell, null, \"Order Id\"), __jsx(Table.HeaderCell, null, \"Bonus Amount\"), __jsx(Table.HeaderCell, null, \"Created At\"), __jsx(Table.HeaderCell, null, \"Updated At\"), __jsx(Table.HeaderCell, null, \"Status\"))), __jsx(Table.Body, null, paymentRequestItems && paymentRequestItems.sort(function (a, b) {\n    return new Date(b.updatedAt) - new Date(a.updatedAt);\n  }).map(function (item) {\n    return __jsx(Table.Row, {\n      key: item.id\n    }, __jsx(Table.Cell, null, __jsx(Badge, {\n      size: \"small\"\n    }, item.customerId)), __jsx(Table.Cell, null, __jsx(Badge, {\n      size: \"small\"\n    }, item.orderId)), __jsx(Table.Cell, null, toCurrency(item.bonusAmount)), __jsx(Table.Cell, null, formatDate(item.createdAt)), __jsx(Table.Cell, null, formatDate(item.updatedAt)), __jsx(Table.Cell, null, __jsx(Badge, {\n      size: \"small\",\n      progress: \"complete\",\n      status: \"success\"\n    }, item.status)));\n  }))), __jsx(Button, {\n    disabled: !nextPaginateToken,\n    primary: true,\n    onClick: loadMore\n  }, \"Load more\"));\n};\n\n_s(AcceptedPaymentRequest, \"AHP5ymjDFJ2sGlj6y0uaVUcUI3Q=\", false, function () {\n  return [useFetchPaymentRequest];\n});\n\n_c = AcceptedPaymentRequest;\nexport default AcceptedPaymentRequest;\n\nvar _c;\n\n$RefreshReg$(_c, \"AcceptedPaymentRequest\");","map":{"version":3,"sources":["/var/www/transactions-avanta/components/AcceptedPaymentRequest.js"],"names":["React","useState","useEffect","useCallback","API","graphqlOperation","Table","Badge","Button","useFetchPaymentRequest","toCurrency","formatDate","config","listPaymentRequest","configure","AcceptedPaymentRequest","branchId","nextPaginateToken","setNextPaginateToken","paymentRequestItems","setPaymentRequestItems","paymentRequests","data","getPaymentRequests","refetch","listPaymentRequests","nextToken","items","console","log","loadMore","graphql","limit","status","res","sort","a","b","Date","updatedAt","map","item","id","customerId","orderId","bonusAmount","createdAt"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\"\nimport { API, graphqlOperation } from \"aws-amplify\"\nimport { Table } from \"semantic-ui-react\"\nimport { Badge, Button } from \"@shopify/polaris\"\nimport { useFetchPaymentRequest } from \"../core/hooks\"\nimport { toCurrency, formatDate } from \"../utils/helper\"\nimport config from \"../aws-exports\"\nimport { listPaymentRequest } from \"../graphql/queries\"\n\nAPI.configure(config)\n\nconst AcceptedPaymentRequest = ({ branchId }) => {\n  const [nextPaginateToken, setNextPaginateToken] = useState(\"\")\n  const [paymentRequestItems, setPaymentRequestItems] = useState([])\n  const { data: paymentRequests, refetch: getPaymentRequests } = useFetchPaymentRequest(\n    branchId,\n    \"APPROVED\",\n    3\n  )\n\n  // const fetchAcceptedPayments = useCallback(() => {\n  //   try {\n  //     fetchPaymentRequest({ branchId, status: \"APPROVED\", limit: 3 })\n  //     setNextPaginateToken(data.data.listPaymentRequests.nextToken)\n  //     setPaymentRequestItems(data.data.listPaymentRequests.items)\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  // }, [])\n\n  useEffect(() => {\n    getPaymentRequests()\n  }, [branchId, getPaymentRequests])\n\n  useEffect(() => {\n    setNextPaginateToken(paymentRequests.data.listPaymentRequests.nextToken)\n    setPaymentRequestItems(paymentRequests.data.listPaymentRequests.items)\n  }, [paymentRequests])\n\n  console.log(\"Payment requests from useEffect\", paymentRequests)\n\n  console.log(\"Next paginate token\", nextPaginateToken)\n\n  // const fetchAcceptedPayments = useCallback(async () => {\n  //   try {\n  //     const res = await API.graphql(\n  //       graphqlOperation(listPaymentRequest, { limit: 3, branchId, status: \"APPROVED\" })\n  //     )\n  //     setNextPaginateToken(res.data.listPaymentRequests.nextToken)\n  //     setPaymentRequestItems(res.data.listPaymentRequests.items)\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  // }, [])\n\n  // useEffect(() => {\n  //   fetchAcceptedPayments()\n  // }, [fetchAcceptedPayments])\n\n  // const loadMore = useCallback(() => {\n  //   try {\n  //     fetchPaymentRequest({ branchId, status: \"APPROVED\", limit: 3, nextToken: nextPaginateToken })\n  //     setNextPaginateToken(data.data.listPaymentRequests.nextToken)\n  //     setPaymentRequestItems([...paymentRequestItems, ...res.data.listPaymentRequests.items])\n  //   } catch (error) {\n  //     console.log(error)\n  //   }\n  // }, [data])\n\n  const loadMore = async () => {\n    try {\n      const res = await API.graphql(\n        graphqlOperation(listPaymentRequest, {\n          limit: 3,\n          nextToken: nextPaginateToken,\n          branchId,\n          status: \"APPROVED\",\n        })\n      )\n      setNextPaginateToken(res.data.listPaymentRequests.nextToken)\n      setPaymentRequestItems([...paymentRequestItems, ...res.data.listPaymentRequests.items])\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  return (\n    <>\n      <Table celled>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Customer Id</Table.HeaderCell>\n            <Table.HeaderCell>Order Id</Table.HeaderCell>\n            <Table.HeaderCell>Bonus Amount</Table.HeaderCell>\n            <Table.HeaderCell>Created At</Table.HeaderCell>\n            <Table.HeaderCell>Updated At</Table.HeaderCell>\n            <Table.HeaderCell>Status</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {paymentRequestItems &&\n            paymentRequestItems\n              .sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt))\n              .map((item) => (\n                <Table.Row key={item.id}>\n                  <Table.Cell>\n                    <Badge size=\"small\">{item.customerId}</Badge>\n                  </Table.Cell>\n                  <Table.Cell>\n                    <Badge size=\"small\">{item.orderId}</Badge>\n                  </Table.Cell>\n                  <Table.Cell>{toCurrency(item.bonusAmount)}</Table.Cell>\n                  <Table.Cell>{formatDate(item.createdAt)}</Table.Cell>\n                  <Table.Cell>{formatDate(item.updatedAt)}</Table.Cell>\n                  <Table.Cell>\n                    <Badge size=\"small\" progress=\"complete\" status=\"success\">\n                      {item.status}\n                    </Badge>\n                  </Table.Cell>\n                </Table.Row>\n              ))}\n        </Table.Body>\n      </Table>\n      <Button disabled={!nextPaginateToken} primary onClick={loadMore}>\n        Load more\n      </Button>\n    </>\n  )\n}\n\nexport default AcceptedPaymentRequest\n"]},"metadata":{},"sourceType":"module"}