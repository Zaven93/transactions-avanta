{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query listTransactions($limit: Int, $nextToken: String) {\\n        listTransactions(limit: $limit, nextToken: $nextToken) {\\n            nextToken\\n            items {\\n                id\\n                totalPrice\\n                totalBonusAmount\\n                currency\\n                products {\\n                    id\\n                    title\\n                    bonusPercentage\\n                    priceAmount\\n                    priceCurrency\\n                    image\\n                }\\n                customer {\\n                    id\\n                    firstName\\n                    lastName\\n                    phone\\n                    email\\n                }\\n                createdAt\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport config from '../aws-exports';\nimport gql from 'graphql-tag';\nimport axios from 'axios';\nAPI.configure(config);\nvar listTransactions = gql(_templateObject());\n\nvar Index = function Index(_ref) {\n  _s();\n\n  var transactions = _ref.transactions;\n  var fetchTransactions = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return API.graphql(graphqlOperation(listTransactions));\n\n          case 3:\n            data = _context.sent;\n            console.log('Data from useEffect', data.data);\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 7]]);\n  })), []);\n  useEffect(function () {\n    fetchTransactions();\n  }, [fetchTransactions]);\n  console.log('Transactions', transactions);\n  return __jsx(\"div\", null, \"Main page\");\n}; // export async function getStaticProps() {\n//     let result\n//     try {\n//         result = await API.graphql(graphqlOperation(listTransactions))\n//     } catch (error) {\n//         console.log(error)\n//     }\n//     if (result.errors) {\n//         console.warn('Failed to fetch todolist. ', result.errors)\n//         return { props: { transactions: [] } }\n//     }\n//     if (result.data !== null) {\n//         return { props: { transactions: result.data } }\n//     }\n// }\n// Index.getInitialProps = async () => {\n//     let result\n//     try {\n//         result = await API.graphql(graphqlOperation(listTransactions))\n//     } catch (error) {\n//         console.log(error)\n//     }\n//     if (result.errors) {\n//         console.warn('Failed to fetch todolist. ', result.errors)\n//         return { transactions: [] }\n//     }\n//     if (result.data !== null) {\n//         return { transactions: result.data }\n//     }\n// }\n\n\n_s(Index, \"ZTTZRrwtXPGqMukNr2Q9p9WXQGU=\");\n\n_c = Index;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/pages/index.js"],"names":["React","useEffect","useState","useCallback","API","graphqlOperation","config","gql","axios","configure","listTransactions","Index","transactions","fetchTransactions","graphql","data","console","log"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,WAArC,QAAwD,OAAxD;AACA,SAASC,GAAT,EAAcC,gBAAd,QAAsC,aAAtC;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEAJ,GAAG,CAACK,SAAJ,CAAcH,MAAd;AAEA,IAAMI,gBAAgB,GAAGH,GAAH,mBAAtB;;AA8BA,IAAMI,KAAK,GAAG,SAARA,KAAQ,OAAsB;AAAA;;AAAA,MAAnBC,YAAmB,QAAnBA,YAAmB;AAChC,MAAMC,iBAAiB,GAAGV,WAAW,wEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEXC,GAAG,CAACU,OAAJ,CAAYT,gBAAgB,CAACK,gBAAD,CAA5B,CAFW;;AAAA;AAExBK,YAAAA,IAFwB;AAG9BC,YAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,IAAI,CAACA,IAAxC;AAH8B;AAAA;;AAAA;AAAA;AAAA;AAK9BC,YAAAA,OAAO,CAACC,GAAR;;AAL8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,IAOlC,EAPkC,CAArC;AASAhB,EAAAA,SAAS,CAAC,YAAM;AACZY,IAAAA,iBAAiB;AACpB,GAFQ,EAEN,CAACA,iBAAD,CAFM,CAAT;AAGAG,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BL,YAA5B;AACA,SAAO,+BAAP;AACH,CAfD,C,CAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GAjDMD,K;;KAAAA,K;AAmDN,eAAeA,KAAf","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react'\r\nimport { API, graphqlOperation } from 'aws-amplify'\r\nimport config from '../aws-exports'\r\nimport gql from 'graphql-tag'\r\nimport axios from 'axios'\r\n\r\nAPI.configure(config)\r\n\r\nconst listTransactions = gql`\r\n    query listTransactions($limit: Int, $nextToken: String) {\r\n        listTransactions(limit: $limit, nextToken: $nextToken) {\r\n            nextToken\r\n            items {\r\n                id\r\n                totalPrice\r\n                totalBonusAmount\r\n                currency\r\n                products {\r\n                    id\r\n                    title\r\n                    bonusPercentage\r\n                    priceAmount\r\n                    priceCurrency\r\n                    image\r\n                }\r\n                customer {\r\n                    id\r\n                    firstName\r\n                    lastName\r\n                    phone\r\n                    email\r\n                }\r\n                createdAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst Index = ({ transactions }) => {\r\n    const fetchTransactions = useCallback(async () => {\r\n        try {\r\n            const data = await API.graphql(graphqlOperation(listTransactions))\r\n            console.log('Data from useEffect', data.data)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        fetchTransactions()\r\n    }, [fetchTransactions])\r\n    console.log('Transactions', transactions)\r\n    return <div>Main page</div>\r\n}\r\n\r\n// export async function getStaticProps() {\r\n//     let result\r\n//     try {\r\n//         result = await API.graphql(graphqlOperation(listTransactions))\r\n//     } catch (error) {\r\n//         console.log(error)\r\n//     }\r\n\r\n//     if (result.errors) {\r\n//         console.warn('Failed to fetch todolist. ', result.errors)\r\n//         return { props: { transactions: [] } }\r\n//     }\r\n//     if (result.data !== null) {\r\n//         return { props: { transactions: result.data } }\r\n//     }\r\n// }\r\n\r\n// Index.getInitialProps = async () => {\r\n//     let result\r\n//     try {\r\n//         result = await API.graphql(graphqlOperation(listTransactions))\r\n//     } catch (error) {\r\n//         console.log(error)\r\n//     }\r\n\r\n//     if (result.errors) {\r\n//         console.warn('Failed to fetch todolist. ', result.errors)\r\n//         return { transactions: [] }\r\n//     }\r\n//     if (result.data !== null) {\r\n//         return { transactions: result.data }\r\n//     }\r\n// }\r\n\r\nexport default Index\r\n"]},"metadata":{},"sourceType":"module"}