{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport gql from 'graphql-tag';\nimport { Table, Icon, Popup, Header } from 'semantic-ui-react';\nimport { Badge, Button } from '@shopify/polaris';\nimport { toCurrency, formatDate } from '../utils/helper';\nimport config from '../aws-exports';\nAPI.configure(config);\nconst listPaymentRequest = gql`\n    query listPaymentRequest($limit: Int, $nextToken: String) {\n        listPaymentRequests(\n            limit: $limit\n            nextToken: $nextToken\n            filter: { status: { eq: APPROVED } }\n        ) {\n            items {\n                bonusAmount\n                createdAt\n                customerId\n                id\n                orderId\n                status\n                updatedAt\n            }\n            nextToken\n        }\n    }\n`;\n\nconst AcceptedPaymentRequest = () => {\n  const {\n    0: nextPaginateToken,\n    1: setNextPaginateToken\n  } = useState('');\n  const {\n    0: paymentRequestItems,\n    1: setPaymentRequestItems\n  } = useState([]);\n  console.log('Next token is', nextPaginateToken);\n  const fetchAcceptedPayments = useCallback(async () => {\n    try {\n      const res = await API.graphql(graphqlOperation(listPaymentRequest, {\n        limit: 20\n      }));\n      setNextPaginateToken(res.data.listPaymentRequests.nextToken);\n      setPaymentRequestItems(res.data.listPaymentRequests.items);\n      console.log('Accepted payments', res.data);\n    } catch (error) {\n      console.log(error);\n    }\n  }, []);\n  useEffect(() => {\n    fetchAcceptedPayments();\n  }, [fetchAcceptedPayments]);\n\n  const loadMore = async () => {\n    try {\n      const res = await API.graphql(graphqlOperation(listPaymentRequest, {\n        limit: 20,\n        nextToken: nextPaginateToken\n      }));\n      setNextPaginateToken(res.data.listPaymentRequests.nextToken);\n      setPaymentRequestItems([...paymentRequestItems, ...res.data.listPaymentRequests.items]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  console.log('Next paginate token', nextPaginateToken);\n  console.log('Accepted state data', paymentRequestItems);\n  return __jsx(React.Fragment, null, __jsx(Table, {\n    celled: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Customer Id\"), __jsx(Table.HeaderCell, null, \"Order Id\"), __jsx(Table.HeaderCell, null, \"Bonus Amount\"), __jsx(Table.HeaderCell, null, \"Created At\"), __jsx(Table.HeaderCell, null, \"Updated At\"), __jsx(Table.HeaderCell, null, \"Status\"))), __jsx(Table.Body, null, paymentRequestItems && paymentRequestItems.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt)).map(item => __jsx(Table.Row, {\n    key: item.id\n  }, __jsx(Table.Cell, null, __jsx(Badge, {\n    size: \"small\"\n  }, item.customerId)), __jsx(Table.Cell, null, __jsx(Badge, {\n    size: \"small\"\n  }, item.orderId)), __jsx(Table.Cell, null, toCurrency(item.bonusAmount)), __jsx(Table.Cell, null, formatDate(item.createdAt)), __jsx(Table.Cell, null, formatDate(item.updatedAt)), __jsx(Table.Cell, null, __jsx(Badge, {\n    size: \"small\",\n    progress: \"complete\",\n    status: \"success\"\n  }, item.status)))))), __jsx(Button, {\n    disabled: !nextPaginateToken,\n    primary: true,\n    onClick: loadMore\n  }, \"Load more\"));\n};\n\nexport default AcceptedPaymentRequest;","map":{"version":3,"sources":["/var/www/transactions-avanta/components/AcceptedPaymentRequest.js"],"names":["React","useState","useEffect","useCallback","API","graphqlOperation","gql","Table","Icon","Popup","Header","Badge","Button","toCurrency","formatDate","config","configure","listPaymentRequest","AcceptedPaymentRequest","nextPaginateToken","setNextPaginateToken","paymentRequestItems","setPaymentRequestItems","console","log","fetchAcceptedPayments","res","graphql","limit","data","listPaymentRequests","nextToken","items","error","loadMore","sort","a","b","Date","updatedAt","map","item","id","customerId","orderId","bonusAmount","createdAt","status"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\nimport { API, graphqlOperation } from 'aws-amplify'\nimport gql from 'graphql-tag'\nimport { Table, Icon, Popup, Header } from 'semantic-ui-react'\nimport { Badge, Button } from '@shopify/polaris'\nimport { toCurrency, formatDate } from '../utils/helper'\nimport config from '../aws-exports'\n\nAPI.configure(config)\n\nconst listPaymentRequest = gql`\n    query listPaymentRequest($limit: Int, $nextToken: String) {\n        listPaymentRequests(\n            limit: $limit\n            nextToken: $nextToken\n            filter: { status: { eq: APPROVED } }\n        ) {\n            items {\n                bonusAmount\n                createdAt\n                customerId\n                id\n                orderId\n                status\n                updatedAt\n            }\n            nextToken\n        }\n    }\n`\n\nconst AcceptedPaymentRequest = () => {\n    const [nextPaginateToken, setNextPaginateToken] = useState('')\n    const [paymentRequestItems, setPaymentRequestItems] = useState([])\n\n    console.log('Next token is', nextPaginateToken)\n\n    const fetchAcceptedPayments = useCallback(async () => {\n        try {\n            const res = await API.graphql(graphqlOperation(listPaymentRequest, { limit: 20 }))\n            setNextPaginateToken(res.data.listPaymentRequests.nextToken)\n            setPaymentRequestItems(res.data.listPaymentRequests.items)\n            console.log('Accepted payments', res.data)\n        } catch (error) {\n            console.log(error)\n        }\n    }, [])\n\n    useEffect(() => {\n        fetchAcceptedPayments()\n    }, [fetchAcceptedPayments])\n\n    const loadMore = async () => {\n        try {\n            const res = await API.graphql(\n                graphqlOperation(listPaymentRequest, { limit: 20, nextToken: nextPaginateToken })\n            )\n            setNextPaginateToken(res.data.listPaymentRequests.nextToken)\n            setPaymentRequestItems([...paymentRequestItems, ...res.data.listPaymentRequests.items])\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    console.log('Next paginate token', nextPaginateToken)\n    console.log('Accepted state data', paymentRequestItems)\n\n    return (\n        <>\n            <Table celled>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Customer Id</Table.HeaderCell>\n                        <Table.HeaderCell>Order Id</Table.HeaderCell>\n                        <Table.HeaderCell>Bonus Amount</Table.HeaderCell>\n                        <Table.HeaderCell>Created At</Table.HeaderCell>\n                        <Table.HeaderCell>Updated At</Table.HeaderCell>\n                        <Table.HeaderCell>Status</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {paymentRequestItems &&\n                        paymentRequestItems\n                            .sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt))\n                            .map((item) => (\n                                <Table.Row key={item.id}>\n                                    <Table.Cell>\n                                        <Badge size=\"small\">{item.customerId}</Badge>\n                                    </Table.Cell>\n                                    <Table.Cell>\n                                        <Badge size=\"small\">{item.orderId}</Badge>\n                                    </Table.Cell>\n                                    <Table.Cell>{toCurrency(item.bonusAmount)}</Table.Cell>\n                                    <Table.Cell>{formatDate(item.createdAt)}</Table.Cell>\n                                    <Table.Cell>{formatDate(item.updatedAt)}</Table.Cell>\n                                    <Table.Cell>\n                                        <Badge size=\"small\" progress=\"complete\" status=\"success\">\n                                            {item.status}\n                                        </Badge>\n                                    </Table.Cell>\n                                </Table.Row>\n                            ))}\n                </Table.Body>\n            </Table>\n            <Button disabled={!nextPaginateToken} primary onClick={loadMore}>\n                Load more\n            </Button>\n        </>\n    )\n}\n\nexport default AcceptedPaymentRequest\n"]},"metadata":{},"sourceType":"module"}