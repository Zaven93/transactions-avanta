{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  subscription onCreateTransaction {\\n    onCreateTransaction {\\n      id\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query branchByAdminId($adminId: ID!) {\\n    branchByAdminId(adminId: $adminId) {\\n      items {\\n        adminId\\n        branchName\\n        id\\n        transactions {\\n          items {\\n            branchId\\n            createdAt\\n            currency\\n            id\\n            note\\n            customer {\\n              email\\n              firstName\\n              id\\n              lastName\\n              phone\\n            }\\n            products {\\n              bonusPercentage\\n              id\\n              image\\n              priceAmount\\n              priceCurrency\\n              title\\n            }\\n            sortDate\\n            totalBonusAmount\\n            totalPrice\\n            updatedAt\\n          }\\n        }\\n        branchProducts {\\n          items {\\n            branchId\\n            createdAt\\n            id\\n            productId\\n            tags\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useRouter } from \"next/router\";\nimport { Auth, API, graphqlOperation } from \"aws-amplify\";\nimport createApp from \"@shopify/app-bridge\";\nimport { Redirect } from \"@shopify/app-bridge/actions\";\nimport gql from \"graphql-tag\";\nimport { Card, DataTable, Button, Page, Pagination, TextField, ChoiceList, Filters, Icon, Stack } from \"@shopify/polaris\";\nimport { SearchMajorMonotone, TransactionMajorMonotone, BalanceMajorMonotone, LogOutMinor } from \"@shopify/polaris-icons\";\nimport { toCurrency, formatDate, extractNumbersFromString } from \"../utils/helper\";\nimport config from \"../aws-exports\";\nimport Login from \"../components/Login\";\nimport BranchConsole from \"../components/BranchConsole\";\nimport PaymentRequest from \"../components/PaymentRequest\";\nAPI.configure(config);\nvar branchByAdminId = gql(_templateObject());\nvar onCreateTransaction = gql(_templateObject2());\n\nvar BranchData = function BranchData(_ref) {\n  _s();\n\n  var user = _ref.user,\n      updateUser = _ref.updateUser;\n\n  var _useState = useState(\"\"),\n      branchInfo = _useState[0],\n      setBranchInfo = _useState[1];\n\n  var _useState2 = useState(null),\n      searchValue = _useState2[0],\n      setSearchValue = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      newCreatedTransaction = _useState3[0],\n      setNewCreatedTransaction = _useState3[1];\n\n  var _useState4 = useState(false),\n      showPaymentRequest = _useState4[0],\n      setShowPaymentRequest = _useState4[1]; // const [transactionItems, setTransactionItems] = useState(transactions.listTransactions.items)\n  // const [nextPaginateToken, setNextPaginateToken] = useState(\n  //     transactions.listTransactions.nextToken\n  // )\n  // const [previousPaginateTokens, setPreviousPaginateTokens] = useState([])\n\n\n  var handleSearchInput = useCallback(function (newValue) {\n    return setSearchValue(newValue);\n  }, []);\n  var router = useRouter();\n  var app = createApp({\n    apiKey: \"3b01063bac3031d13101100ef3e44fd5\",\n    shopOrigin: \"transactions-avanta.myshopify.com\"\n  });\n  var redirect = Redirect.create(app); // const paginateNext = async () => {\n  //     setPreviousPaginateTokens([...previousPaginateTokens, nextPaginateToken])\n  //     try {\n  //         const data = await API.graphql(\n  //             graphqlOperation(listTransactions, { limit: 5, nextToken: nextPaginateToken })\n  //         )\n  //         console.log('Data from pagination', data)\n  //         setTransactionItems(data.data.listTransactions.items)\n  //         setNextPaginateToken(data.data.listTransactions.nextToken)\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // }\n  // const paginatePrevious = async () => {\n  //     const previousToken =\n  //         previousPaginateTokens[\n  //             previousPaginateTokens.length === 1 ? 0 : previousPaginateTokens.length - 2\n  //         ]\n  //     setPreviousPaginateTokens([\n  //         ...previousPaginateTokens.slice(0, previousPaginateTokens.length - 1)\n  //     ])\n  //     try {\n  //         if (previousPaginateTokens.length === 1) {\n  //             const data = await API.graphql(graphqlOperation(listTransactions, { limit: 5 }))\n  //             setTransactionItems(data.data.listTransactions.items)\n  //             setNextPaginateToken(data.data.listTransactions.nextToken)\n  //         } else {\n  //             const data = await API.graphql(\n  //                 graphqlOperation(listTransactions, { limit: 5, nextToken: previousToken })\n  //             )\n  //             setTransactionItems(data.data.listTransactions.items)\n  //             setNextPaginateToken(data.data.listTransactions.nextToken)\n  //         }\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // }\n\n  var getBranch = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var fetchBranch;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return API.graphql(graphqlOperation(branchByAdminId, {\n                adminId: user.attributes.sub\n              }));\n\n            case 3:\n              fetchBranch = _context.sent;\n              setBranchInfo(fetchBranch.data.branchByAdminId.items[0]);\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 7]]);\n    }));\n\n    return function getBranch() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    getBranch();\n    API.graphql(graphqlOperation(onCreateTransaction)).subscribe({\n      next: function next(createdTransaction) {\n        return setNewCreatedTransaction(createdTransaction);\n      }\n    });\n  }, [newCreatedTransaction]);\n  console.log(\"Branch data user\", user);\n  console.log(\"Branch info\", branchInfo);\n  return __jsx(React.Fragment, null, showPaymentRequest ? __jsx(PaymentRequest, {\n    setShowPaymentRequest: setShowPaymentRequest,\n    branchId: branchInfo ? branchInfo.id : \"\"\n  }) : __jsx(Page, {\n    title: branchInfo && branchInfo.branchName\n  }, __jsx(TextField, {\n    label: \"Search Product\",\n    value: searchValue,\n    onChange: handleSearchInput,\n    prefix: __jsx(Icon, {\n      source: SearchMajorMonotone\n    }),\n    placeholder: \"Search by Customer phone number\"\n  }), __jsx(Stack, null, __jsx(Stack.Item, {\n    fill: true\n  }, __jsx(Button, {\n    id: \"Accept-Payment\",\n    onClick: function onClick() {\n      return (// redirect.dispatch(\n        //     Redirect.Action.ADMIN_PATH,\n        //     '/apps/3b01063bac3031d13101100ef3e44fd5/accept-payment'\n        // )\n        setShowPaymentRequest(true)\n      );\n    }\n  }, __jsx(Icon, {\n    source: BalanceMajorMonotone\n  }), \" Accept Payment\")), __jsx(Stack.Item, null, __jsx(Button, {\n    id: \"Create-Transaction\",\n    primary: true,\n    onClick: function onClick() {\n      return redirect.dispatch(Redirect.Action.REMOTE, {\n        // url: `https://dev.d3ivgpkzuz6hkr.amplifyapp.com?adminId=${user.attributes.sub}`,\n        url: \"http://localhost:3001/transactions/\".concat(user.attributes.sub),\n        newContext: true\n      });\n    }\n  }, __jsx(Icon, {\n    source: TransactionMajorMonotone\n  }), \" Create transaction\")), __jsx(Stack.Item, null, __jsx(Button, {\n    primary: true,\n    id: \"Logout\",\n    onClick: function onClick() {\n      Auth.signOut();\n      updateUser(null);\n    }\n  }, __jsx(Icon, {\n    source: LogOutMinor\n  }), \" Logout\"))), branchInfo && __jsx(Card, null, __jsx(DataTable, {\n    columnContentTypes: [\"text\", \"text\", \"text\", \"text\"],\n    headings: [\"Customer phone number\", \"TotalPrice\", \"TotalBonusAmount\", \"Minus from Bonus Amount\", \"CreatedAt\"],\n    rows: branchInfo && branchInfo.transactions.items.filter(function (transaction) {\n      if (searchValue == null) {\n        return transaction;\n      } else if (transaction.customer[0].phone.toLowerCase().includes(searchValue.toLowerCase())) {\n        return transaction;\n      }\n    }).sort(function (a, b) {\n      return new Date(b.createdAt) - new Date(a.createdAt);\n    }).map(function (transaction) {\n      return [__jsx(Button, {\n        primary: true,\n        onClick: function onClick() {\n          return redirect.dispatch(Redirect.Action.ADMIN_PATH, {\n            path: \"/customers/\".concat(transaction.customer[0].id),\n            newContext: true\n          });\n        }\n      }, transaction.customer[0].phone), toCurrency(Number(transaction.totalPrice)), toCurrency(Number(transaction.totalBonusAmount)), transaction.note === null ? \"\" : toCurrency(extractNumbersFromString(transaction.note)), formatDate(transaction.createdAt)];\n    })\n  }))));\n};\n\n_s(BranchData, \"70B9+f8elI4u8quhhb1A27ZVXrs=\", false, function () {\n  return [useRouter];\n});\n\n_c = BranchData;\nexport default BranchData;\n\nvar _c;\n\n$RefreshReg$(_c, \"BranchData\");","map":{"version":3,"sources":["/var/www/transactions-avanta/components/BranchData.js"],"names":["React","useState","useCallback","useEffect","axios","useRouter","Auth","API","graphqlOperation","createApp","Redirect","gql","Card","DataTable","Button","Page","Pagination","TextField","ChoiceList","Filters","Icon","Stack","SearchMajorMonotone","TransactionMajorMonotone","BalanceMajorMonotone","LogOutMinor","toCurrency","formatDate","extractNumbersFromString","config","Login","BranchConsole","PaymentRequest","configure","branchByAdminId","onCreateTransaction","BranchData","user","updateUser","branchInfo","setBranchInfo","searchValue","setSearchValue","newCreatedTransaction","setNewCreatedTransaction","showPaymentRequest","setShowPaymentRequest","handleSearchInput","newValue","router","app","apiKey","shopOrigin","redirect","create","getBranch","graphql","adminId","attributes","sub","fetchBranch","data","items","console","log","subscribe","next","createdTransaction","id","branchName","dispatch","Action","REMOTE","url","newContext","signOut","transactions","filter","transaction","customer","phone","toLowerCase","includes","sort","a","b","Date","createdAt","map","ADMIN_PATH","path","Number","totalPrice","totalBonusAmount","note"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\"\nimport axios from \"axios\"\nimport { useRouter } from \"next/router\"\nimport { Auth, API, graphqlOperation } from \"aws-amplify\"\nimport createApp from \"@shopify/app-bridge\"\nimport { Redirect } from \"@shopify/app-bridge/actions\"\nimport gql from \"graphql-tag\"\nimport {\n  Card,\n  DataTable,\n  Button,\n  Page,\n  Pagination,\n  TextField,\n  ChoiceList,\n  Filters,\n  Icon,\n  Stack,\n} from \"@shopify/polaris\"\nimport {\n  SearchMajorMonotone,\n  TransactionMajorMonotone,\n  BalanceMajorMonotone,\n  LogOutMinor,\n} from \"@shopify/polaris-icons\"\nimport { toCurrency, formatDate, extractNumbersFromString } from \"../utils/helper\"\nimport config from \"../aws-exports\"\nimport Login from \"../components/Login\"\nimport BranchConsole from \"../components/BranchConsole\"\nimport PaymentRequest from \"../components/PaymentRequest\"\n\nAPI.configure(config)\n\nconst branchByAdminId = gql`\n  query branchByAdminId($adminId: ID!) {\n    branchByAdminId(adminId: $adminId) {\n      items {\n        adminId\n        branchName\n        id\n        transactions {\n          items {\n            branchId\n            createdAt\n            currency\n            id\n            note\n            customer {\n              email\n              firstName\n              id\n              lastName\n              phone\n            }\n            products {\n              bonusPercentage\n              id\n              image\n              priceAmount\n              priceCurrency\n              title\n            }\n            sortDate\n            totalBonusAmount\n            totalPrice\n            updatedAt\n          }\n        }\n        branchProducts {\n          items {\n            branchId\n            createdAt\n            id\n            productId\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n\nconst onCreateTransaction = gql`\n  subscription onCreateTransaction {\n    onCreateTransaction {\n      id\n    }\n  }\n`\n\nconst BranchData = ({ user, updateUser }) => {\n  const [branchInfo, setBranchInfo] = useState(\"\")\n  const [searchValue, setSearchValue] = useState(null)\n  const [newCreatedTransaction, setNewCreatedTransaction] = useState(\"\")\n  const [showPaymentRequest, setShowPaymentRequest] = useState(false)\n  // const [transactionItems, setTransactionItems] = useState(transactions.listTransactions.items)\n  // const [nextPaginateToken, setNextPaginateToken] = useState(\n  //     transactions.listTransactions.nextToken\n  // )\n  // const [previousPaginateTokens, setPreviousPaginateTokens] = useState([])\n  const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\n\n  const router = useRouter()\n\n  const app = createApp({\n    apiKey: \"3b01063bac3031d13101100ef3e44fd5\",\n    shopOrigin: \"transactions-avanta.myshopify.com\",\n  })\n\n  const redirect = Redirect.create(app)\n\n  // const paginateNext = async () => {\n  //     setPreviousPaginateTokens([...previousPaginateTokens, nextPaginateToken])\n  //     try {\n  //         const data = await API.graphql(\n  //             graphqlOperation(listTransactions, { limit: 5, nextToken: nextPaginateToken })\n  //         )\n\n  //         console.log('Data from pagination', data)\n  //         setTransactionItems(data.data.listTransactions.items)\n  //         setNextPaginateToken(data.data.listTransactions.nextToken)\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // }\n\n  // const paginatePrevious = async () => {\n  //     const previousToken =\n  //         previousPaginateTokens[\n  //             previousPaginateTokens.length === 1 ? 0 : previousPaginateTokens.length - 2\n  //         ]\n  //     setPreviousPaginateTokens([\n  //         ...previousPaginateTokens.slice(0, previousPaginateTokens.length - 1)\n  //     ])\n  //     try {\n  //         if (previousPaginateTokens.length === 1) {\n  //             const data = await API.graphql(graphqlOperation(listTransactions, { limit: 5 }))\n  //             setTransactionItems(data.data.listTransactions.items)\n  //             setNextPaginateToken(data.data.listTransactions.nextToken)\n  //         } else {\n  //             const data = await API.graphql(\n  //                 graphqlOperation(listTransactions, { limit: 5, nextToken: previousToken })\n  //             )\n  //             setTransactionItems(data.data.listTransactions.items)\n  //             setNextPaginateToken(data.data.listTransactions.nextToken)\n  //         }\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // }\n\n  const getBranch = async () => {\n    try {\n      const fetchBranch = await API.graphql(\n        graphqlOperation(branchByAdminId, { adminId: user.attributes.sub })\n      )\n      setBranchInfo(fetchBranch.data.branchByAdminId.items[0])\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    getBranch()\n    API.graphql(graphqlOperation(onCreateTransaction)).subscribe({\n      next: (createdTransaction) => setNewCreatedTransaction(createdTransaction),\n    })\n  }, [newCreatedTransaction])\n\n  console.log(\"Branch data user\", user)\n  console.log(\"Branch info\", branchInfo)\n\n  return (\n    <>\n      {showPaymentRequest ? (\n        <PaymentRequest\n          setShowPaymentRequest={setShowPaymentRequest}\n          branchId={branchInfo ? branchInfo.id : \"\"}\n        />\n      ) : (\n        <Page title={branchInfo && branchInfo.branchName}>\n          <TextField\n            label=\"Search Product\"\n            value={searchValue}\n            onChange={handleSearchInput}\n            prefix={<Icon source={SearchMajorMonotone} />}\n            placeholder=\"Search by Customer phone number\"\n          />\n          <Stack>\n            <Stack.Item fill>\n              <Button\n                id=\"Accept-Payment\"\n                onClick={() =>\n                  // redirect.dispatch(\n                  //     Redirect.Action.ADMIN_PATH,\n                  //     '/apps/3b01063bac3031d13101100ef3e44fd5/accept-payment'\n                  // )\n                  setShowPaymentRequest(true)\n                }>\n                <Icon source={BalanceMajorMonotone} /> Accept Payment\n              </Button>\n            </Stack.Item>\n            <Stack.Item>\n              <Button\n                id=\"Create-Transaction\"\n                primary\n                onClick={() =>\n                  redirect.dispatch(Redirect.Action.REMOTE, {\n                    // url: `https://dev.d3ivgpkzuz6hkr.amplifyapp.com?adminId=${user.attributes.sub}`,\n                    url: `http://localhost:3001/transactions/${user.attributes.sub}`,\n                    newContext: true,\n                  })\n                }>\n                <Icon source={TransactionMajorMonotone} /> Create transaction\n              </Button>\n            </Stack.Item>\n            <Stack.Item>\n              <Button\n                primary\n                id=\"Logout\"\n                onClick={() => {\n                  Auth.signOut()\n                  updateUser(null)\n                }}>\n                <Icon source={LogOutMinor} /> Logout\n              </Button>\n            </Stack.Item>\n          </Stack>\n          {branchInfo && (\n            <Card>\n              <DataTable\n                columnContentTypes={[\"text\", \"text\", \"text\", \"text\"]}\n                headings={[\n                  \"Customer phone number\",\n                  \"TotalPrice\",\n                  \"TotalBonusAmount\",\n                  \"Minus from Bonus Amount\",\n                  \"CreatedAt\",\n                ]}\n                rows={\n                  branchInfo &&\n                  branchInfo.transactions.items\n                    .filter((transaction) => {\n                      if (searchValue == null) {\n                        return transaction\n                      } else if (\n                        transaction.customer[0].phone\n                          .toLowerCase()\n                          .includes(searchValue.toLowerCase())\n                      ) {\n                        return transaction\n                      }\n                    })\n                    .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))\n                    .map((transaction) => [\n                      <Button\n                        primary\n                        onClick={() =>\n                          redirect.dispatch(Redirect.Action.ADMIN_PATH, {\n                            path: `/customers/${transaction.customer[0].id}`,\n                            newContext: true,\n                          })\n                        }>\n                        {transaction.customer[0].phone}\n                      </Button>,\n                      toCurrency(Number(transaction.totalPrice)),\n                      toCurrency(Number(transaction.totalBonusAmount)),\n                      transaction.note === null\n                        ? \"\"\n                        : toCurrency(extractNumbersFromString(transaction.note)),\n                      formatDate(transaction.createdAt),\n                    ])\n                }\n              />\n              {/* <Pagination\n                        hasPrevious={previousPaginateTokens.length > 0}\n                        onPrevious={paginatePrevious}\n                        hasNext={nextPaginateToken}\n                        onNext={paginateNext}\n                    /> */}\n            </Card>\n          )}\n        </Page>\n      )}\n    </>\n  )\n}\n\nexport default BranchData\n"]},"metadata":{},"sourceType":"module"}