{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation CompleteOrder($id: ID!) {\\n        draftOrderComplete(id: $id, paymentPending: true) {\\n            draftOrder {\\n                customer {\\n                    id\\n                }\\n                email\\n                name\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation CreateOrder($input: DraftOrderInput!) {\\n        draftOrderCreate(input: $input) {\\n            draftOrder {\\n                id\\n                customer {\\n                    id\\n                }\\n                email\\n                lineItems(first: 10) {\\n                    edges {\\n                        node {\\n                            title\\n                            quantity\\n                            originalUnitPrice\\n                            variant {\\n                                id\\n                                price\\n                                title\\n                                product {\\n                                    tags\\n                                    title\\n                                    images(first: 5) {\\n                                        edges {\\n                                            node {\\n                                                originalSrc\\n                                            }\\n                                        }\\n                                    }\\n                                }\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query Products {\\n        products(first: 100) {\\n            edges {\\n                node {\\n                    id\\n                    title\\n                    tags\\n                    description(truncateAt: 100)\\n                    variants(first: 1) {\\n                        edges {\\n                            node {\\n                                id\\n                                price\\n                            }\\n                        }\\n                    }\\n                    images(first: 1) {\\n                        edges {\\n                            node {\\n                                originalSrc\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useCallback } from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { Modal, Thumbnail, Checkbox, TextStyle } from '@shopify/polaris';\nimport { Table, Header } from 'semantic-ui-react';\nimport { toCurrency, formatDate } from '../utils/helper';\nvar listProducts = gql(_templateObject());\nvar createDraftOrder = gql(_templateObject2());\nvar completeOrder = gql(_templateObject3());\n\nvar ProductsList = function ProductsList(_ref) {\n  _s();\n\n  var active = _ref.active,\n      handleChange = _ref.handleChange,\n      customerId = _ref.customerId,\n      bonusAmount = _ref.bonusAmount;\n\n  var _useQuery = useQuery(listProducts),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  var _useMutation = useMutation(createDraftOrder),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      createOrder = _useMutation2[0],\n      orderData = _useMutation2[1].data;\n\n  var _useState = useState([]),\n      rowId = _useState[0],\n      setRowId = _useState[1];\n\n  var _useState2 = useState({\n    customerId: customerId,\n    bonusAmount: bonusAmount,\n    products: []\n  }),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var _useState3 = useState(null),\n      searchValue = _useState3[0],\n      setSearchValue = _useState3[1];\n\n  var handleSearchInput = useCallback(function (newValue) {\n    return setSearchValue(newValue);\n  }, []);\n\n  if (loading) {\n    return __jsx(\"div\", null, \"Loading products...\");\n  }\n\n  if (error) {\n    console.log('Some error Zaven', error);\n    return __jsx(\"div\", null, \"Some error occured\");\n  }\n\n  console.log('State data from product list', state);\n  console.log('Draft order data', orderData);\n  return __jsx(\"div\", {\n    style: {\n      height: '500px'\n    }\n  }, __jsx(Modal, {\n    open: active,\n    onClose: handleChange,\n    title: \"Choose products\",\n    primaryAction: {\n      content: 'Proceed',\n      onAction: function onAction() {\n        createOrder({\n          variables: {\n            input: {\n              customerId: \"gid://shopify/Customer/\".concat(state.customerId),\n              taxExempt: true,\n              note: \"\".concat(toCurrency(state.bonusAmount), \" of bonus were spent on these products \"),\n              lineItems: state.products.map(function (product) {\n                return {\n                  quantity: 1,\n                  originalUnitPrice: Number(product.node.variants.edges[0].node.price),\n                  variantId: product.node.variants.edges[0].node.id\n                };\n              })\n            }\n          }\n        });\n      }\n    }\n  }, __jsx(Modal.Section, null, __jsx(Table, {\n    celled: true,\n    striped: true,\n    selectable: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Products\"), __jsx(Table.HeaderCell, null, \"Description\"), __jsx(Table.HeaderCell, {\n    textAlign: \"center\"\n  }, \"Price\"))), __jsx(Table.Body, null, data && data.products.edges.filter(function (product) {\n    if (searchValue == null) {\n      return product;\n    } else if (product.node.title.toLowerCase().includes(searchValue.toLowerCase())) {\n      return product;\n    }\n  }).map(function (product) {\n    return __jsx(Table.Row, {\n      key: product.node.id,\n      onClick: function onClick() {\n        if (rowId.includes(product.node.id)) {\n          setRowId(rowId.filter(function (id) {\n            return id !== product.node.id;\n          }));\n          setState({\n            products: state.products.filter(function (filteredProduct) {\n              return filteredProduct.node.id !== product.node.id;\n            })\n          });\n        } else {\n          setRowId([].concat(_toConsumableArray(rowId), [product.node.id]));\n          setState({\n            products: [].concat(_toConsumableArray(state.products), [product])\n          });\n        }\n      }\n    }, __jsx(Table.Cell, null, __jsx(Header, {\n      as: \"h4\",\n      image: true,\n      className: \"product-header\"\n    }, __jsx(Checkbox, {\n      checked: rowId.includes(product.node.id) && true\n    }), __jsx(Thumbnail, {\n      source: product.node.images.edges[0] && product.node.images.edges[0].node.originalSrc,\n      size: \"small\",\n      alt: \"\"\n    }), __jsx(Header.Content, null, product.node.title))), __jsx(Table.Cell, null, __jsx(TextStyle, {\n      variation: \"subdued\"\n    }, product.node.description)), __jsx(Table.Cell, {\n      textAlign: \"center\"\n    }, __jsx(TextStyle, {\n      variation: \"subdued\"\n    }, product.node.variants.edges[0] && toCurrency(product.node.variants.edges[0].node.price))));\n  })), __jsx(Table.Footer, {\n    fullWidth: true\n  }, __jsx(Table.Row, null))))));\n};\n\n_s(ProductsList, \"D3dnyVlmoebaETKVIiPJweN84ds=\", false, function () {\n  return [useQuery, useMutation];\n});\n\n_c = ProductsList;\nexport default ProductsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductsList\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/transactions/components/ProductsList.js"],"names":["React","useState","useCallback","gql","useQuery","useMutation","Modal","Thumbnail","Checkbox","TextStyle","Table","Header","toCurrency","formatDate","listProducts","createDraftOrder","completeOrder","ProductsList","active","handleChange","customerId","bonusAmount","loading","error","data","createOrder","orderData","rowId","setRowId","products","state","setState","searchValue","setSearchValue","handleSearchInput","newValue","console","log","height","content","onAction","variables","input","taxExempt","note","lineItems","map","product","quantity","originalUnitPrice","Number","node","variants","edges","price","variantId","id","filter","title","toLowerCase","includes","filteredProduct","images","originalSrc","description"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react'\r\nimport gql from 'graphql-tag'\r\nimport { useQuery, useMutation } from '@apollo/client'\r\nimport { Modal, Thumbnail, Checkbox, TextStyle } from '@shopify/polaris'\r\nimport { Table, Header } from 'semantic-ui-react'\r\nimport { toCurrency, formatDate } from '../utils/helper'\r\n\r\nconst listProducts = gql`\r\n    query Products {\r\n        products(first: 100) {\r\n            edges {\r\n                node {\r\n                    id\r\n                    title\r\n                    tags\r\n                    description(truncateAt: 100)\r\n                    variants(first: 1) {\r\n                        edges {\r\n                            node {\r\n                                id\r\n                                price\r\n                            }\r\n                        }\r\n                    }\r\n                    images(first: 1) {\r\n                        edges {\r\n                            node {\r\n                                originalSrc\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst createDraftOrder = gql`\r\n    mutation CreateOrder($input: DraftOrderInput!) {\r\n        draftOrderCreate(input: $input) {\r\n            draftOrder {\r\n                id\r\n                customer {\r\n                    id\r\n                }\r\n                email\r\n                lineItems(first: 10) {\r\n                    edges {\r\n                        node {\r\n                            title\r\n                            quantity\r\n                            originalUnitPrice\r\n                            variant {\r\n                                id\r\n                                price\r\n                                title\r\n                                product {\r\n                                    tags\r\n                                    title\r\n                                    images(first: 5) {\r\n                                        edges {\r\n                                            node {\r\n                                                originalSrc\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst completeOrder = gql`\r\n    mutation CompleteOrder($id: ID!) {\r\n        draftOrderComplete(id: $id, paymentPending: true) {\r\n            draftOrder {\r\n                customer {\r\n                    id\r\n                }\r\n                email\r\n                name\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst ProductsList = ({ active, handleChange, customerId, bonusAmount }) => {\r\n    const { loading, error, data } = useQuery(listProducts)\r\n    const [createOrder, { data: orderData }] = useMutation(createDraftOrder)\r\n    const [rowId, setRowId] = useState([])\r\n    const [state, setState] = useState({\r\n        customerId,\r\n        bonusAmount,\r\n        products: []\r\n    })\r\n    const [searchValue, setSearchValue] = useState(null)\r\n    const handleSearchInput = useCallback((newValue) => setSearchValue(newValue), [])\r\n\r\n    if (loading) {\r\n        return <div>Loading products...</div>\r\n    }\r\n\r\n    if (error) {\r\n        console.log('Some error Zaven', error)\r\n        return <div>Some error occured</div>\r\n    }\r\n\r\n    console.log('State data from product list', state)\r\n\r\n    console.log('Draft order data', orderData)\r\n\r\n    return (\r\n        <div style={{ height: '500px' }}>\r\n            <Modal\r\n                open={active}\r\n                onClose={handleChange}\r\n                title=\"Choose products\"\r\n                primaryAction={{\r\n                    content: 'Proceed',\r\n                    onAction: () => {\r\n                        createOrder({\r\n                            variables: {\r\n                                input: {\r\n                                    customerId: `gid://shopify/Customer/${state.customerId}`,\r\n                                    taxExempt: true,\r\n                                    note: `${toCurrency(\r\n                                        state.bonusAmount\r\n                                    )} of bonus were spent on these products `,\r\n                                    lineItems: state.products.map((product) => ({\r\n                                        quantity: 1,\r\n                                        originalUnitPrice: Number(\r\n                                            product.node.variants.edges[0].node.price\r\n                                        ),\r\n                                        variantId: product.node.variants.edges[0].node.id\r\n                                    }))\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n                }}>\r\n                <Modal.Section>\r\n                    <Table celled striped selectable>\r\n                        <Table.Header>\r\n                            <Table.Row>\r\n                                <Table.HeaderCell>Products</Table.HeaderCell>\r\n                                <Table.HeaderCell>Description</Table.HeaderCell>\r\n                                <Table.HeaderCell textAlign=\"center\">Price</Table.HeaderCell>\r\n                            </Table.Row>\r\n                        </Table.Header>\r\n                        <Table.Body>\r\n                            {data &&\r\n                                data.products.edges\r\n                                    .filter((product) => {\r\n                                        if (searchValue == null) {\r\n                                            return product\r\n                                        } else if (\r\n                                            product.node.title\r\n                                                .toLowerCase()\r\n                                                .includes(searchValue.toLowerCase())\r\n                                        ) {\r\n                                            return product\r\n                                        }\r\n                                    })\r\n                                    .map((product) => (\r\n                                        <Table.Row\r\n                                            key={product.node.id}\r\n                                            onClick={() => {\r\n                                                if (rowId.includes(product.node.id)) {\r\n                                                    setRowId(\r\n                                                        rowId.filter((id) => id !== product.node.id)\r\n                                                    )\r\n                                                    setState({\r\n                                                        products: state.products.filter(\r\n                                                            (filteredProduct) =>\r\n                                                                filteredProduct.node.id !==\r\n                                                                product.node.id\r\n                                                        )\r\n                                                    })\r\n                                                } else {\r\n                                                    setRowId([...rowId, product.node.id])\r\n                                                    setState({\r\n                                                        products: [...state.products, product]\r\n                                                    })\r\n                                                }\r\n                                            }}>\r\n                                            <Table.Cell>\r\n                                                <Header as=\"h4\" image className=\"product-header\">\r\n                                                    <Checkbox\r\n                                                        checked={\r\n                                                            rowId.includes(product.node.id) && true\r\n                                                        }\r\n                                                    />\r\n                                                    <Thumbnail\r\n                                                        source={\r\n                                                            product.node.images.edges[0] &&\r\n                                                            product.node.images.edges[0].node\r\n                                                                .originalSrc\r\n                                                        }\r\n                                                        size=\"small\"\r\n                                                        alt=\"\"\r\n                                                    />\r\n                                                    <Header.Content>\r\n                                                        {product.node.title}\r\n                                                    </Header.Content>\r\n                                                </Header>\r\n                                            </Table.Cell>\r\n                                            <Table.Cell>\r\n                                                <TextStyle variation=\"subdued\">\r\n                                                    {product.node.description}\r\n                                                </TextStyle>\r\n                                            </Table.Cell>\r\n                                            <Table.Cell textAlign=\"center\">\r\n                                                <TextStyle variation=\"subdued\">\r\n                                                    {product.node.variants.edges[0] &&\r\n                                                        toCurrency(\r\n                                                            product.node.variants.edges[0].node\r\n                                                                .price\r\n                                                        )}\r\n                                                </TextStyle>\r\n                                            </Table.Cell>\r\n                                        </Table.Row>\r\n                                    ))}\r\n                        </Table.Body>\r\n                        <Table.Footer fullWidth>\r\n                            <Table.Row></Table.Row>\r\n                        </Table.Footer>\r\n                    </Table>\r\n                </Modal.Section>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProductsList\r\n"]},"metadata":{},"sourceType":"module"}