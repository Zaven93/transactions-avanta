{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport gql from \"graphql-tag\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport { Table, Icon, Popup, Header } from \"semantic-ui-react\";\nimport { Badge } from \"@shopify/polaris\";\nimport { toCurrency, formatDate } from \"../utils/helper\";\nimport ProductList from \"./ProductsList\";\nimport config from \"../aws-exports\";\nAPI.configure(config);\nconst updatePaymentRequest = gql`\n  mutation updatePaymentRequest($input: UpdatePaymentRequestInput!) {\n    updatePaymentRequest(input: $input) {\n      bonusAmount\n      customerId\n      id\n      orderId\n      status\n      products {\n        originalUnitPrice\n        quantity\n        variantId\n      }\n      createdAt\n      updatedAt\n    }\n  }\n`;\nconst listPaymentRequest = gql`\n  query listPaymentRequest($branchId: ID, $status: PaymentStatus) {\n    listPaymentRequests(filter: { status: $status, branchId: { eq: $branchId } }) {\n      items {\n        bonusAmount\n        createdAt\n        customerId\n        id\n        orderId\n        status\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\nconst paymentSubscription = gql`\n  subscription paymentRequest {\n    onCreatePaymentRequest {\n      bonusAmount\n      createdAt\n      customerId\n      id\n      orderId\n      status\n      updatedAt\n    }\n  }\n`;\n\nconst PendingPaymentRequest = ({\n  createUpdatePaymentSubscription,\n  branchId\n}) => {\n  const {\n    0: paymentRequestId,\n    1: setPaymentRequestId\n  } = useState(\"\");\n  const {\n    0: active,\n    1: setActive\n  } = useState(false);\n  const {\n    0: paymentRequestItems,\n    1: setPaymentRequestItems\n  } = useState([]);\n  const handleChange = useCallback(() => setActive(!active), [active]);\n  console.log(\"Payment request id for decline\", paymentRequestId);\n  const fetchAcceptedPayments = useCallback(async () => {\n    try {\n      const res = await API.graphql(graphqlOperation(listPaymentRequest, {\n        branchId,\n        status: {\n          eq: PENDING\n        }\n      }));\n      setPaymentRequestItems(res.data.listPaymentRequests.items);\n      console.log(\"Accepted payments\", res.data);\n    } catch (error) {\n      console.log(error);\n    }\n  }, [createUpdatePaymentSubscription]);\n  useEffect(() => {\n    fetchAcceptedPayments();\n  }, [fetchAcceptedPayments]);\n\n  const declinePayment = async paymentId => {\n    try {\n      const paymentResponse = await API.graphql(graphqlOperation(updatePaymentRequest, {\n        input: {\n          id: paymentId,\n          status: \"DECLINED\"\n        }\n      }));\n      console.log(\"Declined Payment data from lambda\", paymentResponse.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Table, {\n    selectable: true,\n    celled: true\n  }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Customer Id\"), __jsx(Table.HeaderCell, null, \"Bonus Amount\"), __jsx(Table.HeaderCell, null, \"Created At\"), __jsx(Table.HeaderCell, null, \"Updated At\"), __jsx(Table.HeaderCell, null, \"Status\"), __jsx(Table.HeaderCell, null, \"Action\"))), __jsx(Table.Body, null, paymentRequestItems && paymentRequestItems.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt)).map(item => __jsx(Table.Row, {\n    key: item.id\n  }, __jsx(Table.Cell, null, __jsx(Badge, {\n    size: \"small\"\n  }, item.customerId)), __jsx(Table.Cell, null, toCurrency(item.bonusAmount)), __jsx(Table.Cell, null, formatDate(item.createdAt)), __jsx(Table.Cell, null, formatDate(item.updatedAt)), __jsx(Table.Cell, null, __jsx(Badge, {\n    size: \"small\",\n    progress: \"partiallyComplete\",\n    status: \"attention\"\n  }, item.status)), __jsx(Table.Cell, {\n    className: \"actions-cell\"\n  }, __jsx(Popup, {\n    content: \"Approve payment\",\n    trigger: __jsx(Icon, {\n      className: \"accept\",\n      name: \"check\",\n      onClick: () => {\n        setPaymentRequestId(item.id);\n        handleChange();\n      }\n    })\n  }), __jsx(Popup, {\n    content: \"Decline payment\",\n    trigger: __jsx(Icon, {\n      className: \"decline\",\n      name: \"remove\",\n      onClick: async () => {\n        declinePayment(item.id);\n      }\n    })\n  })))))), __jsx(ProductList, {\n    paymentRequestId: paymentRequestId,\n    active: active,\n    handleChange: handleChange\n  }));\n};\n\nexport default PendingPaymentRequest;","map":{"version":3,"sources":["/var/www/transactions-avanta/components/PendingPaymentRequest.js"],"names":["React","useState","useCallback","useEffect","gql","API","graphqlOperation","Table","Icon","Popup","Header","Badge","toCurrency","formatDate","ProductList","config","configure","updatePaymentRequest","listPaymentRequest","paymentSubscription","PendingPaymentRequest","createUpdatePaymentSubscription","branchId","paymentRequestId","setPaymentRequestId","active","setActive","paymentRequestItems","setPaymentRequestItems","handleChange","console","log","fetchAcceptedPayments","res","graphql","status","eq","PENDING","data","listPaymentRequests","items","error","declinePayment","paymentId","paymentResponse","input","id","sort","a","b","Date","updatedAt","map","item","customerId","bonusAmount","createdAt"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\"\nimport gql from \"graphql-tag\"\nimport { API, graphqlOperation } from \"aws-amplify\"\nimport { Table, Icon, Popup, Header } from \"semantic-ui-react\"\nimport { Badge } from \"@shopify/polaris\"\nimport { toCurrency, formatDate } from \"../utils/helper\"\nimport ProductList from \"./ProductsList\"\nimport config from \"../aws-exports\"\n\nAPI.configure(config)\n\nconst updatePaymentRequest = gql`\n  mutation updatePaymentRequest($input: UpdatePaymentRequestInput!) {\n    updatePaymentRequest(input: $input) {\n      bonusAmount\n      customerId\n      id\n      orderId\n      status\n      products {\n        originalUnitPrice\n        quantity\n        variantId\n      }\n      createdAt\n      updatedAt\n    }\n  }\n`\n\nconst listPaymentRequest = gql`\n  query listPaymentRequest($branchId: ID, $status: PaymentStatus) {\n    listPaymentRequests(filter: { status: $status, branchId: { eq: $branchId } }) {\n      items {\n        bonusAmount\n        createdAt\n        customerId\n        id\n        orderId\n        status\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`\n\nconst paymentSubscription = gql`\n  subscription paymentRequest {\n    onCreatePaymentRequest {\n      bonusAmount\n      createdAt\n      customerId\n      id\n      orderId\n      status\n      updatedAt\n    }\n  }\n`\n\nconst PendingPaymentRequest = ({ createUpdatePaymentSubscription, branchId }) => {\n  const [paymentRequestId, setPaymentRequestId] = useState(\"\")\n  const [active, setActive] = useState(false)\n  const [paymentRequestItems, setPaymentRequestItems] = useState([])\n\n  const handleChange = useCallback(() => setActive(!active), [active])\n\n  console.log(\"Payment request id for decline\", paymentRequestId)\n\n  const fetchAcceptedPayments = useCallback(async () => {\n    try {\n      const res = await API.graphql(\n        graphqlOperation(listPaymentRequest, { branchId, status: { eq: PENDING } })\n      )\n      setPaymentRequestItems(res.data.listPaymentRequests.items)\n      console.log(\"Accepted payments\", res.data)\n    } catch (error) {\n      console.log(error)\n    }\n  }, [createUpdatePaymentSubscription])\n\n  useEffect(() => {\n    fetchAcceptedPayments()\n  }, [fetchAcceptedPayments])\n\n  const declinePayment = async (paymentId) => {\n    try {\n      const paymentResponse = await API.graphql(\n        graphqlOperation(updatePaymentRequest, {\n          input: {\n            id: paymentId,\n            status: \"DECLINED\",\n          },\n        })\n      )\n\n      console.log(\"Declined Payment data from lambda\", paymentResponse.data)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  return (\n    <>\n      <Table selectable celled>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Customer Id</Table.HeaderCell>\n            <Table.HeaderCell>Bonus Amount</Table.HeaderCell>\n            <Table.HeaderCell>Created At</Table.HeaderCell>\n            <Table.HeaderCell>Updated At</Table.HeaderCell>\n            <Table.HeaderCell>Status</Table.HeaderCell>\n            <Table.HeaderCell>Action</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {paymentRequestItems &&\n            paymentRequestItems\n              .sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt))\n              .map((item) => (\n                <Table.Row key={item.id}>\n                  <Table.Cell>\n                    <Badge size=\"small\">{item.customerId}</Badge>\n                  </Table.Cell>\n                  <Table.Cell>{toCurrency(item.bonusAmount)}</Table.Cell>\n                  <Table.Cell>{formatDate(item.createdAt)}</Table.Cell>\n                  <Table.Cell>{formatDate(item.updatedAt)}</Table.Cell>\n                  <Table.Cell>\n                    <Badge size=\"small\" progress=\"partiallyComplete\" status=\"attention\">\n                      {item.status}\n                    </Badge>\n                  </Table.Cell>\n                  <Table.Cell className=\"actions-cell\">\n                    <Popup\n                      content=\"Approve payment\"\n                      trigger={\n                        <Icon\n                          className=\"accept\"\n                          name=\"check\"\n                          onClick={() => {\n                            setPaymentRequestId(item.id)\n                            handleChange()\n                          }}\n                        />\n                      }\n                    />\n                    <Popup\n                      content=\"Decline payment\"\n                      trigger={\n                        <Icon\n                          className=\"decline\"\n                          name=\"remove\"\n                          onClick={async () => {\n                            declinePayment(item.id)\n                          }}\n                        />\n                      }\n                    />\n                  </Table.Cell>\n                </Table.Row>\n              ))}\n        </Table.Body>\n      </Table>\n      <ProductList\n        paymentRequestId={paymentRequestId}\n        active={active}\n        handleChange={handleChange}\n      />\n    </>\n  )\n}\n\nexport default PendingPaymentRequest\n"]},"metadata":{},"sourceType":"module"}